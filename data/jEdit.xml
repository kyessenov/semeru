<?xml version="1.0" encoding="UTF-8"?>
<jel>
	<admin creation="Fri Oct 26 10:13:16 EDT 2012" xsdversion="1.0.0" version="1.0.0" />
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Abbrevs" type="Abbrevs">
		<comment>
			<description>Abbreviation manager.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Abbrevs.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="UTF8" visibility="public" name="ENCODING" constexpr="&quot;UTF8&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<method static="true" visibility="public" name="getExpandOnInput" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if abbreviations should be expanded after the
 user finishes typing a word.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="setExpandOnInput" fulltype="void" type="void">
				<comment>
					<description>Sets if abbreviations should be expanded after the
 user finishes typing a word.</description>
					<attribute name="@param">
						<description>expandOnInput If true, typing a non-alphanumeric character
 will automatically attempt to expand the current abbrev</description>
					</attribute>
				</comment>
				<params>
					<param name="expandOnInput" comment="If true, typing a non-alphanumeric character
 will automatically attempt to expand the current abbrev" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="expandAbbrev" fulltype="boolean" type="boolean">
				<comment>
					<description>Expands the abbrev at the caret position in the specified
 view.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>add If true and abbrev not found, will ask user if
 it should be added</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="add" comment="If true and abbrev not found, will ask user if
 it should be added" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getGlobalAbbrevs" fulltype="java.util.Hashtable" type="Hashtable">
				<comment>
					<description>Returns the global abbreviation set.</description>
					<attribute name="@since">
						<description>jEdit 2.3pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setGlobalAbbrevs" fulltype="void" type="void">
				<comment>
					<description>Sets the global abbreviation set.</description>
					<attribute name="@param">
						<description>globalAbbrevs The new global abbrev set</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="globalAbbrevs" comment="The new global abbrev set" fulltype="java.util.Hashtable" type="Hashtable" />
				</params>
			</method>
			<method static="true" visibility="public" name="getModeAbbrevs" fulltype="java.util.Hashtable" type="Hashtable">
				<comment>
					<description>Returns the mode-specific abbreviation set.</description>
					<attribute name="@since">
						<description>jEdit 2.3pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setModeAbbrevs" fulltype="void" type="void">
				<comment>
					<description>Sets the mode-specific abbreviation set.</description>
					<attribute name="@param">
						<description>modes The new mode abbrev set</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="modes" comment="The new mode abbrev set" fulltype="java.util.Hashtable" type="Hashtable" />
				</params>
			</method>
			<method static="true" visibility="public" name="addGlobalAbbrev" fulltype="void" type="void">
				<comment>
					<description>Adds an abbreviation to the global abbreviation list.</description>
					<attribute name="@param">
						<description>abbrev The abbreviation</description>
					</attribute>
					<attribute name="@param">
						<description>expansion The expansion</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="abbrev" comment="The abbreviation" fulltype="java.lang.String" type="String" />
					<param name="expansion" comment="The expansion" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="addModeAbbrev" fulltype="void" type="void">
				<comment>
					<description>Adds a mode-specific abbrev.</description>
					<attribute name="@param">
						<description>mode The edit mode</description>
					</attribute>
					<attribute name="@param">
						<description>abbrev The abbrev</description>
					</attribute>
					<attribute name="@param">
						<description>expansion The expansion</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" comment="The edit mode" fulltype="java.lang.String" type="String" />
					<param name="abbrev" comment="The abbrev" fulltype="java.lang.String" type="String" />
					<param name="expansion" comment="The expansion" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.AbstractOptionPane" type="AbstractOptionPane">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.OptionPane" type="OptionPane" />
		</implements>
		<comment>
			<description>The default implementation of the option pane interface.&lt;p&gt;

 See {@link EditPlugin} for information on how jEdit obtains and constructs
 option pane instances.&lt;p&gt;

 Most option panes extend this implementation of {@link OptionPane}, instead
 of implementing {@link OptionPane} directly. This class provides a convenient
 default framework for laying out configuration options.&lt;p&gt;

 It is derived from Java&apos;s &lt;code&gt;JPanel&lt;/code&gt; class and uses a
 &lt;code&gt;GridBagLayout&lt;/code&gt; object for component management. Since
 &lt;code&gt;GridBagLayout&lt;/code&gt; can be a bit cumbersome to use, this class
 contains shortcut methods to simplify layout:

 &lt;ul&gt;
 &lt;li&gt;{@link #addComponent(Component)}&lt;/li&gt;
 &lt;li&gt;{@link #addComponent(String,Component)}&lt;/li&gt;
 &lt;li&gt;{@link #addComponent(String,Component,int)}&lt;/li&gt;
 &lt;li&gt;{@link #addComponent(Component,Component)}&lt;/li&gt;
 &lt;li&gt;{@link #addComponent(Component,Component,int)}&lt;/li&gt;
 &lt;li&gt;{@link #addSeparator()}&lt;/li&gt;
 &lt;li&gt;{@link #addSeparator(String)}&lt;/li&gt;
 &lt;/ul&gt;</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: AbstractOptionPane.java 21538 2012-04-01 10:10:44Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="initialized" fulltype="boolean" type="boolean">
				<comment>
					<description>Has the option pane been initialized?</description>
				</comment>
			</field>
			<field visibility="protected" name="gridBag" fulltype="java.awt.GridBagLayout" type="GridBagLayout">
				<comment>
					<description>The layout manager.</description>
				</comment>
			</field>
			<field visibility="protected" name="y" fulltype="int" type="int">
				<comment>
					<description>The number of components already added to the layout manager.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="AbstractOptionPane">
				<comment>
					<description>Creates a new option pane.</description>
					<attribute name="@param">
						<description>internalName The internal name. The option pane&apos;s label is set to the
 value of the property named &lt;code&gt;options.&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="internalName" comment="The internal name. The option pane&apos;s label is set to the
 value of the property named &lt;code&gt;options.&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt;." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the internal name of this option pane. The option pane&apos;s label
 is set to the value of the property named
 &lt;code&gt;options.&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt;.</description>
				</comment>
			</method>
			<method visibility="public" name="getComponent" fulltype="java.awt.Component" type="Component">
				<comment>
					<description>Returns the component that should be displayed for this option pane.
 Because this class extends Component, it simply returns &quot;this&quot;.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="init" fulltype="void" type="void" />
			<method final="true" visibility="public" name="save" fulltype="void" type="void" />
			<method visibility="public" name="newLabel" returncomment="a label which has the same tooltiptext as the Component
    that it is a label for. This is used to create labels from inside
    AbstractOptionPane." fulltype="javax.swing.JLabel" type="JLabel">
				<comment>
					<attribute name="@return">
						<description>a label which has the same tooltiptext as the Component
    that it is a label for. This is used to create labels from inside
    AbstractOptionPane.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="label" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="addComponent" fulltype="void" type="void">
				<comment>
					<description>Adds a labeled component to the option pane. Components are
 added in a vertical fashion, one per row. The label is
 displayed to the left of the component.</description>
					<attribute name="@param">
						<description>label The label</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
				</comment>
				<params>
					<param name="label" comment="The label" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="addComponent" fulltype="void" type="void">
				<comment>
					<description>Adds a labeled component to the option pane. Components are
 added in a vertical fashion, one per row. The label is
 displayed to the left of the component.</description>
					<attribute name="@param">
						<description>label The label</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
					<attribute name="@param">
						<description>fill Fill parameter to GridBagConstraints for the right
 component</description>
					</attribute>
				</comment>
				<params>
					<param name="label" comment="The label" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
					<param name="fill" comment="Fill parameter to GridBagConstraints for the right
 component" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addComponent" fulltype="void" type="void">
				<comment>
					<description>Adds a labeled component to the option pane. Components are
 added in a vertical fashion, one per row. The label is
 displayed to the left of the component.</description>
					<attribute name="@param">
						<description>comp1 The label</description>
					</attribute>
					<attribute name="@param">
						<description>comp2 The component</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="comp1" comment="The label" fulltype="java.awt.Component" type="Component" />
					<param name="comp2" comment="The component" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="addComponent" fulltype="void" type="void">
				<comment>
					<description>Adds a labeled component to the option pane. Components are
 added in a vertical fashion, one per row. The label is
 displayed to the left of the component.</description>
					<attribute name="@param">
						<description>comp1 The label</description>
					</attribute>
					<attribute name="@param">
						<description>comp2 The component</description>
					</attribute>
					<attribute name="@param">
						<description>fill Fill parameter to GridBagConstraints for the right
 component</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="comp1" comment="The label" fulltype="java.awt.Component" type="Component" />
					<param name="comp2" comment="The component" fulltype="java.awt.Component" type="Component" />
					<param name="fill" comment="Fill parameter to GridBagConstraints for the right
 component" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addComponent" fulltype="void" type="void">
				<comment>
					<description>Adds a component to the option pane. Components are
 added in a vertical fashion, one per row.</description>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="addComponent" fulltype="void" type="void">
				<comment>
					<description>Adds a component to the option pane. Components are
 added in a vertical fashion, one per row.</description>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
					<attribute name="@param">
						<description>fill Fill parameter to GridBagConstraints</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
					<param name="fill" comment="Fill parameter to GridBagConstraints" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addSeparator" fulltype="void" type="void">
				<comment>
					<description>Adds a separator component.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre7</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addSeparator" fulltype="void" type="void">
				<comment>
					<description>Adds a separator component.</description>
					<attribute name="@param">
						<description>label The separator label property</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="label" comment="The separator label property" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="_init" fulltype="void" type="void">
				<comment>
					<description>This method should create and arrange the components of the option pane
 and initialize the option data displayed to the user. This method
 is called when the option pane is first displayed, and is not
 called again for the lifetime of the object.</description>
				</comment>
			</method>
			<method visibility="protected" name="_save" fulltype="void" type="void">
				<comment>
					<description>Called when the options dialog&apos;s &quot;ok&quot; button is clicked.
 This should save any properties being edited in this option
 pane.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="JEditActionContext" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.JEditActionContext" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext">
		<comment>
			<description>Manages a collection of action sets. There are two instances of this class
 in jEdit:
 &lt;ul&gt;
 &lt;li&gt;{@link org.gjt.sp.jedit.jEdit#getActionContext()} - editor actions
 &lt;li&gt;{@link org.gjt.sp.jedit.browser.VFSBrowser#getActionContext()} - browser
 actions
 &lt;/ul&gt;</description>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ActionContext.java 19264 2011-01-25 11:37:31Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ActionContext" />
			<method visibility="public" name="getActionSetForAction" returncomment="the actionSet that contains the given action" fulltype="org.gjt.sp.jedit.ActionSet" type="ActionSet">
				<comment>
					<description>Returns the action set that contains the specified action.
 This method is still here for binary compatility</description>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@return">
						<description>the actionSet that contains the given action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="The action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getAction" returncomment="a EditAction or null if it doesn&apos;t exist" fulltype="org.gjt.sp.jedit.EditAction" type="EditAction">
				<comment>
					<description>Returns the specified action.</description>
					<attribute name="@param">
						<description>name The action name</description>
					</attribute>
					<attribute name="@return">
						<description>a EditAction or null if it doesn&apos;t exist</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The action name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JEditActionSet" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.JEditActionSet" fulltype="org.gjt.sp.jedit.ActionSet" type="ActionSet">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>A set of actions, either loaded from an XML file, or constructed at runtime
 by a plugin. &lt;p&gt;

 &lt;h3&gt;Action sets loaded from XML files&lt;/h3&gt;

 Action sets are read from these files inside the plugin JAR:
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;actions.xml&lt;/code&gt; - actions made available for use in jEdit views,
 including the view&apos;s &lt;b&gt;Plugins&lt;/b&gt; menu, the tool bar, etc.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;browser.actions.xml&lt;/code&gt; - actions for the file system browser&apos;s
 &lt;b&gt;Plugins&lt;/b&gt; menu.&lt;/li&gt;
 &lt;/ul&gt;

 An action definition file has the following form:

 &lt;pre&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;!DOCTYPE ACTIONS SYSTEM &quot;actions.dtd&quot;&amp;gt;
&amp;lt;ACTIONS&amp;gt;
    &amp;lt;ACTION NAME=&quot;some-action&quot;&amp;gt;
        &amp;lt;CODE&amp;gt;
            // BeanShell code evaluated when the action is invoked
        &amp;lt;/CODE&amp;gt;
    &amp;lt;/ACTION&amp;gt;
    &amp;lt;ACTION NAME=&quot;some-toggle-action&quot;&amp;gt;
        &amp;lt;CODE&amp;gt;
            // BeanShell code evaluated when the action is invoked
        &amp;lt;/CODE&amp;gt;
        &amp;lt;IS_SELECTED&amp;gt;
            // BeanShell code that should evaluate to true or false
        &amp;lt;/IS_SELECTED&amp;gt;
    &amp;lt;/ACTION&amp;gt;
&amp;lt;/ACTIONS&amp;gt;&lt;/pre&gt;

 The following elements are valid:

 &lt;ul&gt;
 &lt;li&gt;
 &lt;code&gt;ACTIONS&lt;/code&gt; is the top-level element and refers
 to the set of actions used by the plugin.
 &lt;/li&gt;
 &lt;li&gt;
 An &lt;code&gt;ACTION&lt;/code&gt; contains the data for a particular action.
 It has three attributes: a required &lt;code&gt;NAME&lt;/code&gt;;
 an optional &lt;code&gt;NO_REPEAT&lt;/code&gt;, which is a flag
 indicating whether the action should not be repeated with the
 &lt;b&gt;C+ENTER&lt;/b&gt; command; and an optional
 &lt;code&gt;NO_RECORD&lt;/code&gt; which is a a flag indicating whether the
 action should be recorded if it is invoked while the user is recording a
 macro. The two flag attributes
 can have two possible values, &quot;TRUE&quot; or
 &quot;FALSE&quot;. In both cases, &quot;FALSE&quot; is the
 default if the attribute is not specified.
 &lt;/li&gt;
 &lt;li&gt;
 An &lt;code&gt;ACTION&lt;/code&gt; can have two child elements
 within it: a required &lt;code&gt;CODE&lt;/code&gt; element which
 specifies the
 BeanShell code that will be executed when the action is invoked,
 and an optional &lt;code&gt;IS_SELECTED&lt;/code&gt; element, used for
 checkbox
 menu items.  The &lt;code&gt;IS_SELECTED&lt;/code&gt; element contains
 BeanShell code that returns a boolean flag that will
 determine the state of the checkbox.
 &lt;/li&gt;
 &lt;/ul&gt;

 Each action must have a property &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt; containing
 the action&apos;s menu item label.

 &lt;h3&gt;View actions&lt;/h3&gt;

 Actions defined in &lt;code&gt;actions.xml&lt;/code&gt; can be added to the view&apos;s
 &lt;b&gt;Plugins&lt;/b&gt; menu; see {@link EditPlugin}.
 The action code may use any standard predefined
 BeanShell variable; see {@link BeanShell}.

 &lt;h3&gt;File system browser actions&lt;/h3&gt;

 Actions defined in &lt;code&gt;actions.xml&lt;/code&gt; can be added to the file
 system browser&apos;s &lt;b&gt;Plugins&lt;/b&gt; menu; see {@link EditPlugin}.
 The action code may use any standard predefined
 BeanShell variable, in addition to a variable &lt;code&gt;browser&lt;/code&gt; which
 contains a reference to the current
 {@link org.gjt.sp.jedit.browser.VFSBrowser} instance.&lt;p&gt;

 File system browser actions should not define
 &lt;code&gt;&amp;lt;IS_SELECTED&amp;gt;&lt;/code&gt; blocks.

 &lt;h3&gt;Custom action sets&lt;/h3&gt;

 Call {@link jEdit#addActionSet(ActionSet)} to add a custom action set to
 jEdit&apos;s action context. You must also call {@link #initKeyBindings()} for new
 action sets. Don&apos;t forget to call {@link jEdit#removeActionSet(ActionSet)}
 before your plugin is unloaded, too.</description>
			<attribute name="@see">
				<description>jEdit#getActionContext()</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.browser.VFSBrowser#getActionContext()</description>
			</attribute>
			<attribute name="@see">
				<description>ActionContext#getActionNames()</description>
			</attribute>
			<attribute name="@see">
				<description>ActionContext#getAction(String)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#addActionSet(ActionSet)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#removeActionSet(ActionSet)</description>
			</attribute>
			<attribute name="@see">
				<description>PluginJAR#getActionSet()</description>
			</attribute>
			<attribute name="@see">
				<description>BeanShell</description>
			</attribute>
			<attribute name="@see">
				<description>View</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ActionSet.java 20759 2012-01-12 11:06:22Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.0pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ActionSet">
				<comment>
					<description>Creates a new action set.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</constructor>
			<constructor visibility="public" name="ActionSet">
				<comment>
					<description>Creates a new action set.</description>
					<attribute name="@param">
						<description>plugin The plugin</description>
					</attribute>
					<attribute name="@param">
						<description>cachedActionNames The list of cached action names</description>
					</attribute>
					<attribute name="@param">
						<description>cachedActionToggleFlags The list of cached action toggle flags</description>
					</attribute>
					<attribute name="@param">
						<description>uri The actions.xml URI</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="plugin" comment="The plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
					<param name="cachedActionNames" comment="The list of cached action names" fulltype="java.lang.String[]" type="String" />
					<param name="cachedActionToggleFlags" comment="The list of cached action toggle flags" fulltype="boolean[]" type="boolean" />
					<param name="uri" comment="The actions.xml URI" fulltype="java.net.URL" type="URL" />
				</params>
			</constructor>
			<constructor visibility="public" name="ActionSet">
				<comment>
					<description>Creates a new action set.</description>
					<attribute name="@param">
						<description>label The label, shown in the shortcuts option pane</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="label" comment="The label, shown in the shortcuts option pane" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="addAction" fulltype="void" type="void">
				<comment>
					<description>Adds an action to the action set.
 It exists for binary compatibility issues</description>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="The action" fulltype="org.gjt.sp.jedit.EditAction" type="EditAction" />
				</params>
			</method>
			<method visibility="protected" name="getArray" fulltype="org.gjt.sp.jedit.EditAction[]" type="EditAction">
				<params>
					<param name="size" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getActions" fulltype="org.gjt.sp.jedit.EditAction[]" type="EditAction">
				<comment>
					<description>Returns an array of all actions in this action set.&lt;p&gt;

 &lt;b&gt;Deferred loading:&lt;/b&gt; this will load the action set if necessary.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLabel" fulltype="java.lang.String" type="String">
				<comment>
					<description>Return the action source label.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setLabel" fulltype="void" type="void">
				<comment>
					<description>Sets the action source label.</description>
					<attribute name="@param">
						<description>label The label</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="label" comment="The label" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getPluginJAR" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR">
				<comment>
					<description>Return the plugin this action set was loaded from, or null.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre13</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCacheableActionNames" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns an array of all action names in this action set that should
 be cached; namely, &lt;code&gt;BeanShellAction&lt;/code&gt;s.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="getProperty" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getInputHandler" fulltype="org.gjt.sp.jedit.input.AbstractInputHandler" type="AbstractInputHandler" />
			<method visibility="public" name="compareTo" fulltype="int" type="int">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="protected" name="createBeanShellAction" fulltype="org.gjt.sp.jedit.EditAction" type="EditAction">
				<comment>
					<description>Creates a BeanShellAction.</description>
					<attribute name="@since">
						<description>4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="actionName" fulltype="java.lang.String" type="String" />
					<param name="code" fulltype="java.lang.String" type="String" />
					<param name="selected" fulltype="java.lang.String" type="String" />
					<param name="noRepeat" fulltype="boolean" type="boolean" />
					<param name="noRecord" fulltype="boolean" type="boolean" />
					<param name="noRememberLast" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.BeanShell" type="BeanShell">
		<comment>
			<description>BeanShell is jEdit&apos;s extension language.&lt;p&gt;

 When run from jEdit, BeanShell code has access to the following predefined
 variables:

 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;view&lt;/code&gt; - the currently active {@link View}.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;editPane&lt;/code&gt; - the currently active {@link EditPane}.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;textArea&lt;/code&gt; - the edit pane&apos;s {@link JEditTextArea}.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;buffer&lt;/code&gt; - the edit pane&apos;s {@link Buffer}.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;wm&lt;/code&gt; - the view&apos;s {@link
 org.gjt.sp.jedit.gui.DockableWindowManager}.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;scriptPath&lt;/code&gt; - the path name of the currently executing
 BeanShell script.&lt;/li&gt;
 &lt;/ul&gt;</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BeanShell.java 19394 2011-02-24 13:24:54Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BeanShell" />
			<method static="true" visibility="public" name="evalSelection" fulltype="void" type="void">
				<comment>
					<description>Evaluates the text selected in the specified text area.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea" />
				</params>
			</method>
			<method static="true" visibility="public" name="showEvaluateDialog" fulltype="void" type="void">
				<comment>
					<description>Prompts for a BeanShell expression to evaluate.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="showEvaluateLinesDialog" fulltype="void" type="void">
				<comment>
					<description>Evaluates the specified script for each selected line.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="runScript" fulltype="void" type="void">
				<comment>
					<description>Runs a BeanShell script. Errors are shown in a dialog box.&lt;p&gt;

 If the &lt;code&gt;in&lt;/code&gt; parameter is non-null, the script is
 read from that stream; otherwise it is read from the file identified
 by &lt;code&gt;path&lt;/code&gt;.&lt;p&gt;

 The &lt;code&gt;scriptPath&lt;/code&gt; BeanShell variable is set to the path
 name of the script.</description>
					<attribute name="@param">
						<description>view The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter.</description>
					</attribute>
					<attribute name="@param">
						<description>path The script file&apos;s VFS path.</description>
					</attribute>
					<attribute name="@param">
						<description>in The reader to read the script from, or &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>ownNamespace If set to &lt;code&gt;false&lt;/code&gt;, methods and
 variables defined in the script will be available to all future
 uses of BeanShell; if set to &lt;code&gt;true&lt;/code&gt;, they will be lost as
 soon as the script finishes executing. jEdit uses a value of
 &lt;code&gt;false&lt;/code&gt; when running startup scripts, and a value of
 &lt;code&gt;true&lt;/code&gt; when running all other macros.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter." fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The script file&apos;s VFS path." fulltype="java.lang.String" type="String" />
					<param name="in" comment="The reader to read the script from, or &lt;code&gt;null&lt;/code&gt;." fulltype="java.io.Reader" type="Reader" />
					<param name="ownNamespace" comment="If set to &lt;code&gt;false&lt;/code&gt;, methods and
 variables defined in the script will be available to all future
 uses of BeanShell; if set to &lt;code&gt;true&lt;/code&gt;, they will be lost as
 soon as the script finishes executing. jEdit uses a value of
 &lt;code&gt;false&lt;/code&gt; when running startup scripts, and a value of
 &lt;code&gt;true&lt;/code&gt; when running all other macros." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="runScript" fulltype="void" type="void">
				<comment>
					<description>Runs a BeanShell script. Errors are shown in a dialog box.&lt;p&gt;

 If the &lt;code&gt;in&lt;/code&gt; parameter is non-null, the script is
 read from that stream; otherwise it is read from the file identified
 by &lt;code&gt;path&lt;/code&gt;.&lt;p&gt;

 The &lt;code&gt;scriptPath&lt;/code&gt; BeanShell variable is set to the path
 name of the script.</description>
					<attribute name="@param">
						<description>view The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter.</description>
					</attribute>
					<attribute name="@param">
						<description>path The script file&apos;s VFS path.</description>
					</attribute>
					<attribute name="@param">
						<description>in The reader to read the script from, or &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>namespace The namespace to run the script in.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter." fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The script file&apos;s VFS path." fulltype="java.lang.String" type="String" />
					<param name="in" comment="The reader to read the script from, or &lt;code&gt;null&lt;/code&gt;." fulltype="java.io.Reader" type="Reader" />
					<param name="namespace" comment="The namespace to run the script in." fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</method>
			<method static="true" visibility="public" name="_runScript" fulltype="void" type="void">
				<comment>
					<description>Runs a BeanShell script. Errors are passed to the caller.&lt;p&gt;

 If the &lt;code&gt;in&lt;/code&gt; parameter is non-null, the script is
 read from that stream; otherwise it is read from the file identified
 by &lt;code&gt;path&lt;/code&gt;.&lt;p&gt;

 The &lt;code&gt;scriptPath&lt;/code&gt; BeanShell variable is set to the path
 name of the script.</description>
					<attribute name="@param">
						<description>view The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter.</description>
					</attribute>
					<attribute name="@param">
						<description>path The script file&apos;s VFS path.</description>
					</attribute>
					<attribute name="@param">
						<description>in The reader to read the script from, or &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>ownNamespace If set to &lt;code&gt;false&lt;/code&gt;, methods and
 variables defined in the script will be available to all future
 uses of BeanShell; if set to &lt;code&gt;true&lt;/code&gt;, they will be lost as
 soon as the script finishes executing. jEdit uses a value of
 &lt;code&gt;false&lt;/code&gt; when running startup scripts, and a value of
 &lt;code&gt;true&lt;/code&gt; when running all other macros.</description>
					</attribute>
					<attribute name="@exception">
						<description>Exception instances are thrown when various BeanShell errors
 occur</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter." fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The script file&apos;s VFS path." fulltype="java.lang.String" type="String" />
					<param name="in" comment="The reader to read the script from, or &lt;code&gt;null&lt;/code&gt;." fulltype="java.io.Reader" type="Reader" />
					<param name="ownNamespace" comment="If set to &lt;code&gt;false&lt;/code&gt;, methods and
 variables defined in the script will be available to all future
 uses of BeanShell; if set to &lt;code&gt;true&lt;/code&gt;, they will be lost as
 soon as the script finishes executing. jEdit uses a value of
 &lt;code&gt;false&lt;/code&gt; when running startup scripts, and a value of
 &lt;code&gt;true&lt;/code&gt; when running all other macros." fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="instances are thrown when various BeanShell errors
 occur" fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="_runScript" fulltype="void" type="void">
				<comment>
					<description>Runs a BeanShell script. Errors are passed to the caller.&lt;p&gt;

 If the &lt;code&gt;in&lt;/code&gt; parameter is non-null, the script is
 read from that stream; otherwise it is read from the file identified
 by &lt;code&gt;path&lt;/code&gt;.&lt;p&gt;

 The &lt;code&gt;scriptPath&lt;/code&gt; BeanShell variable is set to the path
 name of the script.</description>
					<attribute name="@param">
						<description>view The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter.</description>
					</attribute>
					<attribute name="@param">
						<description>path The script file&apos;s VFS path.</description>
					</attribute>
					<attribute name="@param">
						<description>in The reader to read the script from, or &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>namespace The namespace to run the script in.</description>
					</attribute>
					<attribute name="@exception">
						<description>Exception instances are thrown when various BeanShell errors
 occur</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter." fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The script file&apos;s VFS path." fulltype="java.lang.String" type="String" />
					<param name="in" comment="The reader to read the script from, or &lt;code&gt;null&lt;/code&gt;." fulltype="java.io.Reader" type="Reader" />
					<param name="namespace" comment="The namespace to run the script in." fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
				<exceptions>
					<exception comment="instances are thrown when various BeanShell errors
 occur" fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="eval" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Evaluates the specified BeanShell expression. Errors are reported in
 a dialog box.</description>
					<attribute name="@param">
						<description>view The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter.</description>
					</attribute>
					<attribute name="@param">
						<description>namespace The namespace</description>
					</attribute>
					<attribute name="@param">
						<description>command The expression</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre8</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter." fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="namespace" comment="The namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="command" comment="The expression" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="_eval" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Evaluates the specified BeanShell expression. Unlike
 &lt;code&gt;eval()&lt;/code&gt;, this method passes any exceptions to the caller.</description>
					<attribute name="@param">
						<description>view The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter.</description>
					</attribute>
					<attribute name="@param">
						<description>namespace The namespace</description>
					</attribute>
					<attribute name="@param">
						<description>command The expression</description>
					</attribute>
					<attribute name="@exception">
						<description>Exception instances are thrown when various BeanShell
 errors occur</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter." fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="namespace" comment="The namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="command" comment="The expression" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="instances are thrown when various BeanShell
 errors occur" fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="cacheBlock" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod">
				<comment>
					<description>Caches a block of code, returning a handle that can be passed to
 runCachedBlock().</description>
					<attribute name="@param">
						<description>id An identifier. If null, a unique identifier is generated</description>
					</attribute>
					<attribute name="@param">
						<description>code The code</description>
					</attribute>
					<attribute name="@param">
						<description>namespace If true, the namespace will be set</description>
					</attribute>
					<attribute name="@exception">
						<description>Exception instances are thrown when various BeanShell errors
 occur</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="id" comment="An identifier. If null, a unique identifier is generated" fulltype="java.lang.String" type="String" />
					<param name="code" comment="The code" fulltype="java.lang.String" type="String" />
					<param name="namespace" comment="If true, the namespace will be set" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="instances are thrown when various BeanShell errors
 occur" fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="runCachedBlock" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Runs a cached block of code in the specified namespace. Faster than
 evaluating the block each time.</description>
					<attribute name="@param">
						<description>method The method instance returned by cacheBlock()</description>
					</attribute>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>namespace The namespace to run the code in</description>
					</attribute>
					<attribute name="@exception">
						<description>Exception instances are thrown when various BeanShell
 errors occur</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="method" comment="The method instance returned by cacheBlock()" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod" />
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="namespace" comment="The namespace to run the code in" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
				<exceptions>
					<exception comment="instances are thrown when various BeanShell
 errors occur" fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="isScriptRunning" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if a BeanShell script or macro is currently running.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getNameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace">
				<comment>
					<description>Returns the global namespace.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre5</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EditAction" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.EditAction" fulltype="org.gjt.sp.jedit.BeanShellAction" type="BeanShellAction">
		<comment>
			<description>An action that evaluates BeanShell code when invoked. BeanShell actions are
 usually loaded from &lt;code&gt;actions.xml&lt;/code&gt; and
 &lt;code&gt;browser.actions.xml&lt;/code&gt; files; see {@link ActionSet} for syntax
 information.</description>
			<attribute name="@see">
				<description>jEdit#getAction(String)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#getActionNames()</description>
			</attribute>
			<attribute name="@see">
				<description>ActionSet</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BeanShellAction.java 13516 2008-09-03 19:40:47Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BeanShellAction">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="code" fulltype="java.lang.String" type="String" />
					<param name="isSelected" fulltype="java.lang.String" type="String" />
					<param name="noRepeat" fulltype="boolean" type="boolean" />
					<param name="noRecord" fulltype="boolean" type="boolean" />
					<param name="noRememberLast" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="invoke" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="isSelected" fulltype="boolean" type="boolean">
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="noRepeat" fulltype="boolean" type="boolean" />
			<method visibility="public" name="noRecord" fulltype="boolean" type="boolean" />
			<method visibility="public" name="noRememberLast" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this edit action should not be remembered as the most
 recently invoked action.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCode" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.BeanShellFacade" type="BeanShellFacade">
		<comment>
			<description>This class will be the interface for beanshell interaction.
 In jEdit it will be used with the static methods of {@link BeanShell}</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre13</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="global" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
			<field visibility="protected" name="classManager" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
		</fields>
		<methods>
			<constructor visibility="protected" name="BeanShellFacade" />
			<method visibility="protected" name="init" fulltype="void" type="void">
				<comment>
					<description>Initialize things. It is called by the constructor.
 You can override it to import other packages</description>
				</comment>
			</method>
			<method visibility="public" name="evalSelection" fulltype="void" type="void">
				<comment>
					<description>Evaluates the text selected in the specified text area.</description>
				</comment>
				<params>
					<param name="param" fulltype="java.lang.Object" type="Object" />
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
			<method visibility="public" name="eval" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Evaluates the specified BeanShell expression with the global namespace</description>
					<attribute name="@param">
						<description>param The parameter</description>
					</attribute>
					<attribute name="@param">
						<description>command The expression</description>
					</attribute>
				</comment>
				<params>
					<param name="param" comment="The parameter" fulltype="java.lang.Object" type="Object" />
					<param name="command" comment="The expression" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="eval" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Evaluates the specified BeanShell expression. Errors are reported in
 a dialog box.</description>
					<attribute name="@param">
						<description>param The parameter</description>
					</attribute>
					<attribute name="@param">
						<description>namespace The namespace</description>
					</attribute>
					<attribute name="@param">
						<description>command The expression</description>
					</attribute>
				</comment>
				<params>
					<param name="param" comment="The parameter" fulltype="java.lang.Object" type="Object" />
					<param name="namespace" comment="The namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="command" comment="The expression" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="_eval" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Evaluates the specified BeanShell expression. Unlike
 &lt;code&gt;eval()&lt;/code&gt;, this method passes any exceptions to the caller.</description>
					<attribute name="@param">
						<description>view The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter.</description>
					</attribute>
					<attribute name="@param">
						<description>namespace The namespace</description>
					</attribute>
					<attribute name="@param">
						<description>command The expression</description>
					</attribute>
					<attribute name="@exception">
						<description>Exception instances are thrown when various BeanShell
 errors occur</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view. Within the script, references to
 &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;textArea&lt;/code&gt; and &lt;code&gt;editPane&lt;/code&gt;
 are determined with reference to this parameter." fulltype="java.lang.Object" type="Object" />
					<param name="namespace" comment="The namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="command" comment="The expression" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="instances are thrown when various BeanShell
 errors occur" fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method visibility="public" name="cacheBlock" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod">
				<comment>
					<description>Caches a block of code, returning a handle that can be passed to
 runCachedBlock().</description>
					<attribute name="@param">
						<description>id An identifier.</description>
					</attribute>
					<attribute name="@param">
						<description>code The code</description>
					</attribute>
					<attribute name="@param">
						<description>namespace If true, the namespace will be set</description>
					</attribute>
					<attribute name="@exception">
						<description>Exception instances are thrown when various BeanShell errors
 occur</description>
					</attribute>
				</comment>
				<params>
					<param name="id" comment="An identifier." fulltype="java.lang.String" type="String" />
					<param name="code" comment="The code" fulltype="java.lang.String" type="String" />
					<param name="namespace" comment="If true, the namespace will be set" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="instances are thrown when various BeanShell errors
 occur" fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method visibility="public" name="runCachedBlock" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Runs a cached block of code in the specified namespace. Faster than
 evaluating the block each time.</description>
					<attribute name="@param">
						<description>method The method instance returned by cacheBlock()</description>
					</attribute>
					<attribute name="@param">
						<description>namespace The namespace to run the code in</description>
					</attribute>
					<attribute name="@exception">
						<description>Exception instances are thrown when various BeanShell
 errors occur</description>
					</attribute>
				</comment>
				<params>
					<param name="method" comment="The method instance returned by cacheBlock()" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod" />
					<param name="param" fulltype="java.lang.Object" type="Object" />
					<param name="namespace" comment="The namespace to run the code in" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
				<exceptions>
					<exception comment="instances are thrown when various BeanShell
 errors occur" fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method visibility="public" name="getNameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace">
				<comment>
					<description>Returns the global namespace.</description>
				</comment>
			</method>
			<method visibility="protected" name="setVariable" fulltype="void" type="void">
				<comment>
					<description>Set a beanshell variable in the namespace without overriding it</description>
					<attribute name="@param">
						<description>nameSpace the namespace</description>
					</attribute>
					<attribute name="@param">
						<description>name the name of the variable</description>
					</attribute>
					<attribute name="@param">
						<description>object the value of the variable</description>
					</attribute>
					<attribute name="@throws">
						<description>UtilEvalError</description>
					</attribute>
				</comment>
				<params>
					<param name="nameSpace" comment="the namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="name" comment="the name of the variable" fulltype="java.lang.String" type="String" />
					<param name="object" comment="the value of the variable" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="" fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method abstract="true" visibility="protected" name="setupDefaultVariables" fulltype="void" type="void">
				<params>
					<param name="namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="param" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method abstract="true" visibility="protected" name="resetDefaultVariables" fulltype="void" type="void">
				<params>
					<param name="namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method abstract="true" visibility="protected" name="handleException" fulltype="void" type="void">
				<params>
					<param name="param" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
			<method static="true" visibility="protected" name="createInterpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter">
				<params>
					<param name="nameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</method>
			<method static="true" visibility="protected" name="unwrapException" fulltype="void" type="void">
				<comment>
					<description>This extracts an exception from a &apos;wrapping&apos; exception, as BeanShell
 sometimes throws. This gives the user a more accurate error traceback</description>
				</comment>
				<params>
					<param name="e" fulltype="java.lang.Exception" type="Exception" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPopupMenu" visibility="public" package="org.gjt.sp.jedit.browser" serializable="true" superclassfulltype="javax.swing.JPopupMenu" fulltype="org.gjt.sp.jedit.browser.BrowserCommandsMenu" type="BrowserCommandsMenu">
		<comment>
			<attribute name="@version">
				<description>$Id: BrowserCommandsMenu.java 20834 2012-01-17 16:29:14Z kpouer $</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov and Jason Ginchereau</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BrowserCommandsMenu">
				<params>
					<param name="browser" fulltype="org.gjt.sp.jedit.browser.VFSBrowser" type="VFSBrowser" />
					<param name="files" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
				</params>
			</constructor>
			<method visibility="public" name="update" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.browser" interface="true" fulltype="org.gjt.sp.jedit.browser.BrowserListener" type="BrowserListener">
		<implements>
			<interface fulltype="java.util.EventListener" type="EventListener" />
		</implements>
		<comment>
			<description>A browser event listener.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BrowserListener.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="filesSelected" fulltype="void" type="void">
				<comment>
					<description>The user has selected a set of files.</description>
					<attribute name="@param">
						<description>browser The VFS browser</description>
					</attribute>
					<attribute name="@param">
						<description>files The selected files</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="browser" comment="The VFS browser" fulltype="org.gjt.sp.jedit.browser.VFSBrowser" type="VFSBrowser" />
					<param name="files" comment="The selected files" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
				</params>
			</method>
			<method visibility="public" name="filesActivated" fulltype="void" type="void">
				<comment>
					<description>The user has double-clicked a set of files.</description>
					<attribute name="@param">
						<description>browser The VFS browser</description>
					</attribute>
					<attribute name="@param">
						<description>files The selected files</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="browser" comment="The VFS browser" fulltype="org.gjt.sp.jedit.browser.VFSBrowser" type="VFSBrowser" />
					<param name="files" comment="The selected files" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="DefaultTableCellRenderer" visibility="public" package="org.gjt.sp.jedit.browser" serializable="true" superclassfulltype="javax.swing.table.DefaultTableCellRenderer" fulltype="org.gjt.sp.jedit.browser.FileCellRenderer" type="FileCellRenderer">
		<comment>
			<description>Local filesystem VFS.</description>
			<attribute name="@version">
				<description>$Id: FileCellRenderer.java 19866 2011-08-29 16:09:14Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="public" name="fileIcon" fulltype="javax.swing.Icon" type="Icon" />
			<field static="true" visibility="public" name="openFileIcon" fulltype="javax.swing.Icon" type="Icon" />
			<field static="true" visibility="public" name="dirIcon" fulltype="javax.swing.Icon" type="Icon" />
			<field static="true" visibility="public" name="openDirIcon" fulltype="javax.swing.Icon" type="Icon" />
			<field static="true" visibility="public" name="filesystemIcon" fulltype="javax.swing.Icon" type="Icon" />
			<field static="true" visibility="public" name="loadingIcon" fulltype="javax.swing.Icon" type="Icon" />
		</fields>
		<methods>
			<constructor visibility="public" name="FileCellRenderer" />
			<method visibility="public" name="getTableCellRendererComponent" fulltype="java.awt.Component" type="Component">
				<params>
					<param name="table" fulltype="javax.swing.JTable" type="JTable" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
					<param name="isSelected" fulltype="boolean" type="boolean" />
					<param name="hasFocus" fulltype="boolean" type="boolean" />
					<param name="row" fulltype="int" type="int" />
					<param name="column" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="paintComponent" fulltype="void" type="void">
				<params>
					<param name="g" fulltype="java.awt.Graphics" type="Graphics" />
				</params>
			</method>
			<method static="true" visibility="public" name="getIconForFile" fulltype="javax.swing.Icon" type="Icon">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="file" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
					<param name="expanded" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getIconForFile" fulltype="javax.swing.Icon" type="Icon">
				<params>
					<param name="file" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
					<param name="expanded" fulltype="boolean" type="boolean" />
					<param name="openBuffer" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.browser" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.browser.VFSBrowser" type="VFSBrowser">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.DefaultFocusComponent" type="DefaultFocusComponent" />
			<interface fulltype="org.gjt.sp.jedit.gui.DockableWindow" type="DockableWindow" />
		</implements>
		<comment>
			<description>The main class of the VFS browser.
 Used as dockable, and also embedded inside the
 VFSFileChooserDialog.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: VFSBrowser.java 21555 2012-04-03 15:17:35Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="vfs.browser" visibility="public" name="NAME" constexpr="&quot;vfs.browser&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="0" visibility="public" name="OPEN_DIALOG" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>Open file dialog mode. Equals JFileChooser.OPEN_DIALOG for
 backwards compatibility.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="SAVE_DIALOG" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>Save file dialog mode. Equals JFileChooser.SAVE_DIALOG for
 backwards compatibility.</description>
				</comment>
			</field>
			<field final="true" static="true" const="4" visibility="public" name="BROWSER_DIALOG" constexpr="4" fulltype="int" type="int">
				<comment>
					<description>Choose directory dialog mode.</description>
				</comment>
			</field>
			<field final="true" static="true" const="3" visibility="public" name="CHOOSE_DIRECTORY_DIALOG" constexpr="3" fulltype="int" type="int">
				<comment>
					<description>Choose directory dialog mode.</description>
				</comment>
			</field>
			<field final="true" static="true" const="2" visibility="public" name="BROWSER" constexpr="2" fulltype="int" type="int">
				<comment>
					<description>Stand-alone dockable browser mode.</description>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="M_OPEN" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="M_OPEN_NEW_VIEW" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="M_OPEN_NEW_PLAIN_VIEW" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="3" visibility="public" name="M_OPEN_NEW_SPLIT" constexpr="3" fulltype="int" type="int" />
			<field final="true" static="true" const="4" visibility="public" name="M_INSERT" constexpr="4" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="VFSBrowser">
				<comment>
					<description>Creates a new VFS browser.</description>
					<attribute name="@param">
						<description>view The view to open buffers in by default</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view to open buffers in by default" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="position" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="VFSBrowser">
				<comment>
					<description>Creates a new VFS browser.</description>
					<attribute name="@param">
						<description>view The view to open buffers in by default</description>
					</attribute>
					<attribute name="@param">
						<description>path The path to display</description>
					</attribute>
					<attribute name="@param">
						<description>mode The browser mode</description>
					</attribute>
					<attribute name="@param">
						<description>multipleSelection True if multiple selection should be allowed</description>
					</attribute>
					<attribute name="@param">
						<description>position Where the browser is located</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view to open buffers in by default" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The path to display" fulltype="java.lang.String" type="String" />
					<param name="mode" comment="The browser mode" fulltype="int" type="int" />
					<param name="multipleSelection" comment="True if multiple selection should be allowed" fulltype="boolean" type="boolean" />
					<param name="position" comment="Where the browser is located" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="browseDirectoryInNewWindow" fulltype="void" type="void">
				<comment>
					<description>Opens the specified directory in a new, floating, file system browser.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>path The directory&apos;s path</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The directory&apos;s path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="browseDirectory" fulltype="void" type="void">
				<comment>
					<description>Opens the specified directory in a file system browser.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>path The directory&apos;s path</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The directory&apos;s path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getActionContext" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext">
				<comment>
					<description>Returns the browser action context.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="focusOnDefaultComponent" fulltype="void" type="void" />
			<method visibility="public" name="addNotify" fulltype="void" type="void" />
			<method visibility="public" name="removeNotify" fulltype="void" type="void" />
			<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
				</params>
			</method>
			<method visibility="public" name="handleBufferUpdate" fulltype="void" type="void">
				<params>
					<param name="bmsg" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
				</params>
			</method>
			<method visibility="public" name="handlePluginUpdate" fulltype="void" type="void">
				<params>
					<param name="pmsg" fulltype="org.gjt.sp.jedit.msg.PluginUpdate" type="PluginUpdate" />
				</params>
			</method>
			<method visibility="public" name="handleVFSUpdate" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.VFSUpdate" type="VFSUpdate" />
				</params>
			</method>
			<method visibility="public" name="getView" fulltype="org.gjt.sp.jedit.View" type="View" />
			<method visibility="public" name="getMode" fulltype="int" type="int" />
			<method visibility="public" name="isMultipleSelectionEnabled" fulltype="boolean" type="boolean" />
			<method visibility="public" name="isHorizontalLayout" fulltype="boolean" type="boolean" />
			<method visibility="public" name="getShowHiddenFiles" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setShowHiddenFiles" fulltype="void" type="void">
				<params>
					<param name="showHiddenFiles" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getVFSFileFilter" fulltype="org.gjt.sp.jedit.io.VFSFileFilter" type="VFSFileFilter">
				<comment>
					<description>Returns the currently active VFSFileFilter.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addVFSFileFilter" fulltype="void" type="void">
				<comment>
					<description>Adds a file filter to the browser.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="filter" fulltype="org.gjt.sp.jedit.io.VFSFileFilter" type="VFSFileFilter" />
				</params>
			</method>
			<method visibility="public" name="setFilenameFilter" fulltype="void" type="void">
				<params>
					<param name="filter" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDirectoryField" fulltype="org.gjt.sp.jedit.gui.HistoryTextField" type="HistoryTextField" />
			<method visibility="public" name="getDirectory" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="previousDirectory" fulltype="void" type="void">
				<comment>
					<attribute name="@since">
						<description>jedit 4.3pre15</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="nextDirectory" fulltype="void" type="void">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setDirectory" fulltype="void" type="void">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getRootDirectory" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="rootDirectory" fulltype="void" type="void">
				<comment>
					<description>Goes to the local drives directory.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="reloadDirectory" fulltype="void" type="void" />
			<method visibility="public" name="delete" fulltype="void" type="void">
				<comment>
					<description>Note that all files must be on the same VFS.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="files" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
				</params>
			</method>
			<method visibility="public" name="rename" fulltype="void" type="void">
				<comment>
					<description>Rename a file.
 It will prompt for the new name.</description>
					<attribute name="@param">
						<description>from the file to rename</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="from" comment="the file to rename" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
				</params>
			</method>
			<method visibility="public" name="rename" fulltype="void" type="void">
				<comment>
					<description>Rename a file.
 It will prompt for the new name.</description>
					<attribute name="@param">
						<description>from the file to rename</description>
					</attribute>
					<attribute name="@param">
						<description>to the target name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="from" comment="the file to rename" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
					<param name="to" comment="the target name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="rename" fulltype="void" type="void">
				<params>
					<param name="from" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="rename" fulltype="void" type="void">
				<comment>
					<description>Rename a file</description>
					<attribute name="@param">
						<description>from the full path name of the file to be renamed</description>
					</attribute>
					<attribute name="@param">
						<description>newname the new name (only filename, not full path)</description>
					</attribute>
				</comment>
				<params>
					<param name="from" comment="the full path name of the file to be renamed" fulltype="java.lang.String" type="String" />
					<param name="newname" comment="the new name (only filename, not full path)" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="mkdir" fulltype="void" type="void" />
			<method visibility="public" name="newFile" fulltype="void" type="void">
				<comment>
					<description>Creates a new file in the current directory.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="fileProperties" fulltype="void" type="void">
				<comment>
					<description>Show selected file&apos;s properties.</description>
				</comment>
				<params>
					<param name="files" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
				</params>
			</method>
			<method visibility="public" name="searchInDirectory" fulltype="void" type="void">
				<comment>
					<description>Opens a directory search in the current directory.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="searchInDirectory" fulltype="void" type="void">
				<comment>
					<description>Opens a directory search in the specified directory.</description>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
					<attribute name="@param">
						<description>directory True if the path is a directory, false if it is a file</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
					<param name="directory" comment="True if the path is a directory, false if it is a file" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getSelectedFiles" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile">
				<comment>
					<description>Return the selected files in the lower browser tree.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSelectedFiles" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile">
				<comment>
					<description>Return the selected files from the point of view of the
 given component. This may be the selected directory from the
 upper tree component of the browser (directory tree) or
 the selected files in the bottom tree component.
 This method is to be used by code running inside VFSBrowser
 such as a DynamicMenuProvider. Use the other method otherwise.
 The main difference is this function searches the component
 hierarchy for a {@link BrowserView.ParentDirectoryList} to get
 the list of currently selected files from there. Otherwise, it
 returns what {@link #getSelectedFiles()} would return.</description>
					<attribute name="@param">
						<description>source the source component to start from when
 		navigating the component hierarchy</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="the source component to start from when
 		navigating the component hierarchy" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="paste" fulltype="void" type="void">
				<comment>
					<description>Paste the file contained in the clipboard.
 If the clipboard do not contains files, nothing happens.</description>
					<attribute name="@param">
						<description>file the target, it can be a file, in that case it will be pasted to
 the parent directory, or a directory.</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="the target, it can be a file, in that case it will be pasted to
 the parent directory, or a directory." fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="java.awt.datatransfer.UnsupportedFlavorException" type="UnsupportedFlavorException" />
				</exceptions>
			</method>
			<method visibility="public" name="locateFile" fulltype="void" type="void">
				<comment>
					<description>Goes to the given file&apos;s directory and selects the file in the list.</description>
					<attribute name="@param">
						<description>path The file</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The file" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="createPluginsMenu" fulltype="javax.swing.JComponent" type="JComponent">
				<params>
					<param name="pluginMenu" fulltype="javax.swing.JComponent" type="JComponent" />
					<param name="showManagerOptions" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="addBrowserListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="org.gjt.sp.jedit.browser.BrowserListener" type="BrowserListener" />
				</params>
			</method>
			<method visibility="public" name="removeBrowserListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="org.gjt.sp.jedit.browser.BrowserListener" type="BrowserListener" />
				</params>
			</method>
			<method visibility="public" name="filesActivated" fulltype="void" type="void">
				<comment>
					<description>This method does the &quot;double-click&quot; handling. It is public so that
 &lt;code&gt;browser.actions.xml&lt;/code&gt; can bind to it.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" fulltype="int" type="int" />
					<param name="canDoubleClickClose" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="dispose" fulltype="void" type="void">
				<comment>
					<description>Disposes the browser, regardless of whether it is a dialog or a dockable</description>
				</comment>
			</method>
			<method visibility="public" name="move" fulltype="void" type="void">
				<params>
					<param name="newPosition" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.browser" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.browser.VFSBrowser.DirectoriesOnlyFilter" type="VFSBrowser.DirectoriesOnlyFilter">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.io.VFSFileFilter" type="VFSFileFilter" />
			</implements>
			<methods>
				<constructor visibility="public" name="VFSBrowser.DirectoriesOnlyFilter" />
				<method visibility="public" name="accept" fulltype="boolean" type="boolean">
					<params>
						<param name="file" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
					</params>
				</method>
				<method visibility="public" name="accept" fulltype="boolean" type="boolean">
					<params>
						<param name="url" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="getDescription" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.browser" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.browser.VFSBrowser.DirectoriesOnlyFilter" type="VFSBrowser.DirectoriesOnlyFilter">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.io.VFSFileFilter" type="VFSFileFilter" />
		</implements>
		<methods>
			<constructor visibility="public" name="VFSBrowser.DirectoriesOnlyFilter" />
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<params>
					<param name="file" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
				</params>
			</method>
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<params>
					<param name="url" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDescription" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="JTable" visibility="public" package="org.gjt.sp.jedit.browser" serializable="true" superclassfulltype="javax.swing.JTable" fulltype="org.gjt.sp.jedit.browser.VFSDirectoryEntryTable" type="VFSDirectoryEntryTable">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: VFSDirectoryEntryTable.java 21706 2012-05-23 16:58:56Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="selectFile" fulltype="boolean" type="boolean">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="doTypeSelect" fulltype="void" type="void">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="dirsOnly" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getSelectedFiles" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
			<method visibility="public" name="getExpandedDirectories" fulltype="void" type="void">
				<params>
					<param name="set" fulltype="java.util.Set" type="Set" />
				</params>
			</method>
			<method visibility="public" name="toggleExpanded" fulltype="void" type="void">
				<params>
					<param name="row" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setDirectory" fulltype="void" type="void">
				<params>
					<param name="vfs" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="node" fulltype="java.lang.Object" type="Object" />
					<param name="list" fulltype="java.util.List" type="List" />
					<param name="tmpExpanded" fulltype="java.util.Set" type="Set" />
				</params>
			</method>
			<method visibility="public" name="maybeReloadDirectory" fulltype="void" type="void">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void" />
			<method visibility="public" name="scrollRectToVisible" fulltype="void" type="void">
				<params>
					<param name="rect" fulltype="java.awt.Rectangle" type="Rectangle" />
				</params>
			</method>
			<method visibility="public" name="processKeyEvent" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method visibility="public" name="setSelectedRow" fulltype="void" type="void">
				<params>
					<param name="row" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="AbstractTableModel" visibility="public" package="org.gjt.sp.jedit.browser" serializable="true" superclassfulltype="javax.swing.table.AbstractTableModel" fulltype="org.gjt.sp.jedit.browser.VFSDirectoryEntryTableModel" type="VFSDirectoryEntryTableModel">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: VFSDirectoryEntryTableModel.java 14450 2009-01-24 22:56:40Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="VFSDirectoryEntryTableModel" />
			<method visibility="public" name="setRoot" fulltype="void" type="void">
				<params>
					<param name="vfs" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="list" fulltype="java.util.List" type="List" />
				</params>
			</method>
			<method visibility="public" name="expand" fulltype="int" type="int">
				<params>
					<param name="vfs" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="entry" fulltype="org.gjt.sp.jedit.browser.VFSDirectoryEntryTableModel.Entry" type="VFSDirectoryEntryTableModel.Entry" />
					<param name="list" fulltype="java.util.List" type="List" />
				</params>
			</method>
			<method visibility="public" name="collapse" fulltype="void" type="void">
				<params>
					<param name="vfs" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getColumnCount" fulltype="int" type="int" />
			<method visibility="public" name="getRowCount" fulltype="int" type="int" />
			<method visibility="public" name="getColumnName" fulltype="java.lang.String" type="String">
				<params>
					<param name="col" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getColumnClass" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="col" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getValueAt" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="row" fulltype="int" type="int" />
					<param name="col" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getAscending" fulltype="boolean" type="boolean" />
			<method visibility="public" name="getSortColumn" fulltype="int" type="int" />
			<method visibility="public" name="getSortAttribute" fulltype="java.lang.String" type="String">
				<params>
					<param name="column" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="sortByColumn" fulltype="boolean" type="boolean">
				<params>
					<param name="column" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getExtendedAttribute" fulltype="java.lang.String" type="String">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getColumnWidth" returncomment="A saved column width" fulltype="int" type="int">
				<comment>
					<attribute name="@param">
						<description>i The column index</description>
					</attribute>
					<attribute name="@return">
						<description>A saved column width</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="The column index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setColumnWidth" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>i The column index</description>
					</attribute>
					<attribute name="@param">
						<description>w The column width</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="The column index" fulltype="int" type="int" />
					<param name="w" comment="The column width" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getFiles" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.browser" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.browser.VFSFileChooserDialog" type="VFSFileChooserDialog">
		<comment>
			<description>Wraps the VFS browser in a modal dialog.
 Shows up when &quot;File-Open&quot; is used.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: VFSFileChooserDialog.java 20945 2012-01-24 20:24:26Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="VFSFileChooserDialog">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="mode" fulltype="int" type="int" />
					<param name="multipleSelection" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="VFSFileChooserDialog">
				<comment>
					<description>Constructs a new VFSFileChooserDialog. If &lt;code&gt;authoshow&lt;/code&gt;
 is true, the dialog will be show automatically and the call
 will only return after the user disposes of the dialog.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="mode" fulltype="int" type="int" />
					<param name="multipleSelection" fulltype="boolean" type="boolean" />
					<param name="autoshow" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="VFSFileChooserDialog">
				<comment>
					<description>Constructs a new VFSFileChooserDialog.
 This version can specify a dialog as the parent instead
 of the view.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="mode" fulltype="int" type="int" />
					<param name="multipleSelection" fulltype="boolean" type="boolean" />
					<param name="autoshow" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="VFSFileChooserDialog">
				<comment>
					<description>Constructs a new VFSFileChooserDialog.
 This version can specify a Frame as the parent instead
 of the view.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" fulltype="java.awt.Frame" type="Frame" />
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="mode" fulltype="int" type="int" />
					<param name="multipleSelection" fulltype="boolean" type="boolean" />
					<param name="autoshow" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="getBrowser" returncomment="the VFS browser used in the dialog" fulltype="org.gjt.sp.jedit.browser.VFSBrowser" type="VFSBrowser">
				<comment>
					<description>Returns the VFSBrowser instance used internally.</description>
					<attribute name="@return">
						<description>the VFS browser used in the dialog</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="dispose" fulltype="void" type="void" />
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
			<method visibility="public" name="getSelectedFiles" fulltype="java.lang.String[]" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="HistoryTextField" visibility="public" package="org.gjt.sp.jedit.browser" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.HistoryTextField" fulltype="org.gjt.sp.jedit.browser.VFSFileNameField" type="VFSFileNameField">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: VFSFileNameField.java 19318 2011-02-01 04:22:08Z vanza $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.2pre1 (public since 4.5pre1)</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="VFSFileNameField">
				<params>
					<param name="browser" fulltype="org.gjt.sp.jedit.browser.VFSBrowser" type="VFSBrowser" />
					<param name="model" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="processKeyEvent" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method visibility="public" name="doComplete" fulltype="java.lang.String" type="String">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="complete" fulltype="java.lang.String" type="String" />
					<param name="dirsOnly" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager">
		<comment>
			<description>BshClassManager manages all classloading in BeanShell.
    It also supports a dynamically loaded extension (bsh.classpath package)
    which allows classpath extension and class file reloading.

    Currently the extension relies on 1.2 for BshClassLoader and weak
    references.

    See http://www.beanshell.org/manual/classloading.html for details
    on the bsh classloader architecture.
    &lt;p&gt;

    Bsh has a multi-tiered class loading architecture.  No class loader is
    used unless/until the classpath is modified or a class is reloaded.
    &lt;p&gt;</description>
		</comment>
		<fields>
			<field visibility="protected" name="externalClassLoader" fulltype="java.lang.ClassLoader" type="ClassLoader">
				<comment>
					<description>An external classloader supplied by the setClassLoader() command.</description>
				</comment>
			</field>
			<field visibility="protected" transient="true" name="absoluteClassCache" fulltype="java.util.Hashtable" type="Hashtable">
				<comment>
					<description>Global cache for things we know are classes.
        Note: these should probably be re-implemented with Soft references.
        (as opposed to strong or Weak)</description>
				</comment>
			</field>
			<field visibility="protected" transient="true" name="absoluteNonClasses" fulltype="java.util.Hashtable" type="Hashtable">
				<comment>
					<description>Global cache for things we know are *not* classes.
        Note: these should probably be re-implemented with Soft references.
        (as opposed to strong or Weak)</description>
				</comment>
			</field>
			<field visibility="protected" transient="true" name="resolvedObjectMethods" fulltype="java.util.Hashtable" type="Hashtable">
				<comment>
					<description>Caches for resolved object and static methods.
        We keep these maps separate to support fast lookup in the general case
        where the method may be either.</description>
				</comment>
			</field>
			<field visibility="protected" transient="true" name="resolvedStaticMethods" fulltype="java.util.Hashtable" type="Hashtable" />
			<field visibility="protected" transient="true" name="definingClasses" fulltype="java.util.Hashtable" type="Hashtable" />
			<field visibility="protected" transient="true" name="definingClassesBaseNames" fulltype="java.util.Hashtable" type="Hashtable" />
		</fields>
		<methods>
			<constructor visibility="public" name="BshClassManager" />
			<method static="true" visibility="public" name="createClassManager" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager">
				<comment>
					<description>Create a new instance of the class manager.
        Class manager instnaces are now associated with the interpreter.</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.Interpreter#getClassManager() getClassManager</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.Interpreter#setClassLoader(ClassLoader) setClassLoader</description>
					</attribute>
				</comment>
				<params>
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
			</method>
			<method visibility="public" name="classExists" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="classForName" returncomment="the class or null" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Load the specified class by name, taking into account added classpath
        and reloaded classes, etc.
        Note: Again, this is just a trivial implementation.
        See bsh.classpath.ClassManagerImpl for the fully functional class
        management package.</description>
					<attribute name="@return">
						<description>the class or null</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="loadSourceClass" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="plainClassForName" returncomment="the class" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Perform a plain Class.forName() or call the externally provided
        classloader.
        If a BshClassManager implementation is loaded the call will be
        delegated to it, to allow for additional hooks.
        &lt;p/&gt;

        This simply wraps that bottom level class lookup call and provides a
        central point for monitoring and handling certain Java version
        dependent bugs, etc.</description>
					<attribute name="@see">
						<description>#classForName( String )</description>
					</attribute>
					<attribute name="@return">
						<description>the class</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="public" name="getResource" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Get a resource URL using the BeanShell classpath</description>
					<attribute name="@param">
						<description>path should be an absolute path</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="should be an absolute path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getResourceAsStream" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Get a resource stream using the BeanShell classpath</description>
					<attribute name="@param">
						<description>path should be an absolute path</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="should be an absolute path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="cacheClassInfo" fulltype="void" type="void">
				<comment>
					<description>Cache info about whether name is a class or not.</description>
					<attribute name="@param">
						<description>value
            if value is non-null, cache the class
            if value is null, set the flag that it is *not* a class to
            speed later resolution</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" comment="if value is non-null, cache the class
            if value is null, set the flag that it is *not* a class to
            speed later resolution" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="cacheResolvedMethod" fulltype="void" type="void">
				<comment>
					<description>Cache a resolved (possibly overloaded) method based on the
        argument types used to invoke it, subject to classloader change.
        Static and Object methods are cached separately to support fast lookup
        in the general case where either will do.</description>
				</comment>
				<params>
					<param name="clas" fulltype="java.lang.Class" type="Class" />
					<param name="types" fulltype="java.lang.Class[]" type="Class" />
					<param name="method" fulltype="java.lang.reflect.Method" type="Method" />
				</params>
			</method>
			<method visibility="protected" name="getResolvedMethod" returncomment="the Method or null" fulltype="java.lang.reflect.Method" type="Method">
				<comment>
					<description>Return a previously cached resolved method.</description>
					<attribute name="@param">
						<description>onlyStatic specifies that only a static method may be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>the Method or null</description>
					</attribute>
				</comment>
				<params>
					<param name="clas" fulltype="java.lang.Class" type="Class" />
					<param name="methodName" fulltype="java.lang.String" type="String" />
					<param name="types" fulltype="java.lang.Class[]" type="Class" />
					<param name="onlyStatic" comment="specifies that only a static method may be returned." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="clearCaches" fulltype="void" type="void">
				<comment>
					<description>Clear the caches in BshClassManager</description>
				</comment>
			</method>
			<method visibility="public" name="setClassLoader" fulltype="void" type="void">
				<comment>
					<description>Set an external class loader.  BeanShell will use this at the same
        point it would otherwise use the plain Class.forName().
        i.e. if no explicit classpath management is done from the script
        (addClassPath(), setClassPath(), reloadClasses()) then BeanShell will
        only use the supplied classloader.  If additional classpath management
        is done then BeanShell will perform that in addition to the supplied
        external classloader.
        However BeanShell is not currently able to reload
        classes supplied through the external classloader.</description>
				</comment>
				<params>
					<param name="externalCL" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</method>
			<method visibility="public" name="addClassPath" fulltype="void" type="void">
				<params>
					<param name="path" fulltype="java.net.URL" type="URL" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="reset" fulltype="void" type="void">
				<comment>
					<description>Clear all loaders and start over.  No class loading.</description>
				</comment>
			</method>
			<method visibility="public" name="setClassPath" fulltype="void" type="void">
				<comment>
					<description>Set a new base classpath and create a new base classloader.
        This means all types change.</description>
				</comment>
				<params>
					<param name="cp" fulltype="java.net.URL[]" type="URL" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="reloadAllClasses" fulltype="void" type="void">
				<comment>
					<description>Overlay the entire path with a new class loader.
        Set the base path to the user path + base path.

        No point in including the boot class path (can&apos;t reload thos).</description>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="reloadClasses" fulltype="void" type="void">
				<comment>
					<description>Reloading classes means creating a new classloader and using it
        whenever we are asked for classes in the appropriate space.
        For this we use a DiscreteFilesClassLoader</description>
				</comment>
				<params>
					<param name="classNames" fulltype="java.lang.String[]" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="reloadPackage" fulltype="void" type="void">
				<comment>
					<description>Reload all classes in the specified package: e.g. &quot;com.sun.tools&quot;

        The special package name &quot;&lt;unpackaged&gt;&quot; can be used to refer
        to unpackaged classes.</description>
				</comment>
				<params>
					<param name="pack" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="protected" name="doSuperImport" fulltype="void" type="void">
				<comment>
					<description>Support for &quot;import *;&quot;
        Hide details in here as opposed to NameSpace.</description>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="protected" name="hasSuperImport" fulltype="boolean" type="boolean">
				<comment>
					<description>A &quot;super import&quot; (&quot;import *&quot;) operation has been performed.</description>
				</comment>
			</method>
			<method visibility="protected" name="getClassNameByUnqName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Return the name or null if none is found,
        Throw an ClassPathException containing detail if name is ambigous.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="addListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="org.gjt.sp.jedit.bsh.BshClassManager.Listener" type="BshClassManager.Listener" />
				</params>
			</method>
			<method visibility="public" name="removeListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="org.gjt.sp.jedit.bsh.BshClassManager.Listener" type="BshClassManager.Listener" />
				</params>
			</method>
			<method visibility="public" name="dump" fulltype="void" type="void">
				<params>
					<param name="pw" fulltype="java.io.PrintWriter" type="PrintWriter" />
				</params>
			</method>
			<method visibility="protected" name="definingClass" fulltype="void" type="void">
				<comment>
					<description>Flag the class name as being in the process of being defined.
        The class manager will not attempt to load it.</description>
				</comment>
				<params>
					<param name="className" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="isClassBeingDefined" fulltype="boolean" type="boolean">
				<params>
					<param name="className" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="getClassBeingDefined" fulltype="java.lang.String" type="String">
				<comment>
					<description>This method is a temporary workaround used with definingClass.
        It is to be removed at some point.</description>
				</comment>
				<params>
					<param name="className" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="doneDefiningClass" fulltype="void" type="void">
				<comment>
					<description>Indicate that the specified class name has been defined and may be
        loaded normally.</description>
				</comment>
				<params>
					<param name="className" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="defineClass" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="code" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method visibility="protected" name="classLoaderChanged" fulltype="void" type="void" />
			<method static="true" visibility="protected" name="noClassDefFound" fulltype="java.lang.Error" type="Error">
				<comment>
					<description>Annotate the NoClassDefFoundError with some info about the class
        we were trying to load.</description>
				</comment>
				<params>
					<param name="className" fulltype="java.lang.String" type="String" />
					<param name="e" fulltype="java.lang.Error" type="Error" />
				</params>
			</method>
			<method static="true" visibility="protected" name="cmUnavailable" fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
		</methods>
		<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh" interface="true" fulltype="org.gjt.sp.jedit.bsh.BshClassManager.Listener" type="BshClassManager.Listener">
			<methods>
				<method visibility="public" name="classLoaderChanged" fulltype="void" type="void" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh" interface="true" fulltype="org.gjt.sp.jedit.bsh.BshClassManager.Listener" type="BshClassManager.Listener">
		<methods>
			<method visibility="public" name="classLoaderChanged" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="SimpleNode" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.SimpleNode" fulltype="org.gjt.sp.jedit.bsh.BSHFormalComment" type="BSHFormalComment">
		<fields>
			<field visibility="public" name="text" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="BSHFormalComment">
				<params>
					<param name="id" fulltype="int" type="int" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh" interface="true" fulltype="org.gjt.sp.jedit.bsh.BshIterator" type="BshIterator">
		<comment>
			<description>An interface implemented by classes wrapping instances of iterators,
    enumerations, collections, etc.</description>
			<attribute name="@see">
				<description>CollectionManager#getBshIterator(Object) getBshIterator</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="next" returncomment="The next object" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Fetch the next object in the iteration</description>
					<attribute name="@return">
						<description>The next object</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hasNext" returncomment="The next object" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if and only if there are more objects available
 via the &lt;code&gt;next()&lt;/code&gt; method</description>
					<attribute name="@return">
						<description>The next object</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>This represents an instance of a bsh method declaration in a particular
        namespace.  This is a thin wrapper around the BSHMethodDeclaration
        with a pointer to the declaring namespace.
        &lt;p&gt;

        When a method is located in a subordinate namespace or invoked from an 
        arbitrary namespace it must nontheless execute with its &apos;super&apos; as the 
        context in which it was declared.
        &lt;p/&gt;</description>
		</comment>
		<methods>
			<method visibility="public" name="getParameterTypes" fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Get the argument types of this method.
                loosely typed (untyped) arguments will be represented by null argument
                types.</description>
				</comment>
			</method>
			<method visibility="public" name="getParameterNames" fulltype="java.lang.String[]" type="String" />
			<method visibility="public" name="getReturnType" returncomment="Returns null for a loosely typed return value, 
                        Void.TYPE for a void return type, or the Class of the type." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Get the return type of the method.</description>
					<attribute name="@return">
						<description>Returns null for a loosely typed return value, 
                        Void.TYPE for a void return type, or the Class of the type.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getModifiers" fulltype="org.gjt.sp.jedit.bsh.Modifiers" type="Modifiers" />
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="invoke" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Invoke the declared method with the specified arguments and interpreter
                reference.  This is the simplest form of invoke() for BshMethod 
                intended to be used in reflective style access to bsh scripts.</description>
				</comment>
				<params>
					<param name="argValues" fulltype="java.lang.Object[]" type="Object" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="invoke" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Invoke the bsh method with the specified args, interpreter ref,
                and callstack.
                callerInfo is the node representing the method invocation
                It is used primarily for debugging in order to provide access to the 
                text of the construct that invoked the method through the namespace.</description>
					<attribute name="@param">
						<description>callerInfo is the BeanShell AST node representing the method 
                        invocation.  It is used to print the line number and text of 
                        errors in EvalError exceptions.  If the node is null here error
                        messages may not be able to point to the precise location and text
                        of the error.</description>
					</attribute>
					<attribute name="@param">
						<description>callstack is the callstack.  If callstack is null a new one
                        will be created with the declaring namespace of the method on top
                        of the stack (i.e. it will look for purposes of the method 
                        invocation like the method call occurred in the declaring 
                        (enclosing) namespace in which the method is defined).</description>
					</attribute>
				</comment>
				<params>
					<param name="argValues" fulltype="java.lang.Object[]" type="Object" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
					<param name="callstack" comment="is the callstack.  If callstack is null a new one
                        will be created with the declaring namespace of the method on top
                        of the stack (i.e. it will look for purposes of the method 
                        invocation like the method call occurred in the declaring 
                        (enclosing) namespace in which the method is defined)." fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
					<param name="callerInfo" comment="is the BeanShell AST node representing the method 
                        invocation.  It is used to print the line number and text of 
                        errors in EvalError exceptions.  If the node is null here error
                        messages may not be able to point to the precise location and text
                        of the error." fulltype="org.gjt.sp.jedit.bsh.SimpleNode" type="SimpleNode" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="hasModifier" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="SimpleNode" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.SimpleNode" fulltype="org.gjt.sp.jedit.bsh.BSHPackageDeclaration" type="BSHPackageDeclaration">
		<methods>
			<constructor visibility="public" name="BSHPackageDeclaration">
				<params>
					<param name="id" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="eval" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack">
		<comment>
			<description>A stack of NameSpaces representing the call path.
        Each method invocation, for example, pushes a new NameSpace onto the stack.
        The top of the stack is always the current namespace of evaluation.
        &lt;p&gt;

        This is used to support the this.caller magic reference and to print
        script &quot;stack traces&quot; when evaluation errors occur.
        &lt;p&gt;

        Note: it would be awefully nice to use the java.util.Stack here.
        Sigh... have to stay 1.1 compatible.
        &lt;p&gt;

        Note: How can this be thread safe, you might ask?  Wouldn&apos;t a thread 
        executing various beanshell methods be mutating the callstack?  Don&apos;t we 
        need one CallStack per Thread in the interpreter?  The answer is that we do.
        Any java.lang.Thread enters our script via an external (hard) Java 
        reference via a This type interface, e.g.  the Runnable interface 
        implemented by This or an arbitrary interface implemented by XThis.  
        In that case the This invokeMethod() method (called by any interface that 
        it exposes) creates a new CallStack for each external call.
        &lt;p&gt;</description>
		</comment>
		<methods>
			<constructor visibility="public" name="CallStack" />
			<constructor visibility="public" name="CallStack">
				<params>
					<param name="namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</constructor>
			<method visibility="public" name="clear" fulltype="void" type="void" />
			<method visibility="public" name="push" fulltype="void" type="void">
				<params>
					<param name="ns" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</method>
			<method visibility="public" name="top" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
			<method visibility="public" name="get" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace">
				<comment>
					<description>zero based.</description>
				</comment>
				<params>
					<param name="depth" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="set" fulltype="void" type="void">
				<comment>
					<description>This is kind of crazy, but used by the setNameSpace command.
                zero based.</description>
				</comment>
				<params>
					<param name="depth" fulltype="int" type="int" />
					<param name="ns" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</method>
			<method visibility="public" name="pop" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
			<method visibility="public" name="swap" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace">
				<comment>
					<description>Swap in the value as the new top of the stack and return the old
                value.</description>
				</comment>
				<params>
					<param name="newTop" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</method>
			<method visibility="public" name="depth" fulltype="int" type="int" />
			<method visibility="public" name="toArray" fulltype="org.gjt.sp.jedit.bsh.NameSpace[]" type="NameSpace" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="copy" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack">
				<comment>
					<description>Occasionally we need to freeze the callstack for error reporting
                purposes, etc.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.Capabilities" type="Capabilities">
		<comment>
			<description>The map of extended features supported by the runtime in which we live.
        &lt;p&gt;

        This class should be independent of all other bsh classes!
        &lt;p&gt;

        Note that tests for class existence here do *not* use the 
        BshClassManager, as it may require other optional class files to be 
        loaded.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Capabilities" />
			<method static="true" visibility="public" name="haveSwing" fulltype="boolean" type="boolean" />
			<method static="true" visibility="public" name="canGenerateInterfaces" fulltype="boolean" type="boolean" />
			<method static="true" visibility="public" name="haveAccessibility" fulltype="boolean" type="boolean">
				<comment>
					<description>If accessibility is enabled
                determine if the accessibility mechanism exists and if we have
                the optional bsh package to use it.
                Note that even if both are true it does not necessarily mean that we 
                have runtime permission to access the fields... Java security has
                a say in it.</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.ReflectManager</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setAccessibility" fulltype="void" type="void">
				<params>
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.Capabilities.Unavailable" type="Capabilities.Unavailable" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="classExists" fulltype="boolean" type="boolean">
				<comment>
					<description>Use direct Class.forName() to test for the existence of a class.
                We should not use BshClassManager here because:
                        a) the systems using these tests would probably not load the
                        classes through it anyway.
                        b) bshclassmanager is heavy and touches other class files.  
                        this capabilities code must be light enough to be used by any
                        system **including the remote applet**.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="UtilEvalError" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.UtilEvalError" fulltype="org.gjt.sp.jedit.bsh.Capabilities.Unavailable" type="Capabilities.Unavailable">
			<comment>
				<description>An attempt was made to use an unavailable capability supported by
                an optional package.  The normal operation is to test before attempting
                to use these packages... so this is runtime exception.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="Capabilities.Unavailable">
					<params>
						<param name="s" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="UtilEvalError" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.UtilEvalError" fulltype="org.gjt.sp.jedit.bsh.Capabilities.Unavailable" type="Capabilities.Unavailable">
		<comment>
			<description>An attempt was made to use an unavailable capability supported by
                an optional package.  The normal operation is to test before attempting
                to use these packages... so this is runtime exception.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Capabilities.Unavailable">
				<params>
					<param name="s" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.ClassGenerator" type="ClassGenerator">
		<methods>
			<constructor visibility="public" name="ClassGenerator" />
			<method static="true" visibility="public" name="getClassGenerator" fulltype="org.gjt.sp.jedit.bsh.ClassGenerator" type="ClassGenerator">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method abstract="true" visibility="public" name="generateClass" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Parse the BSHBlock for the class definition and generate the class.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="modifiers" fulltype="org.gjt.sp.jedit.bsh.Modifiers" type="Modifiers" />
					<param name="interfaces" fulltype="java.lang.Class[]" type="Class" />
					<param name="superClass" fulltype="java.lang.Class" type="Class" />
					<param name="block" fulltype="org.gjt.sp.jedit.bsh.BSHBlock" type="BSHBlock" />
					<param name="isInterface" fulltype="boolean" type="boolean" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method abstract="true" visibility="public" name="invokeSuperclassMethod" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Invoke a super.method() style superclass method on an object instance.
                This is not a normal function of the Java reflection API and is
                provided by generated class accessor methods.</description>
				</comment>
				<params>
					<param name="bcm" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
					<param name="instance" fulltype="java.lang.Object" type="Object" />
					<param name="methodName" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
					<exception fulltype="org.gjt.sp.jedit.bsh.ReflectError" type="ReflectError" />
					<exception fulltype="java.lang.reflect.InvocationTargetException" type="InvocationTargetException" />
				</exceptions>
			</method>
			<method abstract="true" visibility="public" name="setInstanceNameSpaceParent" fulltype="void" type="void">
				<comment>
					<description>Change the parent of the class instance namespace.
                This is currently used for inner class support.
                Note: This method will likely be removed in the future.</description>
				</comment>
				<params>
					<param name="instance" fulltype="java.lang.Object" type="Object" />
					<param name="className" fulltype="java.lang.String" type="String" />
					<param name="parent" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="ClassGenerator" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="org.gjt.sp.jedit.bsh.ClassGenerator" fulltype="org.gjt.sp.jedit.bsh.ClassGeneratorImpl" type="ClassGeneratorImpl">
		<comment>
			<attribute name="@author">
				<description>Pat Niemeyer (pat@pat.net)</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ClassGeneratorImpl" />
			<method visibility="public" name="generateClass" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="modifiers" fulltype="org.gjt.sp.jedit.bsh.Modifiers" type="Modifiers" />
					<param name="interfaces" fulltype="java.lang.Class[]" type="Class" />
					<param name="superClass" fulltype="java.lang.Class" type="Class" />
					<param name="block" fulltype="org.gjt.sp.jedit.bsh.BSHBlock" type="BSHBlock" />
					<param name="isInterface" fulltype="boolean" type="boolean" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="invokeSuperclassMethod" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="bcm" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
					<param name="instance" fulltype="java.lang.Object" type="Object" />
					<param name="methodName" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
					<exception fulltype="org.gjt.sp.jedit.bsh.ReflectError" type="ReflectError" />
					<exception fulltype="java.lang.reflect.InvocationTargetException" type="InvocationTargetException" />
				</exceptions>
			</method>
			<method visibility="public" name="setInstanceNameSpaceParent" fulltype="void" type="void">
				<comment>
					<description>Change the parent of the class instance namespace.
                This is currently used for inner class support.
                Note: This method will likely be removed in the future.</description>
				</comment>
				<params>
					<param name="instance" fulltype="java.lang.Object" type="Object" />
					<param name="className" fulltype="java.lang.String" type="String" />
					<param name="parent" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</method>
			<method static="true" visibility="public" name="generateClassImpl" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Parse the BSHBlock for for the class definition and generate the class
                using ClassGenerator.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="modifiers" fulltype="org.gjt.sp.jedit.bsh.Modifiers" type="Modifiers" />
					<param name="interfaces" fulltype="java.lang.Class[]" type="Class" />
					<param name="superClass" fulltype="java.lang.Class" type="Class" />
					<param name="block" fulltype="org.gjt.sp.jedit.bsh.BSHBlock" type="BSHBlock" />
					<param name="isInterface" fulltype="boolean" type="boolean" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="invokeSuperclassMethodImpl" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="bcm" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
					<param name="instance" fulltype="java.lang.Object" type="Object" />
					<param name="methodName" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
					<exception fulltype="org.gjt.sp.jedit.bsh.ReflectError" type="ReflectError" />
					<exception fulltype="java.lang.reflect.InvocationTargetException" type="InvocationTargetException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.ClassGeneratorUtil" type="ClassGeneratorUtil">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Constants" type="Constants" />
		</implements>
		<comment>
			<description>ClassGeneratorUtil utilizes the ASM (www.objectweb.org) bytecode generator 
        by Eric Bruneton in order to generate class &quot;stubs&quot; for BeanShell at
        runtime.  
        &lt;p&gt;

        Stub classes contain all of the fields of a BeanShell scripted class
        as well as two &quot;callback&quot; references to BeanShell namespaces: one for
        static methods and one for instance methods.  Methods of the class are
        delegators which invoke corresponding methods on either the static or
        instance bsh object and then unpack and return the results.  The static
        namespace utilizes a static import to delegate variable access to the
        class&apos; static fields.  The instance namespace utilizes a dynamic import
        (i.e. mixin) to delegate variable access to the class&apos; instance variables.
        &lt;p&gt;

        Constructors for the class delegate to the static initInstance() method of 
        ClassGeneratorUtil to initialize new instances of the object.  initInstance()
        invokes the instance intializer code (init vars and instance blocks) and
        then delegates to the corresponding scripted constructor method in the
        instance namespace.  Constructors contain special switch logic which allows
        the BeanShell to control the calling of alternate constructors (this() or
        super() references) at runtime.
        &lt;p&gt;

        Specially named superclass delegator methods are also generated in order to
        allow BeanShell to access overridden methods of the superclass (which
        reflection does not normally allow).
        &lt;p&gt;</description>
			<attribute name="@author">
				<description>Pat Niemeyer</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ClassGeneratorUtil">
				<comment>
					<attribute name="@param">
						<description>packageName e.g. &quot;com.foo.bar&quot;</description>
					</attribute>
				</comment>
				<params>
					<param name="classModifiers" fulltype="org.gjt.sp.jedit.bsh.Modifiers" type="Modifiers" />
					<param name="className" fulltype="java.lang.String" type="String" />
					<param name="packageName" comment="e.g. &quot;com.foo.bar&quot;" fulltype="java.lang.String" type="String" />
					<param name="superClass" fulltype="java.lang.Class" type="Class" />
					<param name="interfaces" fulltype="java.lang.Class[]" type="Class" />
					<param name="vars" fulltype="org.gjt.sp.jedit.bsh.Variable[]" type="Variable" />
					<param name="bshmethods" fulltype="org.gjt.sp.jedit.bsh.DelayedEvalBshMethod[]" type="DelayedEvalBshMethod" />
					<param name="classStaticNameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="isInterface" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="generateClass" fulltype="byte[]" type="byte">
				<comment>
					<description>Generate the class bytecode for this class.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="generateParameterReifierCode" fulltype="void" type="void">
				<comment>
					<description>Generates the code to reify the arguments of the given method.
                For a method &quot;int m (int i, String s)&quot;, this code is the bytecode
                corresponding to the &quot;new Object[] { new bsh.Primitive(i), s }&quot; 
                expression.</description>
					<attribute name="@author">
						<description>Eric Bruneton</description>
					</attribute>
					<attribute name="@author">
						<description>Pat Niemeyer</description>
					</attribute>
					<attribute name="@param">
						<description>cv the code visitor to be used to generate the bytecode.</description>
					</attribute>
					<attribute name="@param">
						<description>isStatic the enclosing methods is static</description>
					</attribute>
				</comment>
				<params>
					<param name="paramTypes" fulltype="java.lang.String[]" type="String" />
					<param name="isStatic" comment="the enclosing methods is static" fulltype="boolean" type="boolean" />
					<param name="cv" comment="the code visitor to be used to generate the bytecode." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.CodeVisitor" type="CodeVisitor" />
				</params>
			</method>
			<method static="true" visibility="public" name="generateReturnCode" fulltype="void" type="void">
				<comment>
					<description>Generates the code to unreify the result of the given method.  For a
                method &quot;int m (int i, String s)&quot;, this code is the bytecode
                corresponding to the &quot;((Integer)...).intValue()&quot; expression.</description>
					<attribute name="@param">
						<description>cv the code visitor to be used to generate the bytecode.</description>
					</attribute>
					<attribute name="@author">
						<description>Eric Bruneton</description>
					</attribute>
					<attribute name="@author">
						<description>Pat Niemeyer</description>
					</attribute>
				</comment>
				<params>
					<param name="returnType" fulltype="java.lang.String" type="String" />
					<param name="cv" comment="the code visitor to be used to generate the bytecode." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.CodeVisitor" type="CodeVisitor" />
				</params>
			</method>
			<method static="true" visibility="public" name="getConstructorArgs" returncomment="the ConstructorArgs object containing a constructor selector
                        and evaluated arguments for the alternate constructor" fulltype="org.gjt.sp.jedit.bsh.ClassGeneratorUtil.ConstructorArgs" type="ClassGeneratorUtil.ConstructorArgs">
				<comment>
					<description>Evaluate the arguments (if any) for the constructor specified by
                the constructor index.  Return the ConstructorArgs object which
                contains the actual arguments to the alternate constructor and also the
                index of that constructor for the constructor switch.</description>
					<attribute name="@param">
						<description>consArgs the arguments to the constructor.  These are necessary in
                the evaluation of the alt constructor args.  e.g. Foo(a) { super(a); }</description>
					</attribute>
					<attribute name="@return">
						<description>the ConstructorArgs object containing a constructor selector
                        and evaluated arguments for the alternate constructor</description>
					</attribute>
				</comment>
				<params>
					<param name="superClassName" fulltype="java.lang.String" type="String" />
					<param name="classStaticThis" fulltype="org.gjt.sp.jedit.bsh.This" type="This" />
					<param name="consArgs" comment="the arguments to the constructor.  These are necessary in
                the evaluation of the alt constructor args.  e.g. Foo(a) { super(a); }" fulltype="java.lang.Object[]" type="Object" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="initInstance" fulltype="void" type="void">
				<comment>
					<description>Initialize an instance of the class.
                This method is called from the generated class constructor to evaluate
                the instance initializer and scripted constructor in the instance
                namespace.</description>
				</comment>
				<params>
					<param name="instance" fulltype="java.lang.Object" type="Object" />
					<param name="className" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.ClassGeneratorUtil.ConstructorArgs" type="ClassGeneratorUtil.ConstructorArgs">
			<comment>
				<description>A ConstructorArgs object holds evaluated arguments for a constructor
                call as well as the index of a possible alternate selector to invoke.
                This object is used by the constructor switch.</description>
				<attribute name="@see">
					<description>#generateConstructor( int , String [] , int , ClassWriter )</description>
				</attribute>
			</comment>
			<fields>
				<field static="true" visibility="public" name="DEFAULT" fulltype="org.gjt.sp.jedit.bsh.ClassGeneratorUtil.ConstructorArgs" type="ClassGeneratorUtil.ConstructorArgs">
					<comment>
						<description>A ConstructorArgs which calls the default constructor</description>
					</comment>
				</field>
				<field visibility="public" name="selector" fulltype="int" type="int" />
			</fields>
			<methods>
				<method visibility="public" name="getBoolean" fulltype="boolean" type="boolean" />
				<method visibility="public" name="getByte" fulltype="byte" type="byte" />
				<method visibility="public" name="getChar" fulltype="char" type="char" />
				<method visibility="public" name="getShort" fulltype="short" type="short" />
				<method visibility="public" name="getInt" fulltype="int" type="int" />
				<method visibility="public" name="getLong" fulltype="long" type="long" />
				<method visibility="public" name="getDouble" fulltype="double" type="double" />
				<method visibility="public" name="getFloat" fulltype="float" type="float" />
				<method visibility="public" name="getObject" fulltype="java.lang.Object" type="Object" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.ClassGeneratorUtil.ConstructorArgs" type="ClassGeneratorUtil.ConstructorArgs">
		<comment>
			<description>A ConstructorArgs object holds evaluated arguments for a constructor
                call as well as the index of a possible alternate selector to invoke.
                This object is used by the constructor switch.</description>
			<attribute name="@see">
				<description>#generateConstructor( int , String [] , int , ClassWriter )</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="public" name="DEFAULT" fulltype="org.gjt.sp.jedit.bsh.ClassGeneratorUtil.ConstructorArgs" type="ClassGeneratorUtil.ConstructorArgs">
				<comment>
					<description>A ConstructorArgs which calls the default constructor</description>
				</comment>
			</field>
			<field visibility="public" name="selector" fulltype="int" type="int" />
		</fields>
		<methods>
			<method visibility="public" name="getBoolean" fulltype="boolean" type="boolean" />
			<method visibility="public" name="getByte" fulltype="byte" type="byte" />
			<method visibility="public" name="getChar" fulltype="char" type="char" />
			<method visibility="public" name="getShort" fulltype="short" type="short" />
			<method visibility="public" name="getInt" fulltype="int" type="int" />
			<method visibility="public" name="getLong" fulltype="long" type="long" />
			<method visibility="public" name="getDouble" fulltype="double" type="double" />
			<method visibility="public" name="getFloat" fulltype="float" type="float" />
			<method visibility="public" name="getObject" fulltype="java.lang.Object" type="Object" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.ClassIdentifier" type="ClassIdentifier">
		<methods>
			<constructor visibility="public" name="ClassIdentifier">
				<params>
					<param name="clas" fulltype="java.lang.Class" type="Class" />
				</params>
			</constructor>
			<method visibility="public" name="getTargetClass" fulltype="java.lang.Class" type="Class" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="URLClassLoader" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="java.net.URLClassLoader" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassLoader" type="BshClassLoader">
		<comment>
			<description>One of the things BshClassLoader does is to address a deficiency in
    URLClassLoader that prevents us from specifying individual classes
    via URLs.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="BshClassLoader">
				<comment>
					<attribute name="@param">
						<description>bases URLs JARClassLoader seems to require absolute paths</description>
					</attribute>
				</comment>
				<params>
					<param name="classManager" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
					<param name="bases" comment="URLs JARClassLoader seems to require absolute paths" fulltype="java.net.URL[]" type="URL" />
				</params>
			</constructor>
			<constructor visibility="public" name="BshClassLoader">
				<comment>
					<attribute name="@param">
						<description>bcp URLs JARClassLoader seems to require absolute paths</description>
					</attribute>
				</comment>
				<params>
					<param name="classManager" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
					<param name="bcp" comment="URLs JARClassLoader seems to require absolute paths" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath" type="BshClassPath" />
				</params>
			</constructor>
			<constructor visibility="protected" name="BshClassLoader">
				<comment>
					<description>For use by children</description>
					<attribute name="@param">
						<description>classManager URLs JARClassLoader seems to require absolute paths</description>
					</attribute>
				</comment>
				<params>
					<param name="classManager" comment="URLs JARClassLoader seems to require absolute paths" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
				</params>
			</constructor>
			<method visibility="public" name="addURL" fulltype="void" type="void">
				<params>
					<param name="url" fulltype="java.net.URL" type="URL" />
				</params>
			</method>
			<method visibility="public" name="loadClass" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>This modification allows us to reload classes which are in the
        Java VM user classpath.  We search first rather than delegate to
        the parent classloader (or bootstrap path) first.

        An exception is for BeanShell core classes which are always loaded from
        the same classloader as the interpreter.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="resolve" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="protected" name="findClass" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Find the correct source for the class...

        Try designated loader if any
        Try our URLClassLoader paths if any
        Try base loader if any
        Try system ???</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath" type="BshClassPath">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bsh.classpath.ClassPathListener" type="ClassPathListener" />
			<interface fulltype="org.gjt.sp.jedit.bsh.NameSource" type="NameSource" />
		</implements>
		<comment>
			<description>A BshClassPath encapsulates knowledge about a class path of URLs.
        It can maps all classes the path which may include:
                jar/zip files and base dirs

        A BshClassPath may composite other BshClassPaths as components of its
        path and will reflect changes in those components through its methods
        and listener interface.

        Classpath traversal is done lazily when a call is made to 
                getClassesForPackage() or getClassSource()
        or can be done explicitily through insureInitialized().
        Feedback on mapping progress is provided through the MappingFeedback
        interface.

        Design notes:
        Several times here we traverse ourselves and our component paths to
        produce a composite view of some thing relating to the path.  This would
        be an opportunity for a visitor pattern.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="BshClassPath">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="BshClassPath">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="urls" fulltype="java.net.URL[]" type="URL" />
				</params>
			</constructor>
			<method visibility="public" name="setPath" fulltype="void" type="void">
				<params>
					<param name="urls" fulltype="java.net.URL[]" type="URL" />
				</params>
			</method>
			<method visibility="public" name="addComponent" fulltype="void" type="void">
				<comment>
					<description>Add the specified BshClassPath as a component of our path.
                Changes in the bcp will be reflected through us.</description>
				</comment>
				<params>
					<param name="bcp" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath" type="BshClassPath" />
				</params>
			</method>
			<method visibility="public" name="add" fulltype="void" type="void">
				<params>
					<param name="urls" fulltype="java.net.URL[]" type="URL" />
				</params>
			</method>
			<method visibility="public" name="add" fulltype="void" type="void">
				<params>
					<param name="url" fulltype="java.net.URL" type="URL" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getPathComponents" fulltype="java.net.URL[]" type="URL">
				<comment>
					<description>Get the path components including any component paths.</description>
				</comment>
			</method>
			<method synchronized="true" visibility="public" name="getClassesForPackage" fulltype="java.util.Set" type="Set">
				<comment>
					<description>Return the set of class names in the specified package
                including all component paths.</description>
				</comment>
				<params>
					<param name="pack" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="getClassSource" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" type="BshClassPath.ClassSource">
				<comment>
					<description>Return the source of the specified class which may lie in component 
                path.</description>
				</comment>
				<params>
					<param name="className" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="setClassSource" fulltype="void" type="void">
				<comment>
					<description>Explicitly set a class source.  This is used for generated classes, but
                could potentially be used to allow a user to override which version of
                a class from the classpath is located.</description>
				</comment>
				<params>
					<param name="className" fulltype="java.lang.String" type="String" />
					<param name="cs" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" type="BshClassPath.ClassSource" />
				</params>
			</method>
			<method visibility="public" name="insureInitialized" fulltype="void" type="void">
				<comment>
					<description>If the claspath map is not initialized, do it now.
                If component maps are not do them as well...

                Random note:
                Should this be &quot;insure&quot; or &quot;ensure&quot;.  I know I&apos;ve seen &quot;ensure&quot; used
                in the JDK source.  Here&apos;s what Webster has to say:

                        Main Entry:ensure Pronunciation:in-&apos;shur
                        Function:transitive verb Inflected
                        Form(s):ensured; ensuring : to make sure,
                        certain, or safe : GUARANTEE synonyms ENSURE,
                        INSURE, ASSURE, SECURE mean to make a thing or
                        person sure. ENSURE, INSURE, and ASSURE are
                        interchangeable in many contexts where they
                        indicate the making certain or inevitable of an
                        outcome, but INSURE sometimes stresses the
                        taking of necessary measures beforehand, and
                        ASSURE distinctively implies the removal of
                        doubt and suspense from a person&apos;s mind. SECURE
                        implies action taken to guard against attack or
                        loss.</description>
				</comment>
			</method>
			<method synchronized="true" visibility="protected" name="insureInitialized" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>topPath indicates that this is the top level classpath
                component and it should send the startClassMapping message</description>
					</attribute>
				</comment>
				<params>
					<param name="topPath" comment="indicates that this is the top level classpath
                component and it should send the startClassMapping message" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="getFullPath" fulltype="java.util.List" type="List">
				<comment>
					<description>Get the full path including component paths.
                (component paths listed first, in order)
                Duplicate path components are removed.</description>
				</comment>
			</method>
			<method visibility="public" name="getClassNameByUnqName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Support for super import &quot;*&quot;;
                Get the full name associated with the unqualified name in this 
                classpath.  Returns either the String name or an AmbiguousName object
                encapsulating the various names.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ClassPathException" type="ClassPathException" />
				</exceptions>
			</method>
			<method visibility="public" name="getAllNames" fulltype="java.lang.String[]" type="String" />
			<method visibility="public" name="classPathChanged" fulltype="void" type="void" />
			<method static="true" visibility="public" name="isClassFileName" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="isArchiveFileName" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="canonicalizeClassName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Create a proper class name from a messy thing.
                Turn / or \ into .,  remove leading class and trailing .class

                Note: this makes lots of strings... could be faster.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="splitClassname" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Split class name into package and name</description>
				</comment>
				<params>
					<param name="classname" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="removeInnerClassNames" fulltype="java.util.Collection" type="Collection">
				<comment>
					<description>Return a new collection without any inner class names</description>
				</comment>
				<params>
					<param name="col" fulltype="java.util.Collection" type="Collection" />
				</params>
			</method>
			<method static="true" visibility="public" name="getUserClassPathComponents" fulltype="java.net.URL[]" type="URL">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ClassPathException" type="ClassPathException" />
				</exceptions>
			</method>
			<method visibility="public" name="getPackagesSet" fulltype="java.util.Set" type="Set">
				<comment>
					<description>Get a list of all of the known packages</description>
				</comment>
			</method>
			<method visibility="public" name="addListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="org.gjt.sp.jedit.bsh.classpath.ClassPathListener" type="ClassPathListener" />
				</params>
			</method>
			<method visibility="public" name="removeListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="org.gjt.sp.jedit.bsh.classpath.ClassPathListener" type="ClassPathListener" />
				</params>
			</method>
			<method static="true" visibility="public" name="getUserClassPath" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath" type="BshClassPath">
				<comment>
					<description>A BshClassPath initialized to the user path
                from java.class.path</description>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ClassPathException" type="ClassPathException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getBootClassPath" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath" type="BshClassPath">
				<comment>
					<description>Get the boot path including the lib/rt.jar if possible.</description>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ClassPathException" type="ClassPathException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="main" fulltype="void" type="void">
				<params>
					<param name="args" fulltype="java.lang.String[]" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="addNameSourceListener" fulltype="void" type="void">
				<comment>
					<description>Implements NameSource
                Add a listener who is notified upon changes to names in this space.</description>
				</comment>
				<params>
					<param name="listener" fulltype="org.gjt.sp.jedit.bsh.NameSource.Listener" type="NameSource.Listener" />
				</params>
			</method>
			<method static="true" visibility="public" name="addMappingFeedback" fulltype="void" type="void">
				<params>
					<param name="mf" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.MappingFeedback" type="BshClassPath.MappingFeedback" />
				</params>
			</method>
		</methods>
		<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" type="BshClassPath.ClassSource">
			<methods>
				<constructor visibility="public" name="BshClassPath.ClassSource" />
			</methods>
		</jelclass>
		<jelclass superclass="BshClassPath.ClassSource" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.JarClassSource" type="BshClassPath.JarClassSource">
			<methods>
				<method visibility="public" name="getURL" fulltype="java.net.URL" type="URL" />
				<method visibility="public" name="getCode" fulltype="byte[]" type="byte">
					<params>
						<param name="className" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
		<jelclass superclass="BshClassPath.ClassSource" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.DirClassSource" type="BshClassPath.DirClassSource">
			<methods>
				<method visibility="public" name="getDir" fulltype="java.io.File" type="File" />
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="getCode" fulltype="byte[]" type="byte">
					<params>
						<param name="className" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method static="true" visibility="public" name="readBytesFromFile" fulltype="byte[]" type="byte">
					<params>
						<param name="base" fulltype="java.io.File" type="File" />
						<param name="className" fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="BshClassPath.ClassSource" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.GeneratedClassSource" type="BshClassPath.GeneratedClassSource">
			<methods>
				<method visibility="public" name="getCode" fulltype="byte[]" type="byte">
					<params>
						<param name="className" fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.AmbiguousName" type="BshClassPath.AmbiguousName">
			<methods>
				<constructor visibility="public" name="BshClassPath.AmbiguousName" />
				<method visibility="public" name="add" fulltype="void" type="void">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="get" fulltype="java.util.List" type="List" />
			</methods>
		</jelclass>
		<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" interface="true" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.MappingFeedback" type="BshClassPath.MappingFeedback">
			<methods>
				<method visibility="public" name="startClassMapping" fulltype="void" type="void" />
				<method visibility="public" name="classMapping" fulltype="void" type="void">
					<comment>
						<description>Provide feedback on the progress of mapping the classpath</description>
					</comment>
					<params>
						<param name="msg" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="errorWhileMapping" fulltype="void" type="void">
					<params>
						<param name="msg" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="endClassMapping" fulltype="void" type="void" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" type="BshClassPath.ClassSource">
		<methods>
			<constructor visibility="public" name="BshClassPath.ClassSource" />
		</methods>
	</jelclass>
	<jelclass superclass="BshClassPath.ClassSource" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.JarClassSource" type="BshClassPath.JarClassSource">
		<methods>
			<method visibility="public" name="getURL" fulltype="java.net.URL" type="URL" />
			<method visibility="public" name="getCode" fulltype="byte[]" type="byte">
				<params>
					<param name="className" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="BshClassPath.ClassSource" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.DirClassSource" type="BshClassPath.DirClassSource">
		<methods>
			<method visibility="public" name="getDir" fulltype="java.io.File" type="File" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getCode" fulltype="byte[]" type="byte">
				<params>
					<param name="className" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="readBytesFromFile" fulltype="byte[]" type="byte">
				<params>
					<param name="base" fulltype="java.io.File" type="File" />
					<param name="className" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="BshClassPath.ClassSource" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.GeneratedClassSource" type="BshClassPath.GeneratedClassSource">
		<methods>
			<method visibility="public" name="getCode" fulltype="byte[]" type="byte">
				<params>
					<param name="className" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.AmbiguousName" type="BshClassPath.AmbiguousName">
		<methods>
			<constructor visibility="public" name="BshClassPath.AmbiguousName" />
			<method visibility="public" name="add" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="get" fulltype="java.util.List" type="List" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" interface="true" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.MappingFeedback" type="BshClassPath.MappingFeedback">
		<methods>
			<method visibility="public" name="startClassMapping" fulltype="void" type="void" />
			<method visibility="public" name="classMapping" fulltype="void" type="void">
				<comment>
					<description>Provide feedback on the progress of mapping the classpath</description>
				</comment>
				<params>
					<param name="msg" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="errorWhileMapping" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="endClassMapping" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="BshClassManager" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="org.gjt.sp.jedit.bsh.BshClassManager" fulltype="org.gjt.sp.jedit.bsh.classpath.ClassManagerImpl" type="ClassManagerImpl">
		<comment>
			<description>&lt;pre&gt;
        Manage all classloading in BeanShell.
        Allows classpath extension and class file reloading.

        This class holds the implementation of the BshClassManager so that it
        can be separated from the core package.

        This class currently relies on 1.2 for BshClassLoader and weak references.
        Is there a workaround for weak refs?  If so we could make this work
        with 1.1 by supplying our own classloader code...

        See &quot;http://www.beanshell.org/manual/classloading.html&quot; for details
        on the bsh classloader architecture.

        Bsh has a multi-tiered class loading architecture.  No class loader is
        created unless/until a class is generated, the classpath is modified, 
        or a class is reloaded.

        Note: we may need some synchronization in here

        Note on jdk1.2 dependency:

        We are forced to use weak references here to accomodate all of the 
        fleeting namespace listeners.  (NameSpaces must be informed if the class 
        space changes so that they can un-cache names).  I had the interesting 
        thought that a way around this would be to implement BeanShell&apos;s own 
        garbage collector...  Then I came to my senses and said - screw it, 
        class re-loading will require 1.2.

        ---------------------

        Classloading precedence:

        in-script evaluated class (scripted class)
        in-script added / modified classpath

        optionally, external classloader
        optionally, thread context classloader

        plain Class.forName()
        source class (.java file in classpath)

        &lt;/pre&gt;</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ClassManagerImpl">
				<comment>
					<description>Used by BshClassManager singleton constructor</description>
				</comment>
			</constructor>
			<method visibility="public" name="classForName" returncomment="the class or null" fulltype="java.lang.Class" type="Class">
				<comment>
					<attribute name="@return">
						<description>the class or null</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getResource" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Get a resource URL using the BeanShell classpath</description>
					<attribute name="@param">
						<description>path should be an absolute path</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="should be an absolute path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getResourceAsStream" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Get a resource stream using the BeanShell classpath</description>
					<attribute name="@param">
						<description>path should be an absolute path</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="should be an absolute path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="addClassPath" fulltype="void" type="void">
				<params>
					<param name="path" fulltype="java.net.URL" type="URL" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="reset" fulltype="void" type="void">
				<comment>
					<description>Clear all classloading behavior and class caches and reset to 
                initial state.</description>
				</comment>
			</method>
			<method visibility="public" name="setClassPath" fulltype="void" type="void">
				<comment>
					<description>Set a new base classpath and create a new base classloader.
                This means all types change.</description>
				</comment>
				<params>
					<param name="cp" fulltype="java.net.URL[]" type="URL" />
				</params>
			</method>
			<method visibility="public" name="reloadAllClasses" fulltype="void" type="void">
				<comment>
					<description>Overlay the entire path with a new class loader.
                Set the base path to the user path + base path.

                No point in including the boot class path (can&apos;t reload thos).</description>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ClassPathException" type="ClassPathException" />
				</exceptions>
			</method>
			<method visibility="public" name="reloadClasses" fulltype="void" type="void">
				<comment>
					<description>Reloading classes means creating a new classloader and using it
                whenever we are asked for classes in the appropriate space.
                For this we use a DiscreteFilesClassLoader</description>
				</comment>
				<params>
					<param name="classNames" fulltype="java.lang.String[]" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ClassPathException" type="ClassPathException" />
				</exceptions>
			</method>
			<method visibility="public" name="reloadPackage" fulltype="void" type="void">
				<comment>
					<description>Reload all classes in the specified package: e.g. &quot;com.sun.tools&quot;

                The special package name &quot;&lt;unpackaged&gt;&quot; can be used to refer 
                to unpackaged classes.</description>
				</comment>
				<params>
					<param name="pack" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ClassPathException" type="ClassPathException" />
				</exceptions>
			</method>
			<method visibility="public" name="getClassPath" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath" type="BshClassPath">
				<comment>
					<description>Get the full blown classpath.</description>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ClassPathException" type="ClassPathException" />
				</exceptions>
			</method>
			<method visibility="public" name="doSuperImport" fulltype="void" type="void">
				<comment>
					<description>Support for &quot;import *;&quot;
                Hide details in here as opposed to NameSpace.</description>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="protected" name="hasSuperImport" fulltype="boolean" type="boolean" />
			<method visibility="public" name="getClassNameByUnqName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Return the name or null if none is found,
                Throw an ClassPathException containing detail if name is ambigous.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ClassPathException" type="ClassPathException" />
				</exceptions>
			</method>
			<method visibility="public" name="addListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="org.gjt.sp.jedit.bsh.BshClassManager.Listener" type="BshClassManager.Listener" />
				</params>
			</method>
			<method visibility="public" name="removeListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="org.gjt.sp.jedit.bsh.BshClassManager.Listener" type="BshClassManager.Listener" />
				</params>
			</method>
			<method visibility="public" name="getBaseLoader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
			<method visibility="public" name="defineClass" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Get the BeanShell classloader.
        public ClassLoader getClassLoader() {
        }</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="code" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method visibility="protected" name="classLoaderChanged" fulltype="void" type="void">
				<comment>
					<description>Clear global class cache and notify namespaces to clear their 
                class caches.

                The listener list is implemented with weak references so that we 
                will not keep every namespace in existence forever.</description>
				</comment>
			</method>
			<method visibility="public" name="dump" fulltype="void" type="void">
				<params>
					<param name="i" fulltype="java.io.PrintWriter" type="PrintWriter" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" interface="true" fulltype="org.gjt.sp.jedit.bsh.classpath.ClassPathListener" type="ClassPathListener">
		<methods>
			<method visibility="public" name="classPathChanged" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="BshClassLoader" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" superclassfulltype="org.gjt.sp.jedit.bsh.classpath.BshClassLoader" fulltype="org.gjt.sp.jedit.bsh.classpath.DiscreteFilesClassLoader" type="DiscreteFilesClassLoader">
		<comment>
			<description>A classloader which can load one or more classes from specified sources.
        Because the classes are loaded via a single classloader they change as a
        group and any versioning cross dependencies can be managed.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="DiscreteFilesClassLoader">
				<params>
					<param name="classManager" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
					<param name="map" fulltype="org.gjt.sp.jedit.bsh.classpath.DiscreteFilesClassLoader.ClassSourceMap" type="DiscreteFilesClassLoader.ClassSourceMap" />
				</params>
			</constructor>
			<method visibility="public" name="findClass" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
		<jelclass superclass="HashMap" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" serializable="true" superclassfulltype="java.util.HashMap" fulltype="org.gjt.sp.jedit.bsh.classpath.DiscreteFilesClassLoader.ClassSourceMap" type="DiscreteFilesClassLoader.ClassSourceMap">
			<methods>
				<constructor visibility="public" name="DiscreteFilesClassLoader.ClassSourceMap" />
				<method visibility="public" name="put" fulltype="void" type="void">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
						<param name="source" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" type="BshClassPath.ClassSource" />
					</params>
				</method>
				<method visibility="public" name="get" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" type="BshClassPath.ClassSource">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="HashMap" visibility="public" package="org.gjt.sp.jedit.bsh.classpath" serializable="true" superclassfulltype="java.util.HashMap" fulltype="org.gjt.sp.jedit.bsh.classpath.DiscreteFilesClassLoader.ClassSourceMap" type="DiscreteFilesClassLoader.ClassSourceMap">
		<methods>
			<constructor visibility="public" name="DiscreteFilesClassLoader.ClassSourceMap" />
			<method visibility="public" name="put" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="source" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" type="BshClassPath.ClassSource" />
				</params>
			</method>
			<method visibility="public" name="get" fulltype="org.gjt.sp.jedit.bsh.classpath.BshClassPath.ClassSource" type="BshClassPath.ClassSource">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="UtilEvalError" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.UtilEvalError" fulltype="org.gjt.sp.jedit.bsh.ClassPathException" type="ClassPathException">
		<methods>
			<constructor visibility="public" name="ClassPathException">
				<params>
					<param name="msg" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.collection" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.collection.CollectionIterator" type="CollectionIterator">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bsh.BshIterator" type="BshIterator" />
		</implements>
		<comment>
			<description>This is the implementation of:
	BshIterator - a dynamically loaded extension that supports the collections
	API supported by JDK1.2 and greater.</description>
			<attribute name="@author">
				<description>Daniel Leuck</description>
			</attribute>
			<attribute name="@author">
				<description>Pat Niemeyer</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="CollectionIterator">
				<comment>
					<description>Construct a basic CollectionIterator</description>
					<attribute name="@param">
						<description>iterateOverMe The object over which we are iterating</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.IllegalArgumentException If the argument is not a
 supported (i.e. iterable) type.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException If the argument is null</description>
					</attribute>
				</comment>
				<params>
					<param name="iterateOverMe" comment="The object over which we are iterating" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method visibility="protected" name="createIterator" returncomment="an Iterator" fulltype="java.util.Iterator" type="Iterator">
				<comment>
					<description>Create an iterator over the given object</description>
					<attribute name="@param">
						<description>iterateOverMe Object of type Iterator, Collection, or types
 supported by CollectionManager.BasicBshIterator</description>
					</attribute>
					<attribute name="@return">
						<description>an Iterator</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.IllegalArgumentException If the argument is not a
 supported (i.e. iterable) type.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException If the argument is null</description>
					</attribute>
				</comment>
				<params>
					<param name="iterateOverMe" comment="Object of type Iterator, Collection, or types
 supported by CollectionManager.BasicBshIterator" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="next" returncomment="The next object" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Fetch the next object in the iteration</description>
					<attribute name="@return">
						<description>The next object</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hasNext" returncomment="The next object" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if and only if there are more objects available
 via the &lt;code&gt;next()&lt;/code&gt; method</description>
					<attribute name="@return">
						<description>The next object</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="CollectionManager" visibility="public" package="org.gjt.sp.jedit.bsh.collection" superclassfulltype="org.gjt.sp.jedit.bsh.CollectionManager" fulltype="org.gjt.sp.jedit.bsh.collection.CollectionManagerImpl" type="CollectionManagerImpl">
		<comment>
			<description>Dynamically loaded extension supporting post 1.1 collections iterator.</description>
			<attribute name="@author">
				<description>Pat Niemeyer</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="CollectionManagerImpl" />
			<method visibility="public" name="getBshIterator" fulltype="org.gjt.sp.jedit.bsh.BshIterator" type="BshIterator">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</method>
			<method visibility="public" name="isMap" fulltype="boolean" type="boolean">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getFromMap" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="map" fulltype="java.lang.Object" type="Object" />
					<param name="key" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="putInMap" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="map" fulltype="java.lang.Object" type="Object" />
					<param name="key" fulltype="java.lang.Object" type="Object" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.CollectionManager" type="CollectionManager">
		<comment>
			<description>The default CollectionManager (which remains Java 1.1 compatible)
    supports iteration over objects of type:
    Enumeration, Vector, String, StringBuffer and array.
    The dynamically loaded CollectionManagerImpl supports additional types when
    it is present.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="CollectionManager" />
			<method static="true" synchronized="true" visibility="public" name="getCollectionManager" fulltype="org.gjt.sp.jedit.bsh.CollectionManager" type="CollectionManager" />
			<method visibility="public" name="isBshIterable" fulltype="boolean" type="boolean">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getBshIterator" fulltype="org.gjt.sp.jedit.bsh.BshIterator" type="BshIterator">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</method>
			<method visibility="public" name="isMap" fulltype="boolean" type="boolean">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getFromMap" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="map" fulltype="java.lang.Object" type="Object" />
					<param name="key" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="putInMap" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="map" fulltype="java.lang.Object" type="Object" />
					<param name="key" fulltype="java.lang.Object" type="Object" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.CollectionManager.BasicBshIterator" type="CollectionManager.BasicBshIterator">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.bsh.BshIterator" type="BshIterator" />
			</implements>
			<comment>
				<description>An implementation that works with JDK 1.1</description>
			</comment>
			<methods>
				<constructor visibility="public" name="CollectionManager.BasicBshIterator">
					<comment>
						<description>Construct a basic BasicBshIterator</description>
						<attribute name="@param">
							<description>iterateOverMe The object over which we are iterating</description>
						</attribute>
						<attribute name="@throws">
							<description>java.lang.IllegalArgumentException If the argument is not a
 supported (i.e. iterable) type.</description>
						</attribute>
						<attribute name="@throws">
							<description>java.lang.NullPointerException If the argument is null</description>
						</attribute>
					</comment>
					<params>
						<param name="iterateOverMe" comment="The object over which we are iterating" fulltype="java.lang.Object" type="Object" />
					</params>
				</constructor>
				<method visibility="protected" name="createEnumeration" returncomment="an enumeration" fulltype="java.util.Enumeration" type="Enumeration">
					<comment>
						<description>Create an enumeration over the given object</description>
						<attribute name="@param">
							<description>iterateOverMe Object of type Enumeration, Vector, String,
                      StringBuffer or an array</description>
						</attribute>
						<attribute name="@return">
							<description>an enumeration</description>
						</attribute>
						<attribute name="@throws">
							<description>java.lang.IllegalArgumentException If the argument is not a
 supported (i.e. iterable) type.</description>
						</attribute>
						<attribute name="@throws">
							<description>java.lang.NullPointerException If the argument is null</description>
						</attribute>
					</comment>
					<params>
						<param name="iterateOverMe" comment="Object of type Enumeration, Vector, String,
                      StringBuffer or an array" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="next" returncomment="The next object" fulltype="java.lang.Object" type="Object">
					<comment>
						<description>Fetch the next object in the iteration</description>
						<attribute name="@return">
							<description>The next object</description>
						</attribute>
					</comment>
				</method>
				<method visibility="public" name="hasNext" returncomment="The next object" fulltype="boolean" type="boolean">
					<comment>
						<description>Returns true if and only if there are more objects available
 via the &lt;code&gt;next()&lt;/code&gt; method</description>
						<attribute name="@return">
							<description>The next object</description>
						</attribute>
					</comment>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.CollectionManager.BasicBshIterator" type="CollectionManager.BasicBshIterator">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bsh.BshIterator" type="BshIterator" />
		</implements>
		<comment>
			<description>An implementation that works with JDK 1.1</description>
		</comment>
		<methods>
			<constructor visibility="public" name="CollectionManager.BasicBshIterator">
				<comment>
					<description>Construct a basic BasicBshIterator</description>
					<attribute name="@param">
						<description>iterateOverMe The object over which we are iterating</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.IllegalArgumentException If the argument is not a
 supported (i.e. iterable) type.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException If the argument is null</description>
					</attribute>
				</comment>
				<params>
					<param name="iterateOverMe" comment="The object over which we are iterating" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method visibility="protected" name="createEnumeration" returncomment="an enumeration" fulltype="java.util.Enumeration" type="Enumeration">
				<comment>
					<description>Create an enumeration over the given object</description>
					<attribute name="@param">
						<description>iterateOverMe Object of type Enumeration, Vector, String,
                      StringBuffer or an array</description>
					</attribute>
					<attribute name="@return">
						<description>an enumeration</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.IllegalArgumentException If the argument is not a
 supported (i.e. iterable) type.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException If the argument is null</description>
					</attribute>
				</comment>
				<params>
					<param name="iterateOverMe" comment="Object of type Enumeration, Vector, String,
                      StringBuffer or an array" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="next" returncomment="The next object" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Fetch the next object in the iteration</description>
					<attribute name="@return">
						<description>The next object</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hasNext" returncomment="The next object" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if and only if there are more objects available
 via the &lt;code&gt;next()&lt;/code&gt; method</description>
					<attribute name="@return">
						<description>The next object</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.commands" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.commands.dir" type="dir">
		<methods>
			<constructor visibility="public" name="dir" />
			<method static="true" visibility="public" name="usage" fulltype="java.lang.String" type="String" />
			<method static="true" visibility="public" name="invoke" fulltype="void" type="void">
				<comment>
					<description>Implement dir() command.</description>
				</comment>
				<params>
					<param name="env" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
				</params>
			</method>
			<method static="true" visibility="public" name="invoke" fulltype="void" type="void">
				<comment>
					<description>Implement dir( String directory ) command.</description>
				</comment>
				<params>
					<param name="env" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
					<param name="dir" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh" interface="true" fulltype="org.gjt.sp.jedit.bsh.ConsoleInterface" type="ConsoleInterface">
		<comment>
			<description>The capabilities of a minimal console for BeanShell.
    Stream I/O and optimized print for output.

    A simple console may ignore some of these or map them to trivial
    implementations.  e.g. print() with color can be mapped to plain text.</description>
		</comment>
		<methods>
			<method visibility="public" name="getIn" fulltype="java.io.Reader" type="Reader" />
			<method visibility="public" name="getOut" fulltype="java.io.PrintStream" type="PrintStream" />
			<method visibility="public" name="getErr" fulltype="java.io.PrintStream" type="PrintStream" />
			<method visibility="public" name="println" fulltype="void" type="void">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="print" fulltype="void" type="void">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="error" fulltype="void" type="void">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="BshMethod" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.BshMethod" fulltype="org.gjt.sp.jedit.bsh.DelayedEvalBshMethod" type="DelayedEvalBshMethod">
		<methods>
			<method visibility="public" name="getReturnTypeDescriptor" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getReturnType" fulltype="java.lang.Class" type="Class" />
			<method visibility="public" name="getParamTypeDescriptors" fulltype="java.lang.String[]" type="String" />
			<method visibility="public" name="getParameterTypes" fulltype="java.lang.Class[]" type="Class" />
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Exception" fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError">
		<comment>
			<description>EvalError indicates that we cannot continue evaluating the script
        or the script has thrown an exception.

        EvalError may be thrown for a script syntax error, an evaluation 
        error such as referring to an undefined variable, an internal error.
        &lt;p&gt;</description>
			<attribute name="@see">
				<description>TargetError</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EvalError">
				<params>
					<param name="s" fulltype="java.lang.String" type="String" />
					<param name="node" fulltype="org.gjt.sp.jedit.bsh.SimpleNode" type="SimpleNode" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
				</params>
			</constructor>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Print the error with line number and stack trace.</description>
				</comment>
			</method>
			<method visibility="public" name="reThrow" fulltype="void" type="void">
				<comment>
					<description>Re-throw the error, prepending the specified message.</description>
				</comment>
				<params>
					<param name="msg" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getErrorText" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getErrorLineNumber" fulltype="int" type="int" />
			<method visibility="public" name="getErrorSourceFile" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getScriptStackTrace" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getMessage" fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@see">
						<description>#toString() for a full display of the information</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setMessage" fulltype="void" type="void">
				<params>
					<param name="s" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="prependMessage" fulltype="void" type="void">
				<comment>
					<description>Prepend the message if it is non-null.</description>
				</comment>
				<params>
					<param name="s" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="NameSpace" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.NameSpace" fulltype="org.gjt.sp.jedit.bsh.ExternalNameSpace" type="ExternalNameSpace">
		<comment>
			<description>A namespace which maintains an external map of values held in variables in
        its scope.  This mechanism provides a standard collections based interface
        to the namespace as well as a convenient way to export and view values of
        the namespace without the ordinary BeanShell wrappers.   
        &lt;/p&gt;

        Variables are maintained internally in the normal fashion to support
        meta-information (such as variable type and visibility modifiers), but
        exported and imported in a synchronized way.  Variables are exported each
        time they are written by BeanShell.  Imported variables from the map appear
        in the BeanShell namespace as untyped variables with no modifiers and
        shadow any previously defined variables in the scope. 
        &lt;p/&gt;

        Note: this class is inherentely dependent on Java 1.2, however it is not
        used directly by the core as other than type NameSpace, so no dependency is
        introduced.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ExternalNameSpace" />
			<constructor visibility="public" name="ExternalNameSpace">
				<params>
					<param name="parent" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="externalMap" fulltype="java.util.Map" type="Map" />
				</params>
			</constructor>
			<method visibility="public" name="getMap" fulltype="java.util.Map" type="Map">
				<comment>
					<description>Get the map view of this namespace.</description>
				</comment>
			</method>
			<method visibility="public" name="setMap" fulltype="void" type="void">
				<comment>
					<description>Set the external Map which to which this namespace synchronizes.
                The previous external map is detached from this namespace.  Previous
                map values are retained in the external map, but are removed from the
                BeanShell namespace.</description>
				</comment>
				<params>
					<param name="map" fulltype="java.util.Map" type="Map" />
				</params>
			</method>
			<method visibility="public" name="unsetVariable" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getVariableNames" fulltype="java.lang.String[]" type="String" />
			<method visibility="protected" name="getVariableImpl" fulltype="org.gjt.sp.jedit.bsh.Variable" type="Variable">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="recurse" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getDeclaredVariables" fulltype="org.gjt.sp.jedit.bsh.Variable[]" type="Variable" />
			<method visibility="public" name="setTypedVariable" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="type" fulltype="java.lang.Class" type="Class" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
					<param name="modifiers" fulltype="org.gjt.sp.jedit.bsh.Modifiers" type="Modifiers" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="setMethod" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="method" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getMethod" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="sig" fulltype="java.lang.Class[]" type="Class" />
					<param name="declaredOnly" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="protected" name="getAllNamesAux" fulltype="void" type="void">
				<params>
					<param name="vec" fulltype="java.util.Vector" type="Vector" />
				</params>
			</method>
			<method visibility="public" name="clear" fulltype="void" type="void">
				<comment>
					<description>Clear all variables, methods, and imports from this namespace and clear
                all values from the external map (via Map clear()).</description>
				</comment>
			</method>
			<method visibility="protected" name="putExternalMap" fulltype="void" type="void">
				<comment>
					<description>Place an unwrapped value in the external map.
                BeanShell primitive types are represented by their object wrappers, so
                it is not possible to differentiate between wrapper types and primitive
                types via the external Map.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter">
		<implements>
			<interface fulltype="java.lang.Runnable" type="Runnable" />
			<interface fulltype="org.gjt.sp.jedit.bsh.ConsoleInterface" type="ConsoleInterface" />
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>The BeanShell script interpreter.

        An instance of Interpreter can be used to source scripts and evaluate 
        statements or expressions.  
        &lt;p&gt;
        Here are some examples:

        &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                Interpeter bsh = new Interpreter();

                // Evaluate statements and expressions
                bsh.eval(&quot;foo=Math.sin(0.5)&quot;);
                bsh.eval(&quot;bar=foo*5; bar=Math.cos(bar);&quot;);
                bsh.eval(&quot;for(i=0; i&lt;10; i++) { print(\&quot;hello\&quot;); }&quot;);
                // same as above using java syntax and apis only
                bsh.eval(&quot;for(int i=0; i&lt;10; i++) { System.out.println(\&quot;hello\&quot;); }&quot;);

                // Source from files or streams
                bsh.source(&quot;myscript.bsh&quot;);  // or bsh.eval(&quot;source(\&quot;myscript.bsh\&quot;)&quot;);

                // Use set() and get() to pass objects in and out of variables
                bsh.set( &quot;date&quot;, new Date() );
                Date date = (Date)bsh.get( &quot;date&quot; );
                // This would also work:
                Date date = (Date)bsh.eval( &quot;date&quot; );

                bsh.eval(&quot;year = date.getYear()&quot;);
                Integer year = (Integer)bsh.get(&quot;year&quot;);  // primitives use wrappers

                // With Java1.3+ scripts can implement arbitrary interfaces...
                // Script an awt event handler (or source it from a file, more likely)
                bsh.eval( &quot;actionPerformed( e ) { print( e ); }&quot;);
                // Get a reference to the script object (implementing the interface)
                ActionListener scriptedHandler = 
                        (ActionListener)bsh.eval(&quot;return (ActionListener)this&quot;);
                // Use the scripted event handler normally...
                new JButton.addActionListener( script );
        &lt;/pre&gt;&lt;/blockquote&gt;
        &lt;p&gt;

        In the above examples we showed a single interpreter instance, however 
        you may wish to use many instances, depending on the application and how
        you structure your scripts.  Interpreter instances are very light weight
        to create, however if you are going to execute the same script repeatedly
        and require maximum performance you should consider scripting the code as 
        a method and invoking the scripted method each time on the same interpreter
        instance (using eval()). 
        &lt;p&gt;

        See the BeanShell User&apos;s Manual for more information.</description>
		</comment>
		<fields>
			<field final="true" static="true" const="2.0b4-jedit" visibility="public" name="VERSION" constexpr="&quot;2.0b4-jedit&quot;" fulltype="java.lang.String" type="String" />
			<field static="true" visibility="public" name="DEBUG" fulltype="boolean" type="boolean" />
			<field static="true" visibility="public" name="TRACE" fulltype="boolean" type="boolean" />
			<field static="true" visibility="public" name="LOCALSCOPING" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="evalOnly" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="interactive" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="public" name="Interpreter">
				<comment>
					<description>The main constructor.
                All constructors should now pass through here.</description>
					<attribute name="@param">
						<description>namespace If namespace is non-null then this interpreter&apos;s
                root namespace will be set to the one provided.  If it is null a new
                one will be created for it.</description>
					</attribute>
					<attribute name="@param">
						<description>parent The parent interpreter if this interpreter is a child
                        of another.  May be null.  Children share a BshClassManager with
                        their parent instance.</description>
					</attribute>
					<attribute name="@param">
						<description>sourceFileInfo An informative string holding the filename
                or other description of the source from which this interpreter is
                reading... used for debugging.  May be null.</description>
					</attribute>
				</comment>
				<params>
					<param name="in" fulltype="java.io.Reader" type="Reader" />
					<param name="out" fulltype="java.io.PrintStream" type="PrintStream" />
					<param name="err" fulltype="java.io.PrintStream" type="PrintStream" />
					<param name="interactive" fulltype="boolean" type="boolean" />
					<param name="namespace" comment="If namespace is non-null then this interpreter&apos;s
                root namespace will be set to the one provided.  If it is null a new
                one will be created for it." fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="parent" comment="The parent interpreter if this interpreter is a child
                        of another.  May be null.  Children share a BshClassManager with
                        their parent instance." fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
					<param name="sourceFileInfo" comment="An informative string holding the filename
                or other description of the source from which this interpreter is
                reading... used for debugging.  May be null." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Interpreter">
				<params>
					<param name="in" fulltype="java.io.Reader" type="Reader" />
					<param name="out" fulltype="java.io.PrintStream" type="PrintStream" />
					<param name="err" fulltype="java.io.PrintStream" type="PrintStream" />
					<param name="interactive" fulltype="boolean" type="boolean" />
					<param name="namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</constructor>
			<constructor visibility="public" name="Interpreter">
				<params>
					<param name="in" fulltype="java.io.Reader" type="Reader" />
					<param name="out" fulltype="java.io.PrintStream" type="PrintStream" />
					<param name="err" fulltype="java.io.PrintStream" type="PrintStream" />
					<param name="interactive" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="Interpreter">
				<comment>
					<description>Construct a new interactive interpreter attached to the specified
                console using the specified parent namespace.</description>
				</comment>
				<params>
					<param name="console" fulltype="org.gjt.sp.jedit.bsh.ConsoleInterface" type="ConsoleInterface" />
					<param name="globalNameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</constructor>
			<constructor visibility="public" name="Interpreter">
				<comment>
					<description>Construct a new interactive interpreter attached to the specified
                console.</description>
				</comment>
				<params>
					<param name="console" fulltype="org.gjt.sp.jedit.bsh.ConsoleInterface" type="ConsoleInterface" />
				</params>
			</constructor>
			<constructor visibility="public" name="Interpreter">
				<comment>
					<description>Create an interpreter for evaluation only.</description>
				</comment>
			</constructor>
			<method visibility="public" name="setConsole" fulltype="void" type="void">
				<comment>
					<description>Attach a console
                Note: this method is incomplete.</description>
				</comment>
				<params>
					<param name="console" fulltype="org.gjt.sp.jedit.bsh.ConsoleInterface" type="ConsoleInterface" />
				</params>
			</method>
			<method visibility="public" name="setNameSpace" fulltype="void" type="void">
				<comment>
					<description>Set the global namespace for this interpreter.
                &lt;p&gt;

                Note: This is here for completeness.  If you&apos;re using this a lot
                it may be an indication that you are doing more work than you have
                to.  For example, caching the interpreter instance rather than the
                namespace should not add a significant overhead.  No state other
                than the debug status is stored in the interpreter.
                &lt;p&gt;

                All features of the namespace can also be accessed using the
                interpreter via eval() and the script variable &apos;this.namespace&apos;
                (or global.namespace as necessary).</description>
				</comment>
				<params>
					<param name="globalNameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</method>
			<method visibility="public" name="getNameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace">
				<comment>
					<description>Get the global namespace of this interpreter.
                &lt;p&gt;

                Note: This is here for completeness.  If you&apos;re using this a lot
                it may be an indication that you are doing more work than you have
                to.  For example, caching the interpreter instance rather than the
                namespace should not add a significant overhead.  No state other than
                the debug status is stored in the interpreter.
                &lt;p&gt;

                All features of the namespace can also be accessed using the
                interpreter via eval() and the script variable &apos;this.namespace&apos;
                (or global.namespace as necessary).</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="main" fulltype="void" type="void">
				<comment>
					<description>Run the text only interpreter on the command line or specify a file.</description>
				</comment>
				<params>
					<param name="args" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="invokeMain" fulltype="void" type="void">
				<params>
					<param name="clas" fulltype="java.lang.Class" type="Class" />
					<param name="args" fulltype="java.lang.String[]" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method visibility="public" name="run" fulltype="void" type="void">
				<comment>
					<description>Run interactively.  (printing prompts, etc.)</description>
				</comment>
			</method>
			<method visibility="public" name="source" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Read text from fileName and eval it.</description>
				</comment>
				<params>
					<param name="filename" fulltype="java.lang.String" type="String" />
					<param name="nameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
				<exceptions>
					<exception fulltype="java.io.FileNotFoundException" type="FileNotFoundException" />
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="source" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Read text from fileName and eval it.
                Convenience method.  Use the global namespace.</description>
				</comment>
				<params>
					<param name="filename" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.io.FileNotFoundException" type="FileNotFoundException" />
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="eval" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Spawn a non-interactive local interpreter to evaluate text in the
                specified namespace.

                Return value is the evaluated object (or corresponding primitive
                wrapper).</description>
					<attribute name="@param">
						<description>sourceFileInfo is for information purposes only.  It is used to
                display error messages (and in the future may be made available to
                the script).</description>
					</attribute>
					<attribute name="@throws">
						<description>EvalError on script problems</description>
					</attribute>
					<attribute name="@throws">
						<description>TargetError on unhandled exceptions from the script</description>
					</attribute>
				</comment>
				<params>
					<param name="in" fulltype="java.io.Reader" type="Reader" />
					<param name="nameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="sourceFileInfo" comment="is for information purposes only.  It is used to
                display error messages (and in the future may be made available to
                the script)." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="on script problems" fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="eval" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Evaluate the inputstream in this interpreter&apos;s global namespace.</description>
				</comment>
				<params>
					<param name="in" fulltype="java.io.Reader" type="Reader" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="eval" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Evaluate the string in this interpreter&apos;s global namespace.</description>
				</comment>
				<params>
					<param name="statements" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="eval" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Evaluate the string in the specified namespace.</description>
				</comment>
				<params>
					<param name="statements" fulltype="java.lang.String" type="String" />
					<param name="nameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="error" fulltype="void" type="void">
				<comment>
					<description>Print an error message in a standard format on the output stream
                associated with this interpreter. On the GUI console this will appear
                in red, etc.</description>
				</comment>
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getIn" fulltype="java.io.Reader" type="Reader">
				<comment>
					<description>Get the input stream associated with this interpreter.
                This may be be stdin or the GUI console.</description>
				</comment>
			</method>
			<method visibility="public" name="getOut" fulltype="java.io.PrintStream" type="PrintStream">
				<comment>
					<description>Get the outptut stream associated with this interpreter.
                This may be be stdout or the GUI console.</description>
				</comment>
			</method>
			<method visibility="public" name="getErr" fulltype="java.io.PrintStream" type="PrintStream">
				<comment>
					<description>Get the error output stream associated with this interpreter.
                This may be be stderr or the GUI console.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="println" fulltype="void" type="void">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method final="true" visibility="public" name="print" fulltype="void" type="void">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method final="true" static="true" visibility="public" name="debug" fulltype="void" type="void">
				<comment>
					<description>Print a debug message on debug stream associated with this interpreter
                only if debugging is turned on.</description>
				</comment>
				<params>
					<param name="s" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="get" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Get the value of the name.
                name may be any value. e.g. a variable or field</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="set" fulltype="void" type="void">
				<comment>
					<description>Assign the value to the name.
                name may evaluate to anything assignable. e.g. a variable or field.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="set" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="long" type="long" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="set" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="set" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="double" type="double" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="set" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="float" type="float" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="set" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="unset" fulltype="void" type="void">
				<comment>
					<description>Unassign the variable name.
                Name should evaluate to a variable.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getInterface" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Get a reference to the interpreter (global namespace), cast
                to the specified interface type.  Assuming the appropriate
                methods of the interface are defined in the interpreter, then you may
                use this interface from Java, just like any other Java object.
                &lt;p&gt;

                For example:
                &lt;pre&gt;
                        Interpreter interpreter = new Interpreter();
                        // define a method called run()
                        interpreter.eval(&quot;run() { ... }&quot;);

                        // Fetch a reference to the interpreter as a Runnable
                        Runnable runnable =
                                (Runnable)interpreter.getInterface( Runnable.class );
                &lt;/pre&gt;
                &lt;p&gt;

                Note that the interpreter does *not* require that any or all of the
                methods of the interface be defined at the time the interface is
                generated.  However if you attempt to invoke one that is not defined
                you will get a runtime exception.
                &lt;p&gt;

                Note also that this convenience method has exactly the same effect as
                evaluating the script:
                &lt;pre&gt;
                        (Type)this;
                &lt;/pre&gt;
                &lt;p&gt;

                For example, the following is identical to the previous example:
                &lt;p&gt;

                &lt;pre&gt;
                        // Fetch a reference to the interpreter as a Runnable
                        Runnable runnable =
                                (Runnable)interpreter.eval( &quot;(Runnable)this&quot; );
                &lt;/pre&gt;
                &lt;p&gt;

                &lt;em&gt;Version requirement&lt;/em&gt; Although standard Java interface types
                are always available, to be used with arbitrary interfaces this
                feature requires that you are using Java 1.3 or greater.
                &lt;p&gt;</description>
					<attribute name="@throws">
						<description>EvalError if the interface cannot be generated because the
                version of Java does not support the proxy mechanism.</description>
					</attribute>
				</comment>
				<params>
					<param name="interf" fulltype="java.lang.Class" type="Class" />
				</params>
				<exceptions>
					<exception comment="if the interface cannot be generated because the
                version of Java does not support the proxy mechanism." fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="pathToFile" fulltype="java.io.File" type="File">
				<comment>
					<description>Localize a path to the file name based on the bsh.cwd interpreter
                working directory.</description>
				</comment>
				<params>
					<param name="fileName" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="redirectOutputToFile" fulltype="void" type="void">
				<params>
					<param name="filename" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setClassLoader" fulltype="void" type="void">
				<comment>
					<description>Set an external class loader to be used as the base classloader
                for BeanShell.  The base classloader is used for all classloading
                unless/until the addClasspath()/setClasspath()/reloadClasses()
                commands are called to modify the interpreter&apos;s classpath.  At that
                time the new paths /updated paths are added on top of the base
                classloader.
                &lt;p&gt;

                BeanShell will use this at the same point it would otherwise use the
                plain Class.forName().
                i.e. if no explicit classpath management is done from the script
                (addClassPath(), setClassPath(), reloadClasses()) then BeanShell will
                only use the supplied classloader.  If additional classpath management
                is done then BeanShell will perform that in addition to the supplied
                external classloader.
                However BeanShell is not currently able to reload
                classes supplied through the external classloader.
                &lt;p&gt;</description>
					<attribute name="@see">
						<description>BshClassManager#setClassLoader( ClassLoader )</description>
					</attribute>
				</comment>
				<params>
					<param name="externalCL" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</method>
			<method visibility="public" name="getClassManager" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager">
				<comment>
					<description>Get the class manager associated with this interpreter
                (the BshClassManager of this interpreter&apos;s global namespace).
                This is primarily a convenience method.</description>
				</comment>
			</method>
			<method visibility="public" name="setStrictJava" fulltype="void" type="void">
				<comment>
					<description>Set strict Java mode on or off.
                This mode attempts to make BeanShell syntax behave as Java
                syntax, eliminating conveniences like loose variables, etc.
                When enabled, variables are required to be declared or initialized
                before use and method arguments are reqired to have types.
                &lt;p&gt;

                This mode will become more strict in a future release when
                classes are interpreted and there is an alternative to scripting
                objects as method closures.</description>
				</comment>
				<params>
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getStrictJava" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@see">
						<description>#setStrictJava( boolean )</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSourceFileInfo" fulltype="java.lang.String" type="String">
				<comment>
					<description>Specify the source of the text from which this interpreter is reading.
                Note: there is a difference between what file the interrpeter is
                sourcing and from what file a method was originally parsed.  One
                file may call a method sourced from another file.  See SimpleNode
                for origination file info.</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.SimpleNode#getSourceFile()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getParent" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter">
				<comment>
					<description>Get the parent Interpreter of this interpreter, if any.
                Currently this relationship implies the following:
                        1) Parent and child share a BshClassManager
                        2) Children indicate the parent&apos;s source file information in error
                        reporting.
                When created as part of a source() / eval() the child also shares
                the parent&apos;s namespace.  But that is not necessary in general.</description>
				</comment>
			</method>
			<method visibility="public" name="setOut" fulltype="void" type="void">
				<params>
					<param name="out" fulltype="java.io.PrintStream" type="PrintStream" />
				</params>
			</method>
			<method visibility="public" name="setErr" fulltype="void" type="void">
				<params>
					<param name="err" fulltype="java.io.PrintStream" type="PrintStream" />
				</params>
			</method>
			<method visibility="public" name="setExitOnEOF" fulltype="void" type="void">
				<comment>
					<description>Specify whether, in interactive mode, the interpreter exits Java upon
                end of input.  If true, when in interactive mode the interpreter will
                issue a System.exit(0) upon eof.  If false the interpreter no
                System.exit() will be done.
                &lt;p/&gt;
                Note: if you wish to cause an EOF externally you can try closing the
                input stream.  This is not guaranteed to work in older versions of Java
                due to Java limitations, but should work in newer JDK/JREs.  (That was
                the motivation for the Java NIO package).</description>
				</comment>
				<params>
					<param name="value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setShowResults" fulltype="void" type="void">
				<comment>
					<description>Turn on/off the verbose printing of results as for the show()
                 command.
                If this interpreter has a parent the call is delegated.
                See the BeanShell show() command.</description>
				</comment>
				<params>
					<param name="showResults" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getShowResults" fulltype="boolean" type="boolean">
				<comment>
					<description>Show on/off verbose printing status for the show() command.
         See the BeanShell show() command.
         If this interpreter has a parent the call is delegated.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="org.gjt.sp.jedit.bsh.InterpreterError" type="InterpreterError">
		<comment>
			<description>An internal error in the interpreter has occurred.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="InterpreterError">
				<params>
					<param name="s" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.JavaCharStream" type="JavaCharStream">
		<comment>
			<description>An implementation of interface CharStream, where the stream is assumed to
 contain only ASCII characters (with java-like unicode escape processing).</description>
		</comment>
		<fields>
			<field final="true" static="true" const="false" visibility="public" name="staticFlag" constexpr="false" fulltype="boolean" type="boolean" />
			<field visibility="public" name="bufpos" fulltype="int" type="int" />
			<field visibility="protected" name="bufline" fulltype="int[]" type="int" />
			<field visibility="protected" name="bufcolumn" fulltype="int[]" type="int" />
			<field visibility="protected" name="column" fulltype="int" type="int" />
			<field visibility="protected" name="line" fulltype="int" type="int" />
			<field visibility="protected" name="prevCharIsCR" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="prevCharIsLF" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="inputStream" fulltype="java.io.Reader" type="Reader" />
			<field visibility="protected" name="nextCharBuf" fulltype="char[]" type="char" />
			<field visibility="protected" name="buffer" fulltype="char[]" type="char" />
			<field visibility="protected" name="maxNextCharInd" fulltype="int" type="int" />
			<field visibility="protected" name="nextCharInd" fulltype="int" type="int" />
			<field visibility="protected" name="inBuf" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="JavaCharStream">
				<params>
					<param name="dstream" fulltype="java.io.Reader" type="Reader" />
					<param name="startline" fulltype="int" type="int" />
					<param name="startcolumn" fulltype="int" type="int" />
					<param name="buffersize" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="JavaCharStream">
				<params>
					<param name="dstream" fulltype="java.io.Reader" type="Reader" />
					<param name="startline" fulltype="int" type="int" />
					<param name="startcolumn" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="JavaCharStream">
				<params>
					<param name="dstream" fulltype="java.io.Reader" type="Reader" />
				</params>
			</constructor>
			<constructor visibility="public" name="JavaCharStream">
				<params>
					<param name="dstream" fulltype="java.io.InputStream" type="InputStream" />
					<param name="startline" fulltype="int" type="int" />
					<param name="startcolumn" fulltype="int" type="int" />
					<param name="buffersize" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="JavaCharStream">
				<params>
					<param name="dstream" fulltype="java.io.InputStream" type="InputStream" />
					<param name="startline" fulltype="int" type="int" />
					<param name="startcolumn" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="JavaCharStream">
				<params>
					<param name="dstream" fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</constructor>
			<method visibility="protected" name="ExpandBuff" fulltype="void" type="void">
				<params>
					<param name="wrapAround" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="FillBuff" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="protected" name="ReadByte" fulltype="char" type="char">
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="BeginToken" fulltype="char" type="char">
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="protected" name="AdjustBuffSize" fulltype="void" type="void" />
			<method visibility="protected" name="UpdateLineColumn" fulltype="void" type="void">
				<params>
					<param name="c" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="readChar" fulltype="char" type="char">
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getColumn" fulltype="int" type="int">
				<comment>
					<attribute name="@deprecated" />
					<attribute name="@see">
						<description>#getEndColumn</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLine" fulltype="int" type="int">
				<comment>
					<attribute name="@deprecated" />
					<attribute name="@see">
						<description>#getEndLine</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getEndColumn" fulltype="int" type="int" />
			<method visibility="public" name="getEndLine" fulltype="int" type="int" />
			<method visibility="public" name="getBeginColumn" fulltype="int" type="int" />
			<method visibility="public" name="getBeginLine" fulltype="int" type="int" />
			<method visibility="public" name="backup" fulltype="void" type="void">
				<params>
					<param name="amount" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="dstream" fulltype="java.io.Reader" type="Reader" />
					<param name="startline" fulltype="int" type="int" />
					<param name="startcolumn" fulltype="int" type="int" />
					<param name="buffersize" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="dstream" fulltype="java.io.Reader" type="Reader" />
					<param name="startline" fulltype="int" type="int" />
					<param name="startcolumn" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="dstream" fulltype="java.io.Reader" type="Reader" />
				</params>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="dstream" fulltype="java.io.InputStream" type="InputStream" />
					<param name="startline" fulltype="int" type="int" />
					<param name="startcolumn" fulltype="int" type="int" />
					<param name="buffersize" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="dstream" fulltype="java.io.InputStream" type="InputStream" />
					<param name="startline" fulltype="int" type="int" />
					<param name="startcolumn" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="dstream" fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</method>
			<method visibility="public" name="GetImage" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="GetSuffix" fulltype="char[]" type="char">
				<params>
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="Done" fulltype="void" type="void" />
			<method visibility="public" name="adjustBeginLineColumn" fulltype="void" type="void">
				<comment>
					<description>Method to adjust line and column numbers for the start of a token.&lt;BR&gt;</description>
				</comment>
				<params>
					<param name="newLine" fulltype="int" type="int" />
					<param name="newCol" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.Modifiers" type="Modifiers">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Pat Niemeyer (pat@pat.net)</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="CLASS" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="METHOD" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="FIELD" constexpr="2" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="Modifiers" />
			<method visibility="public" name="addModifier" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>context is METHOD or FIELD</description>
					</attribute>
				</comment>
				<params>
					<param name="context" comment="is METHOD or FIELD" fulltype="int" type="int" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="hasModifier" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh" interface="true" fulltype="org.gjt.sp.jedit.bsh.NameSource" type="NameSource">
		<comment>
			<description>This interface supports name completion, which is used primarily for
    command line tools, etc.  It provides a flat source of &quot;names&quot; in a
    space.  For example all of the classes in the classpath or all of the
    variables in a namespace (or all of those).
    &lt;p&gt;
    NameSource is the lightest weight mechanism for sources which wish to
    support name completion.  In the future it might be better for NameSpace
    to implement NameCompletion directly in a more native and efficient
    fasion.  However in general name competion is used for human interaction
    and therefore does not require high performance.
    &lt;p&gt;</description>
		</comment>
		<methods>
			<method visibility="public" name="getAllNames" fulltype="java.lang.String[]" type="String" />
			<method visibility="public" name="addNameSourceListener" fulltype="void" type="void">
				<params>
					<param name="listener" fulltype="org.gjt.sp.jedit.bsh.NameSource.Listener" type="NameSource.Listener" />
				</params>
			</method>
		</methods>
		<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh" interface="true" fulltype="org.gjt.sp.jedit.bsh.NameSource.Listener" type="NameSource.Listener">
			<methods>
				<method visibility="public" name="nameSourceChanged" fulltype="void" type="void">
					<params>
						<param name="src" fulltype="org.gjt.sp.jedit.bsh.NameSource" type="NameSource" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh" interface="true" fulltype="org.gjt.sp.jedit.bsh.NameSource.Listener" type="NameSource.Listener">
		<methods>
			<method visibility="public" name="nameSourceChanged" fulltype="void" type="void">
				<params>
					<param name="src" fulltype="org.gjt.sp.jedit.bsh.NameSource" type="NameSource" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
			<interface fulltype="org.gjt.sp.jedit.bsh.BshClassManager.Listener" type="BshClassManager.Listener" />
			<interface fulltype="org.gjt.sp.jedit.bsh.NameSource" type="NameSource" />
		</implements>
		<comment>
			<description>A namespace	in which methods, variables, and imports (class names) live.
    This is package public because it is used in the implementation of some
    bsh commands.  However for normal use you should be using methods on
    bsh.Interpreter to interact with your scripts.
    &lt;p&gt;

    A bsh.This object is a thin layer over a NameSpace that associates it with
    an Interpreter instance.  Together they comprise a Bsh scripted object
    context.
    &lt;p&gt;

    Note: I&apos;d really like to use collections here, but we have to keep this
    compatible with JDK1.1</description>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="JAVACODE" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
			<field visibility="protected" name="importedClasses" fulltype="java.util.Hashtable" type="Hashtable" />
		</fields>
		<methods>
			<constructor visibility="public" name="NameSpace">
				<comment>
					<attribute name="@param">
						<description>parent the parent namespace of this namespace.  Child namespaces
        inherit all variables and methods of their parent and can (of course)
        override / shadow them.</description>
					</attribute>
					<attribute name="@param">
						<description>name a name</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="the parent namespace of this namespace.  Child namespaces
        inherit all variables and methods of their parent and can (of course)
        override / shadow them." fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="name" comment="a name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="NameSpace">
				<params>
					<param name="classManager" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="NameSpace">
				<params>
					<param name="parent" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="classManager" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="setName" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>The name of this namespace.  If the namespace is a method body
        namespace then this is the name of the method.  If it&apos;s a class or
        class instance then it&apos;s the name of the class.</description>
				</comment>
			</method>
			<method visibility="public" name="get" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Resolve name to an object through this namespace.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="setVariable" fulltype="void" type="void">
				<comment>
					<description>Set the variable through this namespace.
        This method obeys the LOCALSCOPING property to determine how variables
        are set.
        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package and wish to set variables with
        primitive values you will have to wrap them using bsh.Primitive.</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.Primitive
        &lt;p&gt;
        Setting a new variable (which didn&apos;t exist before) or removing
        a variable causes a namespace change.</description>
					</attribute>
					<attribute name="@param">
						<description>strictJava specifies whether strict java rules are applied.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
					<param name="strictJava" comment="specifies whether strict java rules are applied." fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="unsetVariable" fulltype="void" type="void">
				<comment>
					<description>Remove the variable from the namespace.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getVariableNames" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Get the names of variables defined in this namespace.
        (This does not show variables in parent namespaces).</description>
				</comment>
			</method>
			<method visibility="public" name="getMethodNames" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Get the names of methods declared in this namespace.
        (This does not include methods in parent namespaces).</description>
				</comment>
			</method>
			<method visibility="public" name="getMethods" fulltype="org.gjt.sp.jedit.bsh.BshMethod[]" type="BshMethod">
				<comment>
					<description>Get the methods defined in this namespace.
        (This does not show methods in parent namespaces).
        Note: This will probably be renamed getDeclaredMethods()</description>
				</comment>
			</method>
			<method visibility="public" name="getParent" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace">
				<comment>
					<description>Get the parent namespace.
        Note: this isn&apos;t quite the same as getSuper().
        getSuper() returns &apos;this&apos; if we are at the root namespace.</description>
				</comment>
			</method>
			<method visibility="public" name="getSuper" fulltype="org.gjt.sp.jedit.bsh.This" type="This">
				<comment>
					<description>Get the parent namespace&apos; This reference or this namespace&apos; This
        reference if we are the top.</description>
				</comment>
				<params>
					<param name="declaringInterpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
			</method>
			<method visibility="public" name="getGlobal" fulltype="org.gjt.sp.jedit.bsh.This" type="This">
				<comment>
					<description>Get the top level namespace or this namespace if we are the top.
        Note: this method should probably return type bsh.This to be consistent
        with getThis();</description>
				</comment>
				<params>
					<param name="declaringInterpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
			</method>
			<method visibility="public" name="getClassManager" fulltype="org.gjt.sp.jedit.bsh.BshClassManager" type="BshClassManager" />
			<method visibility="public" name="prune" fulltype="void" type="void">
				<comment>
					<description>Used for serialization</description>
				</comment>
			</method>
			<method visibility="public" name="setParent" fulltype="void" type="void">
				<params>
					<param name="parent" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
				</params>
			</method>
			<method visibility="public" name="getVariable" returncomment="The variable value or Primitive.VOID if it is not defined." fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Get the specified variable in this namespace or a parent namespace.
        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package you will have to use
        Primitive.unwrap() to get primitive values.</description>
					<attribute name="@see">
						<description>Primitive#unwrap( Object )</description>
					</attribute>
					<attribute name="@return">
						<description>The variable value or Primitive.VOID if it is not defined.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getVariable" returncomment="The variable value or Primitive.VOID if it is not defined." fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Get the specified variable in this namespace.</description>
					<attribute name="@param">
						<description>recurse If recurse is true then we recursively search through
        parent namespaces for the variable.
        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package you will have to use
        Primitive.unwrap() to get primitive values.</description>
					</attribute>
					<attribute name="@see">
						<description>Primitive#unwrap( Object )</description>
					</attribute>
					<attribute name="@return">
						<description>The variable value or Primitive.VOID if it is not defined.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="recurse" comment="If recurse is true then we recursively search through
        parent namespaces for the variable.
        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package you will have to use
        Primitive.unwrap() to get primitive values." fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="protected" name="getVariableImpl" returncomment="the Variable value or null if it is not defined" fulltype="org.gjt.sp.jedit.bsh.Variable" type="Variable">
				<comment>
					<description>Locate a variable and return the Variable object with optional
        recursion through parent name spaces.
        &lt;p/&gt;
        If this namespace is static, return only static variables.</description>
					<attribute name="@return">
						<description>the Variable value or null if it is not defined</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="recurse" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getDeclaredVariables" fulltype="org.gjt.sp.jedit.bsh.Variable[]" type="Variable" />
			<method visibility="protected" name="unwrapVariable" returncomment="return the variable value.  A null var is mapped to
            Primitive.VOID" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Unwrap a variable to its value.</description>
					<attribute name="@return">
						<description>return the variable value.  A null var is mapped to
            Primitive.VOID</description>
					</attribute>
				</comment>
				<params>
					<param name="var" fulltype="org.gjt.sp.jedit.bsh.Variable" type="Variable" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="setTypedVariable" fulltype="void" type="void">
				<comment>
					<attribute name="@deprecated">
						<description>See #setTypedVariable( String, Class, Object, Modifiers )</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="type" fulltype="java.lang.Class" type="Class" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
					<param name="isFinal" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="setTypedVariable" fulltype="void" type="void">
				<comment>
					<description>Declare a variable in the local scope and set its initial value.
        Value may be null to indicate that we would like the default value
        for the variable type. (e.g.  0 for integer types, null for object
        types).  An existing typed variable may only be set to the same type.
        If an untyped variable of the same name exists it will be overridden
        with the new typed var.
        The set will perform a Types.getAssignableForm() on the value if
        necessary.

        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package and wish to set variables with
        primitive values you will have to wrap them using bsh.Primitive.</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.Primitive</description>
					</attribute>
					<attribute name="@param">
						<description>value If value is null, you&apos;ll get the default value for the type</description>
					</attribute>
					<attribute name="@param">
						<description>modifiers may be null</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="type" fulltype="java.lang.Class" type="Class" />
					<param name="value" comment="If value is null, you&apos;ll get the default value for the type" fulltype="java.lang.Object" type="Object" />
					<param name="modifiers" comment="may be null" fulltype="org.gjt.sp.jedit.bsh.Modifiers" type="Modifiers" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="setMethod" fulltype="void" type="void">
				<comment>
					<description>Note: this is primarily for internal use.</description>
					<attribute name="@see">
						<description>Interpreter#source( String )</description>
					</attribute>
					<attribute name="@see">
						<description>Interpreter#eval( String )</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="method" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getMethod" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod">
				<comment>
					<attribute name="@see">
						<description>#getMethod( String, Class [], boolean )</description>
					</attribute>
					<attribute name="@see">
						<description>#getMethod( String, Class [] )</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="sig" fulltype="java.lang.Class[]" type="Class" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getMethod" returncomment="the BshMethod or null if not found" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod">
				<comment>
					<description>Get the bsh method matching the specified signature declared in
        this name space or a parent.
        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package you will have to be familiar
        with BeanShell&apos;s use of the Primitive wrapper class.</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.Primitive</description>
					</attribute>
					<attribute name="@return">
						<description>the BshMethod or null if not found</description>
					</attribute>
					<attribute name="@param">
						<description>declaredOnly if true then only methods declared directly in this
            namespace will be found and no inherited or imported methods will
            be visible.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="sig" fulltype="java.lang.Class[]" type="Class" />
					<param name="declaredOnly" comment="if true then only methods declared directly in this
            namespace will be found and no inherited or imported methods will
            be visible." fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="importClass" fulltype="void" type="void">
				<comment>
					<description>Import a class name.
        Subsequent imports override earlier ones</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="importPackage" fulltype="void" type="void">
				<comment>
					<description>subsequent imports override earlier ones</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="importCommands" fulltype="void" type="void">
				<comment>
					<description>Import scripted or compiled BeanShell commands in the following package
        in the classpath.  You may use either &quot;/&quot; path or &quot;.&quot; package notation.
        e.g. importCommands(&quot;/bsh/commands&quot;) or importCommands(&quot;bsh.commands&quot;)
        are equivalent.  If a relative path style specifier is used then it is
        made into an absolute path by prepending &quot;/&quot;.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getCommand" returncomment="a BshMethod, Class, or null if no such command is found." fulltype="java.lang.Object" type="Object">
				<comment>
					<description>A command is a scripted method or compiled command class implementing a
        specified method signature.  Commands are loaded from the classpath
        and may be imported using the importCommands() method.
        &lt;p/&gt;

        This method searches the imported commands packages for a script or
        command object corresponding to the name of the method.  If it is a
        script the script is sourced into this namespace and the BshMethod for
        the requested signature is returned.  If it is a compiled class the
        class is returned.  (Compiled command classes implement static invoke()
        methods).
        &lt;p/&gt;

        The imported packages are searched in reverse order, so that later
        imports take priority.
        Currently only the first object (script or class) with the appropriate
        name is checked.  If another, overloaded form, is located in another
        package it will not currently be found.  This could be fixed.
        &lt;p/&gt;</description>
					<attribute name="@return">
						<description>a BshMethod, Class, or null if no such command is found.</description>
					</attribute>
					<attribute name="@param">
						<description>name is the name of the desired command method</description>
					</attribute>
					<attribute name="@param">
						<description>argTypes is the signature of the desired command method.</description>
					</attribute>
					<attribute name="@throws">
						<description>UtilEvalError if loadScriptedCommand throws UtilEvalError
            i.e. on errors loading a script that was found</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="is the name of the desired command method" fulltype="java.lang.String" type="String" />
					<param name="argTypes" comment="is the signature of the desired command method." fulltype="java.lang.Class[]" type="Class" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
				<exceptions>
					<exception comment="if loadScriptedCommand throws UtilEvalError
            i.e. on errors loading a script that was found" fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="protected" name="getImportedMethod" fulltype="org.gjt.sp.jedit.bsh.BshMethod" type="BshMethod">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="sig" fulltype="java.lang.Class[]" type="Class" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="protected" name="getImportedVar" fulltype="org.gjt.sp.jedit.bsh.Variable" type="Variable">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getClass" returncomment="null if not found." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Load a class through this namespace taking into account imports.
        The class search will proceed through the parent namespaces if
        necessary.</description>
					<attribute name="@return">
						<description>null if not found.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getAllNames" returncomment="all variable and method names in this and all parent
        namespaces" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Implements NameSource</description>
					<attribute name="@return">
						<description>all variable and method names in this and all parent
        namespaces</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="getAllNamesAux" fulltype="void" type="void">
				<comment>
					<description>Helper for implementing NameSource</description>
				</comment>
				<params>
					<param name="vec" fulltype="java.util.Vector" type="Vector" />
				</params>
			</method>
			<method visibility="public" name="addNameSourceListener" fulltype="void" type="void">
				<comment>
					<description>Implements NameSource
        Add a listener who is notified upon changes to names in this space.</description>
				</comment>
				<params>
					<param name="listener" fulltype="org.gjt.sp.jedit.bsh.NameSource.Listener" type="NameSource.Listener" />
				</params>
			</method>
			<method visibility="public" name="doSuperImport" fulltype="void" type="void">
				<comment>
					<description>Perform &quot;import *;&quot; causing the entire classpath to be mapped.
        This can take a while.</description>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="invokeMethod" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Invoke a method in this namespace with the specified args and
        interpreter reference.  No caller information or call stack is
        required.  The method will appear as if called externally from Java.
        &lt;p&gt;</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.This#invokeMethod(String methodName, Object [] args, Interpreter interpreter,	CallStack callstack, SimpleNode callerInfo, boolean ) invokeMethod</description>
					</attribute>
				</comment>
				<params>
					<param name="methodName" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="invokeMethod" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>This method simply delegates to This.invokeMethod();
        &lt;p&gt;</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.This#invokeMethod(String methodName, Object [] args, Interpreter interpreter, CallStack callstack, SimpleNode callerInfo, boolean declaredOnly ) invokeMethod</description>
					</attribute>
				</comment>
				<params>
					<param name="methodName" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
					<param name="callerInfo" fulltype="org.gjt.sp.jedit.bsh.SimpleNode" type="SimpleNode" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="classLoaderChanged" fulltype="void" type="void">
				<comment>
					<description>Clear all cached classes and names</description>
				</comment>
			</method>
			<method visibility="public" name="nameSpaceChanged" fulltype="void" type="void">
				<comment>
					<description>Clear all cached classes and names</description>
				</comment>
			</method>
			<method visibility="public" name="loadDefaultImports" fulltype="void" type="void">
				<comment>
					<description>Import standard packages.  Currently:
        &lt;pre&gt;
            importClass(&quot;org.gjt.sp.jedit.bsh.EvalError&quot;);
            importClass(&quot;org.gjt.sp.jedit.bsh.Interpreter&quot;);
            importPackage(&quot;javax.swing.event&quot;);
            importPackage(&quot;javax.swing&quot;);
            importPackage(&quot;java.awt.event&quot;);
            importPackage(&quot;java.awt&quot;);
            importPackage(&quot;java.net&quot;);
            importPackage(&quot;java.util&quot;);
            importPackage(&quot;java.io&quot;);
            importPackage(&quot;java.lang&quot;);
            addCommandPath(&quot;/org/gjt/sp/jedit/bsh/commands&quot;,getClass());
        &lt;/pre&gt;</description>
				</comment>
			</method>
			<method visibility="public" name="getInvocationLine" fulltype="int" type="int" />
			<method visibility="public" name="getInvocationText" fulltype="java.lang.String" type="String" />
			<method static="true" visibility="public" name="identifierToClass" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>This is a helper method for working inside of bsh scripts and commands.
        In that context it is impossible to see a ClassIdentifier object
        for what it is.  Attempting to access a method on a ClassIdentifier
        will look like a static method invocation.

        This method is in NameSpace for convenience (you don&apos;t have to import
        bsh.ClassIdentifier to use it );</description>
				</comment>
				<params>
					<param name="ci" fulltype="org.gjt.sp.jedit.bsh.ClassIdentifier" type="ClassIdentifier" />
				</params>
			</method>
			<method visibility="public" name="clear" fulltype="void" type="void">
				<comment>
					<description>Clear all variables, methods, and imports from this namespace.
        If this namespace is the root, it will be reset to the default
        imports.</description>
					<attribute name="@see">
						<description>#loadDefaultImports()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="importObject" fulltype="void" type="void">
				<comment>
					<description>Import a compiled Java object&apos;s methods and variables into this
        namespace.  When no scripted method / command or variable is found
        locally in this namespace method / fields of the object will be
        checked.  Objects are checked in the order of import with later imports
        taking precedence.
        &lt;p/&gt;</description>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="importStatic" fulltype="void" type="void">
				<params>
					<param name="clas" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="setVariable" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="addCommandPath" fulltype="void" type="void">
				<comment>
					<description>Adds a URL to the command path.</description>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="clas" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="removeCommandPath" fulltype="void" type="void">
				<comment>
					<description>Remove a URLfrom the command path.</description>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="clas" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getCommand" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Looks up a command.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh.org.objectweb.asm" interface="true" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.ClassVisitor" type="ClassVisitor">
		<comment>
			<description>A visitor to visit a Java class. The methods of this interface must be called
 in the following order: &lt;tt&gt;visit&lt;/tt&gt; (&lt;tt&gt;visitField&lt;/tt&gt; |
 &lt;tt&gt;visitMethod&lt;/tt&gt; | &lt;tt&gt;visitInnerClass&lt;/tt&gt;)* &lt;tt&gt;visitEnd&lt;/tt&gt;.</description>
		</comment>
		<methods>
			<method visibility="public" name="visit" fulltype="void" type="void">
				<comment>
					<description>Visits the header of the class.</description>
					<attribute name="@param">
						<description>access the class&apos;s access flags (see {@link Constants}). This
      parameter also indicates if the class is deprecated.</description>
					</attribute>
					<attribute name="@param">
						<description>name the internal name of the class (see {@link Type#getInternalName
      getInternalName}).</description>
					</attribute>
					<attribute name="@param">
						<description>superName the internal of name of the super class (see {@link
      Type#getInternalName getInternalName}). For interfaces, the super
      class is {@link Object}. May be &lt;tt&gt;null&lt;/tt&gt;, but only for the {@link
      Object java.lang.Object} class.</description>
					</attribute>
					<attribute name="@param">
						<description>interfaces the internal names of the class&apos;s interfaces (see {@link
      Type#getInternalName getInternalName}). May be &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>sourceFile the name of the source file from which this class was
      compiled. May be &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="access" comment="the class&apos;s access flags (see {@link Constants}). This
      parameter also indicates if the class is deprecated." fulltype="int" type="int" />
					<param name="name" comment="the internal name of the class (see {@link Type#getInternalName
      getInternalName})." fulltype="java.lang.String" type="String" />
					<param name="superName" comment="the internal of name of the super class (see {@link
      Type#getInternalName getInternalName}). For interfaces, the super
      class is {@link Object}. May be &lt;tt&gt;null&lt;/tt&gt;, but only for the {@link
      Object java.lang.Object} class." fulltype="java.lang.String" type="String" />
					<param name="interfaces" comment="the internal names of the class&apos;s interfaces (see {@link
      Type#getInternalName getInternalName}). May be &lt;tt&gt;null&lt;/tt&gt;." fulltype="java.lang.String[]" type="String" />
					<param name="sourceFile" comment="the name of the source file from which this class was
      compiled. May be &lt;tt&gt;null&lt;/tt&gt;." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitInnerClass" fulltype="void" type="void">
				<comment>
					<description>Visits information about an inner class. This inner class is not
 necessarily a member of the class being visited.</description>
					<attribute name="@param">
						<description>name the internal name of an inner class (see {@link
      Type#getInternalName getInternalName}).</description>
					</attribute>
					<attribute name="@param">
						<description>outerName the internal name of the class to which the inner class
      belongs (see {@link Type#getInternalName getInternalName}). May be
      &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>innerName the (simple) name of the inner class inside its enclosing
      class. May be &lt;tt&gt;null&lt;/tt&gt; for anonymous inner classes.</description>
					</attribute>
					<attribute name="@param">
						<description>access the access flags of the inner class as originally declared
      in the enclosing class.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the internal name of an inner class (see {@link
      Type#getInternalName getInternalName})." fulltype="java.lang.String" type="String" />
					<param name="outerName" comment="the internal name of the class to which the inner class
      belongs (see {@link Type#getInternalName getInternalName}). May be
      &lt;tt&gt;null&lt;/tt&gt;." fulltype="java.lang.String" type="String" />
					<param name="innerName" comment="the (simple) name of the inner class inside its enclosing
      class. May be &lt;tt&gt;null&lt;/tt&gt; for anonymous inner classes." fulltype="java.lang.String" type="String" />
					<param name="access" comment="the access flags of the inner class as originally declared
      in the enclosing class." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitField" fulltype="void" type="void">
				<comment>
					<description>Visits a field of the class.</description>
					<attribute name="@param">
						<description>access the field&apos;s access flags (see {@link Constants}). This
      parameter also indicates if the field is synthetic and/or deprecated.</description>
					</attribute>
					<attribute name="@param">
						<description>name the field&apos;s name.</description>
					</attribute>
					<attribute name="@param">
						<description>desc the field&apos;s descriptor (see {@link Type Type}).</description>
					</attribute>
					<attribute name="@param">
						<description>value the field&apos;s initial value. This parameter, which may be
      &lt;tt&gt;null&lt;/tt&gt; if the field does not have an initial value, must be an
      {@link java.lang.Integer Integer}, a {@link java.lang.Float Float}, a
      {@link java.lang.Long Long}, a {@link java.lang.Double Double} or a
      {@link String String}.</description>
					</attribute>
				</comment>
				<params>
					<param name="access" comment="the field&apos;s access flags (see {@link Constants}). This
      parameter also indicates if the field is synthetic and/or deprecated." fulltype="int" type="int" />
					<param name="name" comment="the field&apos;s name." fulltype="java.lang.String" type="String" />
					<param name="desc" comment="the field&apos;s descriptor (see {@link Type Type})." fulltype="java.lang.String" type="String" />
					<param name="value" comment="the field&apos;s initial value. This parameter, which may be
      &lt;tt&gt;null&lt;/tt&gt; if the field does not have an initial value, must be an
      {@link java.lang.Integer Integer}, a {@link java.lang.Float Float}, a
      {@link java.lang.Long Long}, a {@link java.lang.Double Double} or a
      {@link String String}." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="visitMethod" returncomment="an object to visit the byte code of the method, or &lt;tt&gt;null&lt;/tt&gt; if
      this class visitor is not interested in visiting the code of this
      method." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.CodeVisitor" type="CodeVisitor">
				<comment>
					<description>Visits a method of the class. This method &lt;i&gt;must&lt;/i&gt; return a new
 {@link CodeVisitor CodeVisitor} instance (or &lt;tt&gt;null&lt;/tt&gt;) each time it
 is called, i.e., it should not return a previously returned visitor.</description>
					<attribute name="@param">
						<description>access the method&apos;s access flags (see {@link Constants}). This
      parameter also indicates if the method is synthetic and/or deprecated.</description>
					</attribute>
					<attribute name="@param">
						<description>name the method&apos;s name.</description>
					</attribute>
					<attribute name="@param">
						<description>desc the method&apos;s descriptor (see {@link Type Type}).</description>
					</attribute>
					<attribute name="@param">
						<description>exceptions the internal names of the method&apos;s exception
      classes (see {@link Type#getInternalName getInternalName}). May be
      &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>an object to visit the byte code of the method, or &lt;tt&gt;null&lt;/tt&gt; if
      this class visitor is not interested in visiting the code of this
      method.</description>
					</attribute>
				</comment>
				<params>
					<param name="access" comment="the method&apos;s access flags (see {@link Constants}). This
      parameter also indicates if the method is synthetic and/or deprecated." fulltype="int" type="int" />
					<param name="name" comment="the method&apos;s name." fulltype="java.lang.String" type="String" />
					<param name="desc" comment="the method&apos;s descriptor (see {@link Type Type})." fulltype="java.lang.String" type="String" />
					<param name="exceptions" comment="the internal names of the method&apos;s exception
      classes (see {@link Type#getInternalName getInternalName}). May be
      &lt;tt&gt;null&lt;/tt&gt;." fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitEnd" fulltype="void" type="void">
				<comment>
					<description>Visits the end of the class. This method, which is the last one to be
 called, is used to inform the visitor that all the fields and methods of
 the class have been visited.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.org.objectweb.asm" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.ClassWriter" type="ClassWriter">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.ClassVisitor" type="ClassVisitor" />
		</implements>
		<comment>
			<description>A {@link org.gjt.sp.jedit.bsh.org.objectweb.asm.ClassVisitor ClassVisitor} that generates Java class files. More
 precisely this visitor generates a byte array conforming to the Java class
 file format. It can be used alone, to generate a Java class &quot;from scratch&quot;,
 or with one or more adapter class
 visitors to generate a modified class from one or more existing Java classes.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ClassWriter">
				<comment>
					<description>Constructs a new {@link ClassWriter ClassWriter} object.</description>
					<attribute name="@param">
						<description>computeMaxs &lt;tt&gt;true&lt;/tt&gt; if the maximum stack size and the maximum
      number of local variables must be automatically computed. If this flag
      is &lt;tt&gt;true&lt;/tt&gt;, then the arguments of the {@link
      CodeVisitor#visitMaxs visitMaxs} method of the {@link CodeVisitor
      CodeVisitor} returned by the {@link #visitMethod visitMethod} method
      will be ignored, and computed automatically from the signature and
      the bytecode of each method.</description>
					</attribute>
				</comment>
				<params>
					<param name="computeMaxs" comment="&lt;tt&gt;true&lt;/tt&gt; if the maximum stack size and the maximum
      number of local variables must be automatically computed. If this flag
      is &lt;tt&gt;true&lt;/tt&gt;, then the arguments of the {@link
      CodeVisitor#visitMaxs visitMaxs} method of the {@link CodeVisitor
      CodeVisitor} returned by the {@link #visitMethod visitMethod} method
      will be ignored, and computed automatically from the signature and
      the bytecode of each method." fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="visit" fulltype="void" type="void">
				<params>
					<param name="access" fulltype="int" type="int" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="superName" fulltype="java.lang.String" type="String" />
					<param name="interfaces" fulltype="java.lang.String[]" type="String" />
					<param name="sourceFile" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitInnerClass" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="outerName" fulltype="java.lang.String" type="String" />
					<param name="innerName" fulltype="java.lang.String" type="String" />
					<param name="access" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitField" fulltype="void" type="void">
				<params>
					<param name="access" fulltype="int" type="int" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="desc" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="visitMethod" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.CodeVisitor" type="CodeVisitor">
				<params>
					<param name="access" fulltype="int" type="int" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="desc" fulltype="java.lang.String" type="String" />
					<param name="exceptions" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitEnd" fulltype="void" type="void" />
			<method visibility="public" name="toByteArray" returncomment="the bytecode of the class that was build with this class writer." fulltype="byte[]" type="byte">
				<comment>
					<description>Returns the bytecode of the class that was build with this class writer.</description>
					<attribute name="@return">
						<description>the bytecode of the class that was build with this class writer.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh.org.objectweb.asm" interface="true" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.CodeVisitor" type="CodeVisitor">
		<comment>
			<description>A visitor to visit the bytecode instructions of a Java method. The methods
 of this visitor must be called in the sequential order of the bytecode
 instructions of the visited code. The {@link #visitMaxs visitMaxs} method
 must be called after all the instructions have been visited. The {@link
 #visitTryCatchBlock visitTryCatchBlock}, {@link #visitLocalVariable
 visitLocalVariable} and {@link #visitLineNumber visitLineNumber} methods may
 be called in any order, at any time (provided the labels passed as arguments
 have already been visited with {@link #visitLabel visitLabel}).</description>
		</comment>
		<methods>
			<method visibility="public" name="visitInsn" fulltype="void" type="void">
				<comment>
					<description>Visits a zero operand instruction.</description>
					<attribute name="@param">
						<description>opcode the opcode of the instruction to be visited. This opcode is
      either NOP, ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2,
      ICONST_3, ICONST_4, ICONST_5, LCONST_0, LCONST_1, FCONST_0, FCONST_1,
      FCONST_2, DCONST_0, DCONST_1,

      IALOAD, LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD,
      IASTORE, LASTORE, FASTORE, DASTORE, AASTORE, BASTORE, CASTORE,
      SASTORE,

      POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2, SWAP,

      IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL,
      DMUL, IDIV, LDIV, FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG,
      FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR, LUSHR, IAND, LAND, IOR,
      LOR, IXOR, LXOR,

      I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C,
      I2S,

      LCMP, FCMPL, FCMPG, DCMPL, DCMPG,

      IRETURN, LRETURN, FRETURN, DRETURN, ARETURN, RETURN,

      ARRAYLENGTH,

      ATHROW,

      MONITORENTER, or MONITOREXIT.</description>
					</attribute>
				</comment>
				<params>
					<param name="opcode" comment="the opcode of the instruction to be visited. This opcode is
      either NOP, ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2,
      ICONST_3, ICONST_4, ICONST_5, LCONST_0, LCONST_1, FCONST_0, FCONST_1,
      FCONST_2, DCONST_0, DCONST_1,

      IALOAD, LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD,
      IASTORE, LASTORE, FASTORE, DASTORE, AASTORE, BASTORE, CASTORE,
      SASTORE,

      POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2, SWAP,

      IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL,
      DMUL, IDIV, LDIV, FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG,
      FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR, LUSHR, IAND, LAND, IOR,
      LOR, IXOR, LXOR,

      I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C,
      I2S,

      LCMP, FCMPL, FCMPG, DCMPL, DCMPG,

      IRETURN, LRETURN, FRETURN, DRETURN, ARETURN, RETURN,

      ARRAYLENGTH,

      ATHROW,

      MONITORENTER, or MONITOREXIT." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitIntInsn" fulltype="void" type="void">
				<comment>
					<description>Visits an instruction with a single int operand.</description>
					<attribute name="@param">
						<description>opcode the opcode of the instruction to be visited. This opcode is
      either BIPUSH, SIPUSH or NEWARRAY.</description>
					</attribute>
					<attribute name="@param">
						<description>operand the operand of the instruction to be visited.</description>
					</attribute>
				</comment>
				<params>
					<param name="opcode" comment="the opcode of the instruction to be visited. This opcode is
      either BIPUSH, SIPUSH or NEWARRAY." fulltype="int" type="int" />
					<param name="operand" comment="the operand of the instruction to be visited." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitVarInsn" fulltype="void" type="void">
				<comment>
					<description>Visits a local variable instruction. A local variable instruction is an
 instruction that loads or stores the value of a local variable.</description>
					<attribute name="@param">
						<description>opcode the opcode of the local variable instruction to be visited.
      This opcode is either ILOAD, LLOAD, FLOAD, DLOAD, ALOAD, ISTORE,
      LSTORE, FSTORE, DSTORE, ASTORE or RET.</description>
					</attribute>
					<attribute name="@param">
						<description>var the operand of the instruction to be visited. This operand is
      the index of a local variable.</description>
					</attribute>
				</comment>
				<params>
					<param name="opcode" comment="the opcode of the local variable instruction to be visited.
      This opcode is either ILOAD, LLOAD, FLOAD, DLOAD, ALOAD, ISTORE,
      LSTORE, FSTORE, DSTORE, ASTORE or RET." fulltype="int" type="int" />
					<param name="var" comment="the operand of the instruction to be visited. This operand is
      the index of a local variable." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitTypeInsn" fulltype="void" type="void">
				<comment>
					<description>Visits a type instruction. A type instruction is an instruction that
 takes a type descriptor as parameter.</description>
					<attribute name="@param">
						<description>opcode the opcode of the type instruction to be visited. This opcode
      is either NEW, ANEWARRAY, CHECKCAST or INSTANCEOF.</description>
					</attribute>
					<attribute name="@param">
						<description>desc the operand of the instruction to be visited. This operand is
      must be a fully qualified class name in internal form, or the type
      descriptor of an array type (see {@link Type Type}).</description>
					</attribute>
				</comment>
				<params>
					<param name="opcode" comment="the opcode of the type instruction to be visited. This opcode
      is either NEW, ANEWARRAY, CHECKCAST or INSTANCEOF." fulltype="int" type="int" />
					<param name="desc" comment="the operand of the instruction to be visited. This operand is
      must be a fully qualified class name in internal form, or the type
      descriptor of an array type (see {@link Type Type})." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitFieldInsn" fulltype="void" type="void">
				<comment>
					<description>Visits a field instruction. A field instruction is an instruction that
 loads or stores the value of a field of an object.</description>
					<attribute name="@param">
						<description>opcode the opcode of the type instruction to be visited. This opcode
      is either GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.</description>
					</attribute>
					<attribute name="@param">
						<description>owner the internal name of the field&apos;s owner class (see {@link
      Type#getInternalName getInternalName}).</description>
					</attribute>
					<attribute name="@param">
						<description>name the field&apos;s name.</description>
					</attribute>
					<attribute name="@param">
						<description>desc the field&apos;s descriptor (see {@link Type Type}).</description>
					</attribute>
				</comment>
				<params>
					<param name="opcode" comment="the opcode of the type instruction to be visited. This opcode
      is either GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD." fulltype="int" type="int" />
					<param name="owner" comment="the internal name of the field&apos;s owner class (see {@link
      Type#getInternalName getInternalName})." fulltype="java.lang.String" type="String" />
					<param name="name" comment="the field&apos;s name." fulltype="java.lang.String" type="String" />
					<param name="desc" comment="the field&apos;s descriptor (see {@link Type Type})." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitMethodInsn" fulltype="void" type="void">
				<comment>
					<description>Visits a method instruction. A method instruction is an instruction that
 invokes a method.</description>
					<attribute name="@param">
						<description>opcode the opcode of the type instruction to be visited. This opcode
      is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or
      INVOKEINTERFACE.</description>
					</attribute>
					<attribute name="@param">
						<description>owner the internal name of the method&apos;s owner class (see {@link
      Type#getInternalName getInternalName}).</description>
					</attribute>
					<attribute name="@param">
						<description>name the method&apos;s name.</description>
					</attribute>
					<attribute name="@param">
						<description>desc the method&apos;s descriptor (see {@link Type Type}).</description>
					</attribute>
				</comment>
				<params>
					<param name="opcode" comment="the opcode of the type instruction to be visited. This opcode
      is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or
      INVOKEINTERFACE." fulltype="int" type="int" />
					<param name="owner" comment="the internal name of the method&apos;s owner class (see {@link
      Type#getInternalName getInternalName})." fulltype="java.lang.String" type="String" />
					<param name="name" comment="the method&apos;s name." fulltype="java.lang.String" type="String" />
					<param name="desc" comment="the method&apos;s descriptor (see {@link Type Type})." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitJumpInsn" fulltype="void" type="void">
				<comment>
					<description>Visits a jump instruction. A jump instruction is an instruction that may
 jump to another instruction.</description>
					<attribute name="@param">
						<description>opcode the opcode of the type instruction to be visited. This opcode
      is either IFEQ, IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE,
      IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE,
      GOTO, JSR, IFNULL or IFNONNULL.</description>
					</attribute>
					<attribute name="@param">
						<description>label the operand of the instruction to be visited. This operand is
      a label that designates the instruction to which the jump instruction
      may jump.</description>
					</attribute>
				</comment>
				<params>
					<param name="opcode" comment="the opcode of the type instruction to be visited. This opcode
      is either IFEQ, IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE,
      IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE,
      GOTO, JSR, IFNULL or IFNONNULL." fulltype="int" type="int" />
					<param name="label" comment="the operand of the instruction to be visited. This operand is
      a label that designates the instruction to which the jump instruction
      may jump." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
				</params>
			</method>
			<method visibility="public" name="visitLabel" fulltype="void" type="void">
				<comment>
					<description>Visits a label. A label designates the instruction that will be visited
 just after it.</description>
					<attribute name="@param">
						<description>label a {@link Label Label} object.</description>
					</attribute>
				</comment>
				<params>
					<param name="label" comment="a {@link Label Label} object." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
				</params>
			</method>
			<method visibility="public" name="visitLdcInsn" fulltype="void" type="void">
				<comment>
					<description>Visits a LDC instruction.</description>
					<attribute name="@param">
						<description>cst the constant to be loaded on the stack. This parameter must be
      a non null {@link java.lang.Integer Integer}, a {@link java.lang.Float
      Float}, a {@link java.lang.Long Long}, a {@link java.lang.Double
      Double} or a {@link String String}.</description>
					</attribute>
				</comment>
				<params>
					<param name="cst" comment="the constant to be loaded on the stack. This parameter must be
      a non null {@link java.lang.Integer Integer}, a {@link java.lang.Float
      Float}, a {@link java.lang.Long Long}, a {@link java.lang.Double
      Double} or a {@link String String}." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="visitIincInsn" fulltype="void" type="void">
				<comment>
					<description>Visits an IINC instruction.</description>
					<attribute name="@param">
						<description>var index of the local variable to be incremented.</description>
					</attribute>
					<attribute name="@param">
						<description>increment amount to increment the local variable by.</description>
					</attribute>
				</comment>
				<params>
					<param name="var" comment="index of the local variable to be incremented." fulltype="int" type="int" />
					<param name="increment" comment="amount to increment the local variable by." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitTableSwitchInsn" fulltype="void" type="void">
				<comment>
					<description>Visits a TABLESWITCH instruction.</description>
					<attribute name="@param">
						<description>min the minimum key value.</description>
					</attribute>
					<attribute name="@param">
						<description>max the maximum key value.</description>
					</attribute>
					<attribute name="@param">
						<description>dflt beginning of the default handler block.</description>
					</attribute>
					<attribute name="@param">
						<description>labels beginnings of the handler blocks. &lt;tt&gt;labels[i]&lt;/tt&gt; is the
      beginning of the handler block for the &lt;tt&gt;min + i&lt;/tt&gt; key.</description>
					</attribute>
				</comment>
				<params>
					<param name="min" comment="the minimum key value." fulltype="int" type="int" />
					<param name="max" comment="the maximum key value." fulltype="int" type="int" />
					<param name="dflt" comment="beginning of the default handler block." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="labels" comment="beginnings of the handler blocks. &lt;tt&gt;labels[i]&lt;/tt&gt; is the
      beginning of the handler block for the &lt;tt&gt;min + i&lt;/tt&gt; key." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label[]" type="Label" />
				</params>
			</method>
			<method visibility="public" name="visitLookupSwitchInsn" fulltype="void" type="void">
				<comment>
					<description>Visits a LOOKUPSWITCH instruction.</description>
					<attribute name="@param">
						<description>dflt beginning of the default handler block.</description>
					</attribute>
					<attribute name="@param">
						<description>keys the values of the keys.</description>
					</attribute>
					<attribute name="@param">
						<description>labels beginnings of the handler blocks. &lt;tt&gt;labels[i]&lt;/tt&gt; is the
      beginning of the handler block for the &lt;tt&gt;keys[i]&lt;/tt&gt; key.</description>
					</attribute>
				</comment>
				<params>
					<param name="dflt" comment="beginning of the default handler block." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="keys" comment="the values of the keys." fulltype="int[]" type="int" />
					<param name="labels" comment="beginnings of the handler blocks. &lt;tt&gt;labels[i]&lt;/tt&gt; is the
      beginning of the handler block for the &lt;tt&gt;keys[i]&lt;/tt&gt; key." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label[]" type="Label" />
				</params>
			</method>
			<method visibility="public" name="visitMultiANewArrayInsn" fulltype="void" type="void">
				<comment>
					<description>Visits a MULTIANEWARRAY instruction.</description>
					<attribute name="@param">
						<description>desc an array type descriptor (see {@link Type Type}).</description>
					</attribute>
					<attribute name="@param">
						<description>dims number of dimensions of the array to allocate.</description>
					</attribute>
				</comment>
				<params>
					<param name="desc" comment="an array type descriptor (see {@link Type Type})." fulltype="java.lang.String" type="String" />
					<param name="dims" comment="number of dimensions of the array to allocate." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitTryCatchBlock" fulltype="void" type="void">
				<comment>
					<description>Visits a try catch block.</description>
					<attribute name="@param">
						<description>start beginning of the exception handler&apos;s scope (inclusive).</description>
					</attribute>
					<attribute name="@param">
						<description>end end of the exception handler&apos;s scope (exclusive).</description>
					</attribute>
					<attribute name="@param">
						<description>handler beginning of the exception handler&apos;s code.</description>
					</attribute>
					<attribute name="@param">
						<description>type internal name of the type of exceptions handled by the handler,
      or &lt;tt&gt;null&lt;/tt&gt; to catch any exceptions (for &quot;finally&quot; blocks).</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if one of the labels has not already been
      visited by this visitor (by the {@link #visitLabel visitLabel}
      method).</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="beginning of the exception handler&apos;s scope (inclusive)." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="end" comment="end of the exception handler&apos;s scope (exclusive)." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="handler" comment="beginning of the exception handler&apos;s code." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="type" comment="internal name of the type of exceptions handled by the handler,
      or &lt;tt&gt;null&lt;/tt&gt; to catch any exceptions (for &quot;finally&quot; blocks)." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitMaxs" fulltype="void" type="void">
				<comment>
					<description>Visits the maximum stack size and the maximum number of local variables of
 the method.</description>
					<attribute name="@param">
						<description>maxStack maximum stack size of the method.</description>
					</attribute>
					<attribute name="@param">
						<description>maxLocals maximum number of local variables for the method.</description>
					</attribute>
				</comment>
				<params>
					<param name="maxStack" comment="maximum stack size of the method." fulltype="int" type="int" />
					<param name="maxLocals" comment="maximum number of local variables for the method." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitLocalVariable" fulltype="void" type="void">
				<comment>
					<description>Visits a local variable declaration.</description>
					<attribute name="@param">
						<description>name the name of a local variable.</description>
					</attribute>
					<attribute name="@param">
						<description>desc the type descriptor of this local variable.</description>
					</attribute>
					<attribute name="@param">
						<description>start the first instruction corresponding to the scope of this
      local variable (inclusive).</description>
					</attribute>
					<attribute name="@param">
						<description>end the last instruction corresponding to the scope of this
      local variable (exclusive).</description>
					</attribute>
					<attribute name="@param">
						<description>index the local variable&apos;s index.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if one of the labels has not already been
      visited by this visitor (by the {@link #visitLabel visitLabel}
      method).</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of a local variable." fulltype="java.lang.String" type="String" />
					<param name="desc" comment="the type descriptor of this local variable." fulltype="java.lang.String" type="String" />
					<param name="start" comment="the first instruction corresponding to the scope of this
      local variable (inclusive)." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="end" comment="the last instruction corresponding to the scope of this
      local variable (exclusive)." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="index" comment="the local variable&apos;s index." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitLineNumber" fulltype="void" type="void">
				<comment>
					<description>Visits a line number declaration.</description>
					<attribute name="@param">
						<description>line a line number. This number refers to the source file
      from which the class was compiled.</description>
					</attribute>
					<attribute name="@param">
						<description>start the first instruction corresponding to this line number.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;start&lt;/tt&gt; has not already been
      visited by this visitor (by the {@link #visitLabel visitLabel}
      method).</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="a line number. This number refers to the source file
      from which the class was compiled." fulltype="int" type="int" />
					<param name="start" comment="the first instruction corresponding to this line number." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.org.objectweb.asm" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.CodeWriter" type="CodeWriter">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.CodeVisitor" type="CodeVisitor" />
		</implements>
		<comment>
			<description>A {@link CodeVisitor CodeVisitor} that generates Java bytecode instructions.
 Each visit method of this class appends the bytecode corresponding to the
 visited instruction to a byte vector, in the order these methods are called.</description>
		</comment>
		<methods>
			<constructor visibility="protected" name="CodeWriter">
				<comment>
					<description>Constructs a CodeWriter.</description>
					<attribute name="@param">
						<description>cw the class writer in which the method must be added.</description>
					</attribute>
					<attribute name="@param">
						<description>computeMaxs &lt;tt&gt;true&lt;/tt&gt; if the maximum stack size and number of
      local variables must be automatically computed.</description>
					</attribute>
				</comment>
				<params>
					<param name="cw" comment="the class writer in which the method must be added." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.ClassWriter" type="ClassWriter" />
					<param name="computeMaxs" comment="&lt;tt&gt;true&lt;/tt&gt; if the maximum stack size and number of
      local variables must be automatically computed." fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="protected" name="init" fulltype="void" type="void">
				<comment>
					<description>Initializes this CodeWriter to define the bytecode of the specified method.</description>
					<attribute name="@param">
						<description>access the method&apos;s access flags (see {@link Constants}).</description>
					</attribute>
					<attribute name="@param">
						<description>name the method&apos;s name.</description>
					</attribute>
					<attribute name="@param">
						<description>desc the method&apos;s descriptor (see {@link Type Type}).</description>
					</attribute>
					<attribute name="@param">
						<description>exceptions the internal names of the method&apos;s exceptions. May be
      &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="access" comment="the method&apos;s access flags (see {@link Constants})." fulltype="int" type="int" />
					<param name="name" comment="the method&apos;s name." fulltype="java.lang.String" type="String" />
					<param name="desc" comment="the method&apos;s descriptor (see {@link Type Type})." fulltype="java.lang.String" type="String" />
					<param name="exceptions" comment="the internal names of the method&apos;s exceptions. May be
      &lt;tt&gt;null&lt;/tt&gt;." fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitInsn" fulltype="void" type="void">
				<params>
					<param name="opcode" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitIntInsn" fulltype="void" type="void">
				<params>
					<param name="opcode" fulltype="int" type="int" />
					<param name="operand" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitVarInsn" fulltype="void" type="void">
				<params>
					<param name="opcode" fulltype="int" type="int" />
					<param name="var" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitTypeInsn" fulltype="void" type="void">
				<params>
					<param name="opcode" fulltype="int" type="int" />
					<param name="desc" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitFieldInsn" fulltype="void" type="void">
				<params>
					<param name="opcode" fulltype="int" type="int" />
					<param name="owner" fulltype="java.lang.String" type="String" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="desc" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitMethodInsn" fulltype="void" type="void">
				<params>
					<param name="opcode" fulltype="int" type="int" />
					<param name="owner" fulltype="java.lang.String" type="String" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="desc" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitJumpInsn" fulltype="void" type="void">
				<params>
					<param name="opcode" fulltype="int" type="int" />
					<param name="label" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
				</params>
			</method>
			<method visibility="public" name="visitLabel" fulltype="void" type="void">
				<params>
					<param name="label" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
				</params>
			</method>
			<method visibility="public" name="visitLdcInsn" fulltype="void" type="void">
				<params>
					<param name="cst" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="visitIincInsn" fulltype="void" type="void">
				<params>
					<param name="var" fulltype="int" type="int" />
					<param name="increment" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitTableSwitchInsn" fulltype="void" type="void">
				<params>
					<param name="min" fulltype="int" type="int" />
					<param name="max" fulltype="int" type="int" />
					<param name="dflt" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="labels" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label[]" type="Label" />
				</params>
			</method>
			<method visibility="public" name="visitLookupSwitchInsn" fulltype="void" type="void">
				<params>
					<param name="dflt" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="keys" fulltype="int[]" type="int" />
					<param name="labels" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label[]" type="Label" />
				</params>
			</method>
			<method visibility="public" name="visitMultiANewArrayInsn" fulltype="void" type="void">
				<params>
					<param name="desc" fulltype="java.lang.String" type="String" />
					<param name="dims" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitTryCatchBlock" fulltype="void" type="void">
				<params>
					<param name="start" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="end" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="handler" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="type" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="visitMaxs" fulltype="void" type="void">
				<params>
					<param name="maxStack" fulltype="int" type="int" />
					<param name="maxLocals" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitLocalVariable" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="desc" fulltype="java.lang.String" type="String" />
					<param name="start" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="end" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="visitLineNumber" fulltype="void" type="void">
				<params>
					<param name="line" fulltype="int" type="int" />
					<param name="start" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label" />
				</params>
			</method>
			<method visibility="protected" name="resizeInstructions" returncomment="the &lt;tt&gt;indexes&lt;/tt&gt; array, which now contains the new positions of
      the resized instructions (designated as above)." fulltype="int[]" type="int">
				<comment>
					<description>Resizes the designated instructions, while keeping jump offsets and
 instruction addresses consistent. This may require to resize other existing
 instructions, or even to introduce new instructions: for example,
 increasing the size of an instruction by 2 at the middle of a method can
 increases the offset of an IFEQ instruction from 32766 to 32768, in which
 case IFEQ 32766 must be replaced with IFNEQ 8 GOTO_W 32765. This, in turn,
 may require to increase the size of another jump instruction, and so on...
 All these operations are handled automatically by this method.
 &lt;p&gt;
 &lt;i&gt;This method must be called after all the method that is being built has
 been visited&lt;/i&gt;. In particular, the {@link Label Label} objects used to
 construct the method are no longer valid after this method has been called.</description>
					<attribute name="@param">
						<description>indexes current positions of the instructions to be resized. Each
      instruction must be designated by the index of its &lt;i&gt;last&lt;/i&gt; byte,
      plus one (or, in other words, by the index of the &lt;i&gt;first&lt;/i&gt; byte of
      the &lt;i&gt;next&lt;/i&gt; instruction).</description>
					</attribute>
					<attribute name="@param">
						<description>sizes the number of bytes to be &lt;i&gt;added&lt;/i&gt; to the above
      instructions. More precisely, for each i &amp;lt; &lt;tt&gt;len&lt;/tt&gt;,
      &lt;tt&gt;sizes&lt;/tt&gt;[i] bytes will be added at the end of the instruction
      designated by &lt;tt&gt;indexes&lt;/tt&gt;[i] or, if &lt;tt&gt;sizes&lt;/tt&gt;[i] is
      negative, the &lt;i&gt;last&lt;/i&gt; |&lt;tt&gt;sizes[i]&lt;/tt&gt;| bytes of the instruction
      will be removed (the instruction size &lt;i&gt;must not&lt;/i&gt; become negative
      or null). The gaps introduced by this method must be filled in
      &quot;manually&quot; in the array returned by the {@link #getCode getCode}
      method.</description>
					</attribute>
					<attribute name="@param">
						<description>len the number of instruction to be resized. Must be smaller than or
      equal to &lt;tt&gt;indexes&lt;/tt&gt;.length and &lt;tt&gt;sizes&lt;/tt&gt;.length.</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;tt&gt;indexes&lt;/tt&gt; array, which now contains the new positions of
      the resized instructions (designated as above).</description>
					</attribute>
				</comment>
				<params>
					<param name="indexes" comment="current positions of the instructions to be resized. Each
      instruction must be designated by the index of its &lt;i&gt;last&lt;/i&gt; byte,
      plus one (or, in other words, by the index of the &lt;i&gt;first&lt;/i&gt; byte of
      the &lt;i&gt;next&lt;/i&gt; instruction)." fulltype="int[]" type="int" />
					<param name="sizes" comment="the number of bytes to be &lt;i&gt;added&lt;/i&gt; to the above
      instructions. More precisely, for each i &amp;lt; &lt;tt&gt;len&lt;/tt&gt;,
      &lt;tt&gt;sizes&lt;/tt&gt;[i] bytes will be added at the end of the instruction
      designated by &lt;tt&gt;indexes&lt;/tt&gt;[i] or, if &lt;tt&gt;sizes&lt;/tt&gt;[i] is
      negative, the &lt;i&gt;last&lt;/i&gt; |&lt;tt&gt;sizes[i]&lt;/tt&gt;| bytes of the instruction
      will be removed (the instruction size &lt;i&gt;must not&lt;/i&gt; become negative
      or null). The gaps introduced by this method must be filled in
      &quot;manually&quot; in the array returned by the {@link #getCode getCode}
      method." fulltype="int[]" type="int" />
					<param name="len" comment="the number of instruction to be resized. Must be smaller than or
      equal to &lt;tt&gt;indexes&lt;/tt&gt;.length and &lt;tt&gt;sizes&lt;/tt&gt;.length." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="protected" name="getCodeSize" returncomment="the current size of the bytecode of this method." fulltype="int" type="int">
				<comment>
					<description>Returns the current size of the bytecode of this method. This size just
 includes the size of the bytecode instructions: it does not include the
 size of the Exceptions, LocalVariableTable, LineNumberTable, Synthetic
 and Deprecated attributes, if present.</description>
					<attribute name="@return">
						<description>the current size of the bytecode of this method.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="getCode" returncomment="the current bytecode of this method. The bytecode is contained
      between the index 0 (inclusive) and the index {@link #getCodeSize
      getCodeSize} (exclusive)." fulltype="byte[]" type="byte">
				<comment>
					<description>Returns the current bytecode of this method. This bytecode only contains
 the instructions: it does not include the Exceptions, LocalVariableTable,
 LineNumberTable, Synthetic and Deprecated attributes, if present.</description>
					<attribute name="@return">
						<description>the current bytecode of this method. The bytecode is contained
      between the index 0 (inclusive) and the index {@link #getCodeSize
      getCodeSize} (exclusive).</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh.org.objectweb.asm" interface="true" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Constants" type="Constants">
		<comment>
			<description>Defines the JVM opcodes, access flags and array type codes. This interface
 does not define all the JVM opcodes because some opcodes are automatically
 handled. For example, the xLOAD and xSTORE opcodes are automatically replaced
 by xLOAD_n and xSTORE_n opcodes when possible. The xLOAD_n and xSTORE_n
 opcodes are therefore not defined in this interface. Likewise for LDC,
 automatically replaced by LDC_W or LDC2_W when necessary, WIDE, GOTO_W and
 JSR_W.</description>
		</comment>
		<fields>
			<field final="true" static="true" const="1" visibility="public" name="ACC_PUBLIC" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="ACC_PRIVATE" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="4" visibility="public" name="ACC_PROTECTED" constexpr="4" fulltype="int" type="int" />
			<field final="true" static="true" const="8" visibility="public" name="ACC_STATIC" constexpr="8" fulltype="int" type="int" />
			<field final="true" static="true" const="16" visibility="public" name="ACC_FINAL" constexpr="16" fulltype="int" type="int" />
			<field final="true" static="true" const="32" visibility="public" name="ACC_SYNCHRONIZED" constexpr="32" fulltype="int" type="int" />
			<field final="true" static="true" const="64" visibility="public" name="ACC_VOLATILE" constexpr="64" fulltype="int" type="int" />
			<field final="true" static="true" const="128" visibility="public" name="ACC_TRANSIENT" constexpr="128" fulltype="int" type="int" />
			<field final="true" static="true" const="256" visibility="public" name="ACC_NATIVE" constexpr="256" fulltype="int" type="int" />
			<field final="true" static="true" const="512" visibility="public" name="ACC_INTERFACE" constexpr="512" fulltype="int" type="int" />
			<field final="true" static="true" const="1024" visibility="public" name="ACC_ABSTRACT" constexpr="1024" fulltype="int" type="int" />
			<field final="true" static="true" const="2048" visibility="public" name="ACC_STRICT" constexpr="2048" fulltype="int" type="int" />
			<field final="true" static="true" const="32" visibility="public" name="ACC_SUPER" constexpr="32" fulltype="int" type="int" />
			<field final="true" static="true" const="65536" visibility="public" name="ACC_SYNTHETIC" constexpr="65536" fulltype="int" type="int" />
			<field final="true" static="true" const="131072" visibility="public" name="ACC_DEPRECATED" constexpr="131072" fulltype="int" type="int" />
			<field final="true" static="true" const="4" visibility="public" name="T_BOOLEAN" constexpr="4" fulltype="int" type="int" />
			<field final="true" static="true" const="5" visibility="public" name="T_CHAR" constexpr="5" fulltype="int" type="int" />
			<field final="true" static="true" const="6" visibility="public" name="T_FLOAT" constexpr="6" fulltype="int" type="int" />
			<field final="true" static="true" const="7" visibility="public" name="T_DOUBLE" constexpr="7" fulltype="int" type="int" />
			<field final="true" static="true" const="8" visibility="public" name="T_BYTE" constexpr="8" fulltype="int" type="int" />
			<field final="true" static="true" const="9" visibility="public" name="T_SHORT" constexpr="9" fulltype="int" type="int" />
			<field final="true" static="true" const="10" visibility="public" name="T_INT" constexpr="10" fulltype="int" type="int" />
			<field final="true" static="true" const="11" visibility="public" name="T_LONG" constexpr="11" fulltype="int" type="int" />
			<field final="true" static="true" const="0" visibility="public" name="NOP" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="ACONST_NULL" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="ICONST_M1" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="3" visibility="public" name="ICONST_0" constexpr="3" fulltype="int" type="int" />
			<field final="true" static="true" const="4" visibility="public" name="ICONST_1" constexpr="4" fulltype="int" type="int" />
			<field final="true" static="true" const="5" visibility="public" name="ICONST_2" constexpr="5" fulltype="int" type="int" />
			<field final="true" static="true" const="6" visibility="public" name="ICONST_3" constexpr="6" fulltype="int" type="int" />
			<field final="true" static="true" const="7" visibility="public" name="ICONST_4" constexpr="7" fulltype="int" type="int" />
			<field final="true" static="true" const="8" visibility="public" name="ICONST_5" constexpr="8" fulltype="int" type="int" />
			<field final="true" static="true" const="9" visibility="public" name="LCONST_0" constexpr="9" fulltype="int" type="int" />
			<field final="true" static="true" const="10" visibility="public" name="LCONST_1" constexpr="10" fulltype="int" type="int" />
			<field final="true" static="true" const="11" visibility="public" name="FCONST_0" constexpr="11" fulltype="int" type="int" />
			<field final="true" static="true" const="12" visibility="public" name="FCONST_1" constexpr="12" fulltype="int" type="int" />
			<field final="true" static="true" const="13" visibility="public" name="FCONST_2" constexpr="13" fulltype="int" type="int" />
			<field final="true" static="true" const="14" visibility="public" name="DCONST_0" constexpr="14" fulltype="int" type="int" />
			<field final="true" static="true" const="15" visibility="public" name="DCONST_1" constexpr="15" fulltype="int" type="int" />
			<field final="true" static="true" const="16" visibility="public" name="BIPUSH" constexpr="16" fulltype="int" type="int" />
			<field final="true" static="true" const="17" visibility="public" name="SIPUSH" constexpr="17" fulltype="int" type="int" />
			<field final="true" static="true" const="18" visibility="public" name="LDC" constexpr="18" fulltype="int" type="int" />
			<field final="true" static="true" const="21" visibility="public" name="ILOAD" constexpr="21" fulltype="int" type="int" />
			<field final="true" static="true" const="22" visibility="public" name="LLOAD" constexpr="22" fulltype="int" type="int" />
			<field final="true" static="true" const="23" visibility="public" name="FLOAD" constexpr="23" fulltype="int" type="int" />
			<field final="true" static="true" const="24" visibility="public" name="DLOAD" constexpr="24" fulltype="int" type="int" />
			<field final="true" static="true" const="25" visibility="public" name="ALOAD" constexpr="25" fulltype="int" type="int" />
			<field final="true" static="true" const="46" visibility="public" name="IALOAD" constexpr="46" fulltype="int" type="int" />
			<field final="true" static="true" const="47" visibility="public" name="LALOAD" constexpr="47" fulltype="int" type="int" />
			<field final="true" static="true" const="48" visibility="public" name="FALOAD" constexpr="48" fulltype="int" type="int" />
			<field final="true" static="true" const="49" visibility="public" name="DALOAD" constexpr="49" fulltype="int" type="int" />
			<field final="true" static="true" const="50" visibility="public" name="AALOAD" constexpr="50" fulltype="int" type="int" />
			<field final="true" static="true" const="51" visibility="public" name="BALOAD" constexpr="51" fulltype="int" type="int" />
			<field final="true" static="true" const="52" visibility="public" name="CALOAD" constexpr="52" fulltype="int" type="int" />
			<field final="true" static="true" const="53" visibility="public" name="SALOAD" constexpr="53" fulltype="int" type="int" />
			<field final="true" static="true" const="54" visibility="public" name="ISTORE" constexpr="54" fulltype="int" type="int" />
			<field final="true" static="true" const="55" visibility="public" name="LSTORE" constexpr="55" fulltype="int" type="int" />
			<field final="true" static="true" const="56" visibility="public" name="FSTORE" constexpr="56" fulltype="int" type="int" />
			<field final="true" static="true" const="57" visibility="public" name="DSTORE" constexpr="57" fulltype="int" type="int" />
			<field final="true" static="true" const="58" visibility="public" name="ASTORE" constexpr="58" fulltype="int" type="int" />
			<field final="true" static="true" const="79" visibility="public" name="IASTORE" constexpr="79" fulltype="int" type="int" />
			<field final="true" static="true" const="80" visibility="public" name="LASTORE" constexpr="80" fulltype="int" type="int" />
			<field final="true" static="true" const="81" visibility="public" name="FASTORE" constexpr="81" fulltype="int" type="int" />
			<field final="true" static="true" const="82" visibility="public" name="DASTORE" constexpr="82" fulltype="int" type="int" />
			<field final="true" static="true" const="83" visibility="public" name="AASTORE" constexpr="83" fulltype="int" type="int" />
			<field final="true" static="true" const="84" visibility="public" name="BASTORE" constexpr="84" fulltype="int" type="int" />
			<field final="true" static="true" const="85" visibility="public" name="CASTORE" constexpr="85" fulltype="int" type="int" />
			<field final="true" static="true" const="86" visibility="public" name="SASTORE" constexpr="86" fulltype="int" type="int" />
			<field final="true" static="true" const="87" visibility="public" name="POP" constexpr="87" fulltype="int" type="int" />
			<field final="true" static="true" const="88" visibility="public" name="POP2" constexpr="88" fulltype="int" type="int" />
			<field final="true" static="true" const="89" visibility="public" name="DUP" constexpr="89" fulltype="int" type="int" />
			<field final="true" static="true" const="90" visibility="public" name="DUP_X1" constexpr="90" fulltype="int" type="int" />
			<field final="true" static="true" const="91" visibility="public" name="DUP_X2" constexpr="91" fulltype="int" type="int" />
			<field final="true" static="true" const="92" visibility="public" name="DUP2" constexpr="92" fulltype="int" type="int" />
			<field final="true" static="true" const="93" visibility="public" name="DUP2_X1" constexpr="93" fulltype="int" type="int" />
			<field final="true" static="true" const="94" visibility="public" name="DUP2_X2" constexpr="94" fulltype="int" type="int" />
			<field final="true" static="true" const="95" visibility="public" name="SWAP" constexpr="95" fulltype="int" type="int" />
			<field final="true" static="true" const="96" visibility="public" name="IADD" constexpr="96" fulltype="int" type="int" />
			<field final="true" static="true" const="97" visibility="public" name="LADD" constexpr="97" fulltype="int" type="int" />
			<field final="true" static="true" const="98" visibility="public" name="FADD" constexpr="98" fulltype="int" type="int" />
			<field final="true" static="true" const="99" visibility="public" name="DADD" constexpr="99" fulltype="int" type="int" />
			<field final="true" static="true" const="100" visibility="public" name="ISUB" constexpr="100" fulltype="int" type="int" />
			<field final="true" static="true" const="101" visibility="public" name="LSUB" constexpr="101" fulltype="int" type="int" />
			<field final="true" static="true" const="102" visibility="public" name="FSUB" constexpr="102" fulltype="int" type="int" />
			<field final="true" static="true" const="103" visibility="public" name="DSUB" constexpr="103" fulltype="int" type="int" />
			<field final="true" static="true" const="104" visibility="public" name="IMUL" constexpr="104" fulltype="int" type="int" />
			<field final="true" static="true" const="105" visibility="public" name="LMUL" constexpr="105" fulltype="int" type="int" />
			<field final="true" static="true" const="106" visibility="public" name="FMUL" constexpr="106" fulltype="int" type="int" />
			<field final="true" static="true" const="107" visibility="public" name="DMUL" constexpr="107" fulltype="int" type="int" />
			<field final="true" static="true" const="108" visibility="public" name="IDIV" constexpr="108" fulltype="int" type="int" />
			<field final="true" static="true" const="109" visibility="public" name="LDIV" constexpr="109" fulltype="int" type="int" />
			<field final="true" static="true" const="110" visibility="public" name="FDIV" constexpr="110" fulltype="int" type="int" />
			<field final="true" static="true" const="111" visibility="public" name="DDIV" constexpr="111" fulltype="int" type="int" />
			<field final="true" static="true" const="112" visibility="public" name="IREM" constexpr="112" fulltype="int" type="int" />
			<field final="true" static="true" const="113" visibility="public" name="LREM" constexpr="113" fulltype="int" type="int" />
			<field final="true" static="true" const="114" visibility="public" name="FREM" constexpr="114" fulltype="int" type="int" />
			<field final="true" static="true" const="115" visibility="public" name="DREM" constexpr="115" fulltype="int" type="int" />
			<field final="true" static="true" const="116" visibility="public" name="INEG" constexpr="116" fulltype="int" type="int" />
			<field final="true" static="true" const="117" visibility="public" name="LNEG" constexpr="117" fulltype="int" type="int" />
			<field final="true" static="true" const="118" visibility="public" name="FNEG" constexpr="118" fulltype="int" type="int" />
			<field final="true" static="true" const="119" visibility="public" name="DNEG" constexpr="119" fulltype="int" type="int" />
			<field final="true" static="true" const="120" visibility="public" name="ISHL" constexpr="120" fulltype="int" type="int" />
			<field final="true" static="true" const="121" visibility="public" name="LSHL" constexpr="121" fulltype="int" type="int" />
			<field final="true" static="true" const="122" visibility="public" name="ISHR" constexpr="122" fulltype="int" type="int" />
			<field final="true" static="true" const="123" visibility="public" name="LSHR" constexpr="123" fulltype="int" type="int" />
			<field final="true" static="true" const="124" visibility="public" name="IUSHR" constexpr="124" fulltype="int" type="int" />
			<field final="true" static="true" const="125" visibility="public" name="LUSHR" constexpr="125" fulltype="int" type="int" />
			<field final="true" static="true" const="126" visibility="public" name="IAND" constexpr="126" fulltype="int" type="int" />
			<field final="true" static="true" const="127" visibility="public" name="LAND" constexpr="127" fulltype="int" type="int" />
			<field final="true" static="true" const="128" visibility="public" name="IOR" constexpr="128" fulltype="int" type="int" />
			<field final="true" static="true" const="129" visibility="public" name="LOR" constexpr="129" fulltype="int" type="int" />
			<field final="true" static="true" const="130" visibility="public" name="IXOR" constexpr="130" fulltype="int" type="int" />
			<field final="true" static="true" const="131" visibility="public" name="LXOR" constexpr="131" fulltype="int" type="int" />
			<field final="true" static="true" const="132" visibility="public" name="IINC" constexpr="132" fulltype="int" type="int" />
			<field final="true" static="true" const="133" visibility="public" name="I2L" constexpr="133" fulltype="int" type="int" />
			<field final="true" static="true" const="134" visibility="public" name="I2F" constexpr="134" fulltype="int" type="int" />
			<field final="true" static="true" const="135" visibility="public" name="I2D" constexpr="135" fulltype="int" type="int" />
			<field final="true" static="true" const="136" visibility="public" name="L2I" constexpr="136" fulltype="int" type="int" />
			<field final="true" static="true" const="137" visibility="public" name="L2F" constexpr="137" fulltype="int" type="int" />
			<field final="true" static="true" const="138" visibility="public" name="L2D" constexpr="138" fulltype="int" type="int" />
			<field final="true" static="true" const="139" visibility="public" name="F2I" constexpr="139" fulltype="int" type="int" />
			<field final="true" static="true" const="140" visibility="public" name="F2L" constexpr="140" fulltype="int" type="int" />
			<field final="true" static="true" const="141" visibility="public" name="F2D" constexpr="141" fulltype="int" type="int" />
			<field final="true" static="true" const="142" visibility="public" name="D2I" constexpr="142" fulltype="int" type="int" />
			<field final="true" static="true" const="143" visibility="public" name="D2L" constexpr="143" fulltype="int" type="int" />
			<field final="true" static="true" const="144" visibility="public" name="D2F" constexpr="144" fulltype="int" type="int" />
			<field final="true" static="true" const="145" visibility="public" name="I2B" constexpr="145" fulltype="int" type="int" />
			<field final="true" static="true" const="146" visibility="public" name="I2C" constexpr="146" fulltype="int" type="int" />
			<field final="true" static="true" const="147" visibility="public" name="I2S" constexpr="147" fulltype="int" type="int" />
			<field final="true" static="true" const="148" visibility="public" name="LCMP" constexpr="148" fulltype="int" type="int" />
			<field final="true" static="true" const="149" visibility="public" name="FCMPL" constexpr="149" fulltype="int" type="int" />
			<field final="true" static="true" const="150" visibility="public" name="FCMPG" constexpr="150" fulltype="int" type="int" />
			<field final="true" static="true" const="151" visibility="public" name="DCMPL" constexpr="151" fulltype="int" type="int" />
			<field final="true" static="true" const="152" visibility="public" name="DCMPG" constexpr="152" fulltype="int" type="int" />
			<field final="true" static="true" const="153" visibility="public" name="IFEQ" constexpr="153" fulltype="int" type="int" />
			<field final="true" static="true" const="154" visibility="public" name="IFNE" constexpr="154" fulltype="int" type="int" />
			<field final="true" static="true" const="155" visibility="public" name="IFLT" constexpr="155" fulltype="int" type="int" />
			<field final="true" static="true" const="156" visibility="public" name="IFGE" constexpr="156" fulltype="int" type="int" />
			<field final="true" static="true" const="157" visibility="public" name="IFGT" constexpr="157" fulltype="int" type="int" />
			<field final="true" static="true" const="158" visibility="public" name="IFLE" constexpr="158" fulltype="int" type="int" />
			<field final="true" static="true" const="159" visibility="public" name="IF_ICMPEQ" constexpr="159" fulltype="int" type="int" />
			<field final="true" static="true" const="160" visibility="public" name="IF_ICMPNE" constexpr="160" fulltype="int" type="int" />
			<field final="true" static="true" const="161" visibility="public" name="IF_ICMPLT" constexpr="161" fulltype="int" type="int" />
			<field final="true" static="true" const="162" visibility="public" name="IF_ICMPGE" constexpr="162" fulltype="int" type="int" />
			<field final="true" static="true" const="163" visibility="public" name="IF_ICMPGT" constexpr="163" fulltype="int" type="int" />
			<field final="true" static="true" const="164" visibility="public" name="IF_ICMPLE" constexpr="164" fulltype="int" type="int" />
			<field final="true" static="true" const="165" visibility="public" name="IF_ACMPEQ" constexpr="165" fulltype="int" type="int" />
			<field final="true" static="true" const="166" visibility="public" name="IF_ACMPNE" constexpr="166" fulltype="int" type="int" />
			<field final="true" static="true" const="167" visibility="public" name="GOTO" constexpr="167" fulltype="int" type="int" />
			<field final="true" static="true" const="168" visibility="public" name="JSR" constexpr="168" fulltype="int" type="int" />
			<field final="true" static="true" const="169" visibility="public" name="RET" constexpr="169" fulltype="int" type="int" />
			<field final="true" static="true" const="170" visibility="public" name="TABLESWITCH" constexpr="170" fulltype="int" type="int" />
			<field final="true" static="true" const="171" visibility="public" name="LOOKUPSWITCH" constexpr="171" fulltype="int" type="int" />
			<field final="true" static="true" const="172" visibility="public" name="IRETURN" constexpr="172" fulltype="int" type="int" />
			<field final="true" static="true" const="173" visibility="public" name="LRETURN" constexpr="173" fulltype="int" type="int" />
			<field final="true" static="true" const="174" visibility="public" name="FRETURN" constexpr="174" fulltype="int" type="int" />
			<field final="true" static="true" const="175" visibility="public" name="DRETURN" constexpr="175" fulltype="int" type="int" />
			<field final="true" static="true" const="176" visibility="public" name="ARETURN" constexpr="176" fulltype="int" type="int" />
			<field final="true" static="true" const="177" visibility="public" name="RETURN" constexpr="177" fulltype="int" type="int" />
			<field final="true" static="true" const="178" visibility="public" name="GETSTATIC" constexpr="178" fulltype="int" type="int" />
			<field final="true" static="true" const="179" visibility="public" name="PUTSTATIC" constexpr="179" fulltype="int" type="int" />
			<field final="true" static="true" const="180" visibility="public" name="GETFIELD" constexpr="180" fulltype="int" type="int" />
			<field final="true" static="true" const="181" visibility="public" name="PUTFIELD" constexpr="181" fulltype="int" type="int" />
			<field final="true" static="true" const="182" visibility="public" name="INVOKEVIRTUAL" constexpr="182" fulltype="int" type="int" />
			<field final="true" static="true" const="183" visibility="public" name="INVOKESPECIAL" constexpr="183" fulltype="int" type="int" />
			<field final="true" static="true" const="184" visibility="public" name="INVOKESTATIC" constexpr="184" fulltype="int" type="int" />
			<field final="true" static="true" const="185" visibility="public" name="INVOKEINTERFACE" constexpr="185" fulltype="int" type="int" />
			<field final="true" static="true" const="187" visibility="public" name="NEW" constexpr="187" fulltype="int" type="int" />
			<field final="true" static="true" const="188" visibility="public" name="NEWARRAY" constexpr="188" fulltype="int" type="int" />
			<field final="true" static="true" const="189" visibility="public" name="ANEWARRAY" constexpr="189" fulltype="int" type="int" />
			<field final="true" static="true" const="190" visibility="public" name="ARRAYLENGTH" constexpr="190" fulltype="int" type="int" />
			<field final="true" static="true" const="191" visibility="public" name="ATHROW" constexpr="191" fulltype="int" type="int" />
			<field final="true" static="true" const="192" visibility="public" name="CHECKCAST" constexpr="192" fulltype="int" type="int" />
			<field final="true" static="true" const="193" visibility="public" name="INSTANCEOF" constexpr="193" fulltype="int" type="int" />
			<field final="true" static="true" const="194" visibility="public" name="MONITORENTER" constexpr="194" fulltype="int" type="int" />
			<field final="true" static="true" const="195" visibility="public" name="MONITOREXIT" constexpr="195" fulltype="int" type="int" />
			<field final="true" static="true" const="197" visibility="public" name="MULTIANEWARRAY" constexpr="197" fulltype="int" type="int" />
			<field final="true" static="true" const="198" visibility="public" name="IFNULL" constexpr="198" fulltype="int" type="int" />
			<field final="true" static="true" const="199" visibility="public" name="IFNONNULL" constexpr="199" fulltype="int" type="int" />
		</fields>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.org.objectweb.asm" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" type="Label">
		<comment>
			<description>A label represents a position in the bytecode of a method. Labels are used
 for jump, goto, and switch instructions, and for try catch blocks.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Label">
				<comment>
					<description>Constructs a new label.</description>
				</comment>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh.org.objectweb.asm" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
		<comment>
			<description>A Java type. This class can be used to make it easier to manipulate type
 and method descriptors.</description>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="VOID" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>The sort of the &lt;tt&gt;void&lt;/tt&gt; type. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="BOOLEAN" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>The sort of the &lt;tt&gt;boolean&lt;/tt&gt; type. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="2" visibility="public" name="CHAR" constexpr="2" fulltype="int" type="int">
				<comment>
					<description>The sort of the &lt;tt&gt;char&lt;/tt&gt; type. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="3" visibility="public" name="BYTE" constexpr="3" fulltype="int" type="int">
				<comment>
					<description>The sort of the &lt;tt&gt;byte&lt;/tt&gt; type. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="4" visibility="public" name="SHORT" constexpr="4" fulltype="int" type="int">
				<comment>
					<description>The sort of the &lt;tt&gt;short&lt;/tt&gt; type. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="5" visibility="public" name="INT" constexpr="5" fulltype="int" type="int">
				<comment>
					<description>The sort of the &lt;tt&gt;int&lt;/tt&gt; type. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="6" visibility="public" name="FLOAT" constexpr="6" fulltype="int" type="int">
				<comment>
					<description>The sort of the &lt;tt&gt;float&lt;/tt&gt; type. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="7" visibility="public" name="LONG" constexpr="7" fulltype="int" type="int">
				<comment>
					<description>The sort of the &lt;tt&gt;long&lt;/tt&gt; type. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="8" visibility="public" name="DOUBLE" constexpr="8" fulltype="int" type="int">
				<comment>
					<description>The sort of the &lt;tt&gt;double&lt;/tt&gt; type. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="9" visibility="public" name="ARRAY" constexpr="9" fulltype="int" type="int">
				<comment>
					<description>The sort of array reference types. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="10" visibility="public" name="OBJECT" constexpr="10" fulltype="int" type="int">
				<comment>
					<description>The sort of object reference type. See {@link #getSort getSort}.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="VOID_TYPE" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>The &lt;tt&gt;void&lt;/tt&gt; type.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BOOLEAN_TYPE" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>The &lt;tt&gt;boolean&lt;/tt&gt; type.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CHAR_TYPE" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>The &lt;tt&gt;char&lt;/tt&gt; type.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BYTE_TYPE" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>The &lt;tt&gt;byte&lt;/tt&gt; type.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SHORT_TYPE" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>The &lt;tt&gt;short&lt;/tt&gt; type.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="INT_TYPE" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>The &lt;tt&gt;int&lt;/tt&gt; type.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="FLOAT_TYPE" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>The &lt;tt&gt;float&lt;/tt&gt; type.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LONG_TYPE" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>The &lt;tt&gt;long&lt;/tt&gt; type.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DOUBLE_TYPE" fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>The &lt;tt&gt;double&lt;/tt&gt; type.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<method static="true" visibility="public" name="getType" returncomment="the Java type corresponding to the given type descriptor." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>Returns the Java type corresponding to the given type descriptor.</description>
					<attribute name="@param">
						<description>typeDescriptor a type descriptor.</description>
					</attribute>
					<attribute name="@return">
						<description>the Java type corresponding to the given type descriptor.</description>
					</attribute>
				</comment>
				<params>
					<param name="typeDescriptor" comment="a type descriptor." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getType" returncomment="the Java type corresponding to the given class." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>Returns the Java type corresponding to the given class.</description>
					<attribute name="@param">
						<description>c a class.</description>
					</attribute>
					<attribute name="@return">
						<description>the Java type corresponding to the given class.</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="a class." fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="getArgumentTypes" returncomment="the Java types corresponding to the argument types of the given
      method descriptor." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type[]" type="Type">
				<comment>
					<description>Returns the Java types corresponding to the argument types of the given
 method descriptor.</description>
					<attribute name="@param">
						<description>methodDescriptor a method descriptor.</description>
					</attribute>
					<attribute name="@return">
						<description>the Java types corresponding to the argument types of the given
      method descriptor.</description>
					</attribute>
				</comment>
				<params>
					<param name="methodDescriptor" comment="a method descriptor." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getArgumentTypes" returncomment="the Java types corresponding to the argument types of the given
      method." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type[]" type="Type">
				<comment>
					<description>Returns the Java types corresponding to the argument types of the given
 method.</description>
					<attribute name="@param">
						<description>method a method.</description>
					</attribute>
					<attribute name="@return">
						<description>the Java types corresponding to the argument types of the given
      method.</description>
					</attribute>
				</comment>
				<params>
					<param name="method" comment="a method." fulltype="java.lang.reflect.Method" type="Method" />
				</params>
			</method>
			<method static="true" visibility="public" name="getReturnType" returncomment="the Java type corresponding to the return type of the given
      method descriptor." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>Returns the Java type corresponding to the return type of the given
 method descriptor.</description>
					<attribute name="@param">
						<description>methodDescriptor a method descriptor.</description>
					</attribute>
					<attribute name="@return">
						<description>the Java type corresponding to the return type of the given
      method descriptor.</description>
					</attribute>
				</comment>
				<params>
					<param name="methodDescriptor" comment="a method descriptor." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getReturnType" returncomment="the Java type corresponding to the return type of the given
      method." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>Returns the Java type corresponding to the return type of the given
 method.</description>
					<attribute name="@param">
						<description>method a method.</description>
					</attribute>
					<attribute name="@return">
						<description>the Java type corresponding to the return type of the given
      method.</description>
					</attribute>
				</comment>
				<params>
					<param name="method" comment="a method." fulltype="java.lang.reflect.Method" type="Method" />
				</params>
			</method>
			<method visibility="public" name="getSort" returncomment="{@link #VOID VOID}, {@link #BOOLEAN BOOLEAN}, {@link #CHAR CHAR},
      {@link #BYTE BYTE}, {@link #SHORT SHORT}, {@link #INT INT}, {@link
      #FLOAT FLOAT}, {@link #LONG LONG}, {@link #DOUBLE DOUBLE}, {@link
      #ARRAY ARRAY} or {@link #OBJECT OBJECT}." fulltype="int" type="int">
				<comment>
					<description>Returns the sort of this Java type.</description>
					<attribute name="@return">
						<description>{@link #VOID VOID}, {@link #BOOLEAN BOOLEAN}, {@link #CHAR CHAR},
      {@link #BYTE BYTE}, {@link #SHORT SHORT}, {@link #INT INT}, {@link
      #FLOAT FLOAT}, {@link #LONG LONG}, {@link #DOUBLE DOUBLE}, {@link
      #ARRAY ARRAY} or {@link #OBJECT OBJECT}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDimensions" returncomment="the number of dimensions of this array type." fulltype="int" type="int">
				<comment>
					<description>Returns the number of dimensions of this array type.
 This method should only be used for an array type.</description>
					<attribute name="@return">
						<description>the number of dimensions of this array type.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getElementType" returncomment="Returns the type of the elements of this array type." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type">
				<comment>
					<description>Returns the type of the elements of this array type.
 This method should only be used for an array type.</description>
					<attribute name="@return">
						<description>Returns the type of the elements of this array type.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getClassName" returncomment="the fully qualified name of the class corresponding to this object
      type." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the class corresponding to this object type.
 This method should only be used for an object type.</description>
					<attribute name="@return">
						<description>the fully qualified name of the class corresponding to this object
      type.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getInternalName" returncomment="the internal name of the class corresponding to this object type." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the internal name of the class corresponding to this object type.
 The internal name of a class is its fully qualified name, where &apos;.&apos; are
 replaced by &apos;/&apos;.   * This method should only be used for an object type.</description>
					<attribute name="@return">
						<description>the internal name of the class corresponding to this object type.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDescriptor" returncomment="the descriptor corresponding to this Java type." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the descriptor corresponding to this Java type.</description>
					<attribute name="@return">
						<description>the descriptor corresponding to this Java type.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getMethodDescriptor" returncomment="the descriptor corresponding to the given argument and return
      types." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the descriptor corresponding to the given argument and return
 types.</description>
					<attribute name="@param">
						<description>returnType the return type of the method.</description>
					</attribute>
					<attribute name="@param">
						<description>argumentTypes the argument types of the method.</description>
					</attribute>
					<attribute name="@return">
						<description>the descriptor corresponding to the given argument and return
      types.</description>
					</attribute>
				</comment>
				<params>
					<param name="returnType" comment="the return type of the method." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type" type="Type" />
					<param name="argumentTypes" comment="the argument types of the method." fulltype="org.gjt.sp.jedit.bsh.org.objectweb.asm.Type[]" type="Type" />
				</params>
			</method>
			<method static="true" visibility="public" name="getInternalName" returncomment="the internal name of the given class." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the internal name of the given class. The internal name of a class
 is its fully qualified name, where &apos;.&apos; are replaced by &apos;/&apos;.</description>
					<attribute name="@param">
						<description>c an object class.</description>
					</attribute>
					<attribute name="@return">
						<description>the internal name of the given class.</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="an object class." fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="getDescriptor" returncomment="the descriptor corresponding to the given class." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the descriptor corresponding to the given Java type.</description>
					<attribute name="@param">
						<description>c an object class, a primitive class or an array class.</description>
					</attribute>
					<attribute name="@return">
						<description>the descriptor corresponding to the given class.</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="an object class, a primitive class or an array class." fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="getMethodDescriptor" returncomment="the descriptor of the given method." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the descriptor corresponding to the given method.</description>
					<attribute name="@param">
						<description>m a {@link Method Method} object.</description>
					</attribute>
					<attribute name="@return">
						<description>the descriptor of the given method.</description>
					</attribute>
				</comment>
				<params>
					<param name="m" comment="a {@link Method Method} object." fulltype="java.lang.reflect.Method" type="Method" />
				</params>
			</method>
			<method visibility="public" name="getSize" returncomment="the size of values of this type, i.e., 2 for &lt;tt&gt;long&lt;/tt&gt; and
      &lt;tt&gt;double&lt;/tt&gt;, and 1 otherwise." fulltype="int" type="int">
				<comment>
					<description>Returns the size of values of this type.</description>
					<attribute name="@return">
						<description>the size of values of this type, i.e., 2 for &lt;tt&gt;long&lt;/tt&gt; and
      &lt;tt&gt;double&lt;/tt&gt;, and 1 otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getOpcode" returncomment="an opcode that is similar to the given opcode, but adapted to this
      Java type. For example, if this type is &lt;tt&gt;float&lt;/tt&gt; and
      &lt;tt&gt;opcode&lt;/tt&gt; is IRETURN, this method returns FRETURN." fulltype="int" type="int">
				<comment>
					<description>Returns a JVM instruction opcode adapted to this Java type.</description>
					<attribute name="@param">
						<description>opcode a JVM instruction opcode. This opcode must be one of ILOAD,
      ISTORE, IALOAD, IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG, ISHL,
      ISHR, IUSHR, IAND, IOR, IXOR and IRETURN.</description>
					</attribute>
					<attribute name="@return">
						<description>an opcode that is similar to the given opcode, but adapted to this
      Java type. For example, if this type is &lt;tt&gt;float&lt;/tt&gt; and
      &lt;tt&gt;opcode&lt;/tt&gt; is IRETURN, this method returns FRETURN.</description>
					</attribute>
				</comment>
				<params>
					<param name="opcode" comment="a JVM instruction opcode. This opcode must be one of ILOAD,
      ISTORE, IALOAD, IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG, ISHL,
      ISHR, IUSHR, IAND, IOR, IXOR and IRETURN." fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EvalError" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.EvalError" fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException">
		<comment>
			<description>This exception is thrown when parse errors are encountered.
 You can explicitly create objects of this exception type by
 calling the method generateParseException in the generated
 parser.

 You can modify this class to customize your error reporting
 mechanisms so long as you retain the public fields.</description>
		</comment>
		<fields>
			<field visibility="protected" name="specialConstructor" fulltype="boolean" type="boolean">
				<comment>
					<description>This variable determines which constructor was used to create
 this object and thereby affects the semantics of the
 &quot;getMessage&quot; method (see below).</description>
				</comment>
			</field>
			<field visibility="public" name="currentToken" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token">
				<comment>
					<description>This is the last token that has been consumed successfully.  If
 this object has been created due to a parse error, the token
 followng this token will (therefore) be the first error token.</description>
				</comment>
			</field>
			<field visibility="public" name="expectedTokenSequences" fulltype="int[][]" type="int">
				<comment>
					<description>Each entry in this array is an array of integers.  Each array
 of integers represents a sequence of tokens (by their ordinal
 values) that is expected at this point of the parse.</description>
				</comment>
			</field>
			<field visibility="public" name="tokenImage" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>This is a reference to the &quot;tokenImage&quot; array of the generated
 parser within which the parse error occurred.  This array is
 defined in the generated ...Constants interface.</description>
				</comment>
			</field>
			<field visibility="protected" name="eol" fulltype="java.lang.String" type="String">
				<comment>
					<description>The end of line string for this machine.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="ParseException">
				<comment>
					<description>This constructor is used by the method &quot;generateParseException&quot;
 in the generated parser.  Calling this constructor generates
 a new object of this type with the fields &quot;currentToken&quot;,
 &quot;expectedTokenSequences&quot;, and &quot;tokenImage&quot; set.  The boolean
 flag &quot;specialConstructor&quot; is also set to true to indicate that
 this constructor was used to create this object.
 This constructor calls its super class with the empty string
 to force the &quot;toString&quot; method of parent class &quot;Throwable&quot; to
 print the error message in the form:
     ParseException: &lt;result of getMessage&gt;</description>
				</comment>
				<params>
					<param name="currentTokenVal" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token" />
					<param name="expectedTokenSequencesVal" fulltype="int[][]" type="int" />
					<param name="tokenImageVal" fulltype="java.lang.String[]" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="ParseException">
				<comment>
					<description>The following constructors are for use by you for whatever
 purpose you can think of.  Constructing the exception in this
 manner makes the exception behave in the normal way - i.e., as
 documented in the class &quot;Throwable&quot;.  The fields &quot;errorToken&quot;,
 &quot;expectedTokenSequences&quot;, and &quot;tokenImage&quot; do not contain
 relevant information.  The JavaCC generated code does not use
 these constructors.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="ParseException">
				<params>
					<param name="message" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="setErrorSourceFile" fulltype="void" type="void">
				<comment>
					<description>Used to add source file info to exception</description>
				</comment>
				<params>
					<param name="file" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getErrorSourceFile" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getMessage" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getMessage" fulltype="java.lang.String" type="String">
				<comment>
					<description>This method has the standard behavior when this object has been
 created using the standard constructors.  Otherwise, it uses
 &quot;currentToken&quot; and &quot;expectedTokenSequences&quot; to generate a parse
 error message and returns it.  If this object has been created
 due to a parse error, and you do not catch it (it gets thrown
 from the parser), then this method is called during the printing
 of the final stack trace, and hence the correct error message
 gets displayed.</description>
				</comment>
				<params>
					<param name="debug" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="add_escapes" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to convert raw characters to their escaped version
 when these raw version cannot be used as part of an ASCII
 string literal.</description>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getErrorLineNumber" fulltype="int" type="int" />
			<method visibility="public" name="getErrorText" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.Parser" type="Parser">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bsh.ParserTreeConstants" type="ParserTreeConstants" />
			<interface fulltype="org.gjt.sp.jedit.bsh.ParserConstants" type="ParserConstants" />
		</implements>
		<comment>
			<description>This is the BeanShell parser.  It is used internally by the Interpreter
        class (which is probably what you are looking for).  The parser knows
        only how to parse the structure of the language, it does not understand
        names, commands, etc.
        &lt;p&gt;
        You can use the Parser from the command line to do basic structural 
        validation of BeanShell files without actually executing them. e.g.
        &lt;code&gt;&lt;pre&gt;
                java bsh.Parser [ -p ] file [ file ] [ ... ]
        &lt;/pre&gt;&lt;/code&gt;
        &lt;p&gt;
        The -p option causes the abstract syntax to be printed.
        &lt;p&gt;

        From code you&apos;d use the Parser like this:
        &lt;p
        &lt;code&gt;&lt;pre&gt;
                Parser parser = new Parser(in);
                while( !(eof=parser.Line()) ) {
                        SimpleNode node = parser.popNode();
                        // use the node, etc. (See bsh.BSH* classes)
                }
        &lt;/pre&gt;&lt;/code&gt;</description>
		</comment>
		<fields>
			<field visibility="protected" name="jjtree" fulltype="org.gjt.sp.jedit.bsh.JJTParserState" type="JJTParserState" />
			<field visibility="public" name="token_source" fulltype="org.gjt.sp.jedit.bsh.ParserTokenManager" type="ParserTokenManager" />
			<field visibility="public" name="token" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token" />
			<field visibility="public" name="jj_nt" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token" />
			<field visibility="public" name="lookingAhead" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="public" name="Parser">
				<params>
					<param name="stream" fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</constructor>
			<constructor visibility="public" name="Parser">
				<params>
					<param name="stream" fulltype="java.io.Reader" type="Reader" />
				</params>
			</constructor>
			<constructor visibility="public" name="Parser">
				<params>
					<param name="tm" fulltype="org.gjt.sp.jedit.bsh.ParserTokenManager" type="ParserTokenManager" />
				</params>
			</constructor>
			<method visibility="public" name="setRetainComments" fulltype="void" type="void">
				<params>
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="popNode" fulltype="org.gjt.sp.jedit.bsh.SimpleNode" type="SimpleNode" />
			<method static="true" visibility="public" name="main" fulltype="void" type="void">
				<params>
					<param name="args" fulltype="java.lang.String[]" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="Line" fulltype="boolean" type="boolean">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="Modifiers" fulltype="org.gjt.sp.jedit.bsh.Modifiers" type="Modifiers">
				<comment>
					<description>THE JAVA LANGUAGE GRAMMAR STARTS HERE *</description>
				</comment>
				<params>
					<param name="context" fulltype="int" type="int" />
					<param name="lookahead" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ClassDeclaration" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="MethodDeclaration" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="PackageDeclaration" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ImportDeclaration" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="VariableDeclarator" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="VariableInitializer" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ArrayInitializer" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="FormalParameters" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="FormalParameter" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="Type" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ReturnType" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="PrimitiveType" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="AmbiguousName" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="NameList" fulltype="int" type="int">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="Expression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="Assignment" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="AssignmentOperator" fulltype="int" type="int">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ConditionalExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ConditionalOrExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ConditionalAndExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="InclusiveOrExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ExclusiveOrExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="AndExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="EqualityExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="InstanceOfExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="RelationalExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ShiftExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="AdditiveExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="MultiplicativeExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="UnaryExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="PreIncrementExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="PreDecrementExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="UnaryExpressionNotPlusMinus" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="CastLookahead" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="PostfixExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="CastExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="PrimaryExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="MethodInvocation" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="PrimaryPrefix" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="PrimarySuffix" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="Literal" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="BooleanLiteral" fulltype="boolean" type="boolean">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="NullLiteral" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="VoidLiteral" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="Arguments" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ArgumentList" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="AllocationExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ArrayDimensions" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="Statement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="LabeledStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="Block" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="BlockStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="FormalComment" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="EmptyStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="StatementExpression" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="SwitchStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="SwitchLabel" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="IfStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="WhileStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="DoStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ForStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="EnhancedForStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ForInit" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="TypedVariableDeclaration" fulltype="void" type="void">
				<comment>
					<description>Declared a typed variable.
        Untyped variables are not declared per-se but are handled by the part
        of the grammar that deals with assignments.</description>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="StatementExpressionList" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ForUpdate" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="BreakStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ContinueStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ReturnStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="SynchronizedStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="ThrowStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="TryStatement" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="stream" fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="stream" fulltype="java.io.Reader" type="Reader" />
				</params>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="tm" fulltype="org.gjt.sp.jedit.bsh.ParserTokenManager" type="ParserTokenManager" />
				</params>
			</method>
			<method final="true" visibility="public" name="getNextToken" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token" />
			<method final="true" visibility="public" name="getToken" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="generateParseException" fulltype="org.gjt.sp.jedit.bsh.ParseException" type="ParseException" />
			<method final="true" visibility="public" name="enable_tracing" fulltype="void" type="void" />
			<method final="true" visibility="public" name="disable_tracing" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh" interface="true" fulltype="org.gjt.sp.jedit.bsh.ParserConstants" type="ParserConstants">
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="EOF" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="6" visibility="public" name="NONPRINTABLE" constexpr="6" fulltype="int" type="int" />
			<field final="true" static="true" const="7" visibility="public" name="SINGLE_LINE_COMMENT" constexpr="7" fulltype="int" type="int" />
			<field final="true" static="true" const="8" visibility="public" name="HASH_BANG_COMMENT" constexpr="8" fulltype="int" type="int" />
			<field final="true" static="true" const="9" visibility="public" name="MULTI_LINE_COMMENT" constexpr="9" fulltype="int" type="int" />
			<field final="true" static="true" const="10" visibility="public" name="ABSTRACT" constexpr="10" fulltype="int" type="int" />
			<field final="true" static="true" const="11" visibility="public" name="BOOLEAN" constexpr="11" fulltype="int" type="int" />
			<field final="true" static="true" const="12" visibility="public" name="BREAK" constexpr="12" fulltype="int" type="int" />
			<field final="true" static="true" const="13" visibility="public" name="CLASS" constexpr="13" fulltype="int" type="int" />
			<field final="true" static="true" const="14" visibility="public" name="BYTE" constexpr="14" fulltype="int" type="int" />
			<field final="true" static="true" const="15" visibility="public" name="CASE" constexpr="15" fulltype="int" type="int" />
			<field final="true" static="true" const="16" visibility="public" name="CATCH" constexpr="16" fulltype="int" type="int" />
			<field final="true" static="true" const="17" visibility="public" name="CHAR" constexpr="17" fulltype="int" type="int" />
			<field final="true" static="true" const="18" visibility="public" name="CONST" constexpr="18" fulltype="int" type="int" />
			<field final="true" static="true" const="19" visibility="public" name="CONTINUE" constexpr="19" fulltype="int" type="int" />
			<field final="true" static="true" const="20" visibility="public" name="_DEFAULT" constexpr="20" fulltype="int" type="int" />
			<field final="true" static="true" const="21" visibility="public" name="DO" constexpr="21" fulltype="int" type="int" />
			<field final="true" static="true" const="22" visibility="public" name="DOUBLE" constexpr="22" fulltype="int" type="int" />
			<field final="true" static="true" const="23" visibility="public" name="ELSE" constexpr="23" fulltype="int" type="int" />
			<field final="true" static="true" const="24" visibility="public" name="ENUM" constexpr="24" fulltype="int" type="int" />
			<field final="true" static="true" const="25" visibility="public" name="EXTENDS" constexpr="25" fulltype="int" type="int" />
			<field final="true" static="true" const="26" visibility="public" name="FALSE" constexpr="26" fulltype="int" type="int" />
			<field final="true" static="true" const="27" visibility="public" name="FINAL" constexpr="27" fulltype="int" type="int" />
			<field final="true" static="true" const="28" visibility="public" name="FINALLY" constexpr="28" fulltype="int" type="int" />
			<field final="true" static="true" const="29" visibility="public" name="FLOAT" constexpr="29" fulltype="int" type="int" />
			<field final="true" static="true" const="30" visibility="public" name="FOR" constexpr="30" fulltype="int" type="int" />
			<field final="true" static="true" const="31" visibility="public" name="GOTO" constexpr="31" fulltype="int" type="int" />
			<field final="true" static="true" const="32" visibility="public" name="IF" constexpr="32" fulltype="int" type="int" />
			<field final="true" static="true" const="33" visibility="public" name="IMPLEMENTS" constexpr="33" fulltype="int" type="int" />
			<field final="true" static="true" const="34" visibility="public" name="IMPORT" constexpr="34" fulltype="int" type="int" />
			<field final="true" static="true" const="35" visibility="public" name="INSTANCEOF" constexpr="35" fulltype="int" type="int" />
			<field final="true" static="true" const="36" visibility="public" name="INT" constexpr="36" fulltype="int" type="int" />
			<field final="true" static="true" const="37" visibility="public" name="INTERFACE" constexpr="37" fulltype="int" type="int" />
			<field final="true" static="true" const="38" visibility="public" name="LONG" constexpr="38" fulltype="int" type="int" />
			<field final="true" static="true" const="39" visibility="public" name="NATIVE" constexpr="39" fulltype="int" type="int" />
			<field final="true" static="true" const="40" visibility="public" name="NEW" constexpr="40" fulltype="int" type="int" />
			<field final="true" static="true" const="41" visibility="public" name="NULL" constexpr="41" fulltype="int" type="int" />
			<field final="true" static="true" const="42" visibility="public" name="PACKAGE" constexpr="42" fulltype="int" type="int" />
			<field final="true" static="true" const="43" visibility="public" name="PRIVATE" constexpr="43" fulltype="int" type="int" />
			<field final="true" static="true" const="44" visibility="public" name="PROTECTED" constexpr="44" fulltype="int" type="int" />
			<field final="true" static="true" const="45" visibility="public" name="PUBLIC" constexpr="45" fulltype="int" type="int" />
			<field final="true" static="true" const="46" visibility="public" name="RETURN" constexpr="46" fulltype="int" type="int" />
			<field final="true" static="true" const="47" visibility="public" name="SHORT" constexpr="47" fulltype="int" type="int" />
			<field final="true" static="true" const="48" visibility="public" name="STATIC" constexpr="48" fulltype="int" type="int" />
			<field final="true" static="true" const="49" visibility="public" name="STRICTFP" constexpr="49" fulltype="int" type="int" />
			<field final="true" static="true" const="50" visibility="public" name="SWITCH" constexpr="50" fulltype="int" type="int" />
			<field final="true" static="true" const="51" visibility="public" name="SYNCHRONIZED" constexpr="51" fulltype="int" type="int" />
			<field final="true" static="true" const="52" visibility="public" name="TRANSIENT" constexpr="52" fulltype="int" type="int" />
			<field final="true" static="true" const="53" visibility="public" name="THROW" constexpr="53" fulltype="int" type="int" />
			<field final="true" static="true" const="54" visibility="public" name="THROWS" constexpr="54" fulltype="int" type="int" />
			<field final="true" static="true" const="55" visibility="public" name="TRUE" constexpr="55" fulltype="int" type="int" />
			<field final="true" static="true" const="56" visibility="public" name="TRY" constexpr="56" fulltype="int" type="int" />
			<field final="true" static="true" const="57" visibility="public" name="VOID" constexpr="57" fulltype="int" type="int" />
			<field final="true" static="true" const="58" visibility="public" name="VOLATILE" constexpr="58" fulltype="int" type="int" />
			<field final="true" static="true" const="59" visibility="public" name="WHILE" constexpr="59" fulltype="int" type="int" />
			<field final="true" static="true" const="60" visibility="public" name="INTEGER_LITERAL" constexpr="60" fulltype="int" type="int" />
			<field final="true" static="true" const="61" visibility="public" name="DECIMAL_LITERAL" constexpr="61" fulltype="int" type="int" />
			<field final="true" static="true" const="62" visibility="public" name="HEX_LITERAL" constexpr="62" fulltype="int" type="int" />
			<field final="true" static="true" const="63" visibility="public" name="OCTAL_LITERAL" constexpr="63" fulltype="int" type="int" />
			<field final="true" static="true" const="64" visibility="public" name="FLOATING_POINT_LITERAL" constexpr="64" fulltype="int" type="int" />
			<field final="true" static="true" const="65" visibility="public" name="EXPONENT" constexpr="65" fulltype="int" type="int" />
			<field final="true" static="true" const="66" visibility="public" name="CHARACTER_LITERAL" constexpr="66" fulltype="int" type="int" />
			<field final="true" static="true" const="67" visibility="public" name="STRING_LITERAL" constexpr="67" fulltype="int" type="int" />
			<field final="true" static="true" const="68" visibility="public" name="FORMAL_COMMENT" constexpr="68" fulltype="int" type="int" />
			<field final="true" static="true" const="69" visibility="public" name="IDENTIFIER" constexpr="69" fulltype="int" type="int" />
			<field final="true" static="true" const="70" visibility="public" name="LETTER" constexpr="70" fulltype="int" type="int" />
			<field final="true" static="true" const="71" visibility="public" name="DIGIT" constexpr="71" fulltype="int" type="int" />
			<field final="true" static="true" const="72" visibility="public" name="LPAREN" constexpr="72" fulltype="int" type="int" />
			<field final="true" static="true" const="73" visibility="public" name="RPAREN" constexpr="73" fulltype="int" type="int" />
			<field final="true" static="true" const="74" visibility="public" name="LBRACE" constexpr="74" fulltype="int" type="int" />
			<field final="true" static="true" const="75" visibility="public" name="RBRACE" constexpr="75" fulltype="int" type="int" />
			<field final="true" static="true" const="76" visibility="public" name="LBRACKET" constexpr="76" fulltype="int" type="int" />
			<field final="true" static="true" const="77" visibility="public" name="RBRACKET" constexpr="77" fulltype="int" type="int" />
			<field final="true" static="true" const="78" visibility="public" name="SEMICOLON" constexpr="78" fulltype="int" type="int" />
			<field final="true" static="true" const="79" visibility="public" name="COMMA" constexpr="79" fulltype="int" type="int" />
			<field final="true" static="true" const="80" visibility="public" name="DOT" constexpr="80" fulltype="int" type="int" />
			<field final="true" static="true" const="81" visibility="public" name="ASSIGN" constexpr="81" fulltype="int" type="int" />
			<field final="true" static="true" const="82" visibility="public" name="GT" constexpr="82" fulltype="int" type="int" />
			<field final="true" static="true" const="83" visibility="public" name="GTX" constexpr="83" fulltype="int" type="int" />
			<field final="true" static="true" const="84" visibility="public" name="LT" constexpr="84" fulltype="int" type="int" />
			<field final="true" static="true" const="85" visibility="public" name="LTX" constexpr="85" fulltype="int" type="int" />
			<field final="true" static="true" const="86" visibility="public" name="BANG" constexpr="86" fulltype="int" type="int" />
			<field final="true" static="true" const="87" visibility="public" name="TILDE" constexpr="87" fulltype="int" type="int" />
			<field final="true" static="true" const="88" visibility="public" name="HOOK" constexpr="88" fulltype="int" type="int" />
			<field final="true" static="true" const="89" visibility="public" name="COLON" constexpr="89" fulltype="int" type="int" />
			<field final="true" static="true" const="90" visibility="public" name="EQ" constexpr="90" fulltype="int" type="int" />
			<field final="true" static="true" const="91" visibility="public" name="LE" constexpr="91" fulltype="int" type="int" />
			<field final="true" static="true" const="92" visibility="public" name="LEX" constexpr="92" fulltype="int" type="int" />
			<field final="true" static="true" const="93" visibility="public" name="GE" constexpr="93" fulltype="int" type="int" />
			<field final="true" static="true" const="94" visibility="public" name="GEX" constexpr="94" fulltype="int" type="int" />
			<field final="true" static="true" const="95" visibility="public" name="NE" constexpr="95" fulltype="int" type="int" />
			<field final="true" static="true" const="96" visibility="public" name="BOOL_OR" constexpr="96" fulltype="int" type="int" />
			<field final="true" static="true" const="97" visibility="public" name="BOOL_ORX" constexpr="97" fulltype="int" type="int" />
			<field final="true" static="true" const="98" visibility="public" name="BOOL_AND" constexpr="98" fulltype="int" type="int" />
			<field final="true" static="true" const="99" visibility="public" name="BOOL_ANDX" constexpr="99" fulltype="int" type="int" />
			<field final="true" static="true" const="100" visibility="public" name="INCR" constexpr="100" fulltype="int" type="int" />
			<field final="true" static="true" const="101" visibility="public" name="DECR" constexpr="101" fulltype="int" type="int" />
			<field final="true" static="true" const="102" visibility="public" name="PLUS" constexpr="102" fulltype="int" type="int" />
			<field final="true" static="true" const="103" visibility="public" name="MINUS" constexpr="103" fulltype="int" type="int" />
			<field final="true" static="true" const="104" visibility="public" name="STAR" constexpr="104" fulltype="int" type="int" />
			<field final="true" static="true" const="105" visibility="public" name="SLASH" constexpr="105" fulltype="int" type="int" />
			<field final="true" static="true" const="106" visibility="public" name="BIT_AND" constexpr="106" fulltype="int" type="int" />
			<field final="true" static="true" const="107" visibility="public" name="BIT_ANDX" constexpr="107" fulltype="int" type="int" />
			<field final="true" static="true" const="108" visibility="public" name="BIT_OR" constexpr="108" fulltype="int" type="int" />
			<field final="true" static="true" const="109" visibility="public" name="BIT_ORX" constexpr="109" fulltype="int" type="int" />
			<field final="true" static="true" const="110" visibility="public" name="XOR" constexpr="110" fulltype="int" type="int" />
			<field final="true" static="true" const="111" visibility="public" name="MOD" constexpr="111" fulltype="int" type="int" />
			<field final="true" static="true" const="112" visibility="public" name="LSHIFT" constexpr="112" fulltype="int" type="int" />
			<field final="true" static="true" const="113" visibility="public" name="LSHIFTX" constexpr="113" fulltype="int" type="int" />
			<field final="true" static="true" const="114" visibility="public" name="RSIGNEDSHIFT" constexpr="114" fulltype="int" type="int" />
			<field final="true" static="true" const="115" visibility="public" name="RSIGNEDSHIFTX" constexpr="115" fulltype="int" type="int" />
			<field final="true" static="true" const="116" visibility="public" name="RUNSIGNEDSHIFT" constexpr="116" fulltype="int" type="int" />
			<field final="true" static="true" const="117" visibility="public" name="RUNSIGNEDSHIFTX" constexpr="117" fulltype="int" type="int" />
			<field final="true" static="true" const="118" visibility="public" name="PLUSASSIGN" constexpr="118" fulltype="int" type="int" />
			<field final="true" static="true" const="119" visibility="public" name="MINUSASSIGN" constexpr="119" fulltype="int" type="int" />
			<field final="true" static="true" const="120" visibility="public" name="STARASSIGN" constexpr="120" fulltype="int" type="int" />
			<field final="true" static="true" const="121" visibility="public" name="SLASHASSIGN" constexpr="121" fulltype="int" type="int" />
			<field final="true" static="true" const="122" visibility="public" name="ANDASSIGN" constexpr="122" fulltype="int" type="int" />
			<field final="true" static="true" const="123" visibility="public" name="ANDASSIGNX" constexpr="123" fulltype="int" type="int" />
			<field final="true" static="true" const="124" visibility="public" name="ORASSIGN" constexpr="124" fulltype="int" type="int" />
			<field final="true" static="true" const="125" visibility="public" name="ORASSIGNX" constexpr="125" fulltype="int" type="int" />
			<field final="true" static="true" const="126" visibility="public" name="XORASSIGN" constexpr="126" fulltype="int" type="int" />
			<field final="true" static="true" const="127" visibility="public" name="MODASSIGN" constexpr="127" fulltype="int" type="int" />
			<field final="true" static="true" const="128" visibility="public" name="LSHIFTASSIGN" constexpr="128" fulltype="int" type="int" />
			<field final="true" static="true" const="129" visibility="public" name="LSHIFTASSIGNX" constexpr="129" fulltype="int" type="int" />
			<field final="true" static="true" const="130" visibility="public" name="RSIGNEDSHIFTASSIGN" constexpr="130" fulltype="int" type="int" />
			<field final="true" static="true" const="131" visibility="public" name="RSIGNEDSHIFTASSIGNX" constexpr="131" fulltype="int" type="int" />
			<field final="true" static="true" const="132" visibility="public" name="RUNSIGNEDSHIFTASSIGN" constexpr="132" fulltype="int" type="int" />
			<field final="true" static="true" const="133" visibility="public" name="RUNSIGNEDSHIFTASSIGNX" constexpr="133" fulltype="int" type="int" />
			<field final="true" static="true" const="0" visibility="public" name="DEFAULT" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" visibility="public" name="tokenImage" fulltype="java.lang.String[]" type="String" />
		</fields>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.ParserTokenManager" type="ParserTokenManager">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bsh.ParserConstants" type="ParserConstants" />
		</implements>
		<fields>
			<field visibility="public" name="debugStream" fulltype="java.io.PrintStream" type="PrintStream" />
			<field final="true" static="true" visibility="public" name="jjstrLiteralImages" fulltype="java.lang.String[]" type="String" />
			<field final="true" static="true" visibility="public" name="lexStateNames" fulltype="java.lang.String[]" type="String" />
			<field visibility="protected" name="input_stream" fulltype="org.gjt.sp.jedit.bsh.JavaCharStream" type="JavaCharStream" />
			<field visibility="protected" name="curChar" fulltype="char" type="char" />
		</fields>
		<methods>
			<constructor visibility="public" name="ParserTokenManager">
				<params>
					<param name="stream" fulltype="org.gjt.sp.jedit.bsh.JavaCharStream" type="JavaCharStream" />
				</params>
			</constructor>
			<constructor visibility="public" name="ParserTokenManager">
				<params>
					<param name="stream" fulltype="org.gjt.sp.jedit.bsh.JavaCharStream" type="JavaCharStream" />
					<param name="lexState" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="setDebugStream" fulltype="void" type="void">
				<params>
					<param name="ds" fulltype="java.io.PrintStream" type="PrintStream" />
				</params>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="stream" fulltype="org.gjt.sp.jedit.bsh.JavaCharStream" type="JavaCharStream" />
				</params>
			</method>
			<method visibility="public" name="ReInit" fulltype="void" type="void">
				<params>
					<param name="stream" fulltype="org.gjt.sp.jedit.bsh.JavaCharStream" type="JavaCharStream" />
					<param name="lexState" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="SwitchTo" fulltype="void" type="void">
				<params>
					<param name="lexState" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="protected" name="jjFillToken" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token" />
			<method visibility="public" name="getNextToken" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bsh" interface="true" fulltype="org.gjt.sp.jedit.bsh.ParserTreeConstants" type="ParserTreeConstants">
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="JJTVOID" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="JJTCLASSDECLARATION" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="JJTMETHODDECLARATION" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="3" visibility="public" name="JJTPACKAGEDECLARATION" constexpr="3" fulltype="int" type="int" />
			<field final="true" static="true" const="4" visibility="public" name="JJTIMPORTDECLARATION" constexpr="4" fulltype="int" type="int" />
			<field final="true" static="true" const="5" visibility="public" name="JJTVARIABLEDECLARATOR" constexpr="5" fulltype="int" type="int" />
			<field final="true" static="true" const="6" visibility="public" name="JJTARRAYINITIALIZER" constexpr="6" fulltype="int" type="int" />
			<field final="true" static="true" const="7" visibility="public" name="JJTFORMALPARAMETERS" constexpr="7" fulltype="int" type="int" />
			<field final="true" static="true" const="8" visibility="public" name="JJTFORMALPARAMETER" constexpr="8" fulltype="int" type="int" />
			<field final="true" static="true" const="9" visibility="public" name="JJTTYPE" constexpr="9" fulltype="int" type="int" />
			<field final="true" static="true" const="10" visibility="public" name="JJTRETURNTYPE" constexpr="10" fulltype="int" type="int" />
			<field final="true" static="true" const="11" visibility="public" name="JJTPRIMITIVETYPE" constexpr="11" fulltype="int" type="int" />
			<field final="true" static="true" const="12" visibility="public" name="JJTAMBIGUOUSNAME" constexpr="12" fulltype="int" type="int" />
			<field final="true" static="true" const="13" visibility="public" name="JJTASSIGNMENT" constexpr="13" fulltype="int" type="int" />
			<field final="true" static="true" const="14" visibility="public" name="JJTTERNARYEXPRESSION" constexpr="14" fulltype="int" type="int" />
			<field final="true" static="true" const="15" visibility="public" name="JJTBINARYEXPRESSION" constexpr="15" fulltype="int" type="int" />
			<field final="true" static="true" const="16" visibility="public" name="JJTUNARYEXPRESSION" constexpr="16" fulltype="int" type="int" />
			<field final="true" static="true" const="17" visibility="public" name="JJTCASTEXPRESSION" constexpr="17" fulltype="int" type="int" />
			<field final="true" static="true" const="18" visibility="public" name="JJTPRIMARYEXPRESSION" constexpr="18" fulltype="int" type="int" />
			<field final="true" static="true" const="19" visibility="public" name="JJTMETHODINVOCATION" constexpr="19" fulltype="int" type="int" />
			<field final="true" static="true" const="20" visibility="public" name="JJTPRIMARYSUFFIX" constexpr="20" fulltype="int" type="int" />
			<field final="true" static="true" const="21" visibility="public" name="JJTLITERAL" constexpr="21" fulltype="int" type="int" />
			<field final="true" static="true" const="22" visibility="public" name="JJTARGUMENTS" constexpr="22" fulltype="int" type="int" />
			<field final="true" static="true" const="23" visibility="public" name="JJTALLOCATIONEXPRESSION" constexpr="23" fulltype="int" type="int" />
			<field final="true" static="true" const="24" visibility="public" name="JJTARRAYDIMENSIONS" constexpr="24" fulltype="int" type="int" />
			<field final="true" static="true" const="25" visibility="public" name="JJTBLOCK" constexpr="25" fulltype="int" type="int" />
			<field final="true" static="true" const="26" visibility="public" name="JJTFORMALCOMMENT" constexpr="26" fulltype="int" type="int" />
			<field final="true" static="true" const="27" visibility="public" name="JJTSWITCHSTATEMENT" constexpr="27" fulltype="int" type="int" />
			<field final="true" static="true" const="28" visibility="public" name="JJTSWITCHLABEL" constexpr="28" fulltype="int" type="int" />
			<field final="true" static="true" const="29" visibility="public" name="JJTIFSTATEMENT" constexpr="29" fulltype="int" type="int" />
			<field final="true" static="true" const="30" visibility="public" name="JJTWHILESTATEMENT" constexpr="30" fulltype="int" type="int" />
			<field final="true" static="true" const="31" visibility="public" name="JJTFORSTATEMENT" constexpr="31" fulltype="int" type="int" />
			<field final="true" static="true" const="32" visibility="public" name="JJTENHANCEDFORSTATEMENT" constexpr="32" fulltype="int" type="int" />
			<field final="true" static="true" const="33" visibility="public" name="JJTTYPEDVARIABLEDECLARATION" constexpr="33" fulltype="int" type="int" />
			<field final="true" static="true" const="34" visibility="public" name="JJTSTATEMENTEXPRESSIONLIST" constexpr="34" fulltype="int" type="int" />
			<field final="true" static="true" const="35" visibility="public" name="JJTRETURNSTATEMENT" constexpr="35" fulltype="int" type="int" />
			<field final="true" static="true" const="36" visibility="public" name="JJTTHROWSTATEMENT" constexpr="36" fulltype="int" type="int" />
			<field final="true" static="true" const="37" visibility="public" name="JJTTRYSTATEMENT" constexpr="37" fulltype="int" type="int" />
			<field final="true" static="true" visibility="public" name="jjtNodeName" fulltype="java.lang.String[]" type="String" />
		</fields>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.Primitive" type="Primitive">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bsh.ParserConstants" type="ParserConstants" />
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>Wrapper for primitive types in Bsh.  This is package public because it 
        is used in the implementation of some bsh commands.

    See the note in LHS.java about wrapping objects.</description>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="NULL" fulltype="org.gjt.sp.jedit.bsh.Primitive" type="Primitive" />
			<field final="true" static="true" visibility="public" name="VOID" fulltype="org.gjt.sp.jedit.bsh.Primitive" type="Primitive">
				<comment>
					<description>VOID means &quot;no type&quot;.
        Strictly speaking, this makes no sense here.  But for practical
        reasons we&apos;ll consider the lack of a type to be a special value.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Primitive">
				<params>
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<constructor visibility="public" name="Primitive">
				<params>
					<param name="value" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="Primitive">
				<params>
					<param name="value" fulltype="byte" type="byte" />
				</params>
			</constructor>
			<constructor visibility="public" name="Primitive">
				<params>
					<param name="value" fulltype="short" type="short" />
				</params>
			</constructor>
			<constructor visibility="public" name="Primitive">
				<params>
					<param name="value" fulltype="char" type="char" />
				</params>
			</constructor>
			<constructor visibility="public" name="Primitive">
				<params>
					<param name="value" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="Primitive">
				<params>
					<param name="value" fulltype="long" type="long" />
				</params>
			</constructor>
			<constructor visibility="public" name="Primitive">
				<params>
					<param name="value" fulltype="float" type="float" />
				</params>
			</constructor>
			<constructor visibility="public" name="Primitive">
				<params>
					<param name="value" fulltype="double" type="double" />
				</params>
			</constructor>
			<method visibility="public" name="getValue" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Return the primitive value stored in its java.lang wrapper class</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getType" returncomment="the primitive TYPE class type of the value or Void.TYPE for
                Primitive.VOID or null value for type of Primitive.NULL" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Get the corresponding Java primitive TYPE class for this Primitive.</description>
					<attribute name="@return">
						<description>the primitive TYPE class type of the value or Void.TYPE for
                Primitive.VOID or null value for type of Primitive.NULL</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="binaryOperation" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Perform a binary operation on two Primitives or wrapper types.
                If both original args were Primitives return a Primitive result
                else it was mixed (wrapper/primitive) return the wrapper type.
                The exception is for boolean operations where we will return the 
                primitive type either way.</description>
				</comment>
				<params>
					<param name="obj1" fulltype="java.lang.Object" type="Object" />
					<param name="obj2" fulltype="java.lang.Object" type="Object" />
					<param name="kind" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="unaryOperation" fulltype="org.gjt.sp.jedit.bsh.Primitive" type="Primitive">
				<params>
					<param name="val" fulltype="org.gjt.sp.jedit.bsh.Primitive" type="Primitive" />
					<param name="kind" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="intValue" fulltype="int" type="int">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="booleanValue" fulltype="boolean" type="boolean">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="isNumber" fulltype="boolean" type="boolean">
				<comment>
					<description>Determine if this primitive is a numeric type.
                i.e. not boolean, null, or void (but including char)</description>
				</comment>
			</method>
			<method visibility="public" name="numberValue" fulltype="java.lang.Number" type="Number">
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Primitives compare equal with other Primitives containing an equal
                wrapped value.</description>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int">
				<comment>
					<description>The hash of the Primitive is tied to the hash of the wrapped value but
                shifted so that they are not the same.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="unwrap" returncomment="corresponding &quot;normal&quot; Java type, &quot;unwrapping&quot; 
                        any bsh.Primitive types to their wrapper types." fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Unwrap primitive values and map voids to nulls.
                Non Primitive types remain unchanged.</description>
					<attribute name="@param">
						<description>obj object type which may be bsh.Primitive</description>
					</attribute>
					<attribute name="@return">
						<description>corresponding &quot;normal&quot; Java type, &quot;unwrapping&quot; 
                        any bsh.Primitive types to their wrapper types.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="object type which may be bsh.Primitive" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="unwrap" fulltype="java.lang.Object[]" type="Object">
				<params>
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="wrap" fulltype="java.lang.Object[]" type="Object">
				<params>
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
					<param name="paramTypes" fulltype="java.lang.Class[]" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="wrap" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Wrap primitive values (as indicated by type param) and nulls in the 
                Primitive class.  Values not primitive or null are left unchanged.
                Primitive values are represented by their wrapped values in param value.
                &lt;p/&gt;
                The value null is mapped to Primitive.NULL.
                Any value specified with type Void.TYPE is mapped to Primitive.VOID.</description>
				</comment>
				<params>
					<param name="value" fulltype="java.lang.Object" type="Object" />
					<param name="type" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="getDefaultValue" fulltype="org.gjt.sp.jedit.bsh.Primitive" type="Primitive">
				<comment>
					<description>Get the appropriate default value per JLS 4.5.4</description>
				</comment>
				<params>
					<param name="type" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="boxType" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Get the corresponding java.lang wrapper class for the primitive TYPE
                class.
                e.g.  Integer.TYPE -&gt; Integer.class</description>
				</comment>
				<params>
					<param name="primitiveType" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="unboxType" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Get the corresponding primitive TYPE class for the java.lang wrapper
                class type.
                e.g.  Integer.class -&gt; Integer.TYPE</description>
				</comment>
				<params>
					<param name="wrapperType" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="castToType" fulltype="org.gjt.sp.jedit.bsh.Primitive" type="Primitive">
				<comment>
					<description>Cast this bsh.Primitive value to a new bsh.Primitive value
                This is usually a numeric type cast.  Other cases include:
                        A boolean can be cast to boolen
                        null can be cast to any object type and remains null
                        Attempting to cast a void causes an exception</description>
					<attribute name="@param">
						<description>toType is the java object or primitive TYPE class</description>
					</attribute>
				</comment>
				<params>
					<param name="toType" comment="is the java object or primitive TYPE class" fulltype="java.lang.Class" type="Class" />
					<param name="operation" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="isWrapperType" fulltype="boolean" type="boolean">
				<params>
					<param name="type" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="ReflectManager" visibility="public" package="org.gjt.sp.jedit.bsh.reflect" superclassfulltype="org.gjt.sp.jedit.bsh.ReflectManager" fulltype="org.gjt.sp.jedit.bsh.reflect.ReflectManagerImpl" type="ReflectManagerImpl">
		<comment>
			<description>This is the implementation of:
        ReflectManager - a dynamically loaded extension that supports extended
        reflection features supported by JDK1.2 and greater.

        In particular it currently supports accessible method and field access 
        supported by JDK1.2 and greater.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ReflectManagerImpl" />
			<method visibility="public" name="setAccessible" returncomment="true if the object was accessible or false if it was not." fulltype="boolean" type="boolean">
				<comment>
					<description>Set a java.lang.reflect Field, Method, Constructor, or Array of
                accessible objects to accessible mode.
                If the object is not an AccessibleObject then do nothing.</description>
					<attribute name="@return">
						<description>true if the object was accessible or false if it was not.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.ReflectManager" type="ReflectManager">
		<comment>
			<description>ReflectManager is a dynamically loaded extension that supports extended
        reflection features supported by JDK1.2 and greater.

        In particular it currently supports accessible method and field access 
        supported by JDK1.2 and greater.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ReflectManager" />
			<method static="true" visibility="public" name="getReflectManager" fulltype="org.gjt.sp.jedit.bsh.ReflectManager" type="ReflectManager">
				<comment>
					<description>Return the singleton bsh ReflectManager.</description>
					<attribute name="@throws">
						<description>Unavailable</description>
					</attribute>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.Capabilities.Unavailable" type="Capabilities.Unavailable" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="RMSetAccessible" fulltype="boolean" type="boolean">
				<comment>
					<description>Reflect Manager Set Accessible.
                Convenience method to invoke the reflect manager.</description>
					<attribute name="@throws">
						<description>Unavailable</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.Capabilities.Unavailable" type="Capabilities.Unavailable" />
				</exceptions>
			</method>
			<method abstract="true" visibility="public" name="setAccessible" returncomment="true if the object was accessible or false if it was not." fulltype="boolean" type="boolean">
				<comment>
					<description>Set a java.lang.reflect Field, Method, Constructor, or Array of
                accessible objects to accessible mode.</description>
					<attribute name="@return">
						<description>true if the object was accessible or false if it was not.</description>
					</attribute>
				</comment>
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.Remote" type="Remote">
		<comment>
			<description>Remote executor class. Posts a script from the command line to a BshServlet
        or embedded  interpreter using (respectively) HTTP or the bsh telnet
        service. Output is printed to stdout and a numeric return value is scraped
        from the result.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Remote" />
			<method static="true" visibility="public" name="main" fulltype="void" type="void">
				<params>
					<param name="args" fulltype="java.lang.String[]" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="eval" fulltype="int" type="int">
				<comment>
					<description>Evaluate text in the interpreter at url, returning a possible integer
                return value.</description>
				</comment>
				<params>
					<param name="url" fulltype="java.lang.String" type="String" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.StringUtil" type="StringUtil">
		<methods>
			<constructor visibility="public" name="StringUtil" />
			<method static="true" visibility="public" name="split" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="s" fulltype="java.lang.String" type="String" />
					<param name="delim" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="bubbleSort" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="in" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="maxCommonPrefix" fulltype="java.lang.String" type="String">
				<params>
					<param name="one" fulltype="java.lang.String" type="String" />
					<param name="two" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="methodString" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="types" fulltype="java.lang.Class[]" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="normalizeClassName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Hack - The real method is in Reflect.java which is not public.</description>
				</comment>
				<params>
					<param name="type" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EvalError" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.EvalError" fulltype="org.gjt.sp.jedit.bsh.TargetError" type="TargetError">
		<comment>
			<description>TargetError is an EvalError that wraps an exception thrown by the script	
        (or by code called from the script).  TargetErrors indicate exceptions 
        which can be caught within the script itself, whereas a general EvalError 
        indicates that the script cannot be evaluated further for some reason.

        If the exception is caught within the script it is automatically unwrapped,
        so the code looks like normal Java code.  If the TargetError is thrown
        from the eval() or interpreter.eval() method it may be caught and unwrapped
        to determine what exception was thrown.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="TargetError">
				<params>
					<param name="msg" fulltype="java.lang.String" type="String" />
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
					<param name="node" fulltype="org.gjt.sp.jedit.bsh.SimpleNode" type="SimpleNode" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
					<param name="inNativeCode" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="TargetError">
				<params>
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
					<param name="node" fulltype="org.gjt.sp.jedit.bsh.SimpleNode" type="SimpleNode" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
				</params>
			</constructor>
			<method visibility="public" name="getTarget" fulltype="java.lang.Throwable" type="Throwable" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="printStackTrace" fulltype="void" type="void" />
			<method visibility="public" name="printStackTrace" fulltype="void" type="void">
				<params>
					<param name="out" fulltype="java.io.PrintStream" type="PrintStream" />
				</params>
			</method>
			<method visibility="public" name="printStackTrace" fulltype="void" type="void">
				<params>
					<param name="debug" fulltype="boolean" type="boolean" />
					<param name="out" fulltype="java.io.PrintStream" type="PrintStream" />
				</params>
			</method>
			<method visibility="public" name="printTargetError" fulltype="java.lang.String" type="String">
				<comment>
					<description>Generate a printable string showing the wrapped target exception.
                If the proxy mechanism is available, allow the extended print to
                check for UndeclaredThrowableException and print that embedded error.</description>
				</comment>
				<params>
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
			<method visibility="public" name="xPrintTargetError" fulltype="java.lang.String" type="String">
				<comment>
					<description>Extended form of print target error.
                This indirection is used to print UndeclaredThrowableExceptions 
                which are possible when the proxy mechanism is available.

                We are shielded from compile problems by using a bsh script.
                This is acceptable here because we&apos;re not in a critical path...
                Otherwise we&apos;d need yet another dynamically loaded module just for this.</description>
				</comment>
				<params>
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
			<method visibility="public" name="inNativeCode" fulltype="boolean" type="boolean">
				<comment>
					<description>Return true if the TargetError was generated from native code.
                e.g. if the script called into a compiled java class which threw
                the excpetion.  We distinguish so that we can print the stack trace
                for the native code case... the stack trace would not be useful if
                the exception was generated by the script.  e.g. if the script
                explicitly threw an exception... (the stack trace would simply point
                to the bsh internals which generated the exception).</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.This" type="This">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
			<interface fulltype="java.lang.Runnable" type="Runnable" />
		</implements>
		<comment>
			<description>&apos;This&apos; is the type of bsh scripted objects.
    A &apos;This&apos; object is a bsh scripted object context.  It holds a namespace
    reference and implements event listeners and various other interfaces.

    This holds a reference to the declaring interpreter for callbacks from
    outside of bsh.</description>
		</comment>
		<methods>
			<constructor visibility="protected" name="This">
				<params>
					<param name="namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="declaringInterpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
			</constructor>
			<method visibility="public" name="getInterface" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Get a version of this scripted object implementing the specified
        interface.</description>
				</comment>
				<params>
					<param name="clas" fulltype="java.lang.Class" type="Class" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getInterface" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Get a version of this scripted object implementing the specified
        interfaces.</description>
				</comment>
				<params>
					<param name="ca" fulltype="java.lang.Class[]" type="Class" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getNameSpace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="run" fulltype="void" type="void" />
			<method visibility="public" name="invokeMethod" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Invoke specified method as from outside java code, using the
        declaring interpreter and current namespace.
        The call stack will indicate that the method is being invoked from
        outside of bsh in native java code.
        Note: you must still wrap/unwrap args/return values using
        Primitive/Primitive.unwrap() for use outside of BeanShell.</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.Primitive</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="invokeMethod" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Invoke a method in this namespace with the specified args,
        interpreter reference, callstack, and caller info.
        &lt;p&gt;

        Note: If you use this method outside of the bsh package and wish to
        use variables with primitive values you will have to wrap them using
        bsh.Primitive.  Consider using This getInterface() to make a true Java
        interface for invoking your scripted methods.
        &lt;p&gt;

        This method also implements the default object protocol of toString(),
        hashCode() and equals() and the invoke() meta-method handling as a
        last resort.
        &lt;p&gt;

        Note: The invoke() meta-method will not catch the Object protocol
        methods (toString(), hashCode()...).  If you want to override them you
        have to script them directly.
        &lt;p&gt;</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.This#invokeMethod(String methodName, Object [] args, Interpreter interpreter, CallStack callstack, SimpleNode callerInfo, boolean declaredOnly ) invokeMethod</description>
					</attribute>
					<attribute name="@param">
						<description>callstack if callStack is null a new CallStack will be created and
            initialized with this namespace.</description>
					</attribute>
					<attribute name="@param">
						<description>declaredOnly if true then only methods declared directly in the
            namespace will be visible - no inherited or imported methods will
            be visible.</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.bsh.Primitive Primitive</description>
					</attribute>
				</comment>
				<params>
					<param name="methodName" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
					<param name="interpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
					<param name="callstack" comment="if callStack is null a new CallStack will be created and
            initialized with this namespace." fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
					<param name="callerInfo" fulltype="org.gjt.sp.jedit.bsh.SimpleNode" type="SimpleNode" />
					<param name="declaredOnly" comment="if true then only methods declared directly in the
            namespace will be visible - no inherited or imported methods will
            be visible." fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="bind" fulltype="void" type="void">
				<comment>
					<description>Bind a This reference to a parent&apos;s namespace with the specified
        declaring interpreter.  Also re-init the callstack.  It&apos;s necessary
        to bind a This reference before it can be used after deserialization.
        This is used by the bsh load() command.
        &lt;p&gt;

        This is a static utility method because it&apos;s used by a bsh command
        bind() and the interpreter doesn&apos;t currently allow access to direct
        methods of This objects (small hack)</description>
				</comment>
				<params>
					<param name="ths" fulltype="org.gjt.sp.jedit.bsh.This" type="This" />
					<param name="namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="declaringInterpreter" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>Describes the input token stream.</description>
		</comment>
		<fields>
			<field visibility="public" name="kind" fulltype="int" type="int">
				<comment>
					<description>An integer that describes the kind of this token.  This numbering
 system is determined by JavaCCParser, and a table of these numbers is
 stored in the file ...Constants.java.</description>
				</comment>
			</field>
			<field visibility="public" name="beginLine" fulltype="int" type="int">
				<comment>
					<description>beginLine and beginColumn describe the position of the first character
 of this token; endLine and endColumn describe the position of the
 last character of this token.</description>
				</comment>
			</field>
			<field visibility="public" name="beginColumn" fulltype="int" type="int">
				<comment>
					<description>beginLine and beginColumn describe the position of the first character
 of this token; endLine and endColumn describe the position of the
 last character of this token.</description>
				</comment>
			</field>
			<field visibility="public" name="endLine" fulltype="int" type="int">
				<comment>
					<description>beginLine and beginColumn describe the position of the first character
 of this token; endLine and endColumn describe the position of the
 last character of this token.</description>
				</comment>
			</field>
			<field visibility="public" name="endColumn" fulltype="int" type="int">
				<comment>
					<description>beginLine and beginColumn describe the position of the first character
 of this token; endLine and endColumn describe the position of the
 last character of this token.</description>
				</comment>
			</field>
			<field visibility="public" name="image" fulltype="java.lang.String" type="String">
				<comment>
					<description>The string image of the token.</description>
				</comment>
			</field>
			<field visibility="public" name="next" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token">
				<comment>
					<description>A reference to the next regular (non-special) token from the input
 stream.  If this is the last token from the input stream, or if the
 token manager has not read tokens beyond this one, this field is
 set to null.  This is true only if this token is also a regular
 token.  Otherwise, see below for a description of the contents of
 this field.</description>
				</comment>
			</field>
			<field visibility="public" name="specialToken" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token">
				<comment>
					<description>This field is used to access special tokens that occur prior to this
 token, but after the immediately preceding regular (non-special) token.
 If there are no such special tokens, this field is set to null.
 When there are more than one such special token, this field refers
 to the last of these special tokens, which in turn refers to the next
 previous special token through its specialToken field, and so on
 until the first special token (whose specialToken field is null).
 The next fields of special tokens refer to other special tokens that
 immediately follow it (without an intervening regular token).  If there
 is no such token, this field is null.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Token" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the image.</description>
				</comment>
			</method>
			<method final="true" static="true" visibility="public" name="newToken" fulltype="org.gjt.sp.jedit.bsh.Token" type="Token">
				<comment>
					<description>Returns a new Token object, by default. However, if you want, you
 can create and return subclass objects based on the value of ofKind.
 Simply add the cases to the switch for all those special cases.
 For example, if you have a subclass of Token called IDToken that
 you want to create if ofKind is ID, simlpy add something like :

    case MyParserConstants.ID : return new IDToken();

 to the following switch statement. Then you can cast matchedToken
 variable to the appropriate type and use it in your lexical actions.</description>
				</comment>
				<params>
					<param name="ofKind" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Error" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Error" fulltype="org.gjt.sp.jedit.bsh.TokenMgrError" type="TokenMgrError">
		<methods>
			<constructor visibility="public" name="TokenMgrError" />
			<constructor visibility="public" name="TokenMgrError">
				<params>
					<param name="message" fulltype="java.lang.String" type="String" />
					<param name="reason" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="TokenMgrError">
				<params>
					<param name="EOFSeen" fulltype="boolean" type="boolean" />
					<param name="lexState" fulltype="int" type="int" />
					<param name="errorLine" fulltype="int" type="int" />
					<param name="errorColumn" fulltype="int" type="int" />
					<param name="errorAfter" fulltype="java.lang.String" type="String" />
					<param name="curChar" fulltype="char" type="char" />
					<param name="reason" fulltype="int" type="int" />
				</params>
			</constructor>
			<method final="true" static="true" visibility="protected" name="addEscapes" fulltype="java.lang.String" type="String">
				<comment>
					<description>Replaces unprintable characters by their espaced (or unicode escaped)
 equivalents in the given string</description>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="protected" name="LexicalError" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a detailed message for the Error when it is thrown by the
 token manager to indicate a lexical error.
 Parameters : 
    EOFSeen     : indicates if EOF caused the lexicl error
    curLexState : lexical state in which this error occured
    errorLine   : line number when the error occured
    errorColumn : column number when the error occured
    errorAfter  : prefix that was seen before this error occured
    curchar     : the offending character
 Note: You can customize the lexical error message by modifying this method.</description>
				</comment>
				<params>
					<param name="EOFSeen" fulltype="boolean" type="boolean" />
					<param name="lexState" fulltype="int" type="int" />
					<param name="errorLine" fulltype="int" type="int" />
					<param name="errorColumn" fulltype="int" type="int" />
					<param name="errorAfter" fulltype="java.lang.String" type="String" />
					<param name="curChar" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="getMessage" fulltype="java.lang.String" type="String">
				<comment>
					<description>You can also modify the body of this method to customize your error messages.
 For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
 of end-users concern, so you can return something like : 

     &quot;Internal Error : Please file a bug report .... &quot;

 from this method for such cases in the release version of your parser.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Exception" fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError">
		<comment>
			<description>UtilEvalError is an error corresponding to an EvalError but thrown by a
    utility or other class that does not have the caller context (Node)
    available to it.  A normal EvalError must supply the caller Node in order
    for error messages to be pinned to the correct line and location in the
    script.  UtilEvalError is a checked exception that is *not* a subtype of
    EvalError, but instead must be caught and rethrown as an EvalError by
    the a nearest location with context.  The method toEvalError( Node )
    should be used to throw the EvalError, supplying the node.
    &lt;p&gt;

    To summarize: Utilities throw UtilEvalError.  ASTs throw EvalError.
    ASTs catch UtilEvalError and rethrow it as EvalError using
    toEvalError( Node ).
    &lt;p&gt;

    Philosophically, EvalError and UtilEvalError corrospond to
    RuntimeException.  However they are constrained in this way in order to
    add the context for error reporting.</description>
			<attribute name="@see">
				<description>UtilTargetError</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="UtilEvalError" />
			<constructor visibility="public" name="UtilEvalError">
				<params>
					<param name="s" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="toEvalError" fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError">
				<comment>
					<description>Re-throw as an eval error, prefixing msg to the message and specifying
        the node.  If a node already exists the addNode is ignored.
        &lt;p&gt;</description>
					<attribute name="@param">
						<description>msg may be null for no additional message.</description>
					</attribute>
				</comment>
				<params>
					<param name="msg" comment="may be null for no additional message." fulltype="java.lang.String" type="String" />
					<param name="node" fulltype="org.gjt.sp.jedit.bsh.SimpleNode" type="SimpleNode" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
				</params>
			</method>
			<method visibility="public" name="toEvalError" fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError">
				<params>
					<param name="node" fulltype="org.gjt.sp.jedit.bsh.SimpleNode" type="SimpleNode" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="UtilEvalError" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.UtilEvalError" fulltype="org.gjt.sp.jedit.bsh.UtilTargetError" type="UtilTargetError">
		<comment>
			<description>UtilTargetError is an error corresponding to a TargetError but thrown by a 
        utility or other class that does not have the caller context (Node) 
        available to it.  See UtilEvalError for an explanation of the difference
        between UtilEvalError and EvalError.
        &lt;p&gt;</description>
			<attribute name="@see">
				<description>UtilEvalError</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="public" name="t" fulltype="java.lang.Throwable" type="Throwable" />
		</fields>
		<methods>
			<constructor visibility="public" name="UtilTargetError">
				<params>
					<param name="message" fulltype="java.lang.String" type="String" />
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="UtilTargetError">
				<params>
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<method visibility="public" name="toEvalError" fulltype="org.gjt.sp.jedit.bsh.EvalError" type="EvalError">
				<comment>
					<description>Override toEvalError to throw TargetError type.</description>
				</comment>
				<params>
					<param name="msg" fulltype="java.lang.String" type="String" />
					<param name="node" fulltype="org.gjt.sp.jedit.bsh.SimpleNode" type="SimpleNode" />
					<param name="callstack" fulltype="org.gjt.sp.jedit.bsh.CallStack" type="CallStack" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bsh.Variable" type="Variable">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<methods>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Set the value of the typed variable.</description>
					<attribute name="@param">
						<description>value should be an object or wrapped bsh Primitive type.
                if value is null the appropriate default value will be set for the
                type: e.g. false for boolean, zero for integer types.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="should be an object or wrapped bsh Primitive type.
                if value is null the appropriate default value will be set for the
                type: e.g. false for boolean, zero for integer types." fulltype="java.lang.Object" type="Object" />
					<param name="context" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.bsh.UtilEvalError" type="UtilEvalError" />
				</exceptions>
			</method>
			<method visibility="public" name="getType" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>A type of null means loosely typed variable</description>
				</comment>
			</method>
			<method visibility="public" name="getTypeDescriptor" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getModifiers" fulltype="org.gjt.sp.jedit.bsh.Modifiers" type="Modifiers" />
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="hasModifier" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="This" visibility="public" package="org.gjt.sp.jedit.bsh" serializable="true" superclassfulltype="org.gjt.sp.jedit.bsh.This" fulltype="org.gjt.sp.jedit.bsh.XThis" type="XThis">
		<comment>
			<description>XThis is a dynamically loaded extension which extends This.java and adds
    support for the generalized interface proxy mechanism introduced in
    JDK1.3.  XThis allows bsh scripted objects to implement arbitrary
    interfaces (be arbitrary event listener types).

    Note: This module relies on new features of JDK1.3 and will not compile
    with JDK1.2 or lower.  For those environments simply do not compile this
    class.

    Eventually XThis should become simply This, but for backward compatability
    we will maintain This without requiring support for the proxy mechanism.

    XThis stands for &quot;eXtended This&quot; (I had to call it something).</description>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.bsh.JThis	JThis
    See also JThis with explicit JFC support for compatability.</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.bsh.This This</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="XThis">
				<params>
					<param name="namespace" fulltype="org.gjt.sp.jedit.bsh.NameSpace" type="NameSpace" />
					<param name="declaringInterp" fulltype="org.gjt.sp.jedit.bsh.Interpreter" type="Interpreter" />
				</params>
			</constructor>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getInterface" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Get dynamic proxy for interface, caching those it creates.</description>
				</comment>
				<params>
					<param name="clas" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getInterface" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Get dynamic proxy for interface, caching those it creates.</description>
				</comment>
				<params>
					<param name="ca" fulltype="java.lang.Class[]" type="Class" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.BufferAdapter" type="BufferAdapter">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.buffer.BufferListener" type="BufferListener" />
		</implements>
		<comment>
			<description>An adapter you can subclass to avoid having to implement all the methods
 of the {@link BufferListener} interface.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferAdapter.java 17966 2010-06-03 08:27:12Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre3</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferAdapter" />
			<method visibility="public" name="foldLevelChanged" fulltype="void" type="void">
				<comment>
					<description>Called when line fold levels change.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>start The start line number</description>
					</attribute>
					<attribute name="@param">
						<description>end The end line number</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="start" comment="The start line number" fulltype="int" type="int" />
					<param name="end" comment="The end line number" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="contentInserted" fulltype="void" type="void">
				<comment>
					<description>Called when text is inserted into the buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>startLine The first line</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset, from the beginning of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>numLines The number of lines inserted</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters inserted</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" comment="The first line" fulltype="int" type="int" />
					<param name="offset" comment="The start offset, from the beginning of the buffer" fulltype="int" type="int" />
					<param name="numLines" comment="The number of lines inserted" fulltype="int" type="int" />
					<param name="length" comment="The number of characters inserted" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="preContentInserted" fulltype="void" type="void">
				<comment>
					<description>Called when text is about to be inserted in the buffer.</description>
					<attribute name="@param">
						<description>buffer    The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>startLine The first line</description>
					</attribute>
					<attribute name="@param">
						<description>offset    The start offset, from the beginning of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>numLines  The number of lines inserted</description>
					</attribute>
					<attribute name="@param">
						<description>length    The number of characters inserted</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre11</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" comment="The first line" fulltype="int" type="int" />
					<param name="offset" comment="The start offset, from the beginning of the buffer" fulltype="int" type="int" />
					<param name="numLines" comment="The number of lines inserted" fulltype="int" type="int" />
					<param name="length" comment="The number of characters inserted" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="preContentRemoved" fulltype="void" type="void">
				<comment>
					<description>Called when text is about to be removed from the buffer, but is
 still present.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>startLine The first line</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset, from the beginning of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>numLines The number of lines to be removed</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters to be removed</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" comment="The first line" fulltype="int" type="int" />
					<param name="offset" comment="The start offset, from the beginning of the buffer" fulltype="int" type="int" />
					<param name="numLines" comment="The number of lines to be removed" fulltype="int" type="int" />
					<param name="length" comment="The number of characters to be removed" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="contentRemoved" fulltype="void" type="void">
				<comment>
					<description>Called when text is removed from the buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>startLine The first line</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset, from the beginning of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>numLines The number of lines removed</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters removed</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" comment="The first line" fulltype="int" type="int" />
					<param name="offset" comment="The start offset, from the beginning of the buffer" fulltype="int" type="int" />
					<param name="numLines" comment="The number of lines removed" fulltype="int" type="int" />
					<param name="length" comment="The number of characters removed" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="transactionComplete" fulltype="void" type="void">
				<comment>
					<description>Called after an undo or compound edit has finished. The text area
 uses this event to queue up and collapse cleanup operations so they
 are only run once during a long transaction (such as a &quot;Replace All&quot;
 operation.)</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="foldHandlerChanged" fulltype="void" type="void">
				<comment>
					<description>Called to notify the text area that folds need to be collapsed if
 the &quot;collapseFolds&quot; property is set. This method is called after the
 buffer has been loaded, and also if the user changes the fold
 handler.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="bufferLoaded" fulltype="void" type="void">
				<comment>
					<description>Called to notify the text area that the buffer has been reloaded.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.buffer" interface="true" fulltype="org.gjt.sp.jedit.buffer.BufferListener" type="BufferListener">
		<comment>
			<description>A interface for notification of changes to buffer text.&lt;p&gt;

 This interface is new in jEdit 4.3pre3. The text area was made independent
 of the rest of jEdit, and thus this class could no longer depend on
 &lt;code&gt;org.gjt.sp.jedit.Buffer&lt;/code&gt;.&lt;p&gt;

 While the
 {@link org.gjt.sp.jedit.msg.BufferUpdate} EditBus message is used for
 general buffer state changes, this interface is used for events which are
 fired frequently, or for which performance is essential.&lt;p&gt;

 Because this interface is subject to change in the future, you
 should subclass &lt;code&gt;BufferAdapter&lt;/code&gt; instead of
 implementing it directly.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferListener.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre3</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="foldLevelChanged" fulltype="void" type="void">
				<comment>
					<description>Called when line fold levels change.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>startLine The start line number</description>
					</attribute>
					<attribute name="@param">
						<description>endLine The end line number</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" comment="The start line number" fulltype="int" type="int" />
					<param name="endLine" comment="The end line number" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="contentInserted" fulltype="void" type="void">
				<comment>
					<description>Called when text is inserted into the buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>startLine The first line</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset, from the beginning of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>numLines The number of lines inserted</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters inserted</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" comment="The first line" fulltype="int" type="int" />
					<param name="offset" comment="The start offset, from the beginning of the buffer" fulltype="int" type="int" />
					<param name="numLines" comment="The number of lines inserted" fulltype="int" type="int" />
					<param name="length" comment="The number of characters inserted" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="contentRemoved" fulltype="void" type="void">
				<comment>
					<description>Called when text is removed from the buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>startLine The first line</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset, from the beginning of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>numLines The number of lines removed</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters removed</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" comment="The first line" fulltype="int" type="int" />
					<param name="offset" comment="The start offset, from the beginning of the buffer" fulltype="int" type="int" />
					<param name="numLines" comment="The number of lines removed" fulltype="int" type="int" />
					<param name="length" comment="The number of characters removed" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="preContentInserted" fulltype="void" type="void">
				<comment>
					<description>Called when text is about to be inserted in the buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>startLine The first line</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset, from the beginning of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>numLines The number of lines inserted</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters inserted</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre11</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" comment="The first line" fulltype="int" type="int" />
					<param name="offset" comment="The start offset, from the beginning of the buffer" fulltype="int" type="int" />
					<param name="numLines" comment="The number of lines inserted" fulltype="int" type="int" />
					<param name="length" comment="The number of characters inserted" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="preContentRemoved" fulltype="void" type="void">
				<comment>
					<description>Called when text is about to be removed from the buffer, but is
 still present.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>startLine The first line</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset, from the beginning of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>numLines The number of lines to be removed</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters to be removed</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" comment="The first line" fulltype="int" type="int" />
					<param name="offset" comment="The start offset, from the beginning of the buffer" fulltype="int" type="int" />
					<param name="numLines" comment="The number of lines to be removed" fulltype="int" type="int" />
					<param name="length" comment="The number of characters to be removed" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="transactionComplete" fulltype="void" type="void">
				<comment>
					<description>Called after an undo or compound edit has finished. The text area
 uses this event to queue up and collapse cleanup operations so they
 are only run once during a long transaction (such as a &quot;Replace All&quot;
 operation.)</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="foldHandlerChanged" fulltype="void" type="void">
				<comment>
					<description>Called to notify the text area that folds need to be collapsed if
 the &quot;collapseFolds&quot; property is set. This method is called after the
 buffer has been loaded, and also if the user changes the fold
 handler.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="bufferLoaded" fulltype="void" type="void">
				<comment>
					<description>Called to notify the text area that the buffer has been reloaded.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.buffer" interface="true" fulltype="org.gjt.sp.jedit.buffer.BufferUndoListener" type="BufferUndoListener">
		<comment>
			<description>A interface for notification of buffer undo/redo actions.

 This interface makes it easier for undo-aware plugins to process
 undo/redo actions in a buffer.

 Buffer undo listeners are added and removed from a buffer using
 &lt;code&gt;JEditBuffer.addBufferUndoListener&lt;code&gt; and
 &lt;code&gt;JEditBuffer.removeBufferUndoListener&lt;code&gt;, respectively.</description>
			<attribute name="@author">
				<description>Shlomy Reinstein</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferUndoListener.java 16098 2009-08-27 21:59:29Z shlomy $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre18</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="beginUndo" fulltype="void" type="void">
				<comment>
					<description>Called when an undo operation on the buffer begins.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="endUndo" fulltype="void" type="void">
				<comment>
					<description>Called when an undo operation on the buffer ends.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="beginRedo" fulltype="void" type="void">
				<comment>
					<description>Called when a redo on the buffer begins.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="endRedo" fulltype="void" type="void">
				<comment>
					<description>Called when a redo on the buffer ends.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.DefaultFoldHandlerProvider" type="DefaultFoldHandlerProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.buffer.FoldHandlerProvider" type="FoldHandlerProvider" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Buffer.java 8190 2006-12-07 07:58:34Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DefaultFoldHandlerProvider" />
			<method visibility="public" name="getFoldHandler" returncomment="the FoldHandler or null if it doesn&apos;t exist" fulltype="org.gjt.sp.jedit.buffer.FoldHandler" type="FoldHandler">
				<comment>
					<description>Returns the fold handler with the specified name, or null if
 there is no registered handler with that name.</description>
					<attribute name="@param">
						<description>name The name of the desired fold handler</description>
					</attribute>
					<attribute name="@return">
						<description>the FoldHandler or null if it doesn&apos;t exist</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name of the desired fold handler" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFoldModes" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns an array containing the names of all registered fold
 handlers.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addFoldHandler" fulltype="void" type="void">
				<comment>
					<description>Add a new FoldHander.</description>
					<attribute name="@param">
						<description>foldHandler the new foldHandler</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="foldHandler" comment="the new foldHandler" fulltype="org.gjt.sp.jedit.buffer.FoldHandler" type="FoldHandler" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="FoldHandler" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="org.gjt.sp.jedit.buffer.FoldHandler" fulltype="org.gjt.sp.jedit.buffer.DummyFoldHandler" type="DummyFoldHandler">
		<comment>
			<description>A fold handler that does nothing.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DummyFoldHandler.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.0pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DummyFoldHandler" />
			<method visibility="public" name="getFoldLevel" returncomment="The fold level of the specified line" fulltype="int" type="int">
				<comment>
					<description>Returns the fold level of the specified line.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>lineIndex The line index</description>
					</attribute>
					<attribute name="@param">
						<description>seg A segment the fold handler can use to obtain any
 text from the buffer, if necessary</description>
					</attribute>
					<attribute name="@return">
						<description>The fold level of the specified line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="lineIndex" comment="The line index" fulltype="int" type="int" />
					<param name="seg" comment="A segment the fold handler can use to obtain any
 text from the buffer, if necessary" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="FoldHandler" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="org.gjt.sp.jedit.buffer.FoldHandler" fulltype="org.gjt.sp.jedit.buffer.ExplicitFoldHandler" type="ExplicitFoldHandler">
		<comment>
			<description>A fold handler that folds lines based on markers (&quot;{{{&quot; and &quot;}}}&quot;)
 embedded in the text.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ExplicitFoldHandler.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.0pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ExplicitFoldHandler" />
			<method visibility="public" name="getFoldLevel" returncomment="The fold level of the specified line" fulltype="int" type="int">
				<comment>
					<description>Returns the fold level of the specified line.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>lineIndex The line index</description>
					</attribute>
					<attribute name="@param">
						<description>seg A segment the fold handler can use to obtain any
 text from the buffer, if necessary</description>
					</attribute>
					<attribute name="@return">
						<description>The fold level of the specified line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="lineIndex" comment="The line index" fulltype="int" type="int" />
					<param name="seg" comment="A segment the fold handler can use to obtain any
 text from the buffer, if necessary" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.FoldHandler" type="FoldHandler">
		<comment>
			<description>Interface for obtaining the fold level of a specified line.&lt;p&gt;

 Plugins can provide fold handlers by defining entries in their
 &lt;code&gt;services.xml&lt;/code&gt; files like so:

 &lt;pre&gt;&amp;lt;SERVICE CLASS=&quot;org.gjt.sp.jedit.buffer.FoldHandler&quot; NAME=&quot;&lt;i&gt;name&lt;/i&gt;&quot;&amp;gt;
    new &lt;i&gt;MyFoldHandler&lt;i&gt;();
&amp;lt;/SERVICE&amp;gt;&lt;/pre&gt;

 See {@link org.gjt.sp.jedit.ServiceManager} for details.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FoldHandler.java 18919 2010-11-04 10:52:55Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre3</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="public" name="foldHandlerProvider" fulltype="org.gjt.sp.jedit.buffer.FoldHandlerProvider" type="FoldHandlerProvider">
				<comment>
					<description>The FoldHandlerProvider.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="protected" name="FoldHandler">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getName" returncomment="The internal name of this FoldHandler" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the internal name of this FoldHandler</description>
					<attribute name="@return">
						<description>The internal name of this FoldHandler</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="getFoldLevel" returncomment="The fold level of the specified line" fulltype="int" type="int">
				<comment>
					<description>Returns the fold level of the specified line.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>lineIndex The line index</description>
					</attribute>
					<attribute name="@param">
						<description>seg A segment the fold handler can use to obtain any
 text from the buffer, if necessary</description>
					</attribute>
					<attribute name="@return">
						<description>The fold level of the specified line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="lineIndex" comment="The line index" fulltype="int" type="int" />
					<param name="seg" comment="A segment the fold handler can use to obtain any
 text from the buffer, if necessary" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
			<method visibility="public" name="getPrecedingFoldLevels" returncomment="The fold levels of the preceding lines, in decreasing line
 number order (i.e. bottomost line first)." fulltype="java.util.List" type="List">
				<comment>
					<description>Returns the fold levels of the lines preceding the specified line,
 which depend on the specified line.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>lineIndex The line index</description>
					</attribute>
					<attribute name="@param">
						<description>seg A segment the fold handler can use to obtain any</description>
					</attribute>
					<attribute name="@param">
						<description>lineFoldLevel The fold level of the specified line</description>
					</attribute>
					<attribute name="@return">
						<description>The fold levels of the preceding lines, in decreasing line
 number order (i.e. bottomost line first).</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="lineIndex" comment="The line index" fulltype="int" type="int" />
					<param name="seg" comment="A segment the fold handler can use to obtain any" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="lineFoldLevel" comment="The fold level of the specified line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified fold handler is equal to this one.</description>
					<attribute name="@param">
						<description>o The object</description>
					</attribute>
				</comment>
				<params>
					<param name="o" comment="The object" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int" />
			<method static="true" visibility="public" name="getFoldHandler" fulltype="org.gjt.sp.jedit.buffer.FoldHandler" type="FoldHandler">
				<comment>
					<description>Returns the fold handler with the specified name, or null if
 there is no registered handler with that name.</description>
					<attribute name="@param">
						<description>name The name of the desired fold handler</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name of the desired fold handler" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getFoldModes" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns an array containing the names of all registered fold
 handlers.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.buffer" interface="true" fulltype="org.gjt.sp.jedit.buffer.FoldHandlerProvider" type="FoldHandlerProvider">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Buffer.java 8190 2006-12-07 07:58:34Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre10</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getFoldHandler" returncomment="the FoldHandler or null if it doesn&apos;t exist" fulltype="org.gjt.sp.jedit.buffer.FoldHandler" type="FoldHandler">
				<comment>
					<description>Returns the fold handler with the specified name, or null if
 there is no registered handler with that name.</description>
					<attribute name="@param">
						<description>name The name of the desired fold handler</description>
					</attribute>
					<attribute name="@return">
						<description>the FoldHandler or null if it doesn&apos;t exist</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name of the desired fold handler" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFoldModes" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns an array containing the names of all registered fold
 handlers.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="FoldHandler" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="org.gjt.sp.jedit.buffer.FoldHandler" fulltype="org.gjt.sp.jedit.buffer.IndentFoldHandler" type="IndentFoldHandler">
		<comment>
			<description>A fold handler that folds lines based on their indent level.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: IndentFoldHandler.java 16133 2009-08-31 21:07:15Z shlomy $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.0pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IndentFoldHandler" />
			<method visibility="public" name="getFoldLevel" returncomment="The fold level of the specified line" fulltype="int" type="int">
				<comment>
					<description>Returns the fold level of the specified line. For a whitespace-only
 line, returns the fold level of the next non-whitespace line, or
 the level of the previous line if no non-whitespace line follows or if
 the level of the previous line is higher.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>lineIndex The line index</description>
					</attribute>
					<attribute name="@param">
						<description>seg A segment the fold handler can use to obtain any
 text from the buffer, if necessary</description>
					</attribute>
					<attribute name="@return">
						<description>The fold level of the specified line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="lineIndex" comment="The line index" fulltype="int" type="int" />
					<param name="seg" comment="A segment the fold handler can use to obtain any
 text from the buffer, if necessary" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
			<method visibility="public" name="getPrecedingFoldLevels" returncomment="The fold levels of the preceding lines, in decreasing line
 number order (i.e. bottomost line first)." fulltype="java.util.List" type="List">
				<comment>
					<description>Returns the fold levels of the lines preceding the specified line,
 which depend on the specified line.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>lineIndex The line index</description>
					</attribute>
					<attribute name="@param">
						<description>seg A segment the fold handler can use to obtain any</description>
					</attribute>
					<attribute name="@param">
						<description>lineFoldLevel The fold level of the specified line</description>
					</attribute>
					<attribute name="@return">
						<description>The fold levels of the preceding lines, in decreasing line
 number order (i.e. bottomost line first).</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="lineIndex" comment="The line index" fulltype="int" type="int" />
					<param name="seg" comment="A segment the fold handler can use to obtain any" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="lineFoldLevel" comment="The fold level of the specified line" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer">
		<comment>
			<description>A &lt;code&gt;JEditBuffer&lt;/code&gt; represents the contents of an open text
 file as it is maintained in the computer&apos;s memory (as opposed to
 how it may be stored on a disk).&lt;p&gt;

 This class is partially thread-safe, however you must pay attention to two
 very important guidelines:
 &lt;ul&gt;
 &lt;li&gt;Operations such as insert() and remove(),
 undo(), change Buffer data in a writeLock(), and must
 be called from the AWT thread.
 &lt;li&gt;When accessing the buffer from another thread, you must
 call readLock() before and readUnLock() after,  if you plan on performing
 more than one read, to ensure that  the buffer contents are not changed by
 the AWT thread for the duration of the lock. Only methods whose descriptions
 specify thread safety can be invoked from other threads.
 &lt;/ul&gt;</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: JEditBuffer.java 21754 2012-06-02 18:49:16Z jarekczek $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre3</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="lineSeparator" visibility="public" name="LINESEP" constexpr="&quot;lineSeparator&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Line separator property.</description>
				</comment>
			</field>
			<field final="true" static="true" const="encoding" visibility="public" name="ENCODING" constexpr="&quot;encoding&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Character encoding used when loading and saving.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="NORMAL_PRIORITY" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="HIGH_PRIORITY" constexpr="1" fulltype="int" type="int" />
			<field visibility="protected" name="mode" fulltype="org.gjt.sp.jedit.Mode" type="Mode">
				<comment>
					<description>The edit mode of the buffer.</description>
				</comment>
			</field>
			<field visibility="protected" name="contextInsensitive" fulltype="boolean" type="boolean">
				<comment>
					<description>If true the syntax highlight is context insensitive.
 To highlight a line we don&apos;t keed the context of the previous line.</description>
				</comment>
			</field>
			<field visibility="protected" name="undoMgr" fulltype="org.gjt.sp.jedit.buffer.UndoManager" type="UndoManager" />
			<field visibility="protected" name="tokenMarker" fulltype="org.gjt.sp.jedit.syntax.TokenMarker" type="TokenMarker" />
			<field visibility="public" name="elasticTabstopsOn" fulltype="boolean" type="boolean" />
			<field final="true" visibility="public" name="columnBlockLock" fulltype="java.lang.Object" type="Object" />
		</fields>
		<methods>
			<constructor visibility="public" name="JEditBuffer">
				<params>
					<param name="props" fulltype="java.util.Map" type="Map" />
				</params>
			</constructor>
			<constructor visibility="public" name="JEditBuffer">
				<comment>
					<description>Create a new JEditBuffer.
 It is used by independent textarea only</description>
				</comment>
			</constructor>
			<method visibility="public" name="isDirty" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns whether there have been unsaved changes to this buffer.
 This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="isLoading" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setLoading" fulltype="void" type="void">
				<params>
					<param name="loading" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isPerformingIO" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the buffer is currently performing I/O.
 This method is thread-safe.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setPerformingIO" fulltype="void" type="void">
				<comment>
					<description>Returns true if the buffer is currently performing I/O.
 This method is thread-safe.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="io" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isEditable" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this file is editable, false otherwise. A file may
 become uneditable if it is read only, or if I/O is in progress.
 This method is thread-safe.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isReadOnly" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this file is read only, false otherwise.
 This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="setReadOnly" fulltype="void" type="void">
				<comment>
					<description>Sets the read only flag.</description>
					<attribute name="@param">
						<description>readOnly The read only flag</description>
					</attribute>
				</comment>
				<params>
					<param name="readOnly" comment="The read only flag" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setDirty" fulltype="void" type="void">
				<comment>
					<description>Sets the &apos;dirty&apos; (changed since last save) flag of this buffer.</description>
				</comment>
				<params>
					<param name="d" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="readLock" fulltype="void" type="void">
				<comment>
					<description>The buffer is guaranteed not to change between calls to
 {@link #readLock()} and {@link #readUnlock()}.
 Calls to this method may be nested.</description>
				</comment>
			</method>
			<method visibility="public" name="readUnlock" fulltype="void" type="void">
				<comment>
					<description>The buffer is guaranteed not to change between calls to
 {@link #readLock()} and {@link #readUnlock()}.</description>
				</comment>
			</method>
			<method visibility="public" name="writeLock" fulltype="void" type="void">
				<comment>
					<description>Attempting to obtain read lock will block between calls to
 {@link #writeLock()} and {@link #writeUnlock()}.
 Calls to this method may be nested.</description>
				</comment>
			</method>
			<method visibility="public" name="writeUnlock" fulltype="void" type="void">
				<comment>
					<description>Attempting to obtain read lock will block between calls to
 {@link #writeLock()} and {@link #writeUnlock()}.</description>
				</comment>
			</method>
			<method visibility="public" name="getLength" fulltype="int" type="int">
				<comment>
					<description>Returns the number of characters in the buffer. This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="getLineCount" fulltype="int" type="int">
				<comment>
					<description>Returns the number of physical lines in the buffer.
 This method is thread-safe.</description>
					<attribute name="@since">
						<description>jEdit 3.1pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLineOfOffset" fulltype="int" type="int">
				<comment>
					<description>Returns the line containing the specified offset.
 This method is thread-safe.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLineStartOffset" returncomment="The start offset of the specified line, that is the offset
 after the end-of-line character before that line." fulltype="int" type="int">
				<comment>
					<description>Returns the start offset of the specified line.
 This method is thread-safe.</description>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
					<attribute name="@return">
						<description>The start offset of the specified line, that is the offset
 after the end-of-line character before that line.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLineEndOffset" returncomment="The end offset of the specified line, that is the offset 
 after the end-of-line character. Note that
 &lt;code&gt;buffer.getLineOfOffset(buffer.getLineEndOffset(x))&lt;/code&gt;
 does not return &lt;code&gt;x&lt;/code&gt; but &lt;code&gt;x+1&lt;/code&gt;." fulltype="int" type="int">
				<comment>
					<description>Returns the end offset of the specified line.
 This method is thread-safe.</description>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
					<attribute name="@return">
						<description>The end offset of the specified line, that is the offset 
 after the end-of-line character. Note that
 &lt;code&gt;buffer.getLineOfOffset(buffer.getLineEndOffset(x))&lt;/code&gt;
 does not return &lt;code&gt;x&lt;/code&gt; but &lt;code&gt;x+1&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLineLength" fulltype="int" type="int">
				<comment>
					<description>Returns the length of the specified line.
 This method is thread-safe.</description>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getPriorNonEmptyLine" fulltype="int" type="int">
				<comment>
					<description>Auto indent needs this.</description>
				</comment>
				<params>
					<param name="lineIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLineText" returncomment="The text, or null if the line is invalid" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the text on the specified line.
 This method is thread-safe.</description>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
					<attribute name="@return">
						<description>The text, or null if the line is invalid</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLineText" fulltype="void" type="void">
				<comment>
					<description>Returns the specified line in a &lt;code&gt;Segment&lt;/code&gt;.&lt;p&gt;

 Using a &lt;classname&gt;Segment&lt;/classname&gt; is generally more
 efficient than using a &lt;classname&gt;String&lt;/classname&gt; because it
 results in less memory allocation and array copying.&lt;p&gt;

 This method is thread-safe.</description>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line" fulltype="int" type="int" />
					<param name="segment" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
			<method visibility="public" name="getLineText" fulltype="void" type="void">
				<comment>
					<description>Returns the specified line from the starting point passed in relativeStartOffset  in a &lt;code&gt;Segment&lt;/code&gt;.&lt;p&gt;

 Using a &lt;classname&gt;Segment&lt;/classname&gt; is generally more
 efficient than using a &lt;classname&gt;String&lt;/classname&gt; because it
 results in less memory allocation and array copying.&lt;p&gt;

 This method is thread-safe.</description>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line" fulltype="int" type="int" />
					<param name="relativeStartOffset" fulltype="int" type="int" />
					<param name="segment" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
			<method visibility="public" name="getLineSegment" returncomment="The text, or null if the line is invalid" fulltype="java.lang.CharSequence" type="CharSequence">
				<comment>
					<description>Returns the text on the specified line.
 This method is thread-safe.</description>
					<attribute name="@param">
						<description>line The line index.</description>
					</attribute>
					<attribute name="@return">
						<description>The text, or null if the line is invalid</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line index." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the specified text range. This method is thread-safe.</description>
					<attribute name="@param">
						<description>start The start offset</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters to get</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The start offset" fulltype="int" type="int" />
					<param name="length" comment="The number of characters to get" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the full buffer content. This method is thread-safe</description>
					<attribute name="@since">
						<description>4.4.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getText" fulltype="void" type="void">
				<comment>
					<description>Returns the specified text range in a &lt;code&gt;Segment&lt;/code&gt;.&lt;p&gt;

 Using a &lt;classname&gt;Segment&lt;/classname&gt; is generally more
 efficient than using a &lt;classname&gt;String&lt;/classname&gt; because it
 results in less memory allocation and array copying.&lt;p&gt;

 This method is thread-safe.</description>
					<attribute name="@param">
						<description>start The start offset</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters to get</description>
					</attribute>
					<attribute name="@param">
						<description>seg The segment to copy the text to</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The start offset" fulltype="int" type="int" />
					<param name="length" comment="The number of characters to get" fulltype="int" type="int" />
					<param name="seg" comment="The segment to copy the text to" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
			<method visibility="public" name="getSegment" returncomment="a CharSequence that contains the text wanted text" fulltype="java.lang.CharSequence" type="CharSequence">
				<comment>
					<description>Returns the specified text range. This method is thread-safe.
 It doesn&apos;t copy the text</description>
					<attribute name="@param">
						<description>start The start offset</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters to get</description>
					</attribute>
					<attribute name="@return">
						<description>a CharSequence that contains the text wanted text</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The start offset" fulltype="int" type="int" />
					<param name="length" comment="The number of characters to get" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="void" type="void">
				<comment>
					<description>Inserts a string into the buffer.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="void" type="void">
				<comment>
					<description>Inserts a string into the buffer.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@param">
						<description>seg The segment</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
					<param name="seg" comment="The segment" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="void" type="void">
				<comment>
					<description>Inserts a string into the buffer.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@param">
						<description>seq The charsequence</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
					<param name="seq" comment="The charsequence" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method visibility="public" name="remove" fulltype="void" type="void">
				<comment>
					<description>Removes the specified rang efrom the buffer.</description>
					<attribute name="@param">
						<description>offset The start offset</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters to remove</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The start offset" fulltype="int" type="int" />
					<param name="length" comment="The number of characters to remove" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="removeTrailingWhiteSpace" fulltype="void" type="void">
				<comment>
					<description>Removes trailing whitespace from all lines in the specified list.</description>
					<attribute name="@param">
						<description>lines The line numbers</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="lines" comment="The line numbers" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="shiftIndentLeft" fulltype="void" type="void">
				<comment>
					<description>Shifts the indent of each line in the specified list to the left.</description>
					<attribute name="@param">
						<description>lines The line numbers</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="lines" comment="The line numbers" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="shiftIndentRight" fulltype="void" type="void">
				<comment>
					<description>Shifts the indent of each line in the specified list to the right.</description>
					<attribute name="@param">
						<description>lines The line numbers</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="lines" comment="The line numbers" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="indentLines" fulltype="void" type="void">
				<comment>
					<description>Indents all specified lines.</description>
					<attribute name="@param">
						<description>start The first line to indent</description>
					</attribute>
					<attribute name="@param">
						<description>end The last line to indent</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The first line to indent" fulltype="int" type="int" />
					<param name="end" comment="The last line to indent" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="indentLines" fulltype="void" type="void">
				<comment>
					<description>Indents all specified lines.</description>
					<attribute name="@param">
						<description>lines The line numbers</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="lines" comment="The line numbers" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="simpleIndentLine" fulltype="void" type="void">
				<comment>
					<description>Simply indents the given line to the same level as the previous nonempty line</description>
					<attribute name="@param">
						<description>lineIndex The line number to indent</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0</description>
					</attribute>
				</comment>
				<params>
					<param name="lineIndex" comment="The line number to indent" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="indentLine" returncomment="true If indentation took place, false otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Indents the specified line.</description>
					<attribute name="@param">
						<description>lineIndex The line number to indent</description>
					</attribute>
					<attribute name="@param">
						<description>canDecreaseIndent If true, the indent can be decreased as a
 result of this. Set this to false for Tab key.</description>
					</attribute>
					<attribute name="@return">
						<description>true If indentation took place, false otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="lineIndex" comment="The line number to indent" fulltype="int" type="int" />
					<param name="canDecreaseIndent" comment="If true, the indent can be decreased as a
 result of this. Set this to false for Tab key." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getCurrentIndentForLine" fulltype="int" type="int">
				<comment>
					<description>Returns the line&apos;s current leading indent.</description>
					<attribute name="@param">
						<description>lineIndex The line number</description>
					</attribute>
					<attribute name="@param">
						<description>whitespaceChars If this is non-null, the number of whitespace
 characters is stored at the 0 index</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="lineIndex" comment="The line number" fulltype="int" type="int" />
					<param name="whitespaceChars" comment="If this is non-null, the number of whitespace
 characters is stored at the 0 index" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="getIdealIndentForLine" fulltype="int" type="int">
				<comment>
					<description>Returns the ideal leading indent for the specified line.
 This will apply the various auto-indent rules.</description>
					<attribute name="@param">
						<description>lineIndex The line number</description>
					</attribute>
				</comment>
				<params>
					<param name="lineIndex" comment="The line number" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getVirtualWidth" fulltype="int" type="int">
				<comment>
					<description>Returns the virtual column number (taking tabs into account) of the
 specified position.</description>
					<attribute name="@param">
						<description>line The line number</description>
					</attribute>
					<attribute name="@param">
						<description>column The column number</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line number" fulltype="int" type="int" />
					<param name="column" comment="The column number" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getOffsetOfVirtualColumn" returncomment="-1 if the column is out of bounds" fulltype="int" type="int">
				<comment>
					<description>Returns the offset of a virtual column number (taking tabs
 into account) relative to the start of the line in question.</description>
					<attribute name="@param">
						<description>line The line number</description>
					</attribute>
					<attribute name="@param">
						<description>column The virtual column number</description>
					</attribute>
					<attribute name="@param">
						<description>totalVirtualWidth If this array is non-null, the total
 virtual width will be stored in its first location if this method
 returns -1.</description>
					</attribute>
					<attribute name="@return">
						<description>-1 if the column is out of bounds</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line number" fulltype="int" type="int" />
					<param name="column" comment="The virtual column number" fulltype="int" type="int" />
					<param name="totalVirtualWidth" comment="If this array is non-null, the total
 virtual width will be stored in its first location if this method
 returns -1." fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="insertAtColumn" fulltype="void" type="void">
				<comment>
					<description>Like the {@link #insert(int,String)} method, but inserts the string at
 the specified virtual column. Inserts spaces as appropriate if
 the line is shorter than the column.</description>
					<attribute name="@param">
						<description>line The line number</description>
					</attribute>
					<attribute name="@param">
						<description>col The virtual column number</description>
					</attribute>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line number" fulltype="int" type="int" />
					<param name="col" comment="The virtual column number" fulltype="int" type="int" />
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="insertIndented" returncomment="The number of characters of indent inserted on each new
 line. This is used by the abbreviations code." fulltype="int" type="int">
				<comment>
					<description>Inserts a string into the buffer, indenting each line of the string
 to match the indent of the first line.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@param">
						<description>text The text</description>
					</attribute>
					<attribute name="@return">
						<description>The number of characters of indent inserted on each new
 line. This is used by the abbreviations code.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre14</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
					<param name="text" comment="The text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="isElectricKey" fulltype="boolean" type="boolean">
				<comment>
					<description>Should inserting this character trigger a re-indent of
 the current line?</description>
					<attribute name="@since">
						<description>jEdit 4.3pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" fulltype="char" type="char" />
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="markTokens" fulltype="void" type="void">
				<comment>
					<description>Returns the syntax tokens for the specified line.</description>
					<attribute name="@param">
						<description>lineIndex The line number</description>
					</attribute>
					<attribute name="@param">
						<description>tokenHandler The token handler that will receive the syntax
 tokens</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="lineIndex" comment="The line number" fulltype="int" type="int" />
					<param name="tokenHandler" comment="The token handler that will receive the syntax
 tokens" fulltype="org.gjt.sp.jedit.syntax.TokenHandler" type="TokenHandler" />
				</params>
			</method>
			<method visibility="public" name="getTokenMarker" fulltype="org.gjt.sp.jedit.syntax.TokenMarker" type="TokenMarker" />
			<method visibility="public" name="setTokenMarker" fulltype="void" type="void">
				<params>
					<param name="tokenMarker" fulltype="org.gjt.sp.jedit.syntax.TokenMarker" type="TokenMarker" />
				</params>
			</method>
			<method visibility="public" name="createPosition" fulltype="javax.swing.text.Position" type="Position">
				<comment>
					<description>Creates a floating position (&lt;code&gt;javax.swing.text.Position&lt;/code&gt;).
 The position is retained despite text editions.
 &lt;p&gt;No explicit removal of position is necessary, only dereferencing it.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void">
				<comment>
					<description>Reloads settings from the properties. This should be called
 after the &lt;code&gt;syntax&lt;/code&gt; or &lt;code&gt;folding&lt;/code&gt;
 buffer-local properties are changed.</description>
				</comment>
			</method>
			<method visibility="public" name="getTabSize" fulltype="int" type="int">
				<comment>
					<description>Returns the tab size used in this buffer. This is equivalent
 to calling &lt;code&gt;getProperty(&quot;tabSize&quot;)&lt;/code&gt;.
 This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="getIndentSize" fulltype="int" type="int">
				<comment>
					<description>Returns the indent size used in this buffer. This is equivalent
 to calling &lt;code&gt;getProperty(&quot;indentSize&quot;)&lt;/code&gt;.
 This method is thread-safe.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getProperty" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the value of a buffer-local property.&lt;p&gt;

 Using this method is generally discouraged, because it returns an
 &lt;code&gt;Object&lt;/code&gt; which must be cast to another type
 in order to be useful, and this can cause problems if the object
 is of a different type than what the caller expects.&lt;p&gt;

 The following methods should be used instead:
 &lt;ul&gt;
 &lt;li&gt;{@link #getStringProperty(String)}&lt;/li&gt;
 &lt;li&gt;{@link #getBooleanProperty(String)}&lt;/li&gt;
 &lt;li&gt;{@link #getIntegerProperty(String,int)}&lt;/li&gt;
 &lt;/ul&gt;

 This method is thread-safe.</description>
					<attribute name="@param">
						<description>name The property name. For backwards compatibility, this
 is an &lt;code&gt;Object&lt;/code&gt;, not a &lt;code&gt;String&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name. For backwards compatibility, this
 is an &lt;code&gt;Object&lt;/code&gt;, not a &lt;code&gt;String&lt;/code&gt;." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getDefaultProperty" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setProperty" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a buffer-local property.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@param">
						<description>value The property value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The property value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="setDefaultProperty" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="unsetProperty" fulltype="void" type="void">
				<comment>
					<description>Clears the value of a buffer-local property.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="resetCachedProperties" fulltype="void" type="void" />
			<method visibility="public" name="getStringProperty" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the value of a string property. This method is thread-safe.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setStringProperty" fulltype="void" type="void">
				<comment>
					<description>Sets a string property.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@param">
						<description>value The value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getBooleanProperty" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the value of a boolean property. This method is thread-safe.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getBooleanProperty" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the value of a boolean property. This method is thread-safe.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@param">
						<description>def The default value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
					<param name="def" comment="The default value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setBooleanProperty" fulltype="void" type="void">
				<comment>
					<description>Sets a boolean property.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@param">
						<description>value The value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getIntegerProperty" fulltype="int" type="int">
				<comment>
					<description>Returns the value of an integer property. This method is thread-safe.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
					<param name="defaultValue" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setIntegerProperty" fulltype="void" type="void">
				<comment>
					<description>Sets an integer property.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@param">
						<description>value The value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The value" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getPatternProperty" fulltype="java.util.regex.Pattern" type="Pattern">
				<comment>
					<description>Returns the value of a property as a regular expression.
 This method is thread-safe.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@param">
						<description>flags Regular expression compilation flags</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
					<param name="flags" comment="Regular expression compilation flags" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getRuleSetAtOffset" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet">
				<comment>
					<description>Returns the syntax highlighting ruleset at the specified offset.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getKeywordMapAtOffset" fulltype="org.gjt.sp.jedit.syntax.KeywordMap" type="KeywordMap">
				<comment>
					<description>Returns the syntax highlighting keyword map in effect at the
 specified offset. Used by the &lt;b&gt;Complete Word&lt;/b&gt; command to
 complete keywords.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getContextSensitiveProperty" fulltype="java.lang.String" type="String">
				<comment>
					<description>Some settings, like comment start and end strings, can
 vary between different parts of a buffer (HTML text and inline
 JavaScript, for example).</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getMode" fulltype="org.gjt.sp.jedit.Mode" type="Mode">
				<comment>
					<description>Returns this buffer&apos;s edit mode. This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="setMode" fulltype="void" type="void">
				<comment>
					<description>Sets this buffer&apos;s edit mode. Note that calling this before a buffer
 is loaded will have no effect; in that case, set the &quot;mode&quot; property
 to the name of the mode. A bit inelegant, I know...</description>
					<attribute name="@param">
						<description>mode The mode name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" comment="The mode name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setMode" fulltype="void" type="void">
				<comment>
					<description>Sets this buffer&apos;s edit mode. Note that calling this before a buffer
 is loaded will have no effect; in that case, set the &quot;mode&quot; property
 to the name of the mode. A bit inelegant, I know...</description>
					<attribute name="@param">
						<description>mode The mode</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" comment="The mode" fulltype="org.gjt.sp.jedit.Mode" type="Mode" />
				</params>
			</method>
			<method visibility="public" name="setMode" fulltype="void" type="void">
				<comment>
					<description>Sets this buffer&apos;s edit mode. Note that calling this before a buffer
 is loaded will have no effect; in that case, set the &quot;mode&quot; property
 to the name of the mode. A bit inelegant, I know...</description>
					<attribute name="@param">
						<description>mode The mode</description>
					</attribute>
					<attribute name="@param">
						<description>forceContextInsensitive true if you want to force the buffer to be
 insensitive to the context. Careful it can break syntax highlight. Default
 value is false</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" comment="The mode" fulltype="org.gjt.sp.jedit.Mode" type="Mode" />
					<param name="forceContextInsensitive" comment="true if you want to force the buffer to be
 insensitive to the context. Careful it can break syntax highlight. Default
 value is false" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isFoldStart" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified line begins a fold.</description>
					<attribute name="@since">
						<description>jEdit 3.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="isFoldEnd" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified line ends a fold.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="invalidateCachedFoldLevels" fulltype="void" type="void">
				<comment>
					<description>Invalidates all cached fold level information.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre11</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getFoldLevel" fulltype="int" type="int">
				<comment>
					<description>Returns the fold level of the specified line.</description>
					<attribute name="@param">
						<description>line A physical line index</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="A physical line index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getFoldAtLine" fulltype="int[]" type="int">
				<comment>
					<description>Returns an array. The first element is the start line, the
 second element is the end line, of the fold containing the
 specified line number.</description>
					<attribute name="@param">
						<description>line The line number</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line number" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getFoldHandler" fulltype="org.gjt.sp.jedit.buffer.FoldHandler" type="FoldHandler">
				<comment>
					<description>Returns the current buffer&apos;s fold handler.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setFoldHandler" fulltype="void" type="void">
				<comment>
					<description>Sets the buffer&apos;s fold handler.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="foldHandler" fulltype="org.gjt.sp.jedit.buffer.FoldHandler" type="FoldHandler" />
				</params>
			</method>
			<method visibility="public" name="undo" fulltype="void" type="void">
				<comment>
					<description>Undoes the most recent edit.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
			<method visibility="public" name="redo" fulltype="void" type="void">
				<comment>
					<description>Redoes the most recently undone edit.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
			<method visibility="public" name="isTransactionInProgress" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if an undo or compound edit is currently in progress. If this
 method returns true, then eventually a
 {@link org.gjt.sp.jedit.buffer.BufferListener#transactionComplete(JEditBuffer)}
 buffer event will get fired.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="beginCompoundEdit" fulltype="void" type="void">
				<comment>
					<description>Starts a compound edit. All edits from now on until
 {@link #endCompoundEdit()} are called will be merged
 into one. This can be used to make a complex operation
 undoable in one step. Nested calls to
 {@link #beginCompoundEdit()} behave as expected,
 requiring the same number of {@link #endCompoundEdit()}
 calls to end the edit.</description>
					<attribute name="@see">
						<description>#endCompoundEdit()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="endCompoundEdit" fulltype="void" type="void">
				<comment>
					<description>Ends a compound edit. All edits performed since
 {@link #beginCompoundEdit()} was called can now
 be undone in one step by calling {@link #undo(TextArea)}.</description>
					<attribute name="@see">
						<description>#beginCompoundEdit()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="insideCompoundEdit" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if a compound edit is currently active.</description>
					<attribute name="@since">
						<description>jEdit 3.1pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isUndoInProgress" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if an undo or redo is currently being performed.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getUndoId" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns an object that identifies the undo operation to which the
 current content change belongs. This method can be used by buffer
 listeners during content changes (contentInserted/contentRemoved)
 to find out which content changes belong to the same &quot;undo&quot; operation.
 The same undoId object will be returned for all content changes
 belonging to the same undo operation. Only the identity of the
 undoId can be used, by comparing it with a previously-returned undoId
 using &quot;==&quot;.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addBufferListener" fulltype="void" type="void">
				<comment>
					<description>Adds a buffer change listener.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
					<attribute name="@param">
						<description>priority Listeners with HIGH_PRIORITY get the event before
 listeners with NORMAL_PRIORITY</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.jedit.buffer.BufferListener" type="BufferListener" />
					<param name="priority" comment="Listeners with HIGH_PRIORITY get the event before
 listeners with NORMAL_PRIORITY" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addBufferListener" fulltype="void" type="void">
				<comment>
					<description>Adds a buffer change listener.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.jedit.buffer.BufferListener" type="BufferListener" />
				</params>
			</method>
			<method visibility="public" name="removeBufferListener" fulltype="void" type="void">
				<comment>
					<description>Removes a buffer change listener.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.jedit.buffer.BufferListener" type="BufferListener" />
				</params>
			</method>
			<method visibility="public" name="getBufferListeners" fulltype="org.gjt.sp.jedit.buffer.BufferListener[]" type="BufferListener">
				<comment>
					<description>Returns an array of registered buffer change listeners.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setUndoLimit" fulltype="void" type="void">
				<comment>
					<description>Set the undo limit of the Undo Manager.</description>
					<attribute name="@param">
						<description>limit the new limit</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre16</description>
					</attribute>
				</comment>
				<params>
					<param name="limit" comment="the new limit" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="canUndo" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if an undo operation can be performed.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="canRedo" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if a redo operation can be performed.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isContextInsensitive" returncomment="true if the highlight is insensitive to
 the context" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the buffer highlight is
 not sensitive to the context.</description>
					<attribute name="@return">
						<description>true if the highlight is insensitive to
 the context</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setContextInsensitive" fulltype="void" type="void">
				<comment>
					<description>Set the buffer to be insensitive to the context during
 highlight.</description>
					<attribute name="@param">
						<description>contextInsensitive the new contextInsensitive value
 the context</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="contextInsensitive" comment="the new contextInsensitive value
 the context" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="fireFoldLevelChanged" fulltype="void" type="void">
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="protected" name="fireContentInserted" fulltype="void" type="void">
				<params>
					<param name="startLine" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="numLines" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="protected" name="fireContentRemoved" fulltype="void" type="void">
				<params>
					<param name="startLine" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="numLines" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="protected" name="firePreContentInserted" fulltype="void" type="void">
				<params>
					<param name="startLine" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="numLines" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="protected" name="firePreContentRemoved" fulltype="void" type="void">
				<params>
					<param name="startLine" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="numLines" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="protected" name="fireBeginUndo" fulltype="void" type="void" />
			<method visibility="protected" name="fireEndUndo" fulltype="void" type="void" />
			<method visibility="protected" name="fireBeginRedo" fulltype="void" type="void" />
			<method visibility="protected" name="fireEndRedo" fulltype="void" type="void" />
			<method visibility="protected" name="fireTransactionComplete" fulltype="void" type="void" />
			<method visibility="protected" name="fireFoldHandlerChanged" fulltype="void" type="void" />
			<method visibility="protected" name="fireBufferLoaded" fulltype="void" type="void" />
			<method visibility="protected" name="isFileReadOnly" fulltype="boolean" type="boolean" />
			<method visibility="protected" name="setFileReadOnly" fulltype="void" type="void">
				<params>
					<param name="readOnly" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="loadText" fulltype="void" type="void">
				<params>
					<param name="seg" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="endOffsets" fulltype="org.gjt.sp.util.IntegerArray" type="IntegerArray" />
				</params>
			</method>
			<method visibility="protected" name="invalidateFoldLevels" fulltype="void" type="void" />
			<method visibility="protected" name="parseBufferLocalProperties" fulltype="void" type="void" />
			<method visibility="protected" name="markTokens" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext">
				<params>
					<param name="seg" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="prevContext" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
					<param name="_tokenHandler" fulltype="org.gjt.sp.jedit.syntax.TokenHandler" type="TokenHandler" />
				</params>
			</method>
			<method visibility="public" name="updateColumnBlocks" fulltype="void" type="void">
				<params>
					<param name="startLine" fulltype="int" type="int" />
					<param name="endLine" fulltype="int" type="int" />
					<param name="startColumn" fulltype="int" type="int" />
					<param name="parent" fulltype="org.gjt.sp.jedit.textarea.Node" type="Node" />
				</params>
			</method>
			<method visibility="public" name="getTabStopPosition" fulltype="int" type="int">
				<params>
					<param name="seg" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
			<method visibility="public" name="indentUsingElasticTabstops" fulltype="void" type="void" />
			<method visibility="public" name="getColumnBlock" fulltype="org.gjt.sp.jedit.textarea.ColumnBlock" type="ColumnBlock" />
		</methods>
		<jelclass superclass="Object" visibility="protected" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer.PropValue" type="JEditBuffer.PropValue">
			<methods>
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
					<comment>
						<description>For debugging purposes.</description>
					</comment>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="protected" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer.PropValue" type="JEditBuffer.PropValue">
		<methods>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>For debugging purposes.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.KillRing" type="KillRing">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.MutableListModel" type="MutableListModel" />
		</implements>
		<comment>
			<description>The kill ring retains deleted text. This class is a singleton -- only one
 kill ring is used for all of jEdit. Nothing prevents plugins from making their
 own kill rings for whatever reason, though.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="KillRing" />
			<method static="true" visibility="public" name="getInstance" fulltype="org.gjt.sp.jedit.buffer.KillRing" type="KillRing" />
			<method static="true" visibility="public" name="setInstance" fulltype="void" type="void">
				<params>
					<param name="killRing" fulltype="org.gjt.sp.jedit.buffer.KillRing" type="KillRing" />
				</params>
			</method>
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void">
				<params>
					<param name="historySize" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="load" fulltype="void" type="void" />
			<method visibility="public" name="save" fulltype="void" type="void" />
			<method visibility="protected" name="reset" fulltype="void" type="void">
				<comment>
					<description>This method is made to be used by implementation of load()
 method to initialize (or reset) the killring by a loaded
 sequence of objects.

 Each element is converted to an element of the killring as
 followings:
   - If it is a String, it is converted as if it is a result of
     getElementAt(n).toString().
   - Otherwise, it is converted as if it is a Object which was
     obtained by getElementAt(n).</description>
					<attribute name="@param">
						<description>source the loaded killring.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre12</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="the loaded killring." fulltype="java.util.Collection" type="Collection" />
				</params>
			</method>
			<method visibility="public" name="addListDataListener" fulltype="void" type="void">
				<params>
					<param name="listener" fulltype="javax.swing.event.ListDataListener" type="ListDataListener" />
				</params>
			</method>
			<method visibility="public" name="removeListDataListener" fulltype="void" type="void">
				<params>
					<param name="listener" fulltype="javax.swing.event.ListDataListener" type="ListDataListener" />
				</params>
			</method>
			<method visibility="public" name="getElementAt" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getSize" fulltype="int" type="int" />
			<method visibility="public" name="removeElement" fulltype="boolean" type="boolean">
				<params>
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="insertElementAt" fulltype="void" type="void">
				<params>
					<param name="value" fulltype="java.lang.Object" type="Object" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.LineManager" type="LineManager">
		<comment>
			<description>A class internal to jEdit&apos;s document model. You should not use it
 directly. To improve performance, none of the methods in this class
 check for out of bounds access, nor are they thread-safe. The
 &lt;code&gt;Buffer&lt;/code&gt; class, through which these methods must be
 called through, implements such protection.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: LineManager.java 21685 2012-05-19 15:38:08Z jarekczek $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.2pre3</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="LineManager" />
			<method final="true" visibility="public" name="getLineCount" fulltype="int" type="int" />
			<method visibility="public" name="getLineOfOffset" fulltype="int" type="int">
				<params>
					<param name="offset" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getLineEndOffset" fulltype="int" type="int">
				<params>
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getFoldLevel" fulltype="int" type="int">
				<params>
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="setFoldLevel" fulltype="void" type="void">
				<params>
					<param name="line" fulltype="int" type="int" />
					<param name="level" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setFirstInvalidFoldLevel" fulltype="void" type="void">
				<params>
					<param name="firstInvalidFoldLevel" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getFirstInvalidFoldLevel" fulltype="int" type="int" />
			<method final="true" visibility="public" name="getLineContext" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext">
				<params>
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="setLineContext" fulltype="void" type="void">
				<params>
					<param name="line" fulltype="int" type="int" />
					<param name="context" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</method>
			<method visibility="public" name="setFirstInvalidLineContext" fulltype="void" type="void">
				<params>
					<param name="firstInvalidLineContext" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getFirstInvalidLineContext" fulltype="int" type="int" />
			<method visibility="public" name="_contentInserted" fulltype="void" type="void">
				<params>
					<param name="endOffsets" fulltype="org.gjt.sp.util.IntegerArray" type="IntegerArray" />
				</params>
			</method>
			<method visibility="public" name="contentInserted" fulltype="void" type="void">
				<params>
					<param name="startLine" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="numLines" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
					<param name="endOffsets" fulltype="org.gjt.sp.util.IntegerArray" type="IntegerArray" />
				</params>
			</method>
			<method visibility="public" name="contentRemoved" fulltype="void" type="void">
				<params>
					<param name="startLine" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="numLines" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.UndoManager" type="UndoManager">
		<comment>
			<description>A class internal to jEdit&apos;s document model. You should not use it
 directly. To improve performance, none of the methods in this class
 check for out of bounds access, nor are they thread-safe. The
 &lt;code&gt;Buffer&lt;/code&gt; class, through which these methods must be
 called through, implements such protection.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: UndoManager.java 16728 2009-12-25 14:12:38Z shlomy $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.0pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="UndoManager">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</constructor>
			<method visibility="public" name="setLimit" fulltype="void" type="void">
				<params>
					<param name="limit" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="clear" fulltype="void" type="void" />
			<method visibility="public" name="canUndo" fulltype="boolean" type="boolean" />
			<method visibility="public" name="undo" fulltype="int" type="int" />
			<method visibility="public" name="canRedo" fulltype="boolean" type="boolean" />
			<method visibility="public" name="redo" fulltype="int" type="int" />
			<method visibility="public" name="beginCompoundEdit" fulltype="void" type="void" />
			<method visibility="public" name="endCompoundEdit" fulltype="void" type="void" />
			<method visibility="public" name="insideCompoundEdit" fulltype="boolean" type="boolean" />
			<method visibility="public" name="getUndoId" fulltype="java.lang.Object" type="Object" />
			<method visibility="public" name="contentInserted" fulltype="void" type="void">
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="clearDirty" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="contentRemoved" fulltype="void" type="void">
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="clearDirty" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="resetClearDirty" fulltype="void" type="void" />
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.UndoManager.RemovedContent" type="UndoManager.RemovedContent">
			<methods>
				<constructor visibility="public" name="UndoManager.RemovedContent">
					<params>
						<param name="str" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.buffer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.buffer.UndoManager.RemovedContent" type="UndoManager.RemovedContent">
		<methods>
			<constructor visibility="public" name="UndoManager.RemovedContent">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="JEditBuffer" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.buffer.JEditBuffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
		<comment>
			<description>A &lt;code&gt;Buffer&lt;/code&gt; represents the contents of an open text
 file as it is maintained in the computer&apos;s memory (as opposed to
 how it may be stored on a disk).&lt;p&gt;

 In a BeanShell script, you can obtain the current buffer instance from the
 &lt;code&gt;buffer&lt;/code&gt; variable.&lt;p&gt;

 This class does not have a public constructor.
 Buffers can be opened and closed using methods in the &lt;code&gt;jEdit&lt;/code&gt;
 class.&lt;p&gt;

 This class is partially thread-safe, however you must pay attention to two
 very important guidelines:
 &lt;ul&gt;
 &lt;li&gt;Operations such as insert() and remove(),
 undo(), change Buffer data in a writeLock(), and must
 be called from the AWT thread.
 &lt;li&gt;When accessing the buffer from another thread, you must
 call readLock() before and readUnLock() after, if you plan on performing
 more than one read, to ensure that  the buffer contents are not changed by
 the AWT thread for the duration of the lock. Only methods whose descriptions
 specify thread safety can be invoked from other threads.
 &lt;/ul&gt;</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Buffer.java 21754 2012-06-02 18:49:16Z jarekczek $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="Buffer__backedUp" visibility="public" name="BACKED_UP" constexpr="&quot;Buffer__backedUp&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Backed up property.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="Buffer__caret" visibility="public" name="CARET" constexpr="&quot;Buffer__caret&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Caret info properties.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="Buffer__caretPositioned" visibility="public" name="CARET_POSITIONED" constexpr="&quot;Buffer__caretPositioned&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="Buffer__selection" visibility="public" name="SELECTION" constexpr="&quot;Buffer__selection&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Stores a List of {@link org.gjt.sp.jedit.textarea.Selection} instances.</description>
				</comment>
			</field>
			<field final="true" static="true" const="Buffer__scrollVert" visibility="public" name="SCROLL_VERT" constexpr="&quot;Buffer__scrollVert&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>This should be a physical line number, so that the scroll
 position is preserved correctly across reloads (which will
 affect virtual line numbers, due to fold being reset)</description>
				</comment>
			</field>
			<field final="true" static="true" const="Buffer__scrollHoriz" visibility="public" name="SCROLL_HORIZ" constexpr="&quot;Buffer__scrollHoriz&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="encodingAutodetect" visibility="public" name="ENCODING_AUTODETECT" constexpr="&quot;encodingAutodetect&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Should jEdit try to set the encoding based on a UTF8, UTF16 or
 XML signature at the beginning of the file?</description>
				</comment>
			</field>
			<field final="true" static="true" const="trailingEOL" visibility="public" name="TRAILING_EOL" constexpr="&quot;trailingEOL&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>This property is set to &apos;true&apos; if the file has a trailing newline.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="gzipped" visibility="public" name="GZIPPED" constexpr="&quot;gzipped&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>This property is set to &apos;true&apos; if the file should be GZipped.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="FILE_NOT_CHANGED" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="FILE_CHANGED" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="FILE_DELETED" constexpr="2" fulltype="int" type="int" />
		</fields>
		<methods>
			<method visibility="public" name="reload" fulltype="void" type="void">
				<comment>
					<description>Reloads the buffer from disk, asking for confirmation if the buffer
 has unsaved changes.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="load" fulltype="boolean" type="boolean">
				<comment>
					<description>Loads the buffer from disk.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>reload If true, user will not be asked to recover autosave
 file, if any</description>
					</attribute>
					<attribute name="@since">
						<description>2.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="reload" comment="If true, user will not be asked to recover autosave
 file, if any" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="insertFile" fulltype="boolean" type="boolean">
				<comment>
					<description>Loads a file from disk, and inserts it into this buffer.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>path the path of the file to insert</description>
					</attribute>
					<attribute name="@since">
						<description>4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="the path of the file to insert" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="autosave" fulltype="void" type="void">
				<comment>
					<description>Autosaves this buffer.</description>
				</comment>
			</method>
			<method visibility="public" name="saveAs" returncomment="true if the buffer was successfully saved" fulltype="boolean" type="boolean">
				<comment>
					<description>Prompts the user for a file to save this buffer to.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>rename True if the buffer&apos;s path should be changed, false
 if only a copy should be saved to the specified filename</description>
					</attribute>
					<attribute name="@return">
						<description>true if the buffer was successfully saved</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="rename" comment="True if the buffer&apos;s path should be changed, false
 if only a copy should be saved to the specified filename" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="save" returncomment="true if the buffer was successfully saved
 the existing path" fulltype="boolean" type="boolean">
				<comment>
					<description>Saves this buffer to the specified path name, or the current path
 name if it&apos;s null.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name to save the buffer to, or null to use</description>
					</attribute>
					<attribute name="@return">
						<description>true if the buffer was successfully saved
 the existing path</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The path name to save the buffer to, or null to use" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="save" returncomment="true if the buffer was successfully saved" fulltype="boolean" type="boolean">
				<comment>
					<description>Saves this buffer to the specified path name, or the current path
 name if it&apos;s null.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name to save the buffer to, or null to use
 the existing path</description>
					</attribute>
					<attribute name="@param">
						<description>rename True if the buffer&apos;s path should be changed, false
 if only a copy should be saved to the specified filename</description>
					</attribute>
					<attribute name="@return">
						<description>true if the buffer was successfully saved</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The path name to save the buffer to, or null to use
 the existing path" fulltype="java.lang.String" type="String" />
					<param name="rename" comment="True if the buffer&apos;s path should be changed, false
 if only a copy should be saved to the specified filename" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="save" returncomment="true if the buffer was successfully saved" fulltype="boolean" type="boolean">
				<comment>
					<description>Saves this buffer to the specified path name, or the current path
 name if it&apos;s null.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name to save the buffer to, or null to use
 the existing path</description>
					</attribute>
					<attribute name="@param">
						<description>rename True if the buffer&apos;s path should be changed, false
 if only a copy should be saved to the specified filename</description>
					</attribute>
					<attribute name="@param">
						<description>disableFileStatusCheck  Disables file status checking
 regardless of the state of the checkFileStatus property</description>
					</attribute>
					<attribute name="@return">
						<description>true if the buffer was successfully saved</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The path name to save the buffer to, or null to use
 the existing path" fulltype="java.lang.String" type="String" />
					<param name="rename" comment="True if the buffer&apos;s path should be changed, false
 if only a copy should be saved to the specified filename" fulltype="boolean" type="boolean" />
					<param name="disableFileStatusCheck" comment="Disables file status checking
 regardless of the state of the checkFileStatus property" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="checkFileStatus" returncomment="One of &lt;code&gt;NOT_CHANGED&lt;/code&gt;, &lt;code&gt;CHANGED&lt;/code&gt;, or
 &lt;code&gt;DELETED&lt;/code&gt;." fulltype="int" type="int">
				<comment>
					<description>Check if the buffer has changed on disk.</description>
					<attribute name="@return">
						<description>One of &lt;code&gt;NOT_CHANGED&lt;/code&gt;, &lt;code&gt;CHANGED&lt;/code&gt;, or
 &lt;code&gt;DELETED&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getLastModified" fulltype="long" type="long">
				<comment>
					<description>Returns the last time jEdit modified the file on disk.
 This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="setLastModified" fulltype="void" type="void">
				<comment>
					<description>Sets the last time jEdit modified the file on disk.</description>
					<attribute name="@param">
						<description>modTime The new modification time</description>
					</attribute>
				</comment>
				<params>
					<param name="modTime" comment="The new modification time" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="getAutoReload" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the status of the AUTORELOAD flag
 If true, reload changed files automatically</description>
				</comment>
			</method>
			<method visibility="public" name="setAutoReload" fulltype="void" type="void">
				<comment>
					<description>Sets the status of the AUTORELOAD flag</description>
					<attribute name="@param">
						<description>value # If true, reload changed files automatically</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="# If true, reload changed files automatically" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getAutoReloadDialog" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the status of the AUTORELOAD_DIALOG flag
 If true, prompt for reloading or notify user
 when the file has changed on disk</description>
				</comment>
			</method>
			<method visibility="public" name="setAutoReloadDialog" fulltype="void" type="void">
				<comment>
					<description>Sets the status of the AUTORELOAD_DIALOG flag</description>
					<attribute name="@param">
						<description>value # If true, prompt for reloading or notify user
 when the file has changed on disk</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="# If true, prompt for reloading or notify user
 when the file has changed on disk" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getVFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS">
				<comment>
					<description>Returns the virtual filesystem responsible for loading and
 saving this buffer. This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="getAutosaveFile" fulltype="java.io.File" type="File">
				<comment>
					<description>Returns the autosave file for this buffer. This may be null if
 the file is non-local.</description>
				</comment>
			</method>
			<method visibility="public" name="removeAutosaveFile" fulltype="void" type="void">
				<comment>
					<description>Remove the autosave file.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre12</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of this buffer. This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="getPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the path name of this buffer. This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="getPath" fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@param">
						<description>shortVersion if true, replaces home path with ~/ on unix</description>
					</attribute>
				</comment>
				<params>
					<param name="shortVersion" comment="if true, replaces home path with ~/ on unix" fulltype="java.lang.Boolean" type="Boolean" />
				</params>
			</method>
			<method visibility="public" name="getSymlinkPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>If this file is a symbolic link, returns the link destination.
 Otherwise returns the file&apos;s path. This method is thread-safe.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDirectory" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the directory containing this buffer.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre11</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isClosed" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this buffer has been closed with
 {@link org.gjt.sp.jedit.jEdit#closeBuffer(View,Buffer)}.
 This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="isLoaded" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the buffer is loaded. This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="isNewFile" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns whether this buffer lacks a corresponding version on disk.
 This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="setNewFile" fulltype="void" type="void">
				<comment>
					<description>Sets the new file flag.</description>
					<attribute name="@param">
						<description>newFile The new file flag</description>
					</attribute>
				</comment>
				<params>
					<param name="newFile" comment="The new file flag" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isUntitled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this file is &apos;untitled&apos;. This method is thread-safe.</description>
				</comment>
			</method>
			<method visibility="public" name="setDirty" fulltype="void" type="void">
				<comment>
					<description>Sets the &apos;dirty&apos; (changed since last save) flag of this buffer.</description>
				</comment>
				<params>
					<param name="d" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isTemporary" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this is a temporary buffer. This method is thread-safe.</description>
					<attribute name="@see">
						<description>jEdit#openTemporary(View,String,String,boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>jEdit#commitTemporary(Buffer)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.2pre7</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getIcon" fulltype="javax.swing.Icon" type="Icon">
				<comment>
					<description>Returns this buffer&apos;s icon.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void">
				<comment>
					<description>Reloads settings from the properties. This should be called
 after the &lt;code&gt;syntax&lt;/code&gt; or &lt;code&gt;folding&lt;/code&gt;
 buffer-local properties are changed.</description>
				</comment>
			</method>
			<method visibility="public" name="getDefaultProperty" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toggleWordWrap" fulltype="void" type="void">
				<comment>
					<description>Toggles word wrap between the three available modes. This is used
 by the status bar.</description>
					<attribute name="@param">
						<description>view We show a message in the view&apos;s status bar</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="We show a message in the view&apos;s status bar" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="toggleAutoIndent" fulltype="void" type="void">
				<comment>
					<description>Toggles automatic indentation on and off.</description>
					<attribute name="@param">
						<description>view This view&apos;s status bar will display the message</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="This view&apos;s status bar will display the message" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="toggleLineSeparator" fulltype="void" type="void">
				<comment>
					<description>Toggles the line separator between the three available settings.
 This is used by the status bar.</description>
					<attribute name="@param">
						<description>view We show a message in the view&apos;s status bar</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="We show a message in the view&apos;s status bar" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getContextSensitiveProperty" fulltype="java.lang.String" type="String">
				<comment>
					<description>Some settings, like comment start and end strings, can
 vary between different parts of a buffer (HTML text and inline
 JavaScript, for example).</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setMode" fulltype="void" type="void">
				<comment>
					<description>Sets this buffer&apos;s edit mode by calling the accept() method
 of each registered edit mode.</description>
				</comment>
			</method>
			<method visibility="public" name="getFile" fulltype="java.io.File" type="File">
				<comment>
					<attribute name="@deprecated">
						<description>Do not call this method, use {@link #getPath()}
 instead.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getMarkers" fulltype="java.util.Vector" type="Vector">
				<comment>
					<description>Returns a vector of markers.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getMarkerStatusPrompt" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the status prompt for the given marker action. Only
 intended to be called from &lt;code&gt;actions.xml&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getMarkerNameString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string of all set markers, used by the status bar
 (eg, &quot;a b $ % ^&quot;).</description>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addOrRemoveMarker" fulltype="void" type="void">
				<comment>
					<description>If a marker is set on the line of the position, it is removed. Otherwise
 a new marker with the specified shortcut is added.</description>
					<attribute name="@param">
						<description>pos The position of the marker</description>
					</attribute>
					<attribute name="@param">
						<description>shortcut The shortcut (&apos;\0&apos; if none)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="shortcut" comment="The shortcut (&apos;\0&apos; if none)" fulltype="char" type="char" />
					<param name="pos" comment="The position of the marker" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addMarker" fulltype="void" type="void">
				<comment>
					<description>Adds a marker to this buffer.</description>
					<attribute name="@param">
						<description>pos The position of the marker</description>
					</attribute>
					<attribute name="@param">
						<description>shortcut The shortcut (&apos;\0&apos; if none)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="shortcut" comment="The shortcut (&apos;\0&apos; if none)" fulltype="char" type="char" />
					<param name="pos" comment="The position of the marker" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getMarkerInRange" fulltype="org.gjt.sp.jedit.Marker" type="Marker">
				<comment>
					<description>Returns the first marker within the specified range.</description>
					<attribute name="@param">
						<description>start The start offset</description>
					</attribute>
					<attribute name="@param">
						<description>end The end offset</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The start offset" fulltype="int" type="int" />
					<param name="end" comment="The end offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getMarkerAtLine" fulltype="org.gjt.sp.jedit.Marker" type="Marker">
				<comment>
					<description>Returns the first marker at the specified line, or &lt;code&gt;null&lt;/code&gt;
 if there is none.</description>
					<attribute name="@param">
						<description>line The line number</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line number" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="removeMarker" fulltype="void" type="void">
				<comment>
					<description>Removes all markers at the specified line.</description>
					<attribute name="@param">
						<description>line The line number</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line number" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="removeAllMarkers" fulltype="void" type="void">
				<comment>
					<description>Removes all defined markers.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getMarker" fulltype="org.gjt.sp.jedit.Marker" type="Marker">
				<comment>
					<description>Returns the marker with the specified shortcut.</description>
					<attribute name="@param">
						<description>shortcut The shortcut</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="shortcut" comment="The shortcut" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="getMarkersPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the path for this buffer&apos;s markers file</description>
					<attribute name="@param">
						<description>vfs The appropriate VFS</description>
					</attribute>
					<attribute name="@param">
						<description>path the path of the buffer, it can be different from the field
 when using save-as</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="vfs" comment="The appropriate VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="path" comment="the path of the buffer, it can be different from the field
 when using save-as" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="updateMarkersFile" fulltype="boolean" type="boolean">
				<comment>
					<description>Save the markers file, or delete it when there are mo markers left
 Handling markers is now independent from saving the buffer.
 Changing markers will not set the buffer dirty any longer.</description>
					<attribute name="@param">
						<description>view The current view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The current view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="markersChanged" fulltype="boolean" type="boolean">
				<comment>
					<description>Return true when markers have changed and the markers file needs
 to be updated</description>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setMarkersChanged" fulltype="void" type="void">
				<comment>
					<description>Sets/unsets the MARKERS_CHANGED flag</description>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="changed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setWaitSocket" fulltype="void" type="void">
				<comment>
					<description>This socket is closed when the buffer is closed.</description>
				</comment>
				<params>
					<param name="waitSocket" fulltype="java.net.Socket" type="Socket" />
				</params>
			</method>
			<method visibility="public" name="getNext" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Returns the next buffer in the list.</description>
				</comment>
			</method>
			<method visibility="public" name="getPrev" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Returns the previous buffer in the list.</description>
				</comment>
			</method>
			<method visibility="public" name="getIndex" fulltype="int" type="int">
				<comment>
					<description>Returns the position of this buffer in the buffer list.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this buffer.
 This simply returns the path name.</description>
				</comment>
			</method>
			<method visibility="public" name="addBufferUndoListener" fulltype="void" type="void">
				<comment>
					<description>Adds a buffer undo listener.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.jedit.buffer.BufferUndoListener" type="BufferUndoListener" />
				</params>
			</method>
			<method visibility="public" name="removeBufferUndoListener" fulltype="void" type="void">
				<comment>
					<description>Removes a buffer undo listener.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.jedit.buffer.BufferUndoListener" type="BufferUndoListener" />
				</params>
			</method>
			<method visibility="protected" name="markTokens" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext">
				<params>
					<param name="seg" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="prevContext" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
					<param name="_tokenHandler" fulltype="org.gjt.sp.jedit.syntax.TokenHandler" type="TokenHandler" />
				</params>
			</method>
			<method visibility="protected" name="fireBeginUndo" fulltype="void" type="void" />
			<method visibility="protected" name="fireEndUndo" fulltype="void" type="void" />
			<method visibility="protected" name="fireBeginRedo" fulltype="void" type="void" />
			<method visibility="protected" name="fireEndRedo" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.BufferHistory" type="BufferHistory">
		<comment>
			<description>Recent file list.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferHistory.java 19833 2011-08-25 12:01:54Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferHistory" />
			<method static="true" visibility="public" name="getEntry" fulltype="org.gjt.sp.jedit.BufferHistory.Entry" type="BufferHistory.Entry">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="setEntry" fulltype="void" type="void">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="caret" fulltype="int" type="int" />
					<param name="selection" fulltype="org.gjt.sp.jedit.textarea.Selection[]" type="Selection" />
					<param name="encoding" fulltype="java.lang.String" type="String" />
					<param name="mode" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="clear" fulltype="void" type="void">
				<comment>
					<description>Clear the BufferHistory.</description>
					<attribute name="@since">
						<description>4.3pre6</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getHistory" returncomment="the buffer history list" fulltype="java.util.List" type="List">
				<comment>
					<description>Returns the Buffer list.</description>
					<attribute name="@return">
						<description>the buffer history list</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="load" fulltype="void" type="void" />
			<method static="true" visibility="public" name="save" fulltype="void" type="void" />
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.BufferHistory.Entry" type="BufferHistory.Entry">
			<comment>
				<description>Recent file list entry.</description>
			</comment>
			<fields>
				<field visibility="public" name="path" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="caret" fulltype="int" type="int" />
				<field visibility="public" name="selection" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="encoding" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="mode" fulltype="java.lang.String" type="String" />
			</fields>
			<methods>
				<constructor visibility="public" name="BufferHistory.Entry">
					<params>
						<param name="path" fulltype="java.lang.String" type="String" />
						<param name="caret" fulltype="int" type="int" />
						<param name="selection" fulltype="java.lang.String" type="String" />
						<param name="encoding" fulltype="java.lang.String" type="String" />
						<param name="mode" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="getSelection" fulltype="org.gjt.sp.jedit.textarea.Selection[]" type="Selection" />
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.BufferHistory.Entry" type="BufferHistory.Entry">
		<comment>
			<description>Recent file list entry.</description>
		</comment>
		<fields>
			<field visibility="public" name="path" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="caret" fulltype="int" type="int" />
			<field visibility="public" name="selection" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="encoding" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="mode" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="BufferHistory.Entry">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="caret" fulltype="int" type="int" />
					<param name="selection" fulltype="java.lang.String" type="String" />
					<param name="encoding" fulltype="java.lang.String" type="String" />
					<param name="mode" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getSelection" fulltype="org.gjt.sp.jedit.textarea.Selection[]" type="Selection" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="BufferIORequest" visibility="public" package="org.gjt.sp.jedit.bufferio" superclassfulltype="org.gjt.sp.jedit.bufferio.BufferIORequest" fulltype="org.gjt.sp.jedit.bufferio.BufferAutosaveRequest" type="BufferAutosaveRequest">
		<comment>
			<description>A buffer autosave request.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferAutosaveRequest.java 19408 2011-02-28 14:52:25Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferAutosaveRequest">
				<comment>
					<description>Creates a new buffer I/O request.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>vfs The VFS</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="vfs" comment="The VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="run" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="BufferIORequest" visibility="public" package="org.gjt.sp.jedit.bufferio" superclassfulltype="org.gjt.sp.jedit.bufferio.BufferIORequest" fulltype="org.gjt.sp.jedit.bufferio.BufferInsertRequest" type="BufferInsertRequest">
		<comment>
			<description>A buffer insert request.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferInsertRequest.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferInsertRequest">
				<comment>
					<description>Creates a new buffer I/O request.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>vfs The VFS</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="vfs" comment="The VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="run" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="WorkRequest" visibility="public" package="org.gjt.sp.jedit.bufferio" superclassfulltype="org.gjt.sp.util.WorkRequest" fulltype="org.gjt.sp.jedit.bufferio.BufferIORequest" type="BufferIORequest">
		<comment>
			<description>A buffer I/O request.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferIORequest.java 19026 2010-11-26 12:54:56Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="32768" visibility="public" name="IOBUFSIZE" constexpr="32768" fulltype="int" type="int">
				<comment>
					<description>Size of I/O buffers.</description>
				</comment>
			</field>
			<field final="true" static="true" const="300" visibility="public" name="PROGRESS_INTERVAL" constexpr="300" fulltype="int" type="int">
				<comment>
					<description>Number of lines per progress increment.</description>
				</comment>
			</field>
			<field final="true" static="true" const="BufferIORequest__loadData" visibility="public" name="LOAD_DATA" constexpr="&quot;BufferIORequest__loadData&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="BufferIORequest__endOffsets" visibility="public" name="END_OFFSETS" constexpr="&quot;BufferIORequest__endOffsets&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="BufferIORequest__newPath" visibility="public" name="NEW_PATH" constexpr="&quot;BufferIORequest__newPath&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="BufferIORequest__error" visibility="public" name="ERROR_OCCURRED" constexpr="&quot;BufferIORequest__error&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Buffer boolean property set when an error occurs.</description>
				</comment>
			</field>
			<field final="true" visibility="protected" name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
			<field final="true" visibility="protected" name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
			<field final="true" visibility="protected" name="session" fulltype="java.lang.Object" type="Object" />
			<field final="true" visibility="protected" name="vfs" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
			<field visibility="protected" name="path" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="protected" name="markersPath" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="protected" name="BufferIORequest">
				<comment>
					<description>Creates a new buffer I/O request.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>vfs The VFS</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="vfs" comment="The VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method static="true" visibility="public" name="getCharIOBufferSize" fulltype="int" type="int">
				<comment>
					<description>Size of character I/O buffers.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getByteIOBufferSize" fulltype="int" type="int">
				<comment>
					<description>Size of byte I/O buffers.</description>
				</comment>
			</method>
			<method visibility="protected" name="autodetect" fulltype="java.io.Reader" type="Reader">
				<comment>
					<description>Tries to detect if the stream is gzipped, and if it has an encoding
 specified with an XML PI.</description>
				</comment>
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="protected" name="read" fulltype="org.gjt.sp.util.SegmentBuffer" type="SegmentBuffer">
				<params>
					<param name="in" fulltype="java.io.Reader" type="Reader" />
					<param name="length" fulltype="long" type="long" />
					<param name="insert" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="protected" name="write" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="out" fulltype="java.io.OutputStream" type="OutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="BufferIORequest" visibility="public" package="org.gjt.sp.jedit.bufferio" superclassfulltype="org.gjt.sp.jedit.bufferio.BufferIORequest" fulltype="org.gjt.sp.jedit.bufferio.BufferLoadRequest" type="BufferLoadRequest">
		<comment>
			<description>A buffer load request.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferLoadRequest.java 21594 2012-04-22 11:44:00Z jarekczek $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferLoadRequest">
				<comment>
					<description>Creates a new buffer I/O request.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>vfs The VFS</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="vfs" comment="The VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="run" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="BufferIORequest" visibility="public" package="org.gjt.sp.jedit.bufferio" superclassfulltype="org.gjt.sp.jedit.bufferio.BufferIORequest" fulltype="org.gjt.sp.jedit.bufferio.BufferSaveRequest" type="BufferSaveRequest">
		<comment>
			<description>A buffer save request.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferSaveRequest.java 19409 2011-02-28 14:58:27Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferSaveRequest">
				<comment>
					<description>Creates a new buffer I/O request.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>vfs The VFS</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="vfs" comment="The VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="run" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="Task" visibility="public" package="org.gjt.sp.jedit.bufferio" superclassfulltype="org.gjt.sp.util.Task" fulltype="org.gjt.sp.jedit.bufferio.MarkersSaveRequest" type="MarkersSaveRequest">
		<comment>
			<description>A save request for markers. Factored out from BufferSaveRequest.java</description>
			<attribute name="@author">
				<description>Martin Raspe
 created    May 20, 2005
 modified   $Date: 2006/03/10 12:49:17 $ by $Author: hertzhaft $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="MarkersSaveRequest__error" visibility="public" name="ERROR_OCCURRED" constexpr="&quot;MarkersSaveRequest__error&quot;" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
			<field visibility="protected" name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
			<field visibility="protected" name="session" fulltype="java.lang.Object" type="Object" />
			<field visibility="protected" name="vfs" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
			<field visibility="protected" name="path" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="markersPath" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="MarkersSaveRequest">
				<comment>
					<description>Creates a new I/O request for markers.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>vfs The VFS</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="vfs" comment="The VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="_run" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bufferset" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bufferset.BufferSet" type="BufferSet">
		<comment>
			<description>An ordered list of buffers, normally attached to an EditPane
  and viewed in a BufferSwitcher.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre15</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferSet">
				<params>
					<param name="source" fulltype="org.gjt.sp.jedit.bufferset.BufferSet" type="BufferSet" />
				</params>
			</constructor>
			<method visibility="public" name="addBuffer" fulltype="void" type="void">
				<comment>
					<description>Internal use only, use
 {@link org.gjt.sp.jedit.bufferset.BufferSetManager#addBuffer(org.gjt.sp.jedit.View, org.gjt.sp.jedit.Buffer)}
 or
 {@link org.gjt.sp.jedit.bufferset.BufferSetManager#addBuffer(org.gjt.sp.jedit.EditPane, org.gjt.sp.jedit.Buffer)}</description>
					<attribute name="@param">
						<description>buffer the buffer to be added</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the buffer to be added" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method visibility="public" name="addBufferAt" fulltype="void" type="void">
				<comment>
					<description>Internal use only, use
 {@link org.gjt.sp.jedit.bufferset.BufferSetManager#addBuffer(org.gjt.sp.jedit.View, org.gjt.sp.jedit.Buffer)}
 or
 {@link org.gjt.sp.jedit.bufferset.BufferSetManager#addBuffer(org.gjt.sp.jedit.EditPane, org.gjt.sp.jedit.Buffer)}</description>
					<attribute name="@param">
						<description>buffer the buffer to be added</description>
					</attribute>
					<attribute name="@param">
						<description>position the position where it must be added or -1 if we don&apos;t care</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the buffer to be added" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="position" comment="the position where it must be added or -1 if we don&apos;t care" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getBuffer" returncomment="the buffer at the index." fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Returns the Buffer at the given index.</description>
					<attribute name="@param">
						<description>index the index. The index must exists</description>
					</attribute>
					<attribute name="@return">
						<description>the buffer at the index.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index. The index must exists" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getPreviousBuffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getNextBuffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="indexOf" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method visibility="public" name="size" fulltype="int" type="int" />
			<method visibility="public" name="getAllBuffers" fulltype="void" type="void">
				<params>
					<param name="listener" fulltype="org.gjt.sp.jedit.bufferset.BufferSetListener" type="BufferSetListener" />
				</params>
			</method>
			<method visibility="public" name="getAllBuffers" returncomment="an array of all Buffers" fulltype="org.gjt.sp.jedit.Buffer[]" type="Buffer">
				<comment>
					<description>Returns an array of all buffers in this bufferSet.</description>
					<attribute name="@return">
						<description>an array of all Buffers</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addBufferSetListener" fulltype="void" type="void">
				<comment>
					<description>Add a BufferSetListener.</description>
					<attribute name="@param">
						<description>listener the new BufferSetListener</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="the new BufferSetListener" fulltype="org.gjt.sp.jedit.bufferset.BufferSetListener" type="BufferSetListener" />
				</params>
			</method>
			<method visibility="public" name="removeBufferSetListener" fulltype="void" type="void">
				<comment>
					<description>Remove a BufferSetListener.
 If there are no listeners anymore, remove all buffers from the bufferSet.</description>
					<attribute name="@param">
						<description>listener the removed BufferSetListener</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="the removed BufferSetListener" fulltype="org.gjt.sp.jedit.bufferset.BufferSetListener" type="BufferSetListener" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="sort" fulltype="void" type="void">
				<comment>
					<description>Sort the bufferSet (useful if a buffer has been renamed for example</description>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
			</method>
		</methods>
		<jelclass final="true" superclass="Enum" visibility="public" package="org.gjt.sp.jedit.bufferset" serializable="true" superclassfulltype="java.lang.Enum" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope">
			<comment>
				<description>Possible scopes for BufferSets.</description>
			</comment>
			<fields>
				<field final="true" static="true" visibility="public" name="editpane" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope" />
				<field final="true" static="true" visibility="public" name="view" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope" />
				<field final="true" static="true" visibility="public" name="global" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope" />
			</fields>
			<methods>
				<method static="true" visibility="public" name="values" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope[]" type="BufferSet.Scope" />
				<method static="true" visibility="public" name="valueOf" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass final="true" superclass="Enum" visibility="public" package="org.gjt.sp.jedit.bufferset" serializable="true" superclassfulltype="java.lang.Enum" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope">
		<comment>
			<description>Possible scopes for BufferSets.</description>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="editpane" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope" />
			<field final="true" static="true" visibility="public" name="view" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope" />
			<field final="true" static="true" visibility="public" name="global" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope" />
		</fields>
		<methods>
			<method static="true" visibility="public" name="values" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope[]" type="BufferSet.Scope" />
			<method static="true" visibility="public" name="valueOf" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bufferset" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bufferset.BufferSetAdapter" type="BufferSetAdapter">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bufferset.BufferSetListener" type="BufferSetListener" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre15</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferSetAdapter" />
			<method visibility="public" name="bufferAdded" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="bufferRemoved" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="bufferMoved" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="oldIndex" fulltype="int" type="int" />
					<param name="newIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="bufferSetSorted" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.bufferset" interface="true" fulltype="org.gjt.sp.jedit.bufferset.BufferSetListener" type="BufferSetListener">
		<implements>
			<interface fulltype="java.util.EventListener" type="EventListener" />
		</implements>
		<comment>
			<description>This is the listener for the BufferSet changes.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre15</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="bufferAdded" fulltype="void" type="void">
				<comment>
					<description>A buffer was added in the bufferSet.</description>
					<attribute name="@param">
						<description>buffer the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>index the position where it was added</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="index" comment="the position where it was added" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="bufferRemoved" fulltype="void" type="void">
				<comment>
					<description>A buffer was removed from the bufferSet.</description>
					<attribute name="@param">
						<description>buffer the removed buffer</description>
					</attribute>
					<attribute name="@param">
						<description>index the position where the buffer was</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the removed buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="index" comment="the position where the buffer was" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="bufferMoved" fulltype="void" type="void">
				<comment>
					<description>A buffer was moved in the BufferSet.</description>
					<attribute name="@param">
						<description>buffer the moved buffer</description>
					</attribute>
					<attribute name="@param">
						<description>oldIndex the old index</description>
					</attribute>
					<attribute name="@param">
						<description>newIndex the new index</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the moved buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="oldIndex" comment="the old index" fulltype="int" type="int" />
					<param name="newIndex" comment="the new index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="bufferSetSorted" fulltype="void" type="void">
				<comment>
					<description>The bufferSet was sorted.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.bufferset" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.bufferset.BufferSetManager" type="BufferSetManager">
		<comment>
			<description>The buffersets manager. A singleton instance of this
 can be obtained from jEdit.getBufferSetManager()</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre15</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferSetManager" />
			<method visibility="public" name="handleEditPaneUpdate" fulltype="void" type="void">
				<params>
					<param name="message" fulltype="org.gjt.sp.jedit.msg.EditPaneUpdate" type="EditPaneUpdate" />
				</params>
			</method>
			<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
				</params>
			</method>
			<method visibility="public" name="countBufferSets" returncomment="the number of buffersets in which buffer is" fulltype="int" type="int">
				<comment>
					<description>Count the bufferSets in which the buffer is.</description>
					<attribute name="@param">
						<description>buffer the buffer</description>
					</attribute>
					<attribute name="@return">
						<description>the number of buffersets in which buffer is</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.jEdit#closeBuffer(org.gjt.sp.jedit.EditPane, org.gjt.sp.jedit.Buffer)</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method visibility="public" name="setScope" fulltype="void" type="void">
				<params>
					<param name="scope" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope" />
				</params>
			</method>
			<method visibility="public" name="getScope" fulltype="org.gjt.sp.jedit.bufferset.BufferSet.Scope" type="BufferSet.Scope" />
			<method visibility="public" name="addBuffer" fulltype="void" type="void">
				<comment>
					<description>Add a buffer into the current editPane of the given view.
 If the view is null, it will be added to the global bufferSet</description>
					<attribute name="@param">
						<description>view a view (or null)</description>
					</attribute>
					<attribute name="@param">
						<description>buffer the buffer to add</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="a view (or null)" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="the buffer to add" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method visibility="public" name="addBuffer" fulltype="void" type="void">
				<comment>
					<description>Add a buffer into the current editPane of the given editPane.
 If the editPane is null, it will be added to the global bufferSet</description>
					<attribute name="@param">
						<description>editPane an EditPane (or null)</description>
					</attribute>
					<attribute name="@param">
						<description>buffer the buffer to add</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="an EditPane (or null)" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="buffer" comment="the buffer to add" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method visibility="public" name="moveBuffer" fulltype="void" type="void">
				<comment>
					<description>Moves a buffer from a old position to a new position in the
 BufferSet used in an EditPane.</description>
				</comment>
				<params>
					<param name="editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="oldPosition" fulltype="int" type="int" />
					<param name="newPosition" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="removeBuffer" fulltype="void" type="void">
				<comment>
					<description>Remove a buffer from the EditPane&apos;s bufferSet.</description>
					<attribute name="@param">
						<description>editPane the editPane It cannot be null</description>
					</attribute>
					<attribute name="@param">
						<description>buffer the buffer</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="the editPane It cannot be null" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="buffer" comment="the buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method visibility="public" name="removeBuffer" fulltype="void" type="void">
				<comment>
					<description>remove a buffer from all bufferSets.</description>
					<attribute name="@param">
						<description>buffer the buffer that must be removed</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the buffer that must be removed" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method static="true" visibility="public" name="createUntitledBuffer" returncomment="the new untitled buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Create an untitled buffer</description>
					<attribute name="@return">
						<description>the new untitled buffer</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getOwners" returncomment="set of BufferSets that contain buffer" fulltype="java.util.Set" type="Set">
				<comment>
					<attribute name="@return">
						<description>set of BufferSets that contain buffer</description>
					</attribute>
					<attribute name="@since">
						<description>4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.datatransfer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.datatransfer.JEditDataFlavor" type="JEditDataFlavor">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4.x</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="jEditRichTextDataFlavor" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
			<field final="true" static="true" visibility="public" name="html" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
		</fields>
		<methods>
			<constructor visibility="public" name="JEditDataFlavor" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.datatransfer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.datatransfer.JEditRichText" type="JEditRichText">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4.x</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JEditRichText">
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="mode" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getText" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getMode" fulltype="org.gjt.sp.jedit.Mode" type="Mode" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.datatransfer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.datatransfer.JEditTransferable" type="JEditTransferable">
		<implements>
			<interface fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4.x</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JEditTransferable">
				<params>
					<param name="flavors" fulltype="java.util.Map" type="Map" />
				</params>
			</constructor>
			<method visibility="public" name="getTransferDataFlavors" fulltype="java.awt.datatransfer.DataFlavor[]" type="DataFlavor" />
			<method visibility="public" name="isDataFlavorSupported" fulltype="boolean" type="boolean">
				<params>
					<param name="flavor" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
				</params>
			</method>
			<method visibility="public" name="getTransferData" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="flavor" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
				</params>
				<exceptions>
					<exception fulltype="java.awt.datatransfer.UnsupportedFlavorException" type="UnsupportedFlavorException" />
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.datatransfer" interface="true" fulltype="org.gjt.sp.jedit.datatransfer.JEditTransferableService" type="JEditTransferableService">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4.x</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getTransferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.datatransfer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.datatransfer.ListVFSFileTransferable" type="ListVFSFileTransferable">
		<implements>
			<interface fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4.x</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="jEditFileList" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
			<field final="true" static="true" visibility="public" name="supported" fulltype="java.awt.datatransfer.DataFlavor[]" type="DataFlavor" />
		</fields>
		<methods>
			<constructor visibility="public" name="ListVFSFileTransferable">
				<params>
					<param name="files" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
				</params>
			</constructor>
			<method visibility="public" name="getTransferDataFlavors" fulltype="java.awt.datatransfer.DataFlavor[]" type="DataFlavor" />
			<method visibility="public" name="isDataFlavorSupported" fulltype="boolean" type="boolean">
				<params>
					<param name="flavor" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
				</params>
			</method>
			<method visibility="public" name="getTransferData" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="flavor" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
				</params>
				<exceptions>
					<exception fulltype="java.awt.datatransfer.UnsupportedFlavorException" type="UnsupportedFlavorException" />
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.datatransfer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.datatransfer.RichJEditTextTransferableService" type="RichJEditTextTransferableService">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.datatransfer.JEditTransferableService" type="JEditTransferableService" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4.x</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="RichJEditTextTransferableService" />
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getTransferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.datatransfer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.datatransfer.RichTextTransferable" type="RichTextTransferable">
		<implements>
			<interface fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4.x</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="RichTextTransferable">
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="mode" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getTransferDataFlavors" fulltype="java.awt.datatransfer.DataFlavor[]" type="DataFlavor" />
			<method visibility="public" name="isDataFlavorSupported" fulltype="boolean" type="boolean">
				<params>
					<param name="flavor" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
				</params>
			</method>
			<method visibility="public" name="getTransferData" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="flavor" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
				</params>
				<exceptions>
					<exception fulltype="java.awt.datatransfer.UnsupportedFlavorException" type="UnsupportedFlavorException" />
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.datatransfer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.datatransfer.StringTransferableService" type="StringTransferableService">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.datatransfer.JEditTransferableService" type="JEditTransferableService" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4.x</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="StringTransferableService" />
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getTransferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.datatransfer" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.datatransfer.TransferHandler" type="TransferHandler">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4.x</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="getInstance" fulltype="org.gjt.sp.jedit.datatransfer.TransferHandler" type="TransferHandler" />
			<method visibility="public" name="registerTransferableService" fulltype="void" type="void">
				<params>
					<param name="transferableService" fulltype="org.gjt.sp.jedit.datatransfer.JEditTransferableService" type="JEditTransferableService" />
				</params>
			</method>
			<method visibility="public" name="getTransferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Debug" type="Debug">
		<comment>
			<description>This class contains various debugging flags (mainly useful for core
 development) and debugging routines.</description>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Debug.java 21735 2012-05-29 17:06:05Z jarekczek $</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="public" name="OFFSET_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>Print messages when the gap moves, and other offset manager state
 changes.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="SCROLL_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>Print messages when text area and display manager perform scroll
 updates.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="SCROLL_TO_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>Print messages when text area tries to make the caret visible.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="SCROLL_VERIFY" fulltype="boolean" type="boolean">
				<comment>
					<description>Display an error if the scrolling code detects an inconsistency.
 This kills performance!</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="SCREEN_LINES_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>Print messages when screen line counts change.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="TOKEN_MARKER_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>For checking context, etc.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="FOLD_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>For checking fold level invalidation, etc.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="FOLD_VIS_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>For checking the line visibility structure..</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="CHUNK_CACHE_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>For checking invalidation, etc.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="CHUNK_PAINT_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>Paints boxes around chunks.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="PAINT_TIMER" fulltype="boolean" type="boolean">
				<comment>
					<description>Show time taken to repaint text area painter.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="EB_TIMER" fulltype="boolean" type="boolean">
				<comment>
					<description>Show time taken for each EBComponent.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="DISABLE_GLYPH_VECTOR" fulltype="boolean" type="boolean">
				<comment>
					<description>Paint strings instead of glyph vectors.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="BEANSHELL_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>Logs messages when BeanShell code is evaluated.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="ALTERNATIVE_DISPATCHER" fulltype="boolean" type="boolean">
				<comment>
					<description>If true, an alternative dispatcher using key typed events will be
 used to handle a modifier key press in conjunction with an alphabet
 key. &lt;b&gt;On by default on MacOS.&lt;/b&gt;</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="ALT_KEY_PRESSED_DISABLED" fulltype="boolean" type="boolean">
				<comment>
					<description>If true, A+ shortcuts are disabled. If you use this, you should also
 remap the the modifiers so that A+ is actually something else.
 &lt;b&gt;On by default on MacOS.&lt;/b&gt;</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="GEOMETRY_WORKAROUND" fulltype="boolean" type="boolean">
				<comment>
					<description>Geometry workaround for X11.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="DUMP_KEY_EVENTS" fulltype="boolean" type="boolean">
				<comment>
					<description>Dump key events received by text area?</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="INDENT_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>Indent debug.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="PRINT_DEBUG" fulltype="boolean" type="boolean">
				<comment>
					<description>Printing debug.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="DISABLE_SEARCH_DIALOG_POOL" fulltype="boolean" type="boolean">
				<comment>
					<description>Create new search dialogs instead of reusing instances.
 &lt;b&gt; Off by default on Mac OS because it can cause search dialogs to
 show up on the wrong space. &lt;/b&gt;</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="DISABLE_MULTIHEAD" fulltype="boolean" type="boolean">
				<comment>
					<description>Disable multihead support, since it can cause window positioning
 problems with some Java versions.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Debug" />
			<method static="true" visibility="public" name="compDelay" fulltype="int" type="int">
				<comment>
					<description>Does a computational delay. Simulates heavy computations for
 the given period of time. Used to force conditions that are
 hard to reproduce, for example deadlock cases.</description>
					<attribute name="@param">
						<description>time Required delay, in ms</description>
					</attribute>
				</comment>
				<params>
					<param name="time" comment="Required delay, in ms" fulltype="long" type="long" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit" interface="true" fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent">
		<comment>
			<description>A component on the EditBus. Every plugin class that uses the EditBus for
 receiving messages must implement this interface.</description>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.EBMessage</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EBComponent.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.2pre6</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="handleMessage" fulltype="void" type="void">
				<comment>
					<description>Handles a message sent on the EditBus.

 This method must specify the type of responses the plugin will have
 for various subclasses of the {@link EBMessage} class. Typically
 this is done with one or more &lt;code&gt;if&lt;/code&gt; blocks that test
 whether the message is an instance of a derived message class in
 which the component has an interest. For example:

 &lt;pre&gt; if(msg instanceof BufferUpdate) {
     // a buffer&apos;s state has changed!
 }
 else if(msg instanceof ViewUpdate) {
     // a view&apos;s state has changed!
 }
 // ... and so on&lt;/pre&gt;</description>
					<attribute name="@param">
						<description>message The message</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="The message" fulltype="org.gjt.sp.jedit.EBMessage" type="EBMessage" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.EBMessage" type="EBMessage">
		<comment>
			<description>The base class of all EditBus messages.&lt;p&gt;

 Message classes extending this class typically add
 other data members and methods to provide subscribers with whatever is
 needed to handle the message appropriately.&lt;p&gt;

 Message types sent by jEdit can be found in the
 {@link org.gjt.sp.jedit.msg} package.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EBMessage.java 12625 2008-05-11 12:07:29Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.2pre6</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="EBMessage">
				<comment>
					<description>Creates a new message.</description>
					<attribute name="@param">
						<description>source The message source</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The message source" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<constructor visibility="protected" name="EBMessage">
				<comment>
					<description>Creates a new message.</description>
					<attribute name="@param">
						<description>source The message source</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The message source" fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
				</params>
			</constructor>
			<method visibility="public" name="getSource" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the sender of this message.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this message.</description>
				</comment>
			</method>
			<method visibility="public" name="paramString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this message&apos;s parameters.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="EditPlugin" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.EditPlugin" fulltype="org.gjt.sp.jedit.EBPlugin" type="EBPlugin">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
		</implements>
		<comment>
			<description>Plugins extending this class are automatically added to the EditBus.
 Otherwise, this class is identical to the {@link EditPlugin}
 class.</description>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.EditBus</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.EBComponent</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.EBMessage</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EBPlugin.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="EBPlugin" />
			<method visibility="public" name="handleMessage" fulltype="void" type="void">
				<comment>
					<description>Handles a message sent on the EditBus.</description>
				</comment>
				<params>
					<param name="message" fulltype="org.gjt.sp.jedit.EBMessage" type="EBMessage" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="JEditAbstractEditAction" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.JEditAbstractEditAction" fulltype="org.gjt.sp.jedit.EditAction" type="EditAction">
		<comment>
			<description>An action that can be bound to a menu item, tool bar button or keystroke.</description>
			<attribute name="@see">
				<description>jEdit#getAction(String)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#getActionNames()</description>
			</attribute>
			<attribute name="@see">
				<description>ActionSet</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EditAction.java 20108 2011-10-18 12:16:38Z evanpw $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EditAction">
				<comment>
					<description>Creates a new edit action with the specified name.</description>
					<attribute name="@param">
						<description>name The action name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The action name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="EditAction">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="newArgs" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="getLabel" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the action&apos;s label. This returns the
 value of the property named by {@link #getName()} suffixed
 with &lt;code&gt;.label&lt;/code&gt;.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="getMouseOverText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the action&apos;s mouse over message. This returns the
 value of the property named by {@link #getName()} suffixed
 with &lt;code&gt;.mouse-over&lt;/code&gt;.</description>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="invoke" fulltype="void" type="void">
				<comment>
					<description>Invokes the action. This is an implementation of the Command pattern,
 and concrete actions should override this.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2
 abstract since jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method final="true" visibility="public" name="isToggle" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this edit action should be displayed as a check box
 in menus. This returns the
 value of the property named by {@link #getName()} suffixed
 with &lt;code&gt;.toggle&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>jEdit 2.2pre4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isSelected" fulltype="boolean" type="boolean">
				<comment>
					<description>If this edit action is a toggle, returns if it is selected or not.</description>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="noRepeat" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this edit action should not be repeated. Returns false
 by default.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="noRecord" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this edit action should not be recorded. Returns false
 by default.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="noRememberLast" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this edit action should not be remembered as the most
 recently invoked action.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCode" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the BeanShell code that will replay this action.
 BeanShellAction.getCode() returns something more interesting for Actions that were loaded
 from the actions.xml file. 
 You do not need to override this method if your action name is unique,
 this EditAction was added to an ActionSet and that to an ActionContext of jEdit.
 
 concrete since jEdit 4.3pre7</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.EditAction.Wrapper" type="EditAction.Wrapper">
			<implements>
				<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
			</implements>
			<comment>
				<description>&apos;Wrap&apos; EditActions in this class to turn them into AWT
 ActionListeners, that can be attached to buttons, menu items, etc.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="EditAction.Wrapper">
					<comment>
						<description>Creates a new action listener wrapper.</description>
						<attribute name="@since">
							<description>jEdit 4.2pre1</description>
						</attribute>
					</comment>
					<params>
						<param name="context" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
						<param name="actionName" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="actionPerformed" fulltype="void" type="void">
					<comment>
						<description>Called when the user selects this action from a menu.
 It passes the action through the
 {@link org.gjt.sp.jedit.gui.InputHandler#invokeAction(EditAction)}
 method, which performs any recording or repeating.</description>
						<attribute name="@param">
							<description>evt The action event</description>
						</attribute>
					</comment>
					<params>
						<param name="evt" comment="The action event" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.EditAction.Wrapper" type="EditAction.Wrapper">
		<implements>
			<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
		</implements>
		<comment>
			<description>&apos;Wrap&apos; EditActions in this class to turn them into AWT
 ActionListeners, that can be attached to buttons, menu items, etc.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="EditAction.Wrapper">
				<comment>
					<description>Creates a new action listener wrapper.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="context" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
					<param name="actionName" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="actionPerformed" fulltype="void" type="void">
				<comment>
					<description>Called when the user selects this action from a menu.
 It passes the action through the
 {@link org.gjt.sp.jedit.gui.InputHandler#invokeAction(EditAction)}
 method, which performs any recording or repeating.</description>
					<attribute name="@param">
						<description>evt The action event</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="The action event" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.EditBus" type="EditBus">
		<comment>
			<description>jEdit&apos;s global event notification mechanism.&lt;p&gt;

 Plugins register with the EditBus to receive messages reflecting
 changes in the application&apos;s state, including changes in buffers,
 views and edit panes, changes in the set of properties maintained
 by the application, and the closing of the application.&lt;p&gt;

 The EditBus maintains a list of objects that have requested to receive
 messages. When a message is sent using this class, all registered
 components receive it in turn. Classes for objects that subscribe to
 the EditBus must implement the {@link EBComponent} interface, which
 defines the single method {@link EBComponent#handleMessage(EBMessage)}.&lt;p&gt;

 Alternatively, since jEdit4.3pre19, EditBus components can be any
 object. Handlers for EditBus messages are created by annotating
 methods with the {@link EBHandler} annotation. Such methods should
 expect a single parameter - an edit bus message of any desired type.
 If a message matching the type (or any of its super-types, unless the
 annotation requests exact type matching) is being sent, the annotated
 method will be called instead of the default {@link
 EBComponent#handleMessage(EBMessage)}. If a handler exists for a
 specific message type, the default handler will not be called.&lt;p&gt;

 A plugin core class that extends the
 {@link EBPlugin} abstract class (and whose name ends with
 &lt;code&gt;Plugin&lt;/code&gt; for identification purposes) will automatically be
 added to the EditBus during jEdit&apos;s startup routine.  Any other
 class - for example, a dockable window that needs to receive
 notification of buffer changes - must perform its own registration by calling
 {@link #addToBus(Object)} during its initialization.
 A convenient place to register in a class derived from &lt;code&gt;JComponent&lt;/code&gt;
 would be in an implementation of the &lt;code&gt;JComponent&lt;/code&gt; method
 &lt;code&gt;addNotify()&lt;/code&gt;.&lt;p&gt;

 Message types sent by jEdit can be found in the
 {@link org.gjt.sp.jedit.msg} package.&lt;p&gt;

 Plugins can also send their own messages - any object can send a message to
 the EditBus by calling the static method {@link #send(EBMessage)}.
 Most plugins, however, only concern themselves with receiving, not
 sending, messages.</description>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.EBComponent</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.EBMessage</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EditBus.java 21724 2012-05-27 14:37:27Z jarekczek $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.2pre6</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="addToBus" fulltype="void" type="void">
				<comment>
					<description>Adds a component to the bus. It will receive all messages sent
 on the bus.</description>
					<attribute name="@param">
						<description>comp The component to add</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to add" fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
				</params>
			</method>
			<method static="true" visibility="public" name="addToBus" fulltype="void" type="void">
				<comment>
					<description>Adds a component to the bus. Methods annotated with the
 {@link EBHandler} annotation found in the component will
 be used as EditBus message handlers if a message of a
 matching type is sent on the bus.&lt;p&gt;

 If the component implements {@link EBComponent}, then the
 {@link EBComponent#handleMessage(EBMessage)} method will be
 called for every message sent on the bus.</description>
					<attribute name="@param">
						<description>comp The component to add</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre19</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to add" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="removeFromBus" fulltype="void" type="void">
				<comment>
					<description>Removes a component from the bus.</description>
					<attribute name="@param">
						<description>comp The component to remove</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to remove" fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
				</params>
			</method>
			<method static="true" visibility="public" name="removeFromBus" fulltype="void" type="void">
				<comment>
					<description>Removes a component from the bus.</description>
					<attribute name="@param">
						<description>comp The component to remove</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre19</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to remove" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="send" fulltype="void" type="void">
				<comment>
					<description>Sends a message to all components on the bus in turn.
 The message is delivered to components in the AWT thread,
 and this method will wait until all handlers receive the
 message before returning.
 &lt;p&gt;
 This method uses {@link ThreadUtilities#runInDispatchThreadNow},
 read the notes there for possible deadlocks.

 &lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt;
 If the calling thread is not the AWT thread and the
 thread is interrupted before or while the call of this
 method, this method can return before completion of handlers.
 However, the interruption state is set in this case, so the
 caller can detect the interruption after the call. If you
 really need the completion of handlers, you should make sure
 the call is in the AWT thread or the calling thread is never
 interrupted. If you don&apos;t care about the completion of
 handlers, it is recommended to use
 {@link #sendAsync(EBMessage)} instead.
 &lt;/p&gt;</description>
					<attribute name="@param">
						<description>message The message</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="The message" fulltype="org.gjt.sp.jedit.EBMessage" type="EBMessage" />
				</params>
			</method>
			<method static="true" visibility="public" name="sendAsync" fulltype="void" type="void">
				<comment>
					<description>Schedules a message to be sent on the edit bus as soon as
 the AWT thread is done processing current events. The
 method returns immediately (i.e., before the message is
 sent).</description>
					<attribute name="@param">
						<description>message The message</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="The message" fulltype="org.gjt.sp.jedit.EBMessage" type="EBMessage" />
				</params>
			</method>
		</methods>
		<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit" interface="true" fulltype="org.gjt.sp.jedit.EditBus.EBHandler" type="EditBus.EBHandler">
			<implements>
				<interface fulltype="java.lang.annotation.Annotation" type="Annotation" />
			</implements>
			<comment>
				<description>This annotation should be used in methods that are to be
 considered &quot;edit bus message handlers&quot;. When registering
 an object using {@link #addToBus(Object)}, all methods
 tagged with this annotation will be considered as handlers
 for specific edit bus messages.&lt;p&gt;

 Each method should expect a single argument (an object of
 some type derived from EBMessage, inclusive). When
 delivering an EBMessage, the bus will search for and invoke
 all handlers matching the outgoing message type.&lt;p&gt;

 Since jEdit 4.4pre1, this annotation can also be added to
 classes extending EditPlugin. This will make the plugin
 be added to the bus automatically, similarly to how
 EBPlugin works, but without having to implement the
 EBComponent interface.</description>
				<attribute name="@since">
					<description>jEdit 4.3pre19</description>
				</attribute>
			</comment>
			<methods>
				<method visibility="public" name="exact" fulltype="boolean" type="boolean">
					<comment>
						<description>Whether the message should match the exact type of
 the parameter, instead of a compatible type.</description>
					</comment>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit" interface="true" fulltype="org.gjt.sp.jedit.EditBus.EBHandler" type="EditBus.EBHandler">
		<implements>
			<interface fulltype="java.lang.annotation.Annotation" type="Annotation" />
		</implements>
		<comment>
			<description>This annotation should be used in methods that are to be
 considered &quot;edit bus message handlers&quot;. When registering
 an object using {@link #addToBus(Object)}, all methods
 tagged with this annotation will be considered as handlers
 for specific edit bus messages.&lt;p&gt;

 Each method should expect a single argument (an object of
 some type derived from EBMessage, inclusive). When
 delivering an EBMessage, the bus will search for and invoke
 all handlers matching the outgoing message type.&lt;p&gt;

 Since jEdit 4.4pre1, this annotation can also be added to
 classes extending EditPlugin. This will make the plugin
 be added to the bus automatically, similarly to how
 EBPlugin works, but without having to implement the
 EBComponent interface.</description>
			<attribute name="@since">
				<description>jEdit 4.3pre19</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="exact" fulltype="boolean" type="boolean">
				<comment>
					<description>Whether the message should match the exact type of
 the parameter, instead of a compatible type.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.bufferset.BufferSetListener" type="BufferSetListener" />
		</implements>
		<comment>
			<description>A panel containing a text area.&lt;p&gt;

 In a BeanShell script, you can obtain the current edit pane from the
 &lt;code&gt;editPane&lt;/code&gt; variable.&lt;p&gt;


 Each View can have multiple editPanes, one is active at a time.
 Each EditPane has a single JEditTextArea, and is operating on single buffer.
 The EditPane also can switch buffers.

 This is the &quot;controller&quot; between a JEditTextArea (view) and a buffer (model).

 This class does not have a public constructor.
 Edit panes can be created and destroyed using methods in the
 {@link View} class.&lt;p&gt;</description>
			<attribute name="@see">
				<description>View#splitHorizontally()</description>
			</attribute>
			<attribute name="@see">
				<description>View#splitVertically()</description>
			</attribute>
			<attribute name="@see">
				<description>View#unsplitCurrent()</description>
			</attribute>
			<attribute name="@see">
				<description>View#unsplit()</description>
			</attribute>
			<attribute name="@see">
				<description>View#getEditPane()</description>
			</attribute>
			<attribute name="@see">
				<description>View#getEditPanes()</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EditPane.java 19592 2011-06-17 16:18:59Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getView" returncomment="the view that contains this EditPane" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns the view containing this edit pane.</description>
					<attribute name="@return">
						<description>the view that contains this EditPane</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.5pre2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="get" returncomment="the EditPane containing the TextArea." fulltype="org.gjt.sp.jedit.EditPane" type="EditPane">
				<comment>
					<description>Returns the EditPane of a TextArea.</description>
					<attribute name="@param">
						<description>ta the textArea</description>
					</attribute>
					<attribute name="@return">
						<description>the EditPane containing the TextArea.</description>
					</attribute>
				</comment>
				<params>
					<param name="ta" comment="the textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
			<method visibility="public" name="getBuffer" returncomment="the current buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Returns the current buffer.</description>
					<attribute name="@return">
						<description>the current buffer</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.5pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setBuffer" fulltype="void" type="void">
				<comment>
					<description>Sets the current buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer to edit.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.5pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer to edit." fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method visibility="public" name="setBuffer" fulltype="void" type="void">
				<comment>
					<description>Sets the current buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer to edit.</description>
					</attribute>
					<attribute name="@param">
						<description>requestFocus true if the textarea should request focus, false otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer to edit." fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="requestFocus" comment="true if the textarea should request focus, false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="prevBuffer" fulltype="void" type="void">
				<comment>
					<description>Selects the previous buffer.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="nextBuffer" fulltype="void" type="void">
				<comment>
					<description>Selects the next buffer.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="recentBuffer" fulltype="void" type="void">
				<comment>
					<description>Selects the most recently edited buffer.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="focusOnTextArea" fulltype="void" type="void">
				<comment>
					<description>Sets the focus onto the text area.</description>
					<attribute name="@since">
						<description>jEdit 2.5pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getTextArea" returncomment="the text area of the edit pane" fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea">
				<comment>
					<description>Returns the view&apos;s text area.</description>
					<attribute name="@return">
						<description>the text area of the edit pane</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.5pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getBufferSwitcher" returncomment="the buffer switcher (it can be null)" fulltype="org.gjt.sp.jedit.gui.BufferSwitcher" type="BufferSwitcher">
				<comment>
					<description>Returns the buffer switcher combo box instance.</description>
					<attribute name="@return">
						<description>the buffer switcher (it can be null)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre8</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="focusBufferSwitcher" fulltype="void" type="void">
				<comment>
					<description>Pops up and focuses on the buffer switcher combo box.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre18
 (previously known as showBufferSwitcher)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="saveCaretInfo" fulltype="void" type="void">
				<comment>
					<description>Saves the caret information to the current buffer.</description>
					<attribute name="@since">
						<description>jEdit 2.5pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="loadCaretInfo" fulltype="void" type="void">
				<comment>
					<description>Loads the caret and selection information from this EditPane, fall
 back to the information from the current buffer if none is already
 in this EditPane.</description>
					<attribute name="@since">
						<description>jEdit 2.5pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="goToNextMarker" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the next marker.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToPrevMarker" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the previous marker.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToMarker" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the marker with the specified shortcut.</description>
					<attribute name="@param">
						<description>shortcut The shortcut</description>
					</attribute>
					<attribute name="@param">
						<description>select True if the selection should be extended,
 false otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="shortcut" comment="The shortcut" fulltype="char" type="char" />
					<param name="select" comment="True if the selection should be extended,
 false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="addMarker" fulltype="void" type="void">
				<comment>
					<description>Adds a marker at the caret position.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="swapMarkerAndCaret" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the marker with the specified shortcut,
 then sets the marker position to the former caret position.</description>
					<attribute name="@param">
						<description>shortcut The shortcut</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="shortcut" comment="The shortcut" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
				</params>
			</method>
			<method final="true" visibility="public" name="getMinimumSize" fulltype="java.awt.Dimension" type="Dimension">
				<comment>
					<description>Returns 0,0 for split pane compatibility.</description>
				</comment>
			</method>
			<method visibility="public" name="getBufferSet" returncomment="the buffer set which is currently used by this EditPane" fulltype="org.gjt.sp.jedit.bufferset.BufferSet" type="BufferSet">
				<comment>
					<description>Returns the current buffer set.
 This can be changed by setBufferSetScope().</description>
					<attribute name="@return">
						<description>the buffer set which is currently used by this EditPane</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="bufferAdded" fulltype="void" type="void">
				<comment>
					<description>A buffer was added in the bufferSet.</description>
					<attribute name="@param">
						<description>buffer the added buffer</description>
					</attribute>
					<attribute name="@param">
						<description>index the position where it was added</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the added buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="index" comment="the position where it was added" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="bufferRemoved" fulltype="void" type="void">
				<comment>
					<description>A buffer was removed from the bufferSet.</description>
					<attribute name="@param">
						<description>buffer the removed buffer</description>
					</attribute>
					<attribute name="@param">
						<description>index the position where it was before being removed</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the removed buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="index" comment="the position where it was before being removed" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="bufferMoved" fulltype="void" type="void">
				<comment>
					<description>A buffer was moved in the BufferSet.</description>
					<attribute name="@param">
						<description>buffer the moved buffer</description>
					</attribute>
					<attribute name="@param">
						<description>oldIndex the position it was before</description>
					</attribute>
					<attribute name="@param">
						<description>newIndex the new position</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the moved buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="oldIndex" comment="the position it was before" fulltype="int" type="int" />
					<param name="newIndex" comment="the new position" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="bufferSetSorted" fulltype="void" type="void">
				<comment>
					<description>The bufferSet was sorted</description>
					<attribute name="@since">
						<description>jEdit 4.3pre16</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method static="true" visibility="public" name="initPainter" fulltype="void" type="void">
				<comment>
					<description>Init the painter of a textarea.</description>
					<attribute name="@param">
						<description>painter the painter of a textarea</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre12</description>
					</attribute>
				</comment>
				<params>
					<param name="painter" comment="the painter of a textarea" fulltype="org.gjt.sp.jedit.textarea.TextAreaPainter" type="TextAreaPainter" />
				</params>
			</method>
			<method visibility="public" name="handleBufferUpdate" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.EditPlugin" type="EditPlugin">
		<comment>
			<description>The abstract base class that every plugin must implement.
 Alternatively, instead of extending this class, a plugin core class can
 extend {@link EBPlugin} to automatically receive EditBus messages.

 &lt;h3&gt;Basic plugin information properties&lt;/h3&gt;

 Note that in all cases above where a &lt;i&gt;className&lt;/i&gt; is needed, the fully
 qualified class name, including the package name, if any, must be used.&lt;p&gt;

 The following properties are required for jEdit to load the plugin:

 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.activate&lt;/code&gt; - set this to
 &lt;code&gt;defer&lt;/code&gt; if your plugin only needs to be loaded when it is first
 invoked; set it to &lt;code&gt;startup&lt;/code&gt; if your plugin must be loaded at
 startup regardless; set it to a whitespace-separated list of property names
 if your plugin should be loaded if at least one of these properties is set.
 Note that if this property is &lt;b&gt;not&lt;/b&gt; set, the plugin will not work with
 jEdit 4.3final.
 &lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.name&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.version&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.jars&lt;/code&gt; - only needed if your plugin
 bundles external JAR files. Contains a whitespace-separated list of JAR
 file names. Without this property, the plugin manager will leave behind the
 external JAR files when removing the plugin.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.files&lt;/code&gt; - only needed if your plugin
 bundles external files like libraries which MUST reside in the local
 filesystem. Contains a whitespace-separated list of file names.
 Without this property, the plugin manager will leave behind the
 external files when removing the plugin.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.description&lt;/code&gt; - the short description
 associated with the plugin.  The short description is used by the Plugin
 Manager and on the list pages on Plugin Central. &lt;/li&gt;
 &lt;/ul&gt;

 The following properties are optional but recommended:

 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.author&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.usePluginHome&lt;/code&gt; - whether
 the plugin uses the EditPlugin.getPluginHome API or not. Even
 if the plugin doesn&apos;t store any data, this property should be set
 so that the plugin manager can tell that there is no data stored.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.docs&lt;/code&gt; - the path to plugin
 documentation in HTML format. &lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.longdescription&lt;/code&gt; - the path to
 the long description in XHTML (no fancy stuff here, please - just proper
 XHTML subset with the basic tags: &lt;tt&gt;html, h1, h2, p, li, ul, ol, a href,b ,i, u, br/ &lt;/tt&gt;)
 &lt;p&gt; The long description is extracted from the plugin at various times,
 primarily at plugin packaging time to update the data on the
 plugin detail pages of Plugin Central. &lt;/p&gt;
 &lt;p&gt;
 If this property is left out, the default will be to look in a file
 called &amp;lt;description.html&amp;gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 For the previous two properties, if a relative path is supplied,
 it should be both &lt;/p&gt;
 &lt;ol&gt;
 &lt;li&gt; relative to the location of the .props file (when it is in the source tree) &lt;/li&gt;
 &lt;li&gt; relative to the root of the JAR (when it is packaged in the JAR file) &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; Both conditions are easily satisfied if the .props file as well as
 description.html are both located in the root directory of the plugin,
 as well as the generated JAR. &lt;/p&gt;

 &lt;h3&gt;Plugin dependency properties&lt;/h3&gt;

 &lt;p&gt;Plugin dependencies are also specified using properties.
 Each dependency is defined in a property named with
 &lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.depend.&lt;/code&gt; followed by a number.
 Dependencies must be numbered in order, starting from zero.
 This determines the order that dependent plugins get loaded and activated,
 so order is very important. &lt;/p&gt;

 &lt;p&gt; The value of a dependency property has one of the following forms: &lt;/p&gt;

 &lt;ul&gt;
 &lt;li&gt; &lt;code&gt;jdk &lt;i&gt;minimumJavaVersion&lt;/i&gt;&lt;/code&gt; &lt;/li&gt;
 &lt;li&gt; &lt;code&gt;jedit &lt;i&gt;minimumjEditVersion&lt;/i&gt;&lt;/code&gt; - note that this must be
 a version number in the form returned by {@link jEdit#getBuild()},
 not {@link jEdit#getVersion()}. Note that the documentation here describes
 the jEdit 4.2 plugin API, so this dependency must be set to at least
 &lt;code&gt;04.02.99.00&lt;/code&gt; (4.2final).&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;&lt;i&gt;pluginClassName pluginVersion&lt;/i&gt;&lt;/code&gt; - the fully quailified
 plugin class name with package must be specified.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;optional plugin &lt;i&gt;pluginClassName pluginVersion&lt;/i&gt;&lt;/code&gt; -
 an optional dependency, indicating that the plugin will work without it,
 but that the dependency should be loaded before this plugin. &lt;/li&gt;
&lt;/ul&gt;

 &lt;p&gt;In this example, the ProjectViewer plugin is an optional dependency of
 the Console, beacause the Console only listens to events from the ProjectViewer.
 It requires Jedit 4.2 final. &lt;/p&gt;

&lt;pre&gt;
plugin.console.ConsolePlugin.depend.0=jedit 04.02.99.00
plugin.console.ConsolePlugin.depend.1=jdk 1.5
plugin.console.ConsolePlugin.depend.2=plugin errorlist.ErrorListPlugin 1.4
plugin.console.ConsolePlugin.depend.3=optional plugin projectviewer.ProjectPlugin 2.1.0.92
&lt;/pre&gt;

 &lt;h3&gt;Plugin menu item properties&lt;/h3&gt;

&lt;p&gt; To add your plugin to the view&apos;s &lt;b&gt;Plugins&lt;/b&gt; menu, define one of these two
 properties: &lt;/p&gt;

 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.menu-item&lt;/code&gt; - if this is defined,
 the action named by this property is added to the &lt;b&gt;Plugins&lt;/b&gt; menu.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.menu&lt;/code&gt; - if this is defined,
 a sub-menu is added to the &lt;b&gt;Plugins&lt;/b&gt; menu whose content is the
 whitespace-separated list of action names in this property. A separator may
 be added to the sub-menu by listing &lt;code&gt;-&lt;/code&gt; in the property.&lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;If you want the plugin&apos;s menu items to be determined at runtime, define a
 property &lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.menu.code&lt;/code&gt; to be BeanShell
 code that evaluates to an implementation of
 {@link org.gjt.sp.jedit.menu.DynamicMenuProvider}.&lt;/p&gt;
&lt;p&gt;
 To add your plugin to the file system browser&apos;s &lt;b&gt;Plugins&lt;/b&gt; menu, define
 one of these two properties:
&lt;/p&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.browser-menu-item&lt;/code&gt; - if this is
 defined, the action named by this property is added to the &lt;b&gt;Plugins&lt;/b&gt;
 menu.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.browser-menu&lt;/code&gt; - if this is defined,
 a sub-menu is added to the &lt;b&gt;Plugins&lt;/b&gt; menu whose content is the
 whitespace-separated list of action names in this property. A separator may
 be added to the sub-menu by listing &lt;code&gt;-&lt;/code&gt; in the property.&lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;Again, if the browser menu items need to be determined at runtime, define a
 property &lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.browser-menu.code&lt;/code&gt; to be BeanShell
 code that evaluates to an implementation of
 {@link org.gjt.sp.jedit.menu.DynamicMenuProvider}.&lt;/p&gt;
&lt;p&gt;

&lt;p&gt; In all cases, each action&apos;s
 menu item label is taken from the &lt;code&gt;&lt;i&gt;actionName&lt;/i&gt;.label&lt;/code&gt;
 property. View actions are defined in an &lt;code&gt;actions.xml&lt;/code&gt;
 file, file system browser actions are defined in a
 &lt;code&gt;browser.actions.xml&lt;/code&gt; file; see {@link ActionSet}.
&lt;/p&gt;
 &lt;h3&gt;Plugin option pane properties&lt;/h3&gt;

 &lt;p&gt;To add your plugin to the &lt;b&gt;Plugin Options&lt;/b&gt; dialog box, define one of
 these two properties:
&lt;/p&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.option-pane=&lt;i&gt;paneName&lt;/i&gt;&lt;/code&gt; - if this is defined,
 a single option pane with this name is added to the &lt;b&gt;Plugin Options&lt;/b&gt;
 menu.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.option-group=&lt;i&gt;paneName1&lt;/i&gt; [&lt;i&gt;paneName2 paneName3&lt;/i&gt; ...]&lt;/code&gt; - if this is defined,
 a branch node is added to the &lt;b&gt;Plugin Options&lt;/b&gt; dialog box whose content
 is the whitespace-separated list of &lt;i&gt;paneNames&lt;/i&gt; in this property.&lt;/li&gt;
 &lt;/ul&gt;

 Then for each option &lt;i&gt;paneName&lt;/i&gt;, define these two properties:

 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;options.&lt;i&gt;paneName&lt;/i&gt;.label&lt;/code&gt; - the label to show
 for the pane in the dialog box.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;options.&lt;i&gt;paneName&lt;/i&gt;.code&lt;/code&gt; - BeanShell code that
 evaluates to an instance of the {@link OptionPane} class.&lt;/li&gt;

 &lt;h3&gt;Example&lt;/h3&gt;

 Here is an example set of plugin properties:

&lt;pre&gt;
# jEdit only needs to load the plugin the first time the user accesses it
# the presence of this property also tells jEdit the plugin is using the new API
plugin.QuickNotepadPlugin.activate=defer
plugin.QuickNotepadPlugin.name=QuickNotepad
plugin.QuickNotepadPlugin.author=John Gellene
plugin.QuickNotepadPlugin.usePluginHome=true
plugin.QuickNotepadPlugin.version=4.5
plugin.QuickNotepadPlugin.docs=index.html

plugin.QuickNotepadPlugin.depend.0=jedit 04.05.99.00
plugin.QuickNotepadPlugin.depend.1=jdk 1.6
plugin.QuickNotepadPlugin.description=This plugin provides a dockable &quot;scratch pad&quot; for writing and displaying notes, to do lists or similar items as unformatted text.
# plugin menu
plugin.QuickNotepadPlugin.menu=quicknotepad \
        - \
        quicknotepad.choose-file \
        quicknotepad.save-file \
        quicknotepad.copy-to-buffer

quicknotepad.label=QuickNotepad
plugin.QuickNotepadPlugin.option-pane=quicknotepad
options.quicknotepad.code=new QuickNotepadOptionPane();
options.quicknotepad.label=QuickNotepad
&lt;/pre&gt;

 Note that action and option pane labels are not shown in the above example.</description>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#getProperty(String)</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#getPlugin(String)</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#getPlugins()</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#getPluginJAR(String)</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#getPluginJARs()</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#addPluginJAR(String)</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#removePluginJAR(PluginJAR,boolean)</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.ActionSet</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.gui.DockableWindowManager</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.OptionPane</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.PluginJAR</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.ServiceManager</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@author">
				<description>Alan Ezust (API documentation)</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.1pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EditPlugin" />
			<method visibility="public" name="start" fulltype="void" type="void">
				<comment>
					<description>jEdit calls this method when the plugin is being activated, either
 during startup or at any other time. A plugin can get activated for
 a number of reasons:

 &lt;ul&gt;
 &lt;li&gt;The plugin is written for jEdit 4.1 or older, in which case it
 will always be loaded at startup.&lt;/li&gt;
 &lt;li&gt;The plugin has its &lt;code&gt;activate&lt;/code&gt; property set to
 &lt;code&gt;startup&lt;/code&gt;, in which case it will always be loaded at
 startup.&lt;/li&gt;
 &lt;li&gt;One of the properties listed in the plugin&apos;s
 &lt;code&gt;activate&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;,
 in which case it will always be loaded at startup.&lt;/li&gt;
 &lt;li&gt;One of the plugin&apos;s classes is being accessed by another plugin,
 a macro, or a BeanShell snippet in a plugin API XML file.&lt;/li&gt;
 &lt;/ul&gt;

 Note that this method is always called from the event dispatch
 thread, even if the activation resulted from a class being loaded
 from another thread. A side effect of this is that some of your
 plugin&apos;s code might get executed before this method finishes
 running.&lt;p&gt;

 When this method is being called for plugins written for jEdit 4.1
 and below, no views or buffers are open. However, this is not the
 case for plugins using the new API. For example, if your plugin adds
 tool bars to views, make sure you correctly handle the case where
 views are already open when the plugin is loaded.&lt;p&gt;

 If your plugin must be loaded on startup, take care to have this
 method return as quickly as possible.&lt;p&gt;

 The default implementation of this method does nothing.</description>
					<attribute name="@since">
						<description>jEdit 2.1pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="stop" fulltype="void" type="void">
				<comment>
					<description>jEdit calls this method when the plugin is being unloaded. This can
 be when the program is exiting, or at any other time.&lt;p&gt;

 If a plugin uses state information or other persistent data
 that should be stored in a special format, this would be a good place
 to write the data to storage.  If the plugin uses jEdit&apos;s properties
 API to hold settings, no special processing is needed for them on
 exit, since they will be saved automatically.&lt;p&gt;

 With plugins written for jEdit 4.1 and below, this method is only
 called when the program is exiting. However, this is not the case
 for plugins using the new API. For example, if your plugin adds
 tool bars to views, make sure you correctly handle the case where
 views are still open when the plugin is unloaded.&lt;p&gt;

 To avoid memory leaks, this method should ensure that no references
 to any objects created by this plugin remain in the heap. In the
 case of actions, dockable windows and services, jEdit ensures this
 automatically. For other objects, your plugin must clean up maually.
 &lt;p&gt;

 The default implementation of this method does nothing.</description>
					<attribute name="@since">
						<description>jEdit 2.1pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getPluginHome" returncomment="the plugin home. It can be null if there is no 
	   settings directory" fulltype="java.io.File" type="File">
				<comment>
					<description>Returns the home of your plugin.</description>
					<attribute name="@return">
						<description>the plugin home. It can be null if there is no 
	   settings directory</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsOutputStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourcePath</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getPluginHome" returncomment="the plugin home. It can be null if there is no
 	   settings directory" fulltype="java.io.File" type="File">
				<comment>
					<description>&lt;p&gt;Returns the home of the specified plugin.&lt;/p&gt;

 &lt;p&gt;Since the first parameter is a reference to the
 {@code Class} instance for the plugin,
 this method requires the plugin to be activated.&lt;/p&gt;

 &lt;p&gt;See {@link #getPluginHome(EditPlugin)} method, as
 an alternate, for when the plugin doesn&apos;t need
 to be activated, or when you do not have the
 {@code Class} instance available.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>clazz the class of the plugin</description>
					</attribute>
					<attribute name="@return">
						<description>the plugin home. It can be null if there is no
 	   settings directory</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
					<attribute name="@see">
						<description>#getPluginHome(EditPlugin)</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsOutputStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourcePath</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="the class of the plugin" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="getPluginHome" returncomment="the plugin home. It can be null if there is no settings directory" fulltype="java.io.File" type="File">
				<comment>
					<description>&lt;p&gt;Returns the home of the specified plugin.&lt;/p&gt;
 
 &lt;p&gt;This method doesn&apos;t need the plugin to be activated. You can pass
 an {@code EditPlugin.Deferred} instance that you get from
 {@code jEdit.getPlugin(String)} or {@code jEdit.getPlugins()} if
 the plugin in question is not activated yet and this method doesn&apos;t
 cause the plugin to get activated. If you have a reference to the
 plugins {@code Class} instance available, consider using the
 {@code Class} method.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>plugin the plugin</description>
					</attribute>
					<attribute name="@return">
						<description>the plugin home. It can be null if there is no settings directory</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
					<attribute name="@see">
						<description>#getPluginHome(Class)</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsOutputStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourcePath</description>
					</attribute>
				</comment>
				<params>
					<param name="plugin" comment="the plugin" fulltype="org.gjt.sp.jedit.EditPlugin" type="EditPlugin" />
				</params>
			</method>
			<method static="true" visibility="public" name="getResourceAsStream" returncomment="An input stream for the resource, or &lt;code&gt;null&lt;/code&gt;." fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>&lt;p&gt;Returns an input stream to the specified resource, or {@code null}
 if none is found.&lt;/p&gt;

 &lt;p&gt;Since the first parameter is a reference to the
 {@code Class} instance for the plugin,
 this method requires the plugin to be activated.&lt;/p&gt;

 &lt;p&gt;See {@link #getResourceAsStream(EditPlugin,String)} method, as
 an alternate, for when the plugin doesn&apos;t need
 to be activated, or when you do not have the
 {@code Class} instance available.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>clazz the plugin class</description>
					</attribute>
					<attribute name="@param">
						<description>path The path to the resource to be returned, relative to
 the plugin&apos;s resource path.</description>
					</attribute>
					<attribute name="@return">
						<description>An input stream for the resource, or &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
					<attribute name="@see">
						<description>#getPluginHome</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsStream(EditPlugin,String)</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsOutputStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourcePath</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="the plugin class" fulltype="java.lang.Class" type="Class" />
					<param name="path" comment="The path to the resource to be returned, relative to
 the plugin&apos;s resource path." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getResourceAsStream" returncomment="An input stream for the resource, or &lt;code&gt;null&lt;/code&gt;." fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>&lt;p&gt;Returns an input stream to the specified resource, or &lt;code&gt;null&lt;/code&gt;
 if none is found.&lt;/p&gt;
 
 &lt;p&gt;This method doesn&apos;t need the plugin to be activated. You can pass
 an {@code EditPlugin.Deferred} instance that you get from
 {@code jEdit.getPlugin(String)} or {@code jEdit.getPlugins()} if
 the plugin in question is not activated yet and this method doesn&apos;t
 cause the plugin to get activated. If you have a reference to the
 plugins {@code Class} instance available, consider using the
 {@code Class} method.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>plugin the plugin</description>
					</attribute>
					<attribute name="@param">
						<description>path The path to the resource to be returned, relative to
 the plugin&apos;s resource path.</description>
					</attribute>
					<attribute name="@return">
						<description>An input stream for the resource, or &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
					<attribute name="@see">
						<description>#getPluginHome</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsStream(Class,String)</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsOutputStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourcePath</description>
					</attribute>
				</comment>
				<params>
					<param name="plugin" comment="the plugin" fulltype="org.gjt.sp.jedit.EditPlugin" type="EditPlugin" />
					<param name="path" comment="The path to the resource to be returned, relative to
 the plugin&apos;s resource path." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getResourceAsOutputStream" returncomment="An output stream for the resource, or &lt;code&gt;null&lt;/code&gt;." fulltype="java.io.OutputStream" type="OutputStream">
				<comment>
					<description>&lt;p&gt;Returns an output stream to the specified resource, or {@code null}
 if access to that resource is denied.&lt;/p&gt;

 &lt;p&gt;Since the first parameter is a reference to the
 {@code Class} instance for the plugin,
 this method requires the plugin to be activated.&lt;/p&gt;

 &lt;p&gt;See {@link #getResourceAsOutputStream(EditPlugin,String)} method, as
 an alternate, for when the plugin doesn&apos;t need
 to be activated, or when you do not have the
 {@code Class} instance available.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>clazz the plugin class</description>
					</attribute>
					<attribute name="@param">
						<description>path The path to the resource to be returned, relative to
 the plugin&apos;s resource path.</description>
					</attribute>
					<attribute name="@return">
						<description>An output stream for the resource, or &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
					<attribute name="@see">
						<description>#getPluginHome</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsOutputStream(EditPlugin,String)</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourcePath</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="the plugin class" fulltype="java.lang.Class" type="Class" />
					<param name="path" comment="The path to the resource to be returned, relative to
 the plugin&apos;s resource path." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getResourceAsOutputStream" returncomment="An output stream for the resource, or &lt;code&gt;null&lt;/code&gt;." fulltype="java.io.OutputStream" type="OutputStream">
				<comment>
					<description>&lt;p&gt;Returns an output stream to the specified resource, or &lt;code&gt;null&lt;/node&gt; if access
 to that resource is denied.&lt;/p&gt;

 &lt;p&gt;This method doesn&apos;t need the plugin to be activated. You can pass
 an {@code EditPlugin.Deferred} instance that you get from
 {@code jEdit.getPlugin(String)} or {@code jEdit.getPlugins()} if
 the plugin in question is not activated yet and this method doesn&apos;t
 cause the plugin to get activated. If you have a reference to the
 plugins {@code Class} instance available, consider using the
 {@code Class} method.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>plugin the plugin</description>
					</attribute>
					<attribute name="@param">
						<description>path The path to the resource to be returned, relative to
 the plugin&apos;s resource path.</description>
					</attribute>
					<attribute name="@return">
						<description>An output stream for the resource, or &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
					<attribute name="@see">
						<description>#getPluginHome</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsOutputStream(Class,String)</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourcePath</description>
					</attribute>
				</comment>
				<params>
					<param name="plugin" comment="the plugin" fulltype="org.gjt.sp.jedit.EditPlugin" type="EditPlugin" />
					<param name="path" comment="The path to the resource to be returned, relative to
 the plugin&apos;s resource path." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getResourcePath" returncomment="The absolute path to the resource or null if there is no plugin home." fulltype="java.io.File" type="File">
				<comment>
					<description>&lt;p&gt;Returns the full path of the specified plugin resource.&lt;/p&gt;

 &lt;p&gt;Since the first parameter is a reference to the
 {@code Class} instance for the plugin,
 this method requires the plugin to be activated.&lt;/p&gt;

 &lt;p&gt;See {@link #getResourcePath(EditPlugin,String)} method, as
 an alternate, for when the plugin doesn&apos;t need
 to be activated, or when you do not have the
 {@code Class} instance available.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>clazz the plugin class</description>
					</attribute>
					<attribute name="@param">
						<description>path The relative path to the resource from the plugin&apos;s
 resource path.</description>
					</attribute>
					<attribute name="@return">
						<description>The absolute path to the resource or null if there is no plugin home.</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
					<attribute name="@see">
						<description>#getPluginHome</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsOutputStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourcePath(EditPlugin,String)</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="the plugin class" fulltype="java.lang.Class" type="Class" />
					<param name="path" comment="The relative path to the resource from the plugin&apos;s
 resource path." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getResourcePath" returncomment="The absolute path to the resource or null if there is no plugin home." fulltype="java.io.File" type="File">
				<comment>
					<description>&lt;p&gt;Returns the full path of the specified plugin resource.&lt;/p&gt;

 &lt;p&gt;This method doesn&apos;t need the plugin to be activated. You can pass
 an {@code EditPlugin.Deferred} instance that you get from
 {@code jEdit.getPlugin(String)} or {@code jEdit.getPlugins()} if
 the plugin in question is not activated yet and this method doesn&apos;t
 cause the plugin to get activated. If you have a reference to the
 plugins {@code Class} instance available, consider using the
 {@code Class} method.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>plugin the plugin</description>
					</attribute>
					<attribute name="@param">
						<description>path The relative path to the resource from the plugin&apos;s
 resource path.</description>
					</attribute>
					<attribute name="@return">
						<description>The absolute path to the resource or null if there is no plugin home.</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
					<attribute name="@see">
						<description>#getPluginHome</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsOutputStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourceAsStream</description>
					</attribute>
					<attribute name="@see">
						<description>#getResourcePath(Class,String)</description>
					</attribute>
				</comment>
				<params>
					<param name="plugin" comment="the plugin" fulltype="org.gjt.sp.jedit.EditPlugin" type="EditPlugin" />
					<param name="path" comment="The relative path to the resource from the plugin&apos;s
 resource path." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getClassName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the plugin&apos;s class name. This might not be the same as
 the class of the actual &lt;code&gt;EditPlugin&lt;/code&gt; instance, for
 example if the plugin is not loaded yet.</description>
					<attribute name="@since">
						<description>jEdit 2.5pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getPluginJAR" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR">
				<comment>
					<description>Returns the JAR file containing this plugin.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="createMenuItems" fulltype="javax.swing.JMenuItem" type="JMenuItem">
				<comment>
					<description>Called by the view when constructing its &lt;b&gt;Plugins&lt;/b&gt; menu.
 See the description of this class for details about how the
 menu items are constructed from plugin properties.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="createBrowserMenuItems" fulltype="javax.swing.JMenuItem" type="JMenuItem">
				<comment>
					<description>Called by the filesystem browser when constructing its
 &lt;b&gt;Plugins&lt;/b&gt; menu.
 See the description of this class for details about how the
 menu items are constructed from plugin properties.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
		</methods>
		<jelclass superclass="EditPlugin" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.EditPlugin" fulltype="org.gjt.sp.jedit.EditPlugin.Broken" type="EditPlugin.Broken">
			<comment>
				<description>A placeholder for a plugin that didn&apos;t load.</description>
				<attribute name="@see">
					<description>jEdit#getPlugin(String)</description>
				</attribute>
				<attribute name="@see">
					<description>PluginJAR#getPlugin()</description>
				</attribute>
				<attribute name="@see">
					<description>PluginJAR#activatePlugin()</description>
				</attribute>
			</comment>
			<methods>
				<method visibility="public" name="getClassName" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
		<jelclass superclass="EditPlugin" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.EditPlugin" fulltype="org.gjt.sp.jedit.EditPlugin.Deferred" type="EditPlugin.Deferred">
			<comment>
				<description>A placeholder for a plugin that hasn&apos;t been loaded yet.</description>
				<attribute name="@see">
					<description>jEdit#getPlugin(String)</description>
				</attribute>
				<attribute name="@see">
					<description>PluginJAR#getPlugin()</description>
				</attribute>
				<attribute name="@see">
					<description>PluginJAR#activatePlugin()</description>
				</attribute>
			</comment>
			<methods>
				<method visibility="public" name="getClassName" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="EditPlugin" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.EditPlugin" fulltype="org.gjt.sp.jedit.EditPlugin.Broken" type="EditPlugin.Broken">
		<comment>
			<description>A placeholder for a plugin that didn&apos;t load.</description>
			<attribute name="@see">
				<description>jEdit#getPlugin(String)</description>
			</attribute>
			<attribute name="@see">
				<description>PluginJAR#getPlugin()</description>
			</attribute>
			<attribute name="@see">
				<description>PluginJAR#activatePlugin()</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getClassName" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="EditPlugin" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.EditPlugin" fulltype="org.gjt.sp.jedit.EditPlugin.Deferred" type="EditPlugin.Deferred">
		<comment>
			<description>A placeholder for a plugin that hasn&apos;t been loaded yet.</description>
			<attribute name="@see">
				<description>jEdit#getPlugin(String)</description>
			</attribute>
			<attribute name="@see">
				<description>PluginJAR#getPlugin()</description>
			</attribute>
			<attribute name="@see">
				<description>PluginJAR#activatePlugin()</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getClassName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Thread" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Thread" fulltype="org.gjt.sp.jedit.EditServer" type="EditServer">
		<comment>
			<description>Inter-process communication.&lt;p&gt;

 The edit server protocol is very simple. &lt;code&gt;$HOME/.jedit/server&lt;/code&gt;
 is an ASCII file containing two lines, the first being the port number,
 the second being the authorization key.&lt;p&gt;

 You connect to that port on the local machine, sending the authorization
 key as four bytes in network byte order, followed by the length of the
 BeanShell script as two bytes in network byte order, followed by the
 script in UTF8 encoding. After the socked is closed, the BeanShell script
 will be executed by jEdit.&lt;p&gt;

 The snippet is executed in the AWT thread. None of the usual BeanShell
 variables (view, buffer, textArea, editPane) are set so the script has to
 figure things out by itself.&lt;p&gt;

 In most cases, the script will call the static
 {@link #handleClient(boolean,String,String[])} method, but of course more
 complicated stuff can be done too.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EditServer.java 19727 2011-08-01 17:45:18Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="run" fulltype="void" type="void" />
			<method static="true" visibility="public" name="handleClient" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>restore Ignored unless no views are open</description>
					</attribute>
					<attribute name="@param">
						<description>parent The client&apos;s parent directory</description>
					</attribute>
					<attribute name="@param">
						<description>args A list of files. Null entries are ignored, for convinience</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="restore" comment="Ignored unless no views are open" fulltype="boolean" type="boolean" />
					<param name="parent" comment="The client&apos;s parent directory" fulltype="java.lang.String" type="String" />
					<param name="args" comment="A list of files. Null entries are ignored, for convinience" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="handleClient" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<attribute name="@param">
						<description>restore Ignored unless no views are open</description>
					</attribute>
					<attribute name="@param">
						<description>newView Open a new view?</description>
					</attribute>
					<attribute name="@param">
						<description>newPlainView Open a new plain view?</description>
					</attribute>
					<attribute name="@param">
						<description>parent The client&apos;s parent directory</description>
					</attribute>
					<attribute name="@param">
						<description>args A list of files. Null entries are ignored, for convinience</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="restore" comment="Ignored unless no views are open" fulltype="boolean" type="boolean" />
					<param name="newView" comment="Open a new view?" fulltype="boolean" type="boolean" />
					<param name="newPlainView" comment="Open a new plain view?" fulltype="boolean" type="boolean" />
					<param name="parent" comment="The client&apos;s parent directory" fulltype="java.lang.String" type="String" />
					<param name="args" comment="A list of files. Null entries are ignored, for convinience" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method visibility="public" name="getPort" fulltype="int" type="int" />
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.gui.AbbrevEditor" type="AbbrevEditor">
		<comment>
			<description>Panel for editing abbreviations</description>
		</comment>
		<methods>
			<constructor visibility="public" name="AbbrevEditor" />
			<method visibility="public" name="getAbbrev" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setAbbrev" fulltype="void" type="void">
				<params>
					<param name="abbrev" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getExpansion" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setExpansion" fulltype="void" type="void">
				<params>
					<param name="expansion" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getAbbrevField" fulltype="javax.swing.JTextField" type="JTextField" />
			<method visibility="public" name="getBeforeCaretTextArea" fulltype="javax.swing.JTextArea" type="JTextArea" />
			<method visibility="public" name="getAfterCaretTextArea" fulltype="javax.swing.JTextArea" type="JTextArea" />
		</methods>
	</jelclass>
	<jelclass superclass="JDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JDialog" fulltype="org.gjt.sp.jedit.gui.AboutDialog" type="AboutDialog">
		<implements>
			<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
		</implements>
		<comment>
			<description>&quot;About jEdit&quot; dialog</description>
		</comment>
		<methods>
			<constructor visibility="public" name="AboutDialog">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<method visibility="public" name="actionPerformed" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.gui.AbstractContextOptionPane" type="AbstractContextOptionPane">
		<comment>
			<description>An abstract base class for context menu editors. Provides the base
 UI and functionality for creating a context menu populated with
 jEdit actions.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: AbstractContextOptionPane.java 21772 2012-06-08 19:43:00Z jarekczek $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre13</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="AbstractContextOptionPane">
				<comment>
					<description>Constructor that takes a name as an argument, for use by
 subclasses.</description>
					<attribute name="@param">
						<description>name    Name of the option pane.</description>
					</attribute>
					<attribute name="@param">
						<description>caption String to use as the caption of the context menu
                configuration list.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="Name of the option pane." fulltype="java.lang.String" type="String" />
					<param name="caption" comment="String to use as the caption of the context menu
                configuration list." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="protected" name="AbstractContextOptionPane">
				<comment>
					<description>Constructor that takes a name as an argument, for use by
 subclasses.</description>
					<attribute name="@param">
						<description>name    Name of the option pane.</description>
					</attribute>
					<attribute name="@param">
						<description>caption String to use as the caption of the context menu
                configuration list.</description>
					</attribute>
					<attribute name="@param">
						<description>actionContext the actionContext</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="Name of the option pane." fulltype="java.lang.String" type="String" />
					<param name="caption" comment="String to use as the caption of the context menu
                configuration list." fulltype="java.lang.String" type="String" />
					<param name="actionContext" comment="the actionContext" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
				</params>
			</constructor>
			<method visibility="protected" name="_init" fulltype="void" type="void">
				<comment>
					<description>Initializes the pane&apos;s UI.</description>
				</comment>
			</method>
			<method abstract="true" visibility="protected" name="getContextMenu" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the context menu to be edited. The default implementation
 returns jEdit&apos;s context menu. Subclasses overriding this method
 should also override {@link #saveContextMenu(String menu) saveContextMenu}.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="protected" name="saveContextMenu" fulltype="void" type="void">
				<comment>
					<description>Saves the context menu configuration.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="menu" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="addButton" fulltype="void" type="void">
				<comment>
					<description>Adds a widget to the &quot;buttons&quot; panel at the bottom. The component
 will be added at the very right of the button row (separated from
 the normal buttons).</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="c" fulltype="javax.swing.JComponent" type="JComponent" />
				</params>
			</method>
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JToolBar" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JToolBar" fulltype="org.gjt.sp.jedit.gui.ActionBar" type="ActionBar">
		<comment>
			<description>Action invocation bar.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ActionBar">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="temp" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="getField" fulltype="org.gjt.sp.jedit.gui.HistoryTextField" type="HistoryTextField" />
			<method visibility="public" name="goToActionBar" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JDialog" fulltype="org.gjt.sp.jedit.gui.AddAbbrevDialog" type="AddAbbrevDialog">
		<comment>
			<description>Dialog displayed when expanding an unknown abbreviation</description>
		</comment>
		<methods>
			<constructor visibility="public" name="AddAbbrevDialog">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="abbrev" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="ImageIcon" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.ImageIcon" fulltype="org.gjt.sp.jedit.gui.AnimatedIcon" type="AnimatedIcon">
		<comment>
			<description>A Animated version of ImageIcon.

 It can be used anywhere an ImageIcon can be.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="AnimatedIcon">
				<comment>
					<attribute name="@param">
						<description>frames The frames to be used in the animation</description>
					</attribute>
					<attribute name="@param">
						<description>rate The frame rate of the animation, in frames per second</description>
					</attribute>
					<attribute name="@param">
						<description>host The container that the animation is used in</description>
					</attribute>
				</comment>
				<params>
					<param name="icon" fulltype="java.awt.Image" type="Image" />
					<param name="frames" comment="The frames to be used in the animation" fulltype="java.awt.Image[]" type="Image" />
					<param name="rate" comment="The frame rate of the animation, in frames per second" fulltype="int" type="int" />
					<param name="host" comment="The container that the animation is used in" fulltype="java.awt.Component" type="Component" />
				</params>
			</constructor>
			<method visibility="public" name="getFrames" fulltype="java.awt.Image[]" type="Image" />
			<method visibility="public" name="getIcon" fulltype="java.awt.Image" type="Image" />
			<method visibility="public" name="getRate" fulltype="int" type="int" />
			<method visibility="public" name="setFrames" fulltype="void" type="void">
				<params>
					<param name="frames" fulltype="java.awt.Image[]" type="Image" />
				</params>
			</method>
			<method visibility="public" name="setIcon" fulltype="void" type="void">
				<params>
					<param name="icon" fulltype="java.awt.Image" type="Image" />
				</params>
			</method>
			<method visibility="public" name="setRate" fulltype="void" type="void">
				<params>
					<param name="rate" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="start" fulltype="void" type="void">
				<comment>
					<description>Starts the animation rolling</description>
				</comment>
			</method>
			<method visibility="public" name="stop" fulltype="void" type="void">
				<comment>
					<description>Stops the animation, and resets to frame 0</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="TextAreaDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.TextAreaDialog" fulltype="org.gjt.sp.jedit.gui.BeanShellErrorDialog" type="BeanShellErrorDialog">
		<comment>
			<description>A dialog box showing a stack trace. Perhaps badly named, since any error, not just a BeanShell error can be shown.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BeanShellErrorDialog.java 21502 2012-03-29 17:19:44Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BeanShellErrorDialog">
				<params>
					<param name="frame" fulltype="java.awt.Frame" type="Frame" />
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="BeanShellErrorDialog">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.BufferOptions" type="BufferOptions">
		<comment>
			<description>Buffer-specific options dialog.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferOptions.java 21502 2012-03-29 17:19:44Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferOptions">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</constructor>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JComboBox" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JComboBox" fulltype="org.gjt.sp.jedit.gui.BufferSwitcher" type="BufferSwitcher">
		<comment>
			<description>BufferSwitcher class</description>
			<attribute name="@version">
				<description>$Id: BufferSwitcher.java 20764 2012-01-12 21:05:23Z jarekczek $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferSwitcher">
				<params>
					<param name="editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
				</params>
			</constructor>
			<method visibility="public" name="updateBufferList" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.CloseDialog" type="CloseDialog">
		<comment>
			<description>Close all buffers dialog</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="CloseDialog">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<constructor visibility="public" name="CloseDialog">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffers" fulltype="java.util.Collection" type="Collection" />
				</params>
			</constructor>
			<method visibility="public" name="isOK" fulltype="boolean" type="boolean" />
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JButton" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JButton" fulltype="org.gjt.sp.jedit.gui.ColorWellButton" type="ColorWellButton">
		<comment>
			<description>A button that, when clicked, shows a color chooser.

 You can get and set the currently selected color using
 {@link #getSelectedColor()} and {@link #setSelectedColor(Color)}.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ColorWellButton.java 21502 2012-03-29 17:19:44Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ColorWellButton">
				<params>
					<param name="color" fulltype="java.awt.Color" type="Color" />
				</params>
			</constructor>
			<method visibility="public" name="getSelectedColor" fulltype="java.awt.Color" type="Color" />
			<method visibility="public" name="setSelectedColor" fulltype="void" type="void">
				<params>
					<param name="color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="CompletionPopup" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.CompletionPopup" fulltype="org.gjt.sp.jedit.gui.CompleteWord" type="CompleteWord">
		<comment>
			<description>A word completion popup.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="CompleteWord">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="word" fulltype="java.lang.String" type="String" />
					<param name="completions" fulltype="org.gjt.sp.jedit.gui.CompleteWord.Completion[]" type="CompleteWord.Completion" />
					<param name="location" fulltype="java.awt.Point" type="Point" />
					<param name="noWordSep" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="completeWord" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="protected" name="keyPressed" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method visibility="protected" name="keyTyped" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JWindow" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JWindow" fulltype="org.gjt.sp.jedit.gui.CompletionPopup" type="CompletionPopup">
		<comment>
			<description>Popup window for word completion in text area.
 This class provides basic UI of completion popup.</description>
			<attribute name="@since">
				<description>jEdit 4.3pre11</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="CompletionPopup">
				<comment>
					<description>Create a completion popup.
 It is not shown until reset() method is called with valid
 candidates. All key events for the view are intercepted by
 this popup untill end of completion.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<constructor visibility="public" name="CompletionPopup">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="location" fulltype="java.awt.Point" type="Point" />
				</params>
			</constructor>
			<method visibility="public" name="dispose" fulltype="void" type="void">
				<comment>
					<description>Quit completion.</description>
				</comment>
			</method>
			<method visibility="public" name="reset" fulltype="void" type="void">
				<comment>
					<description>Start completion.</description>
					<attribute name="@param">
						<description>candidates The candidates of this completion</description>
					</attribute>
					<attribute name="@param">
						<description>active Set focus to the popup</description>
					</attribute>
				</comment>
				<params>
					<param name="candidates" comment="The candidates of this completion" fulltype="org.gjt.sp.jedit.gui.CompletionPopup.Candidates" type="CompletionPopup.Candidates" />
					<param name="active" comment="Set focus to the popup" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getCandidates" fulltype="org.gjt.sp.jedit.gui.CompletionPopup.Candidates" type="CompletionPopup.Candidates">
				<comment>
					<description>Current candidates of completion.</description>
				</comment>
			</method>
			<method visibility="public" name="getSelectedIndex" fulltype="int" type="int">
				<comment>
					<description>Returns index of current selection.
 Returns -1 if nothing is selected.</description>
				</comment>
			</method>
			<method visibility="public" name="setSelectedIndex" fulltype="void" type="void">
				<comment>
					<description>Set selection.</description>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="doSelectedCompletion" fulltype="boolean" type="boolean">
				<comment>
					<description>Do completion with current selection and quit.</description>
				</comment>
			</method>
			<method visibility="protected" name="keyPressed" fulltype="void" type="void">
				<comment>
					<description>Handle key pressed events.
 Override this method to make additional key handing.</description>
				</comment>
				<params>
					<param name="e" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method visibility="protected" name="keyTyped" fulltype="void" type="void">
				<comment>
					<description>Handle key typed events.
 Override this method to make additional key handing.</description>
				</comment>
				<params>
					<param name="e" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
		</methods>
		<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui" interface="true" fulltype="org.gjt.sp.jedit.gui.CompletionPopup.Candidates" type="CompletionPopup.Candidates">
			<comment>
				<description>Candidates of completion.</description>
			</comment>
			<methods>
				<method visibility="public" name="getSize" fulltype="int" type="int">
					<comment>
						<description>Returns the number of candidates.</description>
					</comment>
				</method>
				<method visibility="public" name="isValid" fulltype="boolean" type="boolean">
					<comment>
						<description>Returns whether this completion is still valid.</description>
					</comment>
				</method>
				<method visibility="public" name="complete" fulltype="void" type="void">
					<comment>
						<description>Do the completion.</description>
					</comment>
					<params>
						<param name="index" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="getCellRenderer" fulltype="java.awt.Component" type="Component">
					<comment>
						<description>Returns a component to render a cell for the index
 in the popup.</description>
					</comment>
					<params>
						<param name="list" fulltype="javax.swing.JList" type="JList" />
						<param name="index" fulltype="int" type="int" />
						<param name="isSelected" fulltype="boolean" type="boolean" />
						<param name="cellHasFocus" fulltype="boolean" type="boolean" />
					</params>
				</method>
				<method visibility="public" name="getDescription" fulltype="java.lang.String" type="String">
					<comment>
						<description>Returns a description text shown when the index is
 selected in the popup, or null if no description is
 available.</description>
					</comment>
					<params>
						<param name="index" fulltype="int" type="int" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui" interface="true" fulltype="org.gjt.sp.jedit.gui.CompletionPopup.Candidates" type="CompletionPopup.Candidates">
		<comment>
			<description>Candidates of completion.</description>
		</comment>
		<methods>
			<method visibility="public" name="getSize" fulltype="int" type="int">
				<comment>
					<description>Returns the number of candidates.</description>
				</comment>
			</method>
			<method visibility="public" name="isValid" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns whether this completion is still valid.</description>
				</comment>
			</method>
			<method visibility="public" name="complete" fulltype="void" type="void">
				<comment>
					<description>Do the completion.</description>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getCellRenderer" fulltype="java.awt.Component" type="Component">
				<comment>
					<description>Returns a component to render a cell for the index
 in the popup.</description>
				</comment>
				<params>
					<param name="list" fulltype="javax.swing.JList" type="JList" />
					<param name="index" fulltype="int" type="int" />
					<param name="isSelected" fulltype="boolean" type="boolean" />
					<param name="cellHasFocus" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getDescription" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a description text shown when the index is
 selected in the popup, or null if no description is
 available.</description>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.ContextAddDialog" type="ContextAddDialog">
		<comment>
			<description>Dialog for showing ActionSets and adding actions to context menus

 Was package private and located in AbstractContextOptionPane.java until 4.3pre16</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ContextAddDialog">
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
					<param name="actionContext" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
				</params>
			</constructor>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
			<method visibility="public" name="getSelection" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui" interface="true" fulltype="org.gjt.sp.jedit.gui.DefaultFocusComponent" type="DefaultFocusComponent">
		<comment>
			<description>An interface that provides a method for focusing on the default component.

 The file system browser implements this in order to
 focus on the file system view by default, for example.</description>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DefaultFocusComponent.java 21502 2012-03-29 17:19:44Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="focusOnDefaultComponent" fulltype="void" type="void">
				<comment>
					<description>Sets focus on the default component.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="InputHandler" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="org.gjt.sp.jedit.gui.InputHandler" fulltype="org.gjt.sp.jedit.gui.DefaultInputHandler" type="DefaultInputHandler">
		<comment>
			<description>The default input handler maps sequences of keystrokes into actions and inserts key typed events into the text area.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DefaultInputHandler.java 21502 2012-03-29 17:19:44Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DefaultInputHandler">
				<comment>
					<description>Creates a new input handler with no key bindings defined.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>bindings An explicitly-specified set of key bindings,
 must not be null.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="bindings" comment="An explicitly-specified set of key bindings,
 must not be null." fulltype="java.util.Hashtable" type="Hashtable" />
				</params>
			</constructor>
			<constructor visibility="public" name="DefaultInputHandler">
				<comment>
					<description>Creates a new input handler with no key bindings defined.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<constructor visibility="public" name="DefaultInputHandler">
				<comment>
					<description>Creates a new input handler with the same set of key bindings
 as the one specified. Note that both input handlers share
 a pointer to exactly the same key binding table; so adding
 a key binding in one will also add it to the other.</description>
					<attribute name="@param">
						<description>copy The input handler to copy key bindings from</description>
					</attribute>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="copy" comment="The input handler to copy key bindings from" fulltype="org.gjt.sp.jedit.gui.DefaultInputHandler" type="DefaultInputHandler" />
				</params>
			</constructor>
			<method visibility="public" name="isPrefixActive" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if a prefix key has been pressed.</description>
				</comment>
			</method>
			<method visibility="public" name="setCurrentBindings" fulltype="void" type="void">
				<params>
					<param name="bindings" fulltype="java.util.Hashtable" type="Hashtable" />
				</params>
			</method>
			<method visibility="public" name="handleKey" fulltype="boolean" type="boolean">
				<comment>
					<description>Handles the given keystroke.</description>
					<attribute name="@param">
						<description>keyStroke The key stroke</description>
					</attribute>
					<attribute name="@param">
						<description>dryRun only calculate the return value, do not have any other effect</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="keyStroke" comment="The key stroke" fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator.Key" type="KeyEventTranslator.Key" />
					<param name="dryRun" comment="only calculate the return value, do not have any other effect" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getSymbolicModifierName" fulltype="char" type="char">
				<comment>
					<description>Returns a the symbolic modifier name for the specified Java modifier
 flag.</description>
					<attribute name="@param">
						<description>mod A modifier constant from &lt;code&gt;InputEvent&lt;/code&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="A modifier constant from &lt;code&gt;InputEvent&lt;/code&gt;" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getModifierString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string containing symbolic modifier names set in the
 specified event.</description>
					<attribute name="@param">
						<description>evt The event</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="The event" fulltype="java.awt.event.InputEvent" type="InputEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.DockableLayout" type="DockableLayout">
		<implements>
			<interface fulltype="java.awt.LayoutManager2" type="LayoutManager2" />
		</implements>
		<comment>
			<description>A more flexible BorderLayout with dockables.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="DockableLayout" />
			<method visibility="public" name="isAlternateLayout" returncomment="true if using the &quot;alternate layout&quot;" fulltype="boolean" type="boolean">
				<comment>
					<description>jEdit View option: wide horizontal docking areas versus tall vertical docking areas</description>
					<attribute name="@return">
						<description>true if using the &quot;alternate layout&quot;</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setAlternateLayout" fulltype="void" type="void">
				<params>
					<param name="alternateLayout" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="addLayoutComponent" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="addLayoutComponent" fulltype="void" type="void">
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
					<param name="cons" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="removeLayoutComponent" fulltype="void" type="void">
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="preferredLayoutSize" fulltype="java.awt.Dimension" type="Dimension">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="minimumLayoutSize" fulltype="java.awt.Dimension" type="Dimension">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="maximumLayoutSize" fulltype="java.awt.Dimension" type="Dimension">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="layoutContainer" fulltype="void" type="void">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="getLayoutAlignmentX" fulltype="float" type="float">
				<params>
					<param name="target" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="getLayoutAlignmentY" fulltype="float" type="float">
				<params>
					<param name="target" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="invalidateLayout" fulltype="void" type="void">
				<params>
					<param name="target" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui" interface="true" fulltype="org.gjt.sp.jedit.gui.DockableWindow" type="DockableWindow">
		<comment>
			<description>An interface for notifying MOVABLE dockable windows before their docking position is changed.</description>
			<attribute name="@author">
				<description>Shlomy Reinstein</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DockableWindow.java 21502 2012-03-29 17:19:44Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre11</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="move" fulltype="void" type="void">
				<comment>
					<description>Notifies a dockable window before its docking position is changed.</description>
					<attribute name="@param">
						<description>newPosition The docking position to which the window is moving.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre11</description>
					</attribute>
				</comment>
				<params>
					<param name="newPosition" comment="The docking position to which the window is moving." fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.DockableWindowFactory" type="DockableWindowFactory">
		<comment>
			<description>Loads &lt;code&gt;dockable.xml&lt;/code&gt; files and manages creation
 of new dockable windows.</description>
			<attribute name="@see">
				<description>DockableWindowManager</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre2</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DockableWindowFactory" />
			<method static="true" synchronized="true" visibility="public" name="getInstance" fulltype="org.gjt.sp.jedit.gui.DockableWindowFactory" type="DockableWindowFactory" />
			<method visibility="public" name="loadDockableWindows" fulltype="void" type="void">
				<comment>
					<description>Plugins shouldn&apos;t need to call this method.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
					<param name="uri" fulltype="java.net.URL" type="URL" />
					<param name="cache" fulltype="org.gjt.sp.jedit.PluginJAR.PluginCacheEntry" type="PluginJAR.PluginCacheEntry" />
				</params>
			</method>
			<method visibility="public" name="unloadDockableWindows" fulltype="void" type="void">
				<comment>
					<description>Plugins shouldn&apos;t need to call this method.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
				</params>
			</method>
			<method visibility="public" name="cacheDockableWindows" fulltype="void" type="void">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
					<param name="name" fulltype="java.lang.String[]" type="String" />
					<param name="actions" fulltype="boolean[]" type="boolean" />
					<param name="movable" fulltype="boolean[]" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="registerDockableWindow" fulltype="void" type="void">
				<params>
					<param name="plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="code" fulltype="java.lang.String" type="String" />
					<param name="actions" fulltype="boolean" type="boolean" />
					<param name="movable" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getRegisteredDockableWindows" fulltype="java.lang.String[]" type="String" />
			<method visibility="public" name="getDockableWindowFactory" fulltype="org.gjt.sp.jedit.gui.DockableWindowFactory.Window" type="DockableWindowFactory.Window">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDockableWindowPluginClass" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager" type="DockableWindowManager">
		<comment>
			<description>&lt;p&gt; Keeps track of all dockable windows for a single View, and provides
 an API for getting/showing/hiding them. &lt;/p&gt;

 &lt;p&gt;Each {@link org.gjt.sp.jedit.View} has an instance of this class.&lt;/p&gt;

 &lt;p&gt;&lt;b&gt;dockables.xml:&lt;/b&gt;&lt;/p&gt;

 &lt;p&gt;Dockable window definitions are read from &lt;code&gt;dockables.xml&lt;/code&gt; files
 contained inside plugin JARs. A dockable definition file has the following
 form: &lt;/p&gt;

 &lt;pre&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;!DOCTYPE DOCKABLES SYSTEM &quot;dockables.dtd&quot;&amp;gt;
&amp;lt;DOCKABLES&amp;gt;
    &amp;lt;DOCKABLE NAME=&quot;&lt;i&gt;dockableName&lt;/i&gt;&quot; MOVABLE=&quot;TRUE|FALSE&quot;&amp;gt;
        // Code to create the dockable
    &amp;lt;/DOCKABLE&amp;gt;
&amp;lt;/DOCKABLES&amp;gt;&lt;/pre&gt;

 &lt;p&gt;The MOVABLE attribute specifies the behavior when the docking position of
 the dockable window is changed. If MOVABLE is TRUE, the existing instance of
 the dockable window is moved to the new docking position, and if the dockable
 window implements the DockableWindow interface (see {@link DockableWindow}),
 it is also notified about the change in docking position before it is moved.
 If MOVABLE is FALSE, the BeanShell code is invoked to get the instance of
 the dockable window to put in the new docking position. Typically, the
 BeanShell code returns a new instance of the dockable window, and the state
 of the existing instance is not preserved after the change. It is therefore
 recommended to set MOVABLE to TRUE for all dockables in order to make them
 preserve their state when they are moved. For backward compatibility reasons,
 this attribute is set to FALSE by default.&lt;/p&gt;
 &lt;p&gt;More than one &lt;code&gt;&amp;lt;DOCKABLE&amp;gt;&lt;/code&gt; tag may be present. The code that
 creates the dockable can reference any BeanShell built-in variable
 (see {@link org.gjt.sp.jedit.BeanShell}), along with a variable
 &lt;code&gt;position&lt;/code&gt; whose value is one of
 {@link #FLOATING}, {@link #TOP}, {@link #LEFT}, {@link #BOTTOM},
 and {@link #RIGHT}. &lt;/p&gt;

 &lt;p&gt;The following properties must be defined for each dockable window: &lt;/p&gt;

 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;&lt;i&gt;dockableName&lt;/i&gt;.title&lt;/code&gt; - the string to show on the dockable
 button. &lt;/li&gt;
 &lt;li&gt;&lt;code&gt;&lt;i&gt;dockableName&lt;/i&gt;.label&lt;/code&gt; - The string to use for generating
    menu items and action names. &lt;/li&gt;
 &lt;li&gt;&lt;code&gt;&lt;i&gt;dockableName&lt;/i&gt;.longtitle&lt;/code&gt; - (optional) the string to use
      in the dockable&apos;s floating window title (when it is floating).
       If not specified, the &lt;code&gt;&lt;i&gt;dockableName&lt;/i&gt;.title&lt;/code&gt; property is used. &lt;/li&gt;
 &lt;/ul&gt;

 A number of actions are automatically created for each dockable window:

 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;&lt;i&gt;dockableName&lt;/i&gt;&lt;/code&gt; - opens the dockable window.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;&lt;i&gt;dockableName&lt;/i&gt;-toggle&lt;/code&gt; - toggles the dockable window&apos;s visibility.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;&lt;i&gt;dockableName&lt;/i&gt;-float&lt;/code&gt; - opens the dockable window in a new
 floating window.&lt;/li&gt;
 &lt;/ul&gt;

 Note that only the first action needs a &lt;code&gt;label&lt;/code&gt; property, the
 rest have automatically-generated labels.

 &lt;p&gt; &lt;b&gt;Implementation details:&lt;/b&gt;&lt;/p&gt;

 &lt;p&gt; When an instance of this class is initialized by the {@link org.gjt.sp.jedit.View}
 class, it
 iterates through the list of registered dockable windows (from jEdit itself,
 and any loaded plugins) and
 examines options supplied by the user in the &lt;b&gt;Global
 Options&lt;/b&gt; dialog box. Any plugins designated for one of the
 four docking positions are displayed.&lt;/p&gt;

 &lt;p&gt; To create an instance of a dockable window, the &lt;code&gt;DockableWindowManager&lt;/code&gt;
 finds and executes the BeanShell code extracted from the appropriate
 &lt;code&gt;dockables.xml&lt;/code&gt; file. This code will typically consist of a call
 to the constructor of the dockable window component. The result of the
 BeanShell expression, typically a newly constructed component, is placed
 in a window managed by this class. &lt;/p&gt;</description>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.View#getDockableWindowManager()</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@author">
				<description>Shlomy Reinstein (refactoring into a base and an impl)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DockableWindowManager.java 21504 2012-03-29 17:45:22Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.6pre3</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="floating" visibility="public" name="FLOATING" constexpr="&quot;floating&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Floating position.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="top" visibility="public" name="TOP" constexpr="&quot;top&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Top position.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="left" visibility="public" name="LEFT" constexpr="&quot;left&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Left position.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="bottom" visibility="public" name="BOTTOM" constexpr="&quot;bottom&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Bottom position.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="right" visibility="public" name="RIGHT" constexpr="&quot;right&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Right position.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
			</field>
			<field visibility="protected" name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
			<field visibility="protected" name="factory" fulltype="org.gjt.sp.jedit.gui.DockableWindowFactory" type="DockableWindowFactory" />
			<field visibility="protected" name="windows" fulltype="java.util.Map" type="Map" />
		</fields>
		<methods>
			<constructor visibility="public" name="DockableWindowManager">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="instance" fulltype="org.gjt.sp.jedit.gui.DockableWindowFactory" type="DockableWindowFactory" />
					<param name="config" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig" />
				</params>
			</constructor>
			<method abstract="true" visibility="public" name="setMainPanel" fulltype="void" type="void">
				<params>
					<param name="panel" fulltype="javax.swing.JPanel" type="JPanel" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="showDockableWindow" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="hideDockableWindow" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="disposeDockableWindow" fulltype="void" type="void">
				<comment>
					<description>Completely dispose of a dockable - called when a plugin is
            unloaded, to remove all references to the its dockables.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="floatDockableWindow" fulltype="javax.swing.JComponent" type="JComponent">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="isDockableWindowDocked" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="isDockableWindowVisible" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="closeCurrentArea" fulltype="void" type="void" />
			<method abstract="true" visibility="public" name="getDockingLayout" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout">
				<params>
					<param name="config" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="getLeftDockingArea" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingArea" type="DockableWindowManager.DockingArea" />
			<method abstract="true" visibility="public" name="getRightDockingArea" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingArea" type="DockableWindowManager.DockingArea" />
			<method abstract="true" visibility="public" name="getTopDockingArea" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingArea" type="DockableWindowManager.DockingArea" />
			<method abstract="true" visibility="public" name="getBottomDockingArea" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingArea" type="DockableWindowManager.DockingArea" />
			<method visibility="public" name="init" fulltype="void" type="void" />
			<method visibility="public" name="close" fulltype="void" type="void" />
			<method visibility="public" name="applyDockingLayout" fulltype="void" type="void">
				<params>
					<param name="docking" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout" />
				</params>
			</method>
			<method visibility="public" name="addDockableWindow" fulltype="void" type="void">
				<comment>
					<description>Opens the specified dockable window. As of jEdit 4.0pre1, has the
 same effect as calling showDockableWindow().</description>
					<attribute name="@param">
						<description>name The dockable window name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The dockable window name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="removeDockableWindow" fulltype="void" type="void">
				<comment>
					<description>Hides the specified dockable window. As of jEdit 4.2pre1, has the
 same effect as calling hideDockableWindow().</description>
					<attribute name="@param">
						<description>name The dockable window name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The dockable window name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toggleDockableWindow" fulltype="void" type="void">
				<comment>
					<description>Toggles the visibility of the specified dockable window.</description>
					<attribute name="@param">
						<description>name The dockable window name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The dockable window name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDockableWindow" fulltype="javax.swing.JComponent" type="JComponent">
				<comment>
					<description>Returns the specified dockable window.

 Note that this method
 will return null if the dockable has not been added yet.
 Make sure you call {@link #addDockableWindow(String)} first.</description>
					<attribute name="@param">
						<description>name The name of the dockable window</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name of the dockable window" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toggleDockAreas" fulltype="void" type="void">
				<comment>
					<description>Hides all visible dock areas, or shows them again,
 if the last time it was a hide.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre16</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="dockableTitleChanged" fulltype="void" type="void">
				<params>
					<param name="dockable" fulltype="java.lang.String" type="String" />
					<param name="newTitle" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="closeListener" returncomment="a KeyListener you can add to that plugin&apos;s component." fulltype="java.awt.event.KeyListener" type="KeyListener">
				<comment>
					<description>The actionEvent &quot;close-docking-area&quot; by default only works on
 dockable windows that have no special keyboard handling.

 If you have dockable widgets with input widgets and/or other fancy
 keyboard handling, those components may not respond to close docking area.

 You can add key listeners to each keyboard-handling component
 in your dockable that usually has keyboard focus.

 This function creates and returns a key listener which does exactly that.
 It is also used by FloatingWindowContainer when creating new floating windows.</description>
					<attribute name="@param">
						<description>dockableName the name of your dockable</description>
					</attribute>
					<attribute name="@return">
						<description>a KeyListener you can add to that plugin&apos;s component.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="dockableName" comment="the name of your dockable" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns this dockable window manager&apos;s view.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDockable" fulltype="javax.swing.JComponent" type="JComponent">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDockableTitle" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the title of the specified dockable window.</description>
					<attribute name="@param">
						<description>name The name of the dockable window.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name of the dockable window." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setDockableTitle" fulltype="void" type="void">
				<comment>
					<description>Changes the .longtitle property of a dockable window, which corresponds to the
 title shown when it is floating (not docked). Fires a change event that makes sure
 all floating dockables change their title.</description>
					<attribute name="@param">
						<description>dockable the name of the dockable, as specified in the dockables.xml</description>
					</attribute>
					<attribute name="@param">
						<description>title the new .longtitle you want to see above it.</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="dockable" comment="the name of the dockable, as specified in the dockables.xml" fulltype="java.lang.String" type="String" />
					<param name="title" comment="the new .longtitle you want to see above it." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getRegisteredDockableWindows" fulltype="java.lang.String[]" type="String" />
			<method static="true" visibility="public" name="getDockableWindowPluginName" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setDockingLayout" fulltype="void" type="void">
				<params>
					<param name="docking" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout" />
				</params>
			</method>
			<method visibility="public" name="handleDockableWindowUpdate" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.DockableWindowUpdate" type="DockableWindowUpdate" />
				</params>
			</method>
			<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
				</params>
			</method>
			<method visibility="public" name="handlePluginUpdate" fulltype="void" type="void">
				<params>
					<param name="pmsg" fulltype="org.gjt.sp.jedit.msg.PluginUpdate" type="PluginUpdate" />
				</params>
			</method>
			<method visibility="public" name="longTitle" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="shortTitle" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="applyAlternateLayout" fulltype="void" type="void">
				<params>
					<param name="alternateLayout" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="dockableLoaded" fulltype="void" type="void">
				<params>
					<param name="dockableName" fulltype="java.lang.String" type="String" />
					<param name="position" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="dockingPositionChanged" fulltype="void" type="void">
				<params>
					<param name="dockableName" fulltype="java.lang.String" type="String" />
					<param name="oldPosition" fulltype="java.lang.String" type="String" />
					<param name="newPosition" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="getAlternateLayoutProp" fulltype="boolean" type="boolean" />
			<method visibility="protected" name="propertiesChanged" fulltype="void" type="void" />
			<method visibility="protected" name="createDockable" fulltype="javax.swing.JComponent" type="JComponent">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="getDockablePosition" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="focusDockable" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="getLongTitlePropertyName" fulltype="java.lang.String" type="String">
				<params>
					<param name="dockableName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui" interface="true" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingArea" type="DockableWindowManager.DockingArea">
			<methods>
				<method visibility="public" name="showMostRecent" fulltype="void" type="void" />
				<method visibility="public" name="getCurrent" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="show" fulltype="void" type="void">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="getDockables" fulltype="java.lang.String[]" type="String" />
			</methods>
		</jelclass>
		<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout">
			<comment>
				<description>Objects of DockingLayout class describe which dockables are docked where,
 which ones are floating, and their sizes/positions for saving/loading perspectives.</description>
			</comment>
			<fields>
				<field final="true" static="true" const="-1" visibility="public" name="NO_VIEW_INDEX" constexpr="-1" fulltype="int" type="int" />
			</fields>
			<methods>
				<constructor visibility="public" name="DockableWindowManager.DockingLayout" />
				<method abstract="true" visibility="public" name="loadLayout" fulltype="boolean" type="boolean">
					<params>
						<param name="baseName" fulltype="java.lang.String" type="String" />
						<param name="viewIndex" fulltype="int" type="int" />
					</params>
				</method>
				<method abstract="true" visibility="public" name="saveLayout" fulltype="boolean" type="boolean">
					<params>
						<param name="baseName" fulltype="java.lang.String" type="String" />
						<param name="viewIndex" fulltype="int" type="int" />
					</params>
				</method>
				<method abstract="true" visibility="public" name="getName" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="setPlainView" fulltype="void" type="void">
					<params>
						<param name="plain" fulltype="boolean" type="boolean" />
					</params>
				</method>
				<method visibility="public" name="getSavedLayouts" fulltype="java.lang.String[]" type="String" />
				<method visibility="public" name="getLayoutFilename" fulltype="java.lang.String" type="String">
					<params>
						<param name="baseName" fulltype="java.lang.String" type="String" />
						<param name="viewIndex" fulltype="int" type="int" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui" interface="true" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingArea" type="DockableWindowManager.DockingArea">
		<methods>
			<method visibility="public" name="showMostRecent" fulltype="void" type="void" />
			<method visibility="public" name="getCurrent" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="show" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDockables" fulltype="java.lang.String[]" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout">
		<comment>
			<description>Objects of DockingLayout class describe which dockables are docked where,
 which ones are floating, and their sizes/positions for saving/loading perspectives.</description>
		</comment>
		<fields>
			<field final="true" static="true" const="-1" visibility="public" name="NO_VIEW_INDEX" constexpr="-1" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="DockableWindowManager.DockingLayout" />
			<method abstract="true" visibility="public" name="loadLayout" fulltype="boolean" type="boolean">
				<params>
					<param name="baseName" fulltype="java.lang.String" type="String" />
					<param name="viewIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="saveLayout" fulltype="boolean" type="boolean">
				<params>
					<param name="baseName" fulltype="java.lang.String" type="String" />
					<param name="viewIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setPlainView" fulltype="void" type="void">
				<params>
					<param name="plain" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getSavedLayouts" fulltype="java.lang.String[]" type="String" />
			<method visibility="public" name="getLayoutFilename" fulltype="java.lang.String" type="String">
				<params>
					<param name="baseName" fulltype="java.lang.String" type="String" />
					<param name="viewIndex" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="DockableWindowManager" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.DockableWindowManager" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl" type="DockableWindowManagerImpl">
		<comment>
			<description>Manages dockable windows for a single View.

 Concrete implementation of a Dockable Window Manager.
 Aka the &quot;classic&quot; docking framework.</description>
			<attribute name="@since">
				<description>jEdit 4.3pre16</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>Shlomy Reinstein</description>
			</attribute>
			<attribute name="@version">
				<description>$Id$</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="public" name="showStack" fulltype="java.util.Stack" type="Stack" />
		</fields>
		<methods>
			<constructor visibility="public" name="DockableWindowManagerImpl">
				<comment>
					<description>Creates a new dockable window manager.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>factory A {@link DockableWindowFactory}, usually
 &lt;code&gt;DockableWindowFactory.getInstance()&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>config A docking configuration</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="factory" comment="A {@link DockableWindowFactory}, usually
 &lt;code&gt;DockableWindowFactory.getInstance()&lt;/code&gt;." fulltype="org.gjt.sp.jedit.gui.DockableWindowFactory" type="DockableWindowFactory" />
					<param name="config" comment="A docking configuration" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig" />
				</params>
			</constructor>
			<method visibility="public" name="setDockingLayout" fulltype="void" type="void">
				<params>
					<param name="docking" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout" />
				</params>
			</method>
			<method visibility="public" name="getDockingLayout" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout">
				<params>
					<param name="config" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig" />
				</params>
			</method>
			<method visibility="public" name="setMainPanel" fulltype="void" type="void">
				<params>
					<param name="panel" fulltype="javax.swing.JPanel" type="JPanel" />
				</params>
			</method>
			<method visibility="public" name="init" fulltype="void" type="void">
				<comment>
					<description>Initialises dockable window manager. Do not call this method directly.</description>
				</comment>
			</method>
			<method visibility="public" name="floatDockableWindow" returncomment="The new dockable window instance" fulltype="javax.swing.JComponent" type="JComponent">
				<comment>
					<description>Opens a new instance of the specified dockable window in a floating
 container.</description>
					<attribute name="@param">
						<description>name The dockable window name</description>
					</attribute>
					<attribute name="@return">
						<description>The new dockable window instance</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The dockable window name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="showDockableWindow" fulltype="void" type="void">
				<comment>
					<description>Opens the specified dockable window.</description>
					<attribute name="@param">
						<description>name The dockable window name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The dockable window name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="hideDockableWindow" fulltype="void" type="void">
				<comment>
					<description>Hides the specified dockable window.</description>
					<attribute name="@param">
						<description>name The dockable window name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The dockable window name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDockable" fulltype="javax.swing.JComponent" type="JComponent">
				<comment>
					<description>Returns the specified dockable window.

 Note that this method
 will return null if the dockable has not been added yet.
 Make sure you call {@link #addDockableWindow(String)} first.

 For historical reasons, this
 does the same thing as {@link #getDockableWindow(String)}.</description>
					<attribute name="@param">
						<description>name The name of the dockable window</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name of the dockable window" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="isDockableWindowVisible" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified dockable window is visible.</description>
					<attribute name="@param">
						<description>name The dockable window name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The dockable window name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="isDockableWindowDocked" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified dockable window is docked into the
 view.</description>
					<attribute name="@param">
						<description>name The dockable&apos;s name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The dockable&apos;s name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="closeCurrentArea" fulltype="void" type="void">
				<comment>
					<description>Closes the most recently focused dockable.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="close" fulltype="void" type="void">
				<comment>
					<description>Called when the view is being closed.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getTopDockingArea" fulltype="org.gjt.sp.jedit.gui.PanelWindowContainer" type="PanelWindowContainer" />
			<method visibility="public" name="getLeftDockingArea" fulltype="org.gjt.sp.jedit.gui.PanelWindowContainer" type="PanelWindowContainer" />
			<method visibility="public" name="getBottomDockingArea" fulltype="org.gjt.sp.jedit.gui.PanelWindowContainer" type="PanelWindowContainer" />
			<method visibility="public" name="getRightDockingArea" fulltype="org.gjt.sp.jedit.gui.PanelWindowContainer" type="PanelWindowContainer" />
			<method visibility="public" name="createPopupMenu" fulltype="javax.swing.JPopupMenu" type="JPopupMenu">
				<params>
					<param name="container" fulltype="org.gjt.sp.jedit.gui.DockableWindowContainer" type="DockableWindowContainer" />
					<param name="dockable" fulltype="java.lang.String" type="String" />
					<param name="clone" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="paintChildren" fulltype="void" type="void">
				<params>
					<param name="g" fulltype="java.awt.Graphics" type="Graphics" />
				</params>
			</method>
			<method visibility="public" name="handleDockableWindowUpdate" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.DockableWindowUpdate" type="DockableWindowUpdate" />
				</params>
			</method>
			<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
				</params>
			</method>
			<method visibility="public" name="handlePluginUpdate" fulltype="void" type="void">
				<params>
					<param name="pmsg" fulltype="org.gjt.sp.jedit.msg.PluginUpdate" type="PluginUpdate" />
				</params>
			</method>
			<method visibility="protected" name="propertiesChanged" fulltype="void" type="void" />
			<method visibility="public" name="disposeDockableWindow" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="DockableWindowManager.DockingLayout" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.DockableWindowConfig" type="DockableWindowManagerImpl.DockableWindowConfig">
			<fields>
				<field visibility="public" name="top" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="left" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="bottom" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="right" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="topPos" fulltype="int" type="int" />
				<field visibility="public" name="leftPos" fulltype="int" type="int" />
				<field visibility="public" name="bottomPos" fulltype="int" type="int" />
				<field visibility="public" name="rightPos" fulltype="int" type="int" />
			</fields>
			<methods>
				<constructor visibility="public" name="DockableWindowManagerImpl.DockableWindowConfig" />
				<method visibility="public" name="getPerspectiveHandler" fulltype="org.xml.sax.helpers.DefaultHandler" type="DefaultHandler" />
				<method visibility="public" name="saveLayout" fulltype="boolean" type="boolean">
					<params>
						<param name="baseName" fulltype="java.lang.String" type="String" />
						<param name="viewIndex" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="loadLayout" fulltype="boolean" type="boolean">
					<params>
						<param name="baseName" fulltype="java.lang.String" type="String" />
						<param name="viewIndex" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			</methods>
			<jelclass superclass="DefaultHandler" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="org.xml.sax.helpers.DefaultHandler" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.DockableWindowConfig.PerspectiveHandler" type="DockableWindowManagerImpl.DockableWindowConfig.PerspectiveHandler">
				<methods>
					<constructor visibility="public" name="DockableWindowManagerImpl.DockableWindowConfig.PerspectiveHandler" />
					<method visibility="public" name="startElement" fulltype="void" type="void">
						<params>
							<param name="uri" fulltype="java.lang.String" type="String" />
							<param name="localName" fulltype="java.lang.String" type="String" />
							<param name="qName" fulltype="java.lang.String" type="String" />
							<param name="attrs" fulltype="org.xml.sax.Attributes" type="Attributes" />
						</params>
					</method>
				</methods>
			</jelclass>
		</jelclass>
	</jelclass>
	<jelclass superclass="DockableWindowManager.DockingLayout" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.DockableWindowConfig" type="DockableWindowManagerImpl.DockableWindowConfig">
		<fields>
			<field visibility="public" name="top" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="left" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="bottom" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="right" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="topPos" fulltype="int" type="int" />
			<field visibility="public" name="leftPos" fulltype="int" type="int" />
			<field visibility="public" name="bottomPos" fulltype="int" type="int" />
			<field visibility="public" name="rightPos" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="DockableWindowManagerImpl.DockableWindowConfig" />
			<method visibility="public" name="getPerspectiveHandler" fulltype="org.xml.sax.helpers.DefaultHandler" type="DefaultHandler" />
			<method visibility="public" name="saveLayout" fulltype="boolean" type="boolean">
				<params>
					<param name="baseName" fulltype="java.lang.String" type="String" />
					<param name="viewIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="loadLayout" fulltype="boolean" type="boolean">
				<params>
					<param name="baseName" fulltype="java.lang.String" type="String" />
					<param name="viewIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
		</methods>
		<jelclass superclass="DefaultHandler" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="org.xml.sax.helpers.DefaultHandler" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.DockableWindowConfig.PerspectiveHandler" type="DockableWindowManagerImpl.DockableWindowConfig.PerspectiveHandler">
			<methods>
				<constructor visibility="public" name="DockableWindowManagerImpl.DockableWindowConfig.PerspectiveHandler" />
				<method visibility="public" name="startElement" fulltype="void" type="void">
					<params>
						<param name="uri" fulltype="java.lang.String" type="String" />
						<param name="localName" fulltype="java.lang.String" type="String" />
						<param name="qName" fulltype="java.lang.String" type="String" />
						<param name="attrs" fulltype="org.xml.sax.Attributes" type="Attributes" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="DefaultHandler" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="org.xml.sax.helpers.DefaultHandler" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.DockableWindowConfig.PerspectiveHandler" type="DockableWindowManagerImpl.DockableWindowConfig.PerspectiveHandler">
		<methods>
			<constructor visibility="public" name="DockableWindowManagerImpl.DockableWindowConfig.PerspectiveHandler" />
			<method visibility="public" name="startElement" fulltype="void" type="void">
				<params>
					<param name="uri" fulltype="java.lang.String" type="String" />
					<param name="localName" fulltype="java.lang.String" type="String" />
					<param name="qName" fulltype="java.lang.String" type="String" />
					<param name="attrs" fulltype="org.xml.sax.Attributes" type="Attributes" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerProvider" type="DockableWindowManagerProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.DockingFrameworkProvider" type="DockingFrameworkProvider" />
		</implements>
		<comment>
			<description>jEdit&apos;s classic dockable window manager, turned into a &quot;provider&quot; service.</description>
			<attribute name="@author">
				<description>Shlomy Reinstein</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre16</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DockableWindowManagerProvider" />
			<method visibility="public" name="create" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager" type="DockableWindowManager">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="instance" fulltype="org.gjt.sp.jedit.gui.DockableWindowFactory" type="DockableWindowFactory" />
					<param name="config" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig" />
				</params>
			</method>
			<method visibility="public" name="createDockingLayout" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui" interface="true" fulltype="org.gjt.sp.jedit.gui.DockingFrameworkProvider" type="DockingFrameworkProvider">
		<comment>
			<description>Base interface for the Docking Framework Provider service.

  Plugins such as MyDoggy can offer an alternate docking framework
  by offering a service that creates an instance of one of these.
  For an example, see jEdit&apos;s own services.xml, which  provides jEdit&apos;s classic
  docking framework via the class DockableWindowManagerProvider.</description>
			<attribute name="@since">
				<description>jEdit 4.3pre16</description>
			</attribute>
			<attribute name="@author">
				<description>Shlomy Reinstein</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="create" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager" type="DockableWindowManager">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="instance" fulltype="org.gjt.sp.jedit.gui.DockableWindowFactory" type="DockableWindowFactory" />
					<param name="config" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig" />
				</params>
			</method>
			<method visibility="public" name="createDockingLayout" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.DockingLayoutManager" type="DockingLayoutManager">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
		</implements>
		<comment>
			<description>Saves and loads dockable layouts to disk</description>
			<attribute name="@author">
				<description>Shlomy Reinstein</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre16</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="saveAs" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="load" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="init" fulltype="void" type="void" />
			<method static="true" visibility="public" name="removeActions" fulltype="void" type="void" />
			<method visibility="public" name="handleMessage" fulltype="void" type="void">
				<params>
					<param name="message" fulltype="org.gjt.sp.jedit.EBMessage" type="EBMessage" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadCurrentModeLayout" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveCurrentModeLayout" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.DynamicContextMenuService" type="DynamicContextMenuService">
		<comment>
			<description>&lt;p&gt; A service that can be offered by plugins when a text area context menu item
 needs to be offered  that is sensitive to the state of the TextArea it was requested * from. &lt;/p&gt;

 Note: this service should only be used by certain plugins that need context information at the time
 that the context menu is requested. For all other actions, it is already possible for users to
 add menu items to the context menu, so please do not use this service from Plugins
 to add non-dynamic actions to the context menu.</description>
			<attribute name="@author">
				<description>ezust</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre15</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DynamicContextMenuService" />
			<method abstract="true" visibility="public" name="createMenu" returncomment="an array of menu items
         or null if there are no appropriate actions to be added at this time" fulltype="javax.swing.JMenuItem[]" type="JMenuItem">
				<comment>
					<attribute name="@param">
						<description>ta the TextArea where the context menu was requested.
 	   Use this to determine the location of the caret, or the edit mode of the buffer, etc.</description>
					</attribute>
					<attribute name="@param">
						<description>evt a mouseEvent that triggered this menu request, or null</description>
					</attribute>
					<attribute name="@return">
						<description>an array of menu items
         or null if there are no appropriate actions to be added at this time</description>
					</attribute>
				</comment>
				<params>
					<param name="ta" comment="the TextArea where the context menu was requested.
 	   Use this to determine the location of the caret, or the edit mode of the buffer, etc." fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea" />
					<param name="evt" comment="a mouseEvent that triggered this menu request, or null" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JDialog" fulltype="org.gjt.sp.jedit.gui.EditAbbrevDialog" type="EditAbbrevDialog">
		<comment>
			<description>Displayed when editing abbrevs</description>
		</comment>
		<methods>
			<constructor visibility="public" name="EditAbbrevDialog">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="frame" fulltype="java.awt.Frame" type="Frame" />
					<param name="abbrev" fulltype="java.lang.String" type="String" />
					<param name="expansion" fulltype="java.lang.String" type="String" />
					<param name="abbrevs" fulltype="java.util.Map" type="Map" />
				</params>
			</constructor>
			<constructor visibility="public" name="EditAbbrevDialog">
				<params>
					<param name="dialog" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="abbrev" fulltype="java.lang.String" type="String" />
					<param name="expansion" fulltype="java.lang.String" type="String" />
					<param name="abbrevs" fulltype="java.util.Map" type="Map" />
				</params>
			</constructor>
			<method visibility="public" name="getAbbrev" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getExpansion" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="RolloverButton" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.RolloverButton" fulltype="org.gjt.sp.jedit.gui.EnhancedButton" type="EnhancedButton">
		<comment>
			<description>A toolbar button</description>
		</comment>
		<methods>
			<constructor visibility="public" name="EnhancedButton">
				<params>
					<param name="icon" fulltype="javax.swing.Icon" type="Icon" />
					<param name="toolTip" fulltype="java.lang.String" type="String" />
					<param name="action" fulltype="java.lang.String" type="String" />
					<param name="context" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
				</params>
			</constructor>
			<method visibility="public" name="isFocusTraversable" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="JDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JDialog" fulltype="org.gjt.sp.jedit.gui.EnhancedDialog" type="EnhancedDialog">
		<comment>
			<description>Dialog that handles OK/Cancel for you

 A dialog box that handles window closing, the ENTER key and the ESCAPE
 key for you. All you have to do is implement ok() (called when
 Enter is pressed) and cancel() (called when Escape is pressed, or window
 is closed).</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EnhancedDialog.java 21502 2012-03-29 17:19:44Z ezust $</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="keyHandler" fulltype="org.gjt.sp.jedit.gui.EnhancedDialog.KeyHandler" type="EnhancedDialog.KeyHandler" />
			<field visibility="protected" name="enterEnabled" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="public" name="EnhancedDialog">
				<params>
					<param name="parent" fulltype="java.awt.Frame" type="Frame" />
					<param name="title" fulltype="java.lang.String" type="String" />
					<param name="modal" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="EnhancedDialog">
				<params>
					<param name="parent" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="title" fulltype="java.lang.String" type="String" />
					<param name="modal" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="getEnterEnabled" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setEnterEnabled" fulltype="void" type="void">
				<params>
					<param name="enterEnabled" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="ok" fulltype="void" type="void" />
			<method abstract="true" visibility="public" name="cancel" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.ErrorListDialog" type="ErrorListDialog">
		<comment>
			<description>Used to list I/O and plugin load errors</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ErrorListDialog">
				<params>
					<param name="frame" fulltype="java.awt.Frame" type="Frame" />
					<param name="title" fulltype="java.lang.String" type="String" />
					<param name="caption" fulltype="java.lang.String" type="String" />
					<param name="messages" fulltype="java.util.Vector" type="Vector" />
					<param name="pluginError" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.ErrorListDialog.ErrorEntry" type="ErrorListDialog.ErrorEntry">
			<methods>
				<constructor visibility="public" name="ErrorListDialog.ErrorEntry">
					<comment>
						<description>An entry with default urgency &lt;code&gt;Log.ERROR&lt;/code&gt;</description>
					</comment>
					<params>
						<param name="path" fulltype="java.lang.String" type="String" />
						<param name="messageProp" fulltype="java.lang.String" type="String" />
						<param name="args" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</constructor>
				<constructor visibility="public" name="ErrorListDialog.ErrorEntry">
					<comment>
						<attribute name="@since">
							<description>5.0pre1</description>
						</attribute>
					</comment>
					<params>
						<param name="path" fulltype="java.lang.String" type="String" />
						<param name="messageProp" fulltype="java.lang.String" type="String" />
						<param name="args" fulltype="java.lang.Object[]" type="Object" />
						<param name="urgency" fulltype="int" type="int" />
					</params>
				</constructor>
				<method visibility="public" name="equals" fulltype="boolean" type="boolean">
					<params>
						<param name="o" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
		<jelclass superclass="JTextPane" visibility="protected" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JTextPane" fulltype="org.gjt.sp.jedit.gui.ErrorListDialog.JTextPaneSized" type="ErrorListDialog.JTextPaneSized">
			<comment>
				<description>This text pane sets its size to a constant amount of 80x25 chars,
            when used inside a scrollpane.</description>
			</comment>
			<methods>
				<constructor visibility="protected" name="ErrorListDialog.JTextPaneSized" />
				<method visibility="public" name="getPreferredScrollableViewportSize" fulltype="java.awt.Dimension" type="Dimension" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.ErrorListDialog.ErrorEntry" type="ErrorListDialog.ErrorEntry">
		<methods>
			<constructor visibility="public" name="ErrorListDialog.ErrorEntry">
				<comment>
					<description>An entry with default urgency &lt;code&gt;Log.ERROR&lt;/code&gt;</description>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="messageProp" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</constructor>
			<constructor visibility="public" name="ErrorListDialog.ErrorEntry">
				<comment>
					<attribute name="@since">
						<description>5.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="messageProp" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.Object[]" type="Object" />
					<param name="urgency" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="JTextPane" visibility="protected" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JTextPane" fulltype="org.gjt.sp.jedit.gui.ErrorListDialog.JTextPaneSized" type="ErrorListDialog.JTextPaneSized">
		<comment>
			<description>This text pane sets its size to a constant amount of 80x25 chars,
            when used inside a scrollpane.</description>
		</comment>
		<methods>
			<constructor visibility="protected" name="ErrorListDialog.JTextPaneSized" />
			<method visibility="public" name="getPreferredScrollableViewportSize" fulltype="java.awt.Dimension" type="Dimension" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.ExtendedGridLayout" type="ExtendedGridLayout">
		<implements>
			<interface fulltype="java.awt.LayoutManager2" type="LayoutManager2" />
		</implements>
		<comment>
			<description>&lt;p&gt;A layout manager that places components in a rectangular grid
 with variable cell sizes that supports colspans and rowspans. &lt;/p&gt;

 &lt;p&gt; The container is divided into rectangles, and each component is placed
 in a rectangular space defined by its colspan and rowspan.
 Each row is as large as the largest component in
 that row, and each column is as wide as the widest component in
 that column. &lt;/p&gt;
 &lt;p&gt;
 This behavior is similar to
 &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/awt/GridLayout.html&quot;&gt;{@code java.awt.GridLayout}&lt;/a&gt;
 but it supports different row heights and
 column widths for each row/column. &lt;/p&gt;
 &lt;p&gt;
 For example, the following is a Dialog that lays out ten buttons
 exactly the same as in the example of the JavaDoc of
 &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/awt/GridBagLayout.html&quot;&gt;{@code java.awt.GridBagLayout}&lt;/a&gt;
 with the difference of vertical and horizontal gaps that can be configured:
 &lt;hr&gt;
 &lt;blockquote&gt;&lt;pre&gt;&lt;font color=&quot;#000000&quot;&gt;
 &lt;font color=&quot;#000000&quot;&gt;   1:&lt;/font&gt;&lt;font color=&quot;#009966&quot;&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/font&gt; java.awt.Button;
 &lt;font color=&quot;#000000&quot;&gt;   2:&lt;/font&gt;&lt;font color=&quot;#009966&quot;&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/font&gt; java.awt.Dimension;
 &lt;font color=&quot;#000000&quot;&gt;   3:&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;   4:&lt;/font&gt;&lt;font color=&quot;#009966&quot;&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/font&gt; javax.swing.JDialog;
 &lt;font color=&quot;#990066&quot;&gt;   5:&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;   6:&lt;/font&gt;&lt;font color=&quot;#009966&quot;&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/font&gt; org.gjt.sp.jedit.gui.ExtendedGridLayout;
 &lt;font color=&quot;#000000&quot;&gt;   7:&lt;/font&gt;&lt;font color=&quot;#009966&quot;&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/font&gt; org.gjt.sp.jedit.gui.ExtendedGridLayoutConstraints;
 &lt;font color=&quot;#000000&quot;&gt;   8:&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;   9:&lt;/font&gt;&lt;font color=&quot;#009966&quot;&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/font&gt; org.gjt.sp.jedit.gui.ExtendedGridLayoutConstraints.REMAINDER;
 &lt;font color=&quot;#990066&quot;&gt;  10:&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;  11:&lt;/font&gt;&lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#0099ff&quot;&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;/font&gt; ExampleDialog &lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;extends&lt;/strong&gt;&lt;/font&gt; JDialog &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;  12:&lt;/font&gt;    &lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;ExampleDialog&lt;/font&gt;() &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;  13:&lt;/font&gt;        &lt;font color=&quot;#cc00cc&quot;&gt;super&lt;/font&gt;(&lt;font color=&quot;#cc00cc&quot;&gt;null&lt;/font&gt;,&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Example&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt; &lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Dialog&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;,&lt;font color=&quot;#cc00cc&quot;&gt;true&lt;/font&gt;);
 &lt;font color=&quot;#000000&quot;&gt;  14:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;setLayout&lt;/font&gt;(&lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;ExtendedGridLayout&lt;/font&gt;(&lt;font color=&quot;#ff0000&quot;&gt;5&lt;/font&gt;,&lt;font color=&quot;#ff0000&quot;&gt;5&lt;/font&gt;,&lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;Insets&lt;/font&gt;(&lt;font color=&quot;#ff0000&quot;&gt;5&lt;/font&gt;,&lt;font color=&quot;#ff0000&quot;&gt;5&lt;/font&gt;,&lt;font color=&quot;#ff0000&quot;&gt;5&lt;/font&gt;,&lt;font color=&quot;#ff0000&quot;&gt;5&lt;/font&gt;)));
 &lt;font color=&quot;#990066&quot;&gt;  15:&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;  16:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;add&lt;/font&gt;(&lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Button1&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;));
 &lt;font color=&quot;#000000&quot;&gt;  17:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;add&lt;/font&gt;(&lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Button2&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;));
 &lt;font color=&quot;#000000&quot;&gt;  18:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;add&lt;/font&gt;(&lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Button3&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;));
 &lt;font color=&quot;#000000&quot;&gt;  19:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;add&lt;/font&gt;(&lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Button4&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;));
 &lt;font color=&quot;#990066&quot;&gt;  20:&lt;/font&gt;        Button button &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Button5&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;);
 &lt;font color=&quot;#000000&quot;&gt;  21:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;add&lt;/font&gt;(button,&lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;ExtendedGridLayoutConstraints&lt;/font&gt;(&lt;font color=&quot;#ff0000&quot;&gt;1&lt;/font&gt;,REMAINDER,&lt;font color=&quot;#ff0000&quot;&gt;1&lt;/font&gt;,button));
 &lt;font color=&quot;#000000&quot;&gt;  22:&lt;/font&gt;        button &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Button6&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;);
 &lt;font color=&quot;#000000&quot;&gt;  23:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;add&lt;/font&gt;(button,&lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;ExtendedGridLayoutConstraints&lt;/font&gt;(&lt;font color=&quot;#ff0000&quot;&gt;2&lt;/font&gt;,&lt;font color=&quot;#ff0000&quot;&gt;3&lt;/font&gt;,&lt;font color=&quot;#ff0000&quot;&gt;1&lt;/font&gt;,button));
 &lt;font color=&quot;#000000&quot;&gt;  24:&lt;/font&gt;        button &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Button7&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;);
 &lt;font color=&quot;#990066&quot;&gt;  25:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;add&lt;/font&gt;(button,&lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;ExtendedGridLayoutConstraints&lt;/font&gt;(&lt;font color=&quot;#ff0000&quot;&gt;2&lt;/font&gt;,button));
 &lt;font color=&quot;#000000&quot;&gt;  26:&lt;/font&gt;        button &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Button8&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;);
 &lt;font color=&quot;#000000&quot;&gt;  27:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;add&lt;/font&gt;(button,&lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;ExtendedGridLayoutConstraints&lt;/font&gt;(&lt;font color=&quot;#ff0000&quot;&gt;3&lt;/font&gt;,&lt;font color=&quot;#ff0000&quot;&gt;1&lt;/font&gt;,&lt;font color=&quot;#ff0000&quot;&gt;2&lt;/font&gt;,button));
 &lt;font color=&quot;#000000&quot;&gt;  28:&lt;/font&gt;        button &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Button9&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;);
 &lt;font color=&quot;#000000&quot;&gt;  29:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;add&lt;/font&gt;(button,&lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;ExtendedGridLayoutConstraints&lt;/font&gt;(&lt;font color=&quot;#ff0000&quot;&gt;3&lt;/font&gt;,&lt;font color=&quot;#ff0000&quot;&gt;3&lt;/font&gt;,&lt;font color=&quot;#ff0000&quot;&gt;1&lt;/font&gt;,button));
 &lt;font color=&quot;#990066&quot;&gt;  30:&lt;/font&gt;        button &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;Button10&lt;/font&gt;&lt;font color=&quot;#ff00cc&quot;&gt;&amp;quot;&lt;/font&gt;);
 &lt;font color=&quot;#000000&quot;&gt;  31:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;add&lt;/font&gt;(button,&lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;ExtendedGridLayoutConstraints&lt;/font&gt;(&lt;font color=&quot;#ff0000&quot;&gt;4&lt;/font&gt;,REMAINDER,&lt;font color=&quot;#ff0000&quot;&gt;1&lt;/font&gt;,button));
 &lt;font color=&quot;#000000&quot;&gt;  32:&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;  33:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;pack&lt;/font&gt;();
 &lt;font color=&quot;#000000&quot;&gt;  34:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;setLocationRelativeTo&lt;/font&gt;(&lt;font color=&quot;#cc00cc&quot;&gt;null&lt;/font&gt;);
 &lt;font color=&quot;#990066&quot;&gt;  35:&lt;/font&gt;        &lt;font color=&quot;#9966ff&quot;&gt;setVisible&lt;/font&gt;(&lt;font color=&quot;#cc00cc&quot;&gt;true&lt;/font&gt;);
 &lt;font color=&quot;#000000&quot;&gt;  36:&lt;/font&gt;    &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;  37:&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;  38:&lt;/font&gt;    &lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;private&lt;/strong&gt;&lt;/font&gt; Button &lt;font color=&quot;#9966ff&quot;&gt;makeButton&lt;/font&gt;(String name) &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;  39:&lt;/font&gt;        Button button &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;Button&lt;/font&gt;(name);
 &lt;font color=&quot;#990066&quot;&gt;  40:&lt;/font&gt;        button.&lt;font color=&quot;#9966ff&quot;&gt;setMaximumSize&lt;/font&gt;(&lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/font&gt; &lt;font color=&quot;#9966ff&quot;&gt;Dimension&lt;/font&gt;(Integer.MAX_VALUE,Integer.MAX_VALUE));
 &lt;font color=&quot;#000000&quot;&gt;  41:&lt;/font&gt;        &lt;font color=&quot;#006699&quot;&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/font&gt; button;
 &lt;font color=&quot;#000000&quot;&gt;  42:&lt;/font&gt;    &lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/font&gt;
 &lt;font color=&quot;#000000&quot;&gt;  43:&lt;/font&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/font&gt;
 &lt;/font&gt;&lt;/pre&gt;&lt;/blockquote&gt;
 &lt;hr&gt;
 If you use {@code REMAINDER} as colspan or rowspan then a component takes
 up the remaining space in that column or row. Any additional components in
 a row are ignored and not displayed. Additional components in a column are
 moved rightside. If a rowspan hits a colspan, the colspan ends and the
 rowspan takes precedence.
 &lt;p&gt;
 Components for which {@code isVisible() == false} are ignored. Because
 of this, components can be replaced &quot;in-place&quot; by adding two components next to
 each other, with different {@code isVisible()} values, and toggling the
 {@code setVisible()} values of both when we wish to swap the currently
 visible component with the one that is hidden. &lt;/p&gt;

 &lt;p&gt;
 If you want to reserve free space in a row inbetween components,
 add a &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/javax/swing/Box.Filler.html&quot;&gt;{@code javax.swing.Box.Filler}&lt;/a&gt;
 to the layout if the free space is in the middle of a row,
 or just don&apos;t add components if the free space
 should be at the end of a row.&lt;/p&gt;
 &lt;p&gt;
 If a row is taller, or a column is wider than the {@code maximumSize} of a component,
 the component is resized to its maximum size and aligned according to its
 {@code alignmentX} and {@code alignmentY} values. &lt;/p&gt;
 &lt;p&gt;
 One instance of this class can be used to layout multiple
 containers at the same time. &lt;/p&gt;</description>
			<attribute name="@author">
				<description>Björn &quot;Vampire&quot; Kautler</description>
			</attribute>
			<attribute name="@version">
				<description>1.0</description>
			</attribute>
			<attribute name="@see">
				<description>ExtendedGridLayoutConstraints</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/awt/Component.html&quot;&gt;&lt;code&gt;java.awt.Component&lt;/code&gt;&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/javax/swing/Box.Filler.html&quot;&gt;&lt;code&gt;javax.swing.Box.Filler&lt;/code&gt;&lt;/a&gt;</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ExtendedGridLayout">
				<comment>
					<description>Creates an extended grid layout manager with the specified horizontal
 and vertical gap, and the specified distance to the borders
 of the parent container.</description>
					<attribute name="@param">
						<description>hgap The horizontal space between two columns ({@literal &gt;=0})</description>
					</attribute>
					<attribute name="@param">
						<description>vgap The vertical space between two rows ({@literal &gt;=0})</description>
					</attribute>
					<attribute name="@param">
						<description>distanceToBorders The distances to the borders of the parent container</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if hgap {@literal &lt; 0}</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if vgap {@literal &lt; 0}</description>
					</attribute>
				</comment>
				<params>
					<param name="hgap" comment="The horizontal space between two columns ({@literal &gt;=0})" fulltype="int" type="int" />
					<param name="vgap" comment="The vertical space between two rows ({@literal &gt;=0})" fulltype="int" type="int" />
					<param name="distanceToBorders" comment="The distances to the borders of the parent container" fulltype="java.awt.Insets" type="Insets" />
				</params>
			</constructor>
			<constructor visibility="public" name="ExtendedGridLayout">
				<comment>
					<description>Creates an extended grid layout manager with zero horizontal
 and vertical gap, and zero distance to the borders
 of the parent container.</description>
				</comment>
			</constructor>
			<method visibility="public" name="addLayoutComponent" fulltype="void" type="void">
				<comment>
					<description>If the layout manager uses a per-component string,
 adds the component &lt;code&gt;component&lt;/code&gt; to the layout,
 associating it with the string specified by &lt;code&gt;name&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>name      The string to be associated with the component.
                  Has to be {@code null}, so that default constraints are used.</description>
					</attribute>
					<attribute name="@param">
						<description>component The component to be added</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if {@code name} is not {@code null}</description>
					</attribute>
					<attribute name="@see">
						<description>#addLayoutComponent(java.awt.Component, java.lang.Object)</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The string to be associated with the component.
                  Has to be {@code null}, so that default constraints are used." fulltype="java.lang.String" type="String" />
					<param name="component" comment="The component to be added" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="addLayoutComponent" fulltype="void" type="void">
				<comment>
					<description>Adds the specified component to the layout, using the specified
 constraints object.</description>
					<attribute name="@param">
						<description>component    The component to be added</description>
					</attribute>
					<attribute name="@param">
						<description>constraints  Where/how the component is added to the layout.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if {@code constraints} is not an ExtendedGridLayoutConstraints object</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if {@code constraints} is a placeholder</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if {@code constraints} is not the right one for the component</description>
					</attribute>
					<attribute name="@see">
						<description>ExtendedGridLayoutConstraints</description>
					</attribute>
				</comment>
				<params>
					<param name="component" comment="The component to be added" fulltype="java.awt.Component" type="Component" />
					<param name="constraints" comment="Where/how the component is added to the layout." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="removeLayoutComponent" fulltype="void" type="void">
				<comment>
					<description>Removes the specified component from the layout.</description>
					<attribute name="@param">
						<description>component The component to be removed</description>
					</attribute>
				</comment>
				<params>
					<param name="component" comment="The component to be removed" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="getLayoutAlignmentX" returncomment="{@code java.awt.Component.CENTER_ALIGNMENT}" fulltype="float" type="float">
				<comment>
					<description>Returns the alignment along the X axis.  This specifies how
 the component would like to be aligned relative to other
 components.  The value should be a number between 0 and 1
 where 0 represents alignment along the origin, 1 is aligned
 the furthest away from the origin, 0.5 is centered, etc.</description>
					<attribute name="@param">
						<description>container The container for which the alignment should be returned</description>
					</attribute>
					<attribute name="@return">
						<description>{@code java.awt.Component.CENTER_ALIGNMENT}</description>
					</attribute>
				</comment>
				<params>
					<param name="container" comment="The container for which the alignment should be returned" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="getLayoutAlignmentY" returncomment="{@code java.awt.Component.CENTER_ALIGNMENT}" fulltype="float" type="float">
				<comment>
					<description>Returns the alignment along the Y axis. This specifies how
 the component would like to be aligned relative to other
 components. The value should be a number between 0 and 1
 where 0 represents alignment along the origin, 1 is aligned
 the furthest away from the origin, 0.5 is centered, etc.</description>
					<attribute name="@param">
						<description>container The container for which the alignment should be returned</description>
					</attribute>
					<attribute name="@return">
						<description>{@code java.awt.Component.CENTER_ALIGNMENT}</description>
					</attribute>
				</comment>
				<params>
					<param name="container" comment="The container for which the alignment should be returned" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="minimumLayoutSize" returncomment="The minimum size for the container" fulltype="java.awt.Dimension" type="Dimension">
				<comment>
					<description>Calculates the minimum size dimensions for the specified
 container, given the components it contains.</description>
					<attribute name="@param">
						<description>parent The component to be laid out</description>
					</attribute>
					<attribute name="@return">
						<description>The minimum size for the container</description>
					</attribute>
					<attribute name="@see">
						<description>#maximumLayoutSize</description>
					</attribute>
					<attribute name="@see">
						<description>#preferredLayoutSize</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="The component to be laid out" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="preferredLayoutSize" returncomment="The preferred size for the container" fulltype="java.awt.Dimension" type="Dimension">
				<comment>
					<description>Calculates the preferred size dimensions for the specified
 container, given the components it contains.</description>
					<attribute name="@param">
						<description>parent The container to be laid out</description>
					</attribute>
					<attribute name="@return">
						<description>The preferred size for the container</description>
					</attribute>
					<attribute name="@see">
						<description>#maximumLayoutSize</description>
					</attribute>
					<attribute name="@see">
						<description>#minimumLayoutSize</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="The container to be laid out" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="maximumLayoutSize" returncomment="The maximum size for the container" fulltype="java.awt.Dimension" type="Dimension">
				<comment>
					<description>Calculates the maximum size dimensions for the specified
 container, given the components it contains.</description>
					<attribute name="@param">
						<description>parent The container to be laid out</description>
					</attribute>
					<attribute name="@return">
						<description>The maximum size for the container</description>
					</attribute>
					<attribute name="@see">
						<description>#minimumLayoutSize</description>
					</attribute>
					<attribute name="@see">
						<description>#preferredLayoutSize</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="The container to be laid out" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="invalidateLayout" fulltype="void" type="void">
				<comment>
					<description>Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.</description>
					<attribute name="@param">
						<description>container The container for which the cached information should be discarded</description>
					</attribute>
				</comment>
				<params>
					<param name="container" comment="The container for which the cached information should be discarded" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="layoutContainer" fulltype="void" type="void">
				<comment>
					<description>Lays out the specified container.</description>
					<attribute name="@param">
						<description>parent The container to be laid out</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="The container to be laid out" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of the object." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the object. In general, the
 {@code toString} method returns a string that
 &quot;textually represents&quot; this object. The result should
 be a concise but informative representation that is easy for a
 person to read.</description>
					<attribute name="@return">
						<description>a string representation of the object.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.ExtendedGridLayoutConstraints" type="ExtendedGridLayoutConstraints">
		<comment>
			<description>Specifies constraints for components
 that are laid out using the {@code ExtendedGridLayout} class.</description>
			<attribute name="@version">
				<description>1.0</description>
			</attribute>
			<attribute name="@author">
				<description>Björn &quot;Vampire&quot; Kautler</description>
			</attribute>
			<attribute name="@see">
				<description>ExtendedGridLayout</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre10</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="2147483647" visibility="public" name="REMAINDER" constexpr="2147483647" fulltype="int" type="int">
				<comment>
					<description>Specifies that this component is the
 last component in its column or row
 and takes up the remaining space.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="ExtendedGridLayoutConstraints">
				<comment>
					<description>Creates an {@code ExtendedGridLayoutConstraints} object with
 all of its fields set to their default value. For further information
 about the default values see
 {@link #ExtendedGridLayoutConstraints(int, int, int, java.awt.Component)}.</description>
					<attribute name="@param">
						<description>component The {@code Component} this constraints object describes</description>
					</attribute>
				</comment>
				<params>
					<param name="component" comment="The {@code Component} this constraints object describes" fulltype="java.awt.Component" type="Component" />
				</params>
			</constructor>
			<constructor visibility="public" name="ExtendedGridLayoutConstraints">
				<comment>
					<description>Creates an {@code ExtendedGridLayoutConstraints} object with
 all of its fields set to their default value
 except of the row which is specified. For further information
 about the default values see
 {@link #ExtendedGridLayoutConstraints(int, int, int, java.awt.Component)}.</description>
					<attribute name="@param">
						<description>row       The row in which a component starts its display area. First row is 0</description>
					</attribute>
					<attribute name="@param">
						<description>component The {@code Component} this constraints object d describes</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException If row {@literal &lt; 0}</description>
					</attribute>
				</comment>
				<params>
					<param name="row" comment="The row in which a component starts its display area. First row is 0" fulltype="int" type="int" />
					<param name="component" comment="The {@code Component} this constraints object d describes" fulltype="java.awt.Component" type="Component" />
				</params>
			</constructor>
			<constructor visibility="public" name="ExtendedGridLayoutConstraints">
				<comment>
					<description>Creates an {@code ExtendedGridLayoutConstraints} object with
 all of its fields set to the passed-in arguments.</description>
					<attribute name="@param">
						<description>row       The row in which a component starts its display area.
                  First row is 0. Default value is 0.</description>
					</attribute>
					<attribute name="@param">
						<description>colspan   The number of cells in a row for the component&apos;s display area.
                  Use {@code REMAINDER} to specify that the component&apos;s
                  display area will be from its grid position to the last
                  cell in the row. Default value is 1.</description>
					</attribute>
					<attribute name="@param">
						<description>rowspan   The number of cells in a column for the component&apos;s display area.
                  Use {@code REMAINDER} to specify that the component&apos;s
                  display area will be from its grid position to the last
                  cell in the column. Default value is 1.</description>
					</attribute>
					<attribute name="@param">
						<description>component The {@code Component} this constraints object describes</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException If row {@literal &lt; 0}</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException If colspan {@literal &lt; 1}</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException If rowspan {@literal &lt; 1}</description>
					</attribute>
				</comment>
				<params>
					<param name="row" comment="The row in which a component starts its display area.
                  First row is 0. Default value is 0." fulltype="int" type="int" />
					<param name="colspan" comment="The number of cells in a row for the component&apos;s display area.
                  Use {@code REMAINDER} to specify that the component&apos;s
                  display area will be from its grid position to the last
                  cell in the row. Default value is 1." fulltype="int" type="int" />
					<param name="rowspan" comment="The number of cells in a column for the component&apos;s display area.
                  Use {@code REMAINDER} to specify that the component&apos;s
                  display area will be from its grid position to the last
                  cell in the column. Default value is 1." fulltype="int" type="int" />
					<param name="component" comment="The {@code Component} this constraints object describes" fulltype="java.awt.Component" type="Component" />
				</params>
			</constructor>
			<method visibility="public" name="getRow" returncomment="The row in which the component starts its display area." fulltype="int" type="int">
				<comment>
					<attribute name="@return">
						<description>The row in which the component starts its display area.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCol" returncomment="The column in which the component starts its display area." fulltype="int" type="int">
				<comment>
					<attribute name="@return">
						<description>The column in which the component starts its display area.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getColspan" returncomment="The number of cells in a row for the component&apos;s display area
         or {@code REMAINDER} if the component&apos;s display area will be
         from its grid position to the last cell in the row." fulltype="int" type="int">
				<comment>
					<attribute name="@return">
						<description>The number of cells in a row for the component&apos;s display area
         or {@code REMAINDER} if the component&apos;s display area will be
         from its grid position to the last cell in the row.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getRowspan" returncomment="The number of cells in a column for the component&apos;s display area
         or {@code REMAINDER} if the component&apos;s display area will be
         from its grid position to the last cell in the column." fulltype="int" type="int">
				<comment>
					<attribute name="@return">
						<description>The number of cells in a column for the component&apos;s display area
         or {@code REMAINDER} if the component&apos;s display area will be
         from its grid position to the last cell in the column.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isPlaceholder" returncomment="Whether this constraints object is a placeholder or not" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@return">
						<description>Whether this constraints object is a placeholder or not</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if this object is the same as the o
         argument; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Indicates whether some other object is &quot;equal to&quot; this one.
 &lt;p&gt;
 The {@code equals} method implements an equivalence relation
 on non-null object references:
 &lt;ul&gt;
 &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any non-null reference value
     {@code x}, {@code x.equals(x)} returns
     {@code true}.
 &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any non-null reference values
     {@code x} and {@code y}, {@code x.equals(y)}
     returns {@code true} if and only if
     {@code y.equals(x)} returns {@code true}.
 &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any non-null reference values
     {@code x}, {@code y}, and {@code z}, if
     {@code x.equals(y)} returns {@code true} and
     {@code y.equals(z)} returns {@code true}, then
     {@code x.equals(z)} returns {@code true}.
 &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values
     {@code x} and {@code y}, multiple invocations of
     &lt;tt&gt;x.equals(y)&lt;/tt&gt; consistently return {@code true}
     or consistently return {@code false}, provided no
     information used in {@code equals} comparisons on the
     objects is modified.
 &lt;li&gt;For any non-null reference value {@code x},
     {@code x.equals(null)} returns {@code false}.
 &lt;/ul&gt;
 &lt;p&gt;
 The &lt;tt&gt;equals&lt;/tt&gt; method for class
 {@code ExtendedGridLayoutConstraints} returns {@code true}
 if and only if the constraints objects describe the same {@code Component}</description>
					<attribute name="@param">
						<description>o the reference object with which to compare.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if this object is the same as the o
         argument; {@code false} otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>#hashCode()</description>
					</attribute>
					<attribute name="@see">
						<description>&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/util/Hashtable.html&quot;&gt;&lt;code&gt;java.util.Hashtable&lt;/code&gt;&lt;/a&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="o" comment="the reference object with which to compare." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="hashCode" returncomment="a hash code value for this object." fulltype="int" type="int">
				<comment>
					<description>Returns a hash code value for the object. This method is
 supported for the benefit of hashtables such as those provided by
 {@code java.util.Hashtable}.
 &lt;p&gt;
 The general contract of {@code hashCode} is:
 &lt;ul&gt;
 &lt;li&gt;Whenever it is invoked on the same object more than once during
     an execution of a Java application, the &lt;tt&gt;hashCode&lt;/tt&gt; method
     must consistently return the same integer, provided no information
     used in &lt;tt&gt;equals&lt;/tt&gt; comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 &lt;li&gt;If two objects are equal according to the &lt;tt&gt;equals(Object)&lt;/tt&gt;
     method, then calling the {@code hashCode} method on each of
     the two objects must produce the same integer result.
 &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal
     according to the
     &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;{@code java.lang.Object#equals(java.lang.Object)}&lt;/a&gt;
     method, then calling the &lt;tt&gt;hashCode&lt;/tt&gt; method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hashtables.
 &lt;/ul&gt;</description>
					<attribute name="@return">
						<description>a hash code value for this object.</description>
					</attribute>
					<attribute name="@see">
						<description>#equals(java.lang.Object)</description>
					</attribute>
					<attribute name="@see">
						<description>&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/util/Hashtable.html&quot;&gt;&lt;code&gt;java.util.Hashtable&lt;/code&gt;&lt;/a&gt;</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of the object." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the object. In general, the
 {@code toString} method returns a string that
 &quot;textually represents&quot; this object. The result should
 be a concise but informative representation that is easy for a
 person to read.</description>
					<attribute name="@return">
						<description>a string representation of the object.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.FilePropertiesDialog" type="FilePropertiesDialog">
		<comment>
			<description>File&apos;s Properties dialog. This class create and show a window from the selected file or files.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="FilePropertiesDialog">
				<comment>
					<description>The FilePropertiesDialog&apos;s constructor</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>browser The VFSBrowser</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="browser" comment="The VFSBrowser" fulltype="org.gjt.sp.jedit.browser.VFSBrowser" type="VFSBrowser" />
					<param name="files" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
				</params>
			</constructor>
			<method visibility="public" name="addComponentsToPane" fulltype="void" type="void" />
			<method visibility="public" name="createNorthPanelAll" fulltype="javax.swing.JPanel" type="JPanel" />
			<method visibility="public" name="createCenterPanelAll" fulltype="javax.swing.JPanel" type="JPanel" />
			<method visibility="public" name="createSouthPanelAll" fulltype="javax.swing.JPanel" type="JPanel" />
			<method visibility="public" name="createNorthPanel" fulltype="javax.swing.JPanel" type="JPanel" />
			<method visibility="public" name="createCenterPanel" fulltype="javax.swing.JPanel" type="JPanel" />
			<method visibility="public" name="createSouthPanel" fulltype="javax.swing.JPanel" type="JPanel" />
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.FilesChangedDialog" type="FilesChangedDialog">
		<comment>
			<description>Files changed on disk dialog.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FilesChangedDialog.java 19788 2011-08-11 00:57:19Z Vampire0 $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="FilesChangedDialog">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="states" fulltype="int[]" type="int" />
					<param name="alreadyReloaded" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="AbstractListModel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.AbstractListModel" fulltype="org.gjt.sp.jedit.gui.FilteredListModel" type="FilteredListModel">
		<implements>
			<interface fulltype="javax.swing.event.ListDataListener" type="ListDataListener" />
		</implements>
		<comment>
			<description>This ListModel delegates another model to add some filtering features to any
 JList.
 To use it you must implement the abstract method passFilter().
 This method is called for each row, and must return true if the row should be
 visible, and false otherwise.
 It is also possible to override the method prepareFilter() that allow you to
 transform the filter String. Usually you can return it as lowercase
 It is not mandatory but highly recommended to give the JList instance to the
 model in order to keep the selection after the filter has been updated</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Buffer.java 8190 2006-12-07 07:58:34Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre11</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="delegated" fulltype="javax.swing.ListModel" type="ListModel">
				<comment>
					<description>The delegated table model.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="protected" name="FilteredListModel">
				<params>
					<param name="delegated" fulltype="javax.swing.ListModel" type="ListModel" />
				</params>
			</constructor>
			<method visibility="public" name="setList" fulltype="void" type="void">
				<comment>
					<description>Set the JList that uses this model.
 It is used to restore the selection after the filter has been applied
 If it is null,</description>
					<attribute name="@param">
						<description>list the list that uses the model</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="the list that uses the model" fulltype="javax.swing.JList" type="JList" />
				</params>
			</method>
			<method visibility="public" name="getDelegated" fulltype="javax.swing.ListModel" type="ListModel" />
			<method visibility="public" name="setDelegated" fulltype="void" type="void">
				<params>
					<param name="delegated" fulltype="javax.swing.ListModel" type="ListModel" />
				</params>
			</method>
			<method visibility="public" name="setFilter" fulltype="void" type="void">
				<params>
					<param name="filter" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="prepareFilter" fulltype="java.lang.String" type="String">
				<params>
					<param name="filter" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="passFilter" returncomment="true if the row must be visible" fulltype="boolean" type="boolean">
				<comment>
					<description>This callback indicates if a row passes the filter.</description>
					<attribute name="@param">
						<description>row    the row number the delegate row count</description>
					</attribute>
					<attribute name="@param">
						<description>filter the filter string</description>
					</attribute>
					<attribute name="@return">
						<description>true if the row must be visible</description>
					</attribute>
				</comment>
				<params>
					<param name="row" comment="the row number the delegate row count" fulltype="int" type="int" />
					<param name="filter" comment="the filter string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="saveSelection" fulltype="java.util.Set" type="Set" />
			<method visibility="protected" name="restoreSelection" fulltype="void" type="void">
				<params>
					<param name="selectedIndices" fulltype="java.util.Set" type="Set" />
				</params>
			</method>
			<method visibility="public" name="getTrueRow" returncomment="the row index in the delegated model" fulltype="int" type="int">
				<comment>
					<description>Converts a row index from the JTable to an internal row index from the delegated model.</description>
					<attribute name="@param">
						<description>rowIndex the row index</description>
					</attribute>
					<attribute name="@return">
						<description>the row index in the delegated model</description>
					</attribute>
				</comment>
				<params>
					<param name="rowIndex" comment="the row index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getInternal2ExternalRow" returncomment="the table row index or -1 if this row is not visible" fulltype="int" type="int">
				<comment>
					<description>Converts a row index from the delegated table model into a row index of the JTable.</description>
					<attribute name="@param">
						<description>internalRowIndex the internal row index</description>
					</attribute>
					<attribute name="@return">
						<description>the table row index or -1 if this row is not visible</description>
					</attribute>
				</comment>
				<params>
					<param name="internalRowIndex" comment="the internal row index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getElementAt" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getSize" fulltype="int" type="int" />
			<method visibility="public" name="contentsChanged" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="javax.swing.event.ListDataEvent" type="ListDataEvent" />
				</params>
			</method>
			<method visibility="public" name="intervalAdded" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="javax.swing.event.ListDataEvent" type="ListDataEvent" />
				</params>
			</method>
			<method visibility="public" name="intervalRemoved" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="javax.swing.event.ListDataEvent" type="ListDataEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="AbstractTableModel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.table.AbstractTableModel" fulltype="org.gjt.sp.jedit.gui.FilteredTableModel" type="FilteredTableModel">
		<implements>
			<interface fulltype="javax.swing.event.TableModelListener" type="TableModelListener" />
		</implements>
		<comment>
			<description>This TableModel delegates another model to add some filtering features to any
 JTable.
 To use it you must implement the abstract method passFilter().
 This method is called for each row, and must return true if the row should be
 visible, and false otherwise.
 It is also possible to override the method prepareFilter() that allow you to
 transform the filter String. Usually you can return it as lowercase
 &lt;p/&gt;
 Here is an example of how to use it extracted from the InstallPanel
 &lt;code&gt;
 PluginTableModel tableModel = new PluginTableModel();
 filteredTableModel = new FilteredTableModel&lt;PluginTableModel&gt;(tableModel)
 {
 public String prepareFilter(String filter)
 {
 return filter.toLowerCase();
 }
 &lt;p/&gt;
 public boolean passFilter(int row, String filter)
 {
 String pluginName = (String) delegated.getValueAt(row, 1);
 return pluginName.toLowerCase().contains(filter);
 }
 };
 table = new JTable(filteredTableModel);
 filteredTableModel.setTable(table);
 &lt;/code&gt;
 It is not mandatory but highly recommended to give the JTable instance to the
 model in order to keep the selection after the filter has been updated</description>
			<attribute name="@author">
				<description>Shlomy Reinstein</description>
			</attribute>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Buffer.java 8190 2006-12-07 07:58:34Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre11</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="delegated" fulltype="javax.swing.table.TableModel" type="TableModel">
				<comment>
					<description>The delegated table model.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="protected" name="FilteredTableModel">
				<params>
					<param name="delegated" fulltype="javax.swing.table.TableModel" type="TableModel" />
				</params>
			</constructor>
			<constructor visibility="protected" name="FilteredTableModel" />
			<method visibility="public" name="setTable" fulltype="void" type="void">
				<comment>
					<description>Set the JTable that uses this model.
 It is used to restore the selection after the filter has been applied
 If it is null,</description>
					<attribute name="@param">
						<description>table the table that uses the model</description>
					</attribute>
				</comment>
				<params>
					<param name="table" comment="the table that uses the model" fulltype="javax.swing.JTable" type="JTable" />
				</params>
			</method>
			<method visibility="public" name="getDelegated" fulltype="javax.swing.table.TableModel" type="TableModel" />
			<method visibility="public" name="setDelegated" fulltype="void" type="void">
				<params>
					<param name="delegated" fulltype="javax.swing.table.TableModel" type="TableModel" />
				</params>
			</method>
			<method visibility="public" name="setFilter" fulltype="void" type="void">
				<params>
					<param name="filter" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="prepareFilter" fulltype="java.lang.String" type="String">
				<params>
					<param name="filter" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="passFilter" returncomment="true if the row must be visible" fulltype="boolean" type="boolean">
				<comment>
					<description>This callback indicates if a row passes the filter.</description>
					<attribute name="@param">
						<description>row    the row number the delegate row count</description>
					</attribute>
					<attribute name="@param">
						<description>filter the filter string</description>
					</attribute>
					<attribute name="@return">
						<description>true if the row must be visible</description>
					</attribute>
				</comment>
				<params>
					<param name="row" comment="the row number the delegate row count" fulltype="int" type="int" />
					<param name="filter" comment="the filter string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getRowCount" fulltype="int" type="int" />
			<method visibility="public" name="getColumnCount" fulltype="int" type="int" />
			<method visibility="public" name="getColumnName" fulltype="java.lang.String" type="String">
				<params>
					<param name="columnIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getColumnClass" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="columnIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="isCellEditable" fulltype="boolean" type="boolean">
				<params>
					<param name="rowIndex" fulltype="int" type="int" />
					<param name="columnIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getValueAt" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="rowIndex" fulltype="int" type="int" />
					<param name="columnIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setValueAt" fulltype="void" type="void">
				<params>
					<param name="aValue" fulltype="java.lang.Object" type="Object" />
					<param name="rowIndex" fulltype="int" type="int" />
					<param name="columnIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getTrueRow" returncomment="the row index in the delegated model" fulltype="int" type="int">
				<comment>
					<description>Converts a row index from the JTable to an internal row index from the delegated model.</description>
					<attribute name="@param">
						<description>rowIndex the row index</description>
					</attribute>
					<attribute name="@return">
						<description>the row index in the delegated model</description>
					</attribute>
				</comment>
				<params>
					<param name="rowIndex" comment="the row index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getInternal2ExternalRow" returncomment="the table row index or -1 if this row is not visible" fulltype="int" type="int">
				<comment>
					<description>Converts a row index from the delegated table model into a row index of the JTable.</description>
					<attribute name="@param">
						<description>internalRowIndex the internal row index</description>
					</attribute>
					<attribute name="@return">
						<description>the table row index or -1 if this row is not visible</description>
					</attribute>
				</comment>
				<params>
					<param name="internalRowIndex" comment="the internal row index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="tableChanged" fulltype="void" type="void">
				<comment>
					<description>This fine grain notification tells listeners the exact range
 of cells, rows, or columns that changed.</description>
				</comment>
				<params>
					<param name="e" fulltype="javax.swing.event.TableModelEvent" type="TableModelEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JFrame" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JFrame" fulltype="org.gjt.sp.jedit.gui.FloatingWindowContainer" type="FloatingWindowContainer">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.DockableWindowContainer" type="DockableWindowContainer" />
			<interface fulltype="java.beans.PropertyChangeListener" type="PropertyChangeListener" />
		</implements>
		<comment>
			<description>A container for dockable windows. This class should never be used
 directly.</description>
			<attribute name="@version">
				<description>$Id: FloatingWindowContainer.java 13259 2008-08-10 20:54:46Z shlomy $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.0pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="FloatingWindowContainer">
				<params>
					<param name="dockableWindowManager" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl" type="DockableWindowManagerImpl" />
					<param name="clone" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="register" fulltype="void" type="void">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.Entry" type="DockableWindowManagerImpl.Entry" />
				</params>
			</method>
			<method visibility="public" name="remove" fulltype="void" type="void">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.Entry" type="DockableWindowManagerImpl.Entry" />
				</params>
			</method>
			<method visibility="public" name="unregister" fulltype="void" type="void">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.Entry" type="DockableWindowManagerImpl.Entry" />
				</params>
			</method>
			<method visibility="public" name="show" fulltype="void" type="void">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.Entry" type="DockableWindowManagerImpl.Entry" />
				</params>
			</method>
			<method visibility="public" name="isVisible" fulltype="boolean" type="boolean">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.Entry" type="DockableWindowManagerImpl.Entry" />
				</params>
			</method>
			<method visibility="public" name="dispose" fulltype="void" type="void" />
			<method visibility="public" name="getDockableWindowManager" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl" type="DockableWindowManagerImpl" />
			<method visibility="public" name="getMinimumSize" fulltype="java.awt.Dimension" type="Dimension" />
			<method visibility="public" name="propertyChange" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.beans.PropertyChangeEvent" type="PropertyChangeEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JButton" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JButton" fulltype="org.gjt.sp.jedit.gui.FontSelector" type="FontSelector">
		<comment>
			<description>A font chooser widget.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FontSelector.java 17430 2010-03-07 03:16:20Z vanza $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="FontSelector">
				<comment>
					<description>Creates a new font selector control.</description>
					<attribute name="@param">
						<description>font The font</description>
					</attribute>
				</comment>
				<params>
					<param name="font" comment="The font" fulltype="java.awt.Font" type="Font" />
				</params>
			</constructor>
			<constructor visibility="public" name="FontSelector">
				<comment>
					<description>Creates a new font selector control.</description>
					<attribute name="@param">
						<description>font The font</description>
					</attribute>
					<attribute name="@param">
						<description>antiAlias Is anti-aliasing enabled?</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="font" comment="The font" fulltype="java.awt.Font" type="Font" />
					<param name="antiAlias" comment="Is anti-aliasing enabled?" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="paintComponent" fulltype="void" type="void">
				<params>
					<param name="g" fulltype="java.awt.Graphics" type="Graphics" />
				</params>
			</method>
			<method visibility="public" name="isAntiAliasEnabled" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setAntiAliasEnabled" fulltype="void" type="void">
				<params>
					<param name="antiAlias" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.FontSelectorDialog" type="FontSelectorDialog">
		<comment>
			<description>A dialog for choosing fonts.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FontSelectorDialog.java 17430 2010-03-07 03:16:20Z vanza $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="FontSelectorDialog">
				<params>
					<param name="parent" fulltype="java.awt.Frame" type="Frame" />
					<param name="font" fulltype="java.awt.Font" type="Font" />
				</params>
			</constructor>
			<constructor visibility="public" name="FontSelectorDialog">
				<params>
					<param name="parent" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="font" fulltype="java.awt.Font" type="Font" />
				</params>
			</constructor>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
			<method visibility="public" name="getSelectedFont" fulltype="java.awt.Font" type="Font" />
		</methods>
	</jelclass>
	<jelclass superclass="JDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JDialog" fulltype="org.gjt.sp.jedit.gui.GrabKeyDialog" type="GrabKeyDialog">
		<comment>
			<description>A dialog for getting shortcut keys.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="GrabKeyDialog">
				<comment>
					<description>Create and show a new modal dialog.</description>
					<attribute name="@param">
						<description>parent  center dialog on this component.</description>
					</attribute>
					<attribute name="@param">
						<description>binding  the action/macro that should get a binding.</description>
					</attribute>
					<attribute name="@param">
						<description>allBindings  all other key bindings.</description>
					</attribute>
					<attribute name="@param">
						<description>debugBuffer  debug info will be dumped to this buffer
 (may be null)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="center dialog on this component." fulltype="java.awt.Dialog" type="Dialog" />
					<param name="binding" comment="the action/macro that should get a binding." fulltype="org.gjt.sp.jedit.gui.GrabKeyDialog.KeyBinding" type="GrabKeyDialog.KeyBinding" />
					<param name="allBindings" comment="all other key bindings." fulltype="java.util.List" type="List" />
					<param name="debugBuffer" comment="debug info will be dumped to this buffer
 (may be null)" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</constructor>
			<constructor visibility="public" name="GrabKeyDialog">
				<comment>
					<description>Create and show a new modal dialog.</description>
					<attribute name="@param">
						<description>parent  center dialog on this component.</description>
					</attribute>
					<attribute name="@param">
						<description>binding  the action/macro that should get a binding.</description>
					</attribute>
					<attribute name="@param">
						<description>allBindings  all other key bindings.</description>
					</attribute>
					<attribute name="@param">
						<description>debugBuffer  debug info will be dumped to this buffer
 (may be null)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="center dialog on this component." fulltype="java.awt.Frame" type="Frame" />
					<param name="binding" comment="the action/macro that should get a binding." fulltype="org.gjt.sp.jedit.gui.GrabKeyDialog.KeyBinding" type="GrabKeyDialog.KeyBinding" />
					<param name="allBindings" comment="all other key bindings." fulltype="java.util.List" type="List" />
					<param name="debugBuffer" comment="debug info will be dumped to this buffer
 (may be null)" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</constructor>
			<method visibility="public" name="getShortcut" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the shortcut, or null if the current shortcut should be
 removed or the dialog either has been cancelled. Use isOK()
 to determine if the latter is true.</description>
				</comment>
			</method>
			<method visibility="public" name="isOK" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true, if the dialog has not been cancelled.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre9</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getFocusTraversalKeysEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Makes the tab key work in Java 1.4.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="processKeyEvent" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method static="true" visibility="public" name="getSymbolicName" fulltype="java.lang.String" type="String">
				<params>
					<param name="keyCode" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.GrabKeyDialog.KeyBinding" type="GrabKeyDialog.KeyBinding">
			<comment>
				<description>A jEdit action or macro with its two possible shortcuts.</description>
				<attribute name="@since">
					<description>jEdit 3.2pre8</description>
				</attribute>
			</comment>
			<fields>
				<field visibility="public" name="name" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="label" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="shortcut" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="isPrefix" fulltype="boolean" type="boolean" />
			</fields>
			<methods>
				<constructor visibility="public" name="GrabKeyDialog.KeyBinding">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
						<param name="label" fulltype="java.lang.String" type="String" />
						<param name="shortcut" fulltype="java.lang.String" type="String" />
						<param name="isPrefix" fulltype="boolean" type="boolean" />
					</params>
				</constructor>
				<method visibility="public" name="isAssigned" fulltype="boolean" type="boolean" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.GrabKeyDialog.KeyBinding" type="GrabKeyDialog.KeyBinding">
		<comment>
			<description>A jEdit action or macro with its two possible shortcuts.</description>
			<attribute name="@since">
				<description>jEdit 3.2pre8</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="public" name="name" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="label" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="shortcut" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="isPrefix" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="public" name="GrabKeyDialog.KeyBinding">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="label" fulltype="java.lang.String" type="String" />
					<param name="shortcut" fulltype="java.lang.String" type="String" />
					<param name="isPrefix" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="isAssigned" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass superclass="DefaultListModel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.DefaultListModel" fulltype="org.gjt.sp.jedit.gui.HistoryModel" type="HistoryModel">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.MutableListModel" type="MutableListModel" />
		</implements>
		<comment>
			<description>A named history list

 One history list can be used by several history text
 fields. Note that the list model implementation is incomplete; no events
 are fired when the history model changes.
 The max size of the history is defined globally via setDefaultMax(),
  see jEdit.java for instance.
 It may be locally overriden by calling setMax() on a HistoryModel instance.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>Eric Le Lay</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HistoryModel.java 21506 2012-03-29 17:58:53Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="HistoryModel">
				<comment>
					<description>Creates a new history list. Calling this is normally not
 necessary.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="addItem" fulltype="void" type="void">
				<comment>
					<description>Adds an item to the end of this history list, trimming the list
 to the maximum number of items if necessary.</description>
					<attribute name="@param">
						<description>text The item</description>
					</attribute>
				</comment>
				<params>
					<param name="text" comment="The item" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="insertElementAt" fulltype="void" type="void">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getItem" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns an item from the history list.</description>
					<attribute name="@param">
						<description>index The index</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="The index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="removeElement" fulltype="boolean" type="boolean">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="removeAllElements" fulltype="void" type="void" />
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of this history list. This can be passed
 to the HistoryTextField constructor.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getModel" fulltype="org.gjt.sp.jedit.gui.HistoryModel" type="HistoryModel">
				<comment>
					<description>Returns a named model. If the specified model does not
 already exist, it will be created.</description>
					<attribute name="@param">
						<description>name The model name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The model name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadHistory" fulltype="void" type="void" />
			<method static="true" visibility="public" name="saveHistory" fulltype="void" type="void" />
			<method visibility="public" name="setMax" fulltype="void" type="void">
				<comment>
					<description>sets the maximum size of this history</description>
					<attribute name="@param">
						<description>max the new maximum size of this history of -1 to restore default</description>
					</attribute>
				</comment>
				<params>
					<param name="max" comment="the new maximum size of this history of -1 to restore default" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getMax" returncomment="maximum size of this history or -1 is it&apos;s the default size" fulltype="int" type="int">
				<comment>
					<attribute name="@return">
						<description>maximum size of this history or -1 is it&apos;s the default size</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setMaxSize" fulltype="void" type="void">
				<comment>
					<description>Sets the maximum size (in characters) for this history model</description>
					<attribute name="@param">
						<description>max the new maximum size for the history model, or -1 to restore the default</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="max" comment="the new maximum size for the history model, or -1 to restore the default" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getMaxSize" returncomment="the maximum size (in characters) for this history model, or -1 for the default" fulltype="int" type="int">
				<comment>
					<attribute name="@return">
						<description>the maximum size (in characters) for this history model, or -1 for the default</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setDefaultMax" fulltype="void" type="void">
				<comment>
					<description>Sets the default size of all HistoryModels.
 Affects the VFS path history, the hypersearch history, etc..
 To change the max size of one history, call setMax() instead.</description>
				</comment>
				<params>
					<param name="max" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getDefaultMax" returncomment="default size limit for HistoryModels" fulltype="int" type="int">
				<comment>
					<description>Gets the default size of all HistoryModels.</description>
					<attribute name="@return">
						<description>default size limit for HistoryModels</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setDefaultMaxSize" fulltype="void" type="void">
				<comment>
					<description>Sets the default max size (in characters) for all history models. To change the max
 size of one history, call {@link #setMaxSize} instead.</description>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="newMax" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getDefaultMaxSize" fulltype="int" type="int">
				<comment>
					<description>Gets the default maximum size (in characters) for all history models.</description>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setSaver" fulltype="void" type="void">
				<params>
					<param name="saver" fulltype="org.gjt.sp.jedit.gui.HistoryModelSaver" type="HistoryModelSaver" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui" interface="true" fulltype="org.gjt.sp.jedit.gui.HistoryModelSaver" type="HistoryModelSaver">
		<comment>
			<description>Interface for loading and saving of the &quot;history&quot; files.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FoldHandler.java 5568 2006-07-10 20:52:23Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="load" fulltype="java.util.Map" type="Map">
				<params>
					<param name="models" fulltype="java.util.Map" type="Map" />
				</params>
			</method>
			<method visibility="public" name="save" fulltype="boolean" type="boolean">
				<params>
					<param name="models" fulltype="java.util.Map" type="Map" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.HistoryText" type="HistoryText">
		<comment>
			<description>Controller (manager of models) for HistoryTextArea.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HistoryText.java 16341 2009-10-14 10:05:51Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="HistoryText">
				<params>
					<param name="text" fulltype="javax.swing.text.JTextComponent" type="JTextComponent" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="fireActionPerformed" fulltype="void" type="void" />
			<method visibility="public" name="getIndex" fulltype="int" type="int" />
			<method visibility="public" name="setIndex" fulltype="void" type="void">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getModel" fulltype="org.gjt.sp.jedit.gui.HistoryModel" type="HistoryModel">
				<comment>
					<description>Returns the underlying history controller.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setModel" fulltype="void" type="void">
				<comment>
					<description>Sets the history list controller.</description>
					<attribute name="@param">
						<description>name The model name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The model name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setInstantPopups" fulltype="void" type="void">
				<comment>
					<description>Sets if selecting a value from the popup should immediately fire
 an ActionEvent.</description>
				</comment>
				<params>
					<param name="instantPopups" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getInstantPopups" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if selecting a value from the popup should immediately fire
 an ActionEvent.</description>
				</comment>
			</method>
			<method visibility="public" name="addCurrentToHistory" fulltype="void" type="void">
				<comment>
					<description>Adds the currently entered item to the history.</description>
				</comment>
			</method>
			<method visibility="public" name="doBackwardSearch" fulltype="void" type="void" />
			<method visibility="public" name="doForwardSearch" fulltype="void" type="void" />
			<method visibility="public" name="historyPrevious" fulltype="void" type="void" />
			<method visibility="public" name="historyNext" fulltype="void" type="void" />
			<method visibility="public" name="getDocument" fulltype="javax.swing.text.Document" type="Document" />
			<method visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Subclasses can override this to provide funky history behavior,
 for JTextPanes and such.</description>
				</comment>
			</method>
			<method visibility="public" name="setText" fulltype="void" type="void">
				<comment>
					<description>Subclasses can override this to provide funky history behavior,
 for JTextPanes and such.</description>
				</comment>
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getInputStart" fulltype="int" type="int">
				<comment>
					<description>Subclasses can override this to provide funky history behavior,
 for JTextPanes and such.</description>
				</comment>
			</method>
			<method visibility="public" name="showPopupMenu" fulltype="void" type="void">
				<params>
					<param name="t" fulltype="java.lang.String" type="String" />
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="showPopupMenu" fulltype="void" type="void">
				<params>
					<param name="search" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JTextArea" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JTextArea" fulltype="org.gjt.sp.jedit.gui.HistoryTextArea" type="HistoryTextArea">
		<comment>
			<description>Text area with a history.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HistoryTextArea.java 13415 2008-08-24 09:03:09Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="HistoryTextArea">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getModel" fulltype="org.gjt.sp.jedit.gui.HistoryModel" type="HistoryModel">
				<comment>
					<description>Returns the underlying history controller.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setModel" fulltype="void" type="void">
				<comment>
					<description>Sets the history list controller.</description>
					<attribute name="@param">
						<description>name The model name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The model name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setInstantPopups" fulltype="void" type="void">
				<comment>
					<description>Sets if selecting a value from the popup should immediately fire
 an ActionEvent.</description>
				</comment>
				<params>
					<param name="instantPopups" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getInstantPopups" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if selecting a value from the popup should immediately fire
 an ActionEvent.</description>
				</comment>
			</method>
			<method visibility="public" name="addCurrentToHistory" fulltype="void" type="void">
				<comment>
					<description>Adds the currently entered item to the history.</description>
				</comment>
			</method>
			<method visibility="public" name="setText" fulltype="void" type="void">
				<comment>
					<description>Sets the displayed text.</description>
				</comment>
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="processKeyEvent" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method visibility="protected" name="processMouseEvent" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JTextField" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JTextField" fulltype="org.gjt.sp.jedit.gui.HistoryTextField" type="HistoryTextField">
		<comment>
			<description>Text field with an arrow-key + drop-down accessable history.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HistoryTextField.java 21502 2012-03-29 17:19:44Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="HistoryTextField">
				<comment>
					<description>Creates a new history text field.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre5</description>
					</attribute>
				</comment>
			</constructor>
			<constructor visibility="public" name="HistoryTextField">
				<comment>
					<description>Creates a new history text field.</description>
					<attribute name="@param">
						<description>name The history model name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The history model name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="HistoryTextField">
				<comment>
					<description>Creates a new history text field.</description>
					<attribute name="@param">
						<description>name The history model name</description>
					</attribute>
					<attribute name="@param">
						<description>instantPopups If true, selecting a value from the history
 popup will immediately fire an ActionEvent. If false, the user
 will have to press &apos;Enter&apos; first</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The history model name" fulltype="java.lang.String" type="String" />
					<param name="instantPopups" comment="If true, selecting a value from the history
 popup will immediately fire an ActionEvent. If false, the user
 will have to press &apos;Enter&apos; first" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="HistoryTextField">
				<comment>
					<description>Creates a new history text field.</description>
					<attribute name="@param">
						<description>name The history model name</description>
					</attribute>
					<attribute name="@param">
						<description>instantPopups If true, selecting a value from the history
 popup will immediately fire an ActionEvent. If false, the user
 will have to press &apos;Enter&apos; first</description>
					</attribute>
					<attribute name="@param">
						<description>enterAddsToHistory If true, pressing the Enter key will
 automatically add the currently entered text to the history.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The history model name" fulltype="java.lang.String" type="String" />
					<param name="instantPopups" comment="If true, selecting a value from the history
 popup will immediately fire an ActionEvent. If false, the user
 will have to press &apos;Enter&apos; first" fulltype="boolean" type="boolean" />
					<param name="enterAddsToHistory" comment="If true, pressing the Enter key will
 automatically add the currently entered text to the history." fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="setInstantPopups" fulltype="void" type="void">
				<comment>
					<description>Sets if selecting a value from the popup should immediately fire
 an ActionEvent.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="instantPopups" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getInstantPopups" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if selecting a value from the popup should immediately fire
 an ActionEvent.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setEnterAddsToHistory" fulltype="void" type="void">
				<comment>
					<description>Sets if pressing Enter should automatically add the currently
 entered text to the history.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="enterAddsToHistory" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setEnterAddsToHistory" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if pressing Enter should automatically add the currently
 entered text to the history.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setSelectAllOnFocus" fulltype="void" type="void">
				<comment>
					<description>Sets if all text should be selected when the field gets focus.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="selectAllOnFocus" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setSelectAllOnFocus" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if all text should be selected when the field gets focus.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getModel" fulltype="org.gjt.sp.jedit.gui.HistoryModel" type="HistoryModel">
				<comment>
					<description>Returns the underlying history model.</description>
				</comment>
			</method>
			<method visibility="public" name="setModel" fulltype="void" type="void">
				<comment>
					<description>Sets the history list model.</description>
					<attribute name="@param">
						<description>name The model name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The model name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="addCurrentToHistory" fulltype="void" type="void">
				<comment>
					<description>Adds the currently entered item to the history.</description>
				</comment>
			</method>
			<method visibility="public" name="setText" fulltype="void" type="void">
				<comment>
					<description>Sets the displayed text.</description>
				</comment>
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="fireActionPerformed" fulltype="void" type="void">
				<comment>
					<description>Make it public.</description>
				</comment>
			</method>
			<method visibility="protected" name="processKeyEvent" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method visibility="protected" name="processMouseEvent" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="AbstractInputHandler" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="org.gjt.sp.jedit.input.AbstractInputHandler" fulltype="org.gjt.sp.jedit.gui.InputHandler" type="InputHandler">
		<comment>
			<description>An input handler converts the user&apos;s key strokes into concrete actions.
 It also takes care of macro recording and action repetition.&lt;p&gt;

 This class provides all the necessary support code for an input
 handler, but doesn&apos;t actually do any key binding logic. It is up
 to the implementations of this class to do so.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: InputHandler.java 18919 2010-11-04 10:52:55Z kpouer $</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.gui.DefaultInputHandler</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="protected" name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
		</fields>
		<methods>
			<constructor visibility="protected" name="InputHandler">
				<comment>
					<description>Creates a new input handler.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<method final="true" visibility="public" name="handleKey" returncomment="true if the input could be handled." fulltype="boolean" type="boolean">
				<comment>
					<description>Handles a keystroke.</description>
					<attribute name="@param">
						<description>keyStroke The key stroke.</description>
					</attribute>
					<attribute name="@return">
						<description>true if the input could be handled.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="keyStroke" comment="The key stroke." fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator.Key" type="KeyEventTranslator.Key" />
				</params>
			</method>
			<method visibility="public" name="processKeyEvent" fulltype="void" type="void">
				<comment>
					<description>Forwards key events directly to the input handler.
 This is slightly faster than using a KeyListener
 because some Swing overhead is avoided.</description>
					<attribute name="@since">
						<description>4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
					<param name="from" fulltype="int" type="int" />
					<param name="global" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getRepeatCount" fulltype="int" type="int">
				<comment>
					<description>Returns the number of times the next action will be repeated.</description>
				</comment>
			</method>
			<method visibility="public" name="setRepeatCount" fulltype="void" type="void">
				<comment>
					<description>Sets the number of times the next action will be repeated.</description>
					<attribute name="@param">
						<description>repeatCount The repeat count</description>
					</attribute>
				</comment>
				<params>
					<param name="repeatCount" comment="The repeat count" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLastAction" fulltype="org.gjt.sp.jedit.EditAction" type="EditAction">
				<comment>
					<description>Returns the last executed action.</description>
					<attribute name="@since">
						<description>jEdit 2.5pre5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="readNextChar" fulltype="void" type="void">
				<comment>
					<description>Invokes the specified BeanShell code, replacing __char__ in the
 code with the next input character.</description>
					<attribute name="@param">
						<description>msg The prompt to display in the status bar</description>
					</attribute>
					<attribute name="@param">
						<description>code The code</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="msg" comment="The prompt to display in the status bar" fulltype="java.lang.String" type="String" />
					<param name="code" comment="The code" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="invokeAction" fulltype="void" type="void">
				<comment>
					<description>Invokes the specified action, repeating and recording it as
 necessary.</description>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="The action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="invokeAction" fulltype="void" type="void">
				<comment>
					<description>Invokes the specified action, repeating and recording it as
 necessary.</description>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="The action" fulltype="org.gjt.sp.jedit.EditAction" type="EditAction" />
				</params>
			</method>
			<method visibility="public" name="invokeLastAction" fulltype="void" type="void" />
			<method visibility="protected" name="userInput" fulltype="void" type="void">
				<params>
					<param name="ch" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="protected" name="invokeReadNextChar" fulltype="void" type="void">
				<params>
					<param name="ch" fulltype="char" type="char" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.gui.IOProgressMonitor" type="IOProgressMonitor">
		<comment>
			<description>The IO progressMonitor is the panel that will show JProgressBar for
 IO threads.</description>
			<attribute name="@version">
				<description>$Id: IOProgressMonitor.java 17758 2010-05-07 13:20:28Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IOProgressMonitor" />
			<method visibility="public" name="addNotify" fulltype="void" type="void" />
			<method visibility="public" name="removeNotify" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JTable" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JTable" fulltype="org.gjt.sp.jedit.gui.JCheckBoxList" type="JCheckBoxList">
		<comment>
			<description>A list where items can be selected and checked off independently.</description>
			<attribute name="@since">
				<description>jEdit 3.2pre9</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JCheckBoxList">
				<comment>
					<description>Creates a checkbox list with the given list of objects. The elements
 of this array can either be Entry instances, or other objects (if the
 latter, they will default to being unchecked).</description>
				</comment>
				<params>
					<param name="items" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</constructor>
			<constructor visibility="public" name="JCheckBoxList">
				<comment>
					<description>Creates a checkbox list with the given list of objects. The elements
 of this vector can either be Entry instances, or other objects (if the
 latter, they will default to being unchecked).</description>
				</comment>
				<params>
					<param name="items" fulltype="java.util.Vector" type="Vector" />
				</params>
			</constructor>
			<method visibility="public" name="setModel" fulltype="void" type="void">
				<comment>
					<description>Sets the model to the given list of objects. The elements of this
 array can either be Entry instances, or other objects (if the
 latter, they will default to being unchecked).</description>
				</comment>
				<params>
					<param name="items" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="public" name="setModel" fulltype="void" type="void">
				<comment>
					<description>Sets the model to the given list of objects. The elements of this
 vector can either be Entry instances, or other objects (if the
 latter, they will default to being unchecked).</description>
				</comment>
				<params>
					<param name="items" fulltype="java.util.Vector" type="Vector" />
				</params>
			</method>
			<method visibility="public" name="getCheckedValues" fulltype="java.lang.Object[]" type="Object" />
			<method visibility="public" name="selectAll" fulltype="void" type="void" />
			<method visibility="public" name="getValues" fulltype="org.gjt.sp.jedit.gui.JCheckBoxList.Entry[]" type="JCheckBoxList.Entry" />
			<method visibility="public" name="getSelectedValue" fulltype="java.lang.Object" type="Object" />
			<method visibility="public" name="getCellRenderer" fulltype="javax.swing.table.TableCellRenderer" type="TableCellRenderer">
				<params>
					<param name="row" fulltype="int" type="int" />
					<param name="column" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.JCheckBoxList.Entry" type="JCheckBoxList.Entry">
			<comment>
				<description>A check box list entry.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="JCheckBoxList.Entry">
					<params>
						<param name="value" fulltype="java.lang.Object" type="Object" />
					</params>
				</constructor>
				<constructor visibility="public" name="JCheckBoxList.Entry">
					<params>
						<param name="checked" fulltype="boolean" type="boolean" />
						<param name="value" fulltype="java.lang.Object" type="Object" />
					</params>
				</constructor>
				<method visibility="public" name="isChecked" fulltype="boolean" type="boolean" />
				<method visibility="public" name="getValue" fulltype="java.lang.Object" type="Object" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.JCheckBoxList.Entry" type="JCheckBoxList.Entry">
		<comment>
			<description>A check box list entry.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="JCheckBoxList.Entry">
				<params>
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<constructor visibility="public" name="JCheckBoxList.Entry">
				<params>
					<param name="checked" fulltype="boolean" type="boolean" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="isChecked" fulltype="boolean" type="boolean" />
			<method visibility="public" name="getValue" fulltype="java.lang.Object" type="Object" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.JEditHistoryModelSaver" type="JEditHistoryModelSaver">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.HistoryModelSaver" type="HistoryModelSaver" />
		</implements>
		<comment>
			<description>Handles loading and saving of the &quot;history&quot; files.

 A history file is .ini format and stores historymodels for all
 named historytextfields, separately but in the same file.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FoldHandler.java 5568 2006-07-10 20:52:23Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JEditHistoryModelSaver" />
			<method visibility="public" name="load" fulltype="java.util.Map" type="Map">
				<params>
					<param name="models" fulltype="java.util.Map" type="Map" />
				</params>
			</method>
			<method visibility="public" name="save" fulltype="boolean" type="boolean">
				<params>
					<param name="models" fulltype="java.util.Map" type="Map" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator" type="KeyEventTranslator">
		<comment>
			<description>In conjunction with the &lt;code&gt;KeyEventWorkaround&lt;/code&gt;, hides some
 warts in the AWT key event API.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: KeyEventTranslator.java 21504 2012-03-29 17:45:22Z ezust $</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="protected" name="lastKeyPressEvent" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
			<field static="true" visibility="protected" name="lastKeyPressAccepted" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="public" name="KeyEventTranslator" />
			<method static="true" visibility="public" name="addTranslation" fulltype="void" type="void">
				<comment>
					<description>Adds a keyboard translation.</description>
					<attribute name="@param">
						<description>key1 Translate this key</description>
					</attribute>
					<attribute name="@param">
						<description>key2 Into this key</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="key1" comment="Translate this key" fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator.Key" type="KeyEventTranslator.Key" />
					<param name="key2" comment="Into this key" fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator.Key" type="KeyEventTranslator.Key" />
				</params>
			</method>
			<method static="true" visibility="public" name="translateKeyEvent" fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator.Key" type="KeyEventTranslator.Key">
				<comment>
					<description>Pass this an event from {@link
 KeyEventWorkaround#processKeyEvent(java.awt.event.KeyEvent)}.</description>
					<attribute name="@param">
						<description>evt the KeyEvent to translate</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="the KeyEvent to translate" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseKey" fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator.Key" type="KeyEventTranslator.Key">
				<comment>
					<description>Converts a string to a keystroke. The string should be of the
 form &lt;i&gt;modifiers&lt;/i&gt;+&lt;i&gt;shortcut&lt;/i&gt; where &lt;i&gt;modifiers&lt;/i&gt;
 is any combination of A for Alt, C for Control, S for Shift
 or M for Meta, and &lt;i&gt;shortcut&lt;/i&gt; is either a single character,
 or a keycode name from the &lt;code&gt;KeyEvent&lt;/code&gt; class, without
 the &lt;code&gt;VK_&lt;/code&gt; prefix.</description>
					<attribute name="@param">
						<description>keyStroke A string description of the key stroke</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="keyStroke" comment="A string description of the key stroke" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseKeyStroke" fulltype="javax.swing.KeyStroke" type="KeyStroke">
				<comment>
					<description>Converts a string to a Swing KeyStroke. The string should be of the
 form &lt;i&gt;modifiers&lt;/i&gt;+&lt;i&gt;shortcut&lt;/i&gt; where &lt;i&gt;modifiers&lt;/i&gt;
 is any combination of A for Alt, C for Control, S for Shift
 or M for Meta, and &lt;i&gt;shortcut&lt;/i&gt; is either a single character,
 or a keycode name from the &lt;code&gt;KeyEvent&lt;/code&gt; class, without
 the &lt;code&gt;VK_&lt;/code&gt; prefix. Returns null if the string corresponds
 to multiple KeyStrokes (e.g., &quot;C+e C+COMMA&quot;).</description>
					<attribute name="@param">
						<description>shortcut A string description of the key stroke</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0</description>
					</attribute>
				</comment>
				<params>
					<param name="shortcut" comment="A string description of the key stroke" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="setModifierMapping" fulltype="void" type="void">
				<comment>
					<description>Changes the mapping between symbolic modifier key names
 (&lt;code&gt;C&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;) and
 Java modifier flags.

 You can map more than one Java modifier to a symobolic modifier, for
 example :
 &lt;p&gt;&lt;code&gt;&lt;pre&gt;
	setModifierMapping(
		InputEvent.CTRL_MASK,
		InputEvent.ALT_MASK | InputEvent.META_MASK,
		0,
		InputEvent.SHIFT_MASK);
&lt;pre&gt;&lt;/code&gt;&lt;/p&gt;

 You cannot map a Java modifer to more than one symbolic modifier.</description>
					<attribute name="@param">
						<description>c The modifier(s) to map the &lt;code&gt;C&lt;/code&gt; modifier to</description>
					</attribute>
					<attribute name="@param">
						<description>a The modifier(s) to map the &lt;code&gt;A&lt;/code&gt; modifier to</description>
					</attribute>
					<attribute name="@param">
						<description>m The modifier(s) to map the &lt;code&gt;M&lt;/code&gt; modifier to</description>
					</attribute>
					<attribute name="@param">
						<description>s The modifier(s) to map the &lt;code&gt;S&lt;/code&gt; modifier to</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="The modifier(s) to map the &lt;code&gt;C&lt;/code&gt; modifier to" fulltype="int" type="int" />
					<param name="a" comment="The modifier(s) to map the &lt;code&gt;A&lt;/code&gt; modifier to" fulltype="int" type="int" />
					<param name="m" comment="The modifier(s) to map the &lt;code&gt;M&lt;/code&gt; modifier to" fulltype="int" type="int" />
					<param name="s" comment="The modifier(s) to map the &lt;code&gt;S&lt;/code&gt; modifier to" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getSymbolicModifierName" fulltype="char" type="char">
				<comment>
					<description>Returns a the symbolic modifier name for the specified Java modifier
 flag.</description>
					<attribute name="@param">
						<description>mod A modifier constant from &lt;code&gt;InputEvent&lt;/code&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="A modifier constant from &lt;code&gt;InputEvent&lt;/code&gt;" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="modifiersToString" fulltype="java.lang.String" type="String">
				<params>
					<param name="mods" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getModifierString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string containing symbolic modifier names set in the
 specified event.</description>
					<attribute name="@param">
						<description>evt The event</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="The event" fulltype="java.awt.event.InputEvent" type="InputEvent" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator.Key" type="KeyEventTranslator.Key">
			<fields>
				<field final="true" visibility="public" name="modifiers" fulltype="java.lang.String" type="String" />
				<field final="true" visibility="public" name="key" fulltype="int" type="int" />
				<field final="true" visibility="public" name="input" fulltype="char" type="char" />
				<field visibility="protected" name="isFromGlobalContext" fulltype="boolean" type="boolean">
					<comment>
						<description>Wether this Key event applies to all jEdit windows (and not only a specific jEdit GUI component).</description>
					</comment>
				</field>
			</fields>
			<methods>
				<constructor visibility="public" name="KeyEventTranslator.Key">
					<params>
						<param name="modifiers" fulltype="java.lang.String" type="String" />
						<param name="key" fulltype="int" type="int" />
						<param name="input" fulltype="char" type="char" />
					</params>
				</constructor>
				<method visibility="public" name="hashCode" fulltype="int" type="int" />
				<method visibility="public" name="equals" fulltype="boolean" type="boolean">
					<params>
						<param name="o" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="setIsFromGlobalContext" fulltype="void" type="void">
					<params>
						<param name="to" fulltype="boolean" type="boolean" />
					</params>
				</method>
				<method visibility="public" name="isFromGlobalContext" fulltype="boolean" type="boolean" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator.Key" type="KeyEventTranslator.Key">
		<fields>
			<field final="true" visibility="public" name="modifiers" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="public" name="key" fulltype="int" type="int" />
			<field final="true" visibility="public" name="input" fulltype="char" type="char" />
			<field visibility="protected" name="isFromGlobalContext" fulltype="boolean" type="boolean">
				<comment>
					<description>Wether this Key event applies to all jEdit windows (and not only a specific jEdit GUI component).</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="KeyEventTranslator.Key">
				<params>
					<param name="modifiers" fulltype="java.lang.String" type="String" />
					<param name="key" fulltype="int" type="int" />
					<param name="input" fulltype="char" type="char" />
				</params>
			</constructor>
			<method visibility="public" name="hashCode" fulltype="int" type="int" />
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setIsFromGlobalContext" fulltype="void" type="void">
				<params>
					<param name="to" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isFromGlobalContext" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.KeyEventWorkaround" type="KeyEventWorkaround">
		<comment>
			<description>Various hacks to get keyboard event handling to behave in a consistent manner
 across Java implementations. This type of stuff should not be necessary, but
 Java&apos;s keyboard handling is crap, to put it mildly.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: KeyEventWorkaround.java 21504 2012-03-29 17:45:22Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="KeyEventWorkaround" />
			<method static="true" visibility="public" name="isBindable" fulltype="boolean" type="boolean">
				<params>
					<param name="keyCode" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isPrintable" fulltype="boolean" type="boolean">
				<comment>
					<description>We need to know if a keycode can potentially result in a
 keytyped.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="keyCode" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isMacControl" fulltype="boolean" type="boolean">
				<comment>
					<description>Apple sucks.</description>
				</comment>
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method static="true" visibility="public" name="isNumericKeypad" fulltype="boolean" type="boolean">
				<params>
					<param name="keyCode" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="processKeyEvent" fulltype="java.awt.event.KeyEvent" type="KeyEvent">
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method static="true" visibility="public" name="numericKeypadKey" fulltype="void" type="void">
				<comment>
					<description>A workaround for non-working NumLock status in some Java versions.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre8</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.ListModelEditor" type="ListModelEditor">
		<comment>
			<description>A dialog that pops up when you click on &quot;Previously Entered Strings&quot;
 from a HistoryTextField.

  Allows the user to edit previously entered strings. Patch# 1818140</description>
			<attribute name="@author">
				<description>Joerg Spieler</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ListModelEditor" />
			<method visibility="public" name="open" fulltype="void" type="void">
				<params>
					<param name="listModel" fulltype="javax.swing.DefaultListModel" type="DefaultListModel" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.gui.LogViewer" type="LogViewer">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.DefaultFocusComponent" type="DefaultFocusComponent" />
		</implements>
		<comment>
			<description>Activity Log Viewer</description>
			<attribute name="@version">
				<description>$Id: LogViewer.java 21504 2012-03-29 17:45:22Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="LogViewer" />
			<method visibility="public" name="setBounds" fulltype="void" type="void">
				<params>
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="width" fulltype="int" type="int" />
					<param name="height" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
				</params>
			</method>
			<method visibility="public" name="addNotify" fulltype="void" type="void" />
			<method visibility="public" name="removeNotify" fulltype="void" type="void" />
			<method visibility="public" name="focusOnDefaultComponent" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.gui.MarkerViewer" type="MarkerViewer">
		<implements>
			<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
		</implements>
		<comment>
			<description>Dockable view of markers in the current buffer</description>
		</comment>
		<methods>
			<constructor visibility="public" name="MarkerViewer">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<method visibility="public" name="requestDefaultFocus" fulltype="boolean" type="boolean" />
			<method visibility="public" name="actionPerformed" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
				</params>
			</method>
			<method visibility="public" name="handleEditPaneUpdate" fulltype="void" type="void">
				<params>
					<param name="epu" fulltype="org.gjt.sp.jedit.msg.EditPaneUpdate" type="EditPaneUpdate" />
				</params>
			</method>
			<method visibility="public" name="handleViewUpdate" fulltype="void" type="void">
				<params>
					<param name="vu" fulltype="org.gjt.sp.jedit.msg.ViewUpdate" type="ViewUpdate" />
				</params>
			</method>
			<method visibility="public" name="handleBufferUpdate" fulltype="void" type="void">
				<params>
					<param name="bu" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
				</params>
			</method>
			<method visibility="public" name="addNotify" fulltype="void" type="void" />
			<method visibility="public" name="removeNotify" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui" interface="true" fulltype="org.gjt.sp.jedit.gui.MutableListModel" type="MutableListModel">
		<implements>
			<interface fulltype="javax.swing.ListModel" type="ListModel" />
		</implements>
		<comment>
			<description>Short Description of this class

 Long Description</description>
		</comment>
		<methods>
			<method visibility="public" name="removeElement" fulltype="boolean" type="boolean">
				<params>
					<param name="elem" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="insertElementAt" fulltype="void" type="void">
				<params>
					<param name="elem" fulltype="java.lang.Object" type="Object" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JTextField" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JTextField" fulltype="org.gjt.sp.jedit.gui.NumericTextField" type="NumericTextField">
		<comment>
			<description>A TextField that accepts only numeric values</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: KeyEventWorkaround.java 12889 2008-06-23 20:14:00Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre15</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="NumericTextField">
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="NumericTextField">
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="positiveOnly" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="protected" name="processKeyEvent" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.OptionsDialog" type="OptionsDialog">
		<implements>
			<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
			<interface fulltype="javax.swing.event.TreeSelectionListener" type="TreeSelectionListener" />
		</implements>
		<comment>
			<description>An abstract options dialog box.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: OptionsDialog.java 21586 2012-04-17 16:36:42Z ezust $</description>
			</attribute>
			<attribute name="@todo">
				<description>refactor to use OptionGroupPane</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="paneTree" fulltype="javax.swing.JTree" type="JTree" />
			<field visibility="protected" name="currentPane" fulltype="org.gjt.sp.jedit.OptionPane" type="OptionPane" />
		</fields>
		<methods>
			<constructor visibility="protected" name="OptionsDialog">
				<comment>
					<attribute name="@param">
						<description>frame - the parent frame for dialogs created</description>
					</attribute>
					<attribute name="@param">
						<description>name the name of an option pane - it must have a .title and .code
  		property defined in order to instantiate.</description>
					</attribute>
					<attribute name="@param">
						<description>pane the initial pane to show when this is created.</description>
					</attribute>
				</comment>
				<params>
					<param name="frame" comment="- the parent frame for dialogs created" fulltype="java.awt.Frame" type="Frame" />
					<param name="name" comment="the name of an option pane - it must have a .title and .code
  		property defined in order to instantiate." fulltype="java.lang.String" type="String" />
					<param name="pane" comment="the initial pane to show when this is created." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="protected" name="OptionsDialog">
				<params>
					<param name="dialog" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="pane" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="addOptionGroup" fulltype="void" type="void">
				<params>
					<param name="group" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup" />
				</params>
			</method>
			<method visibility="public" name="addOptionPane" fulltype="void" type="void">
				<params>
					<param name="pane" fulltype="org.gjt.sp.jedit.OptionPane" type="OptionPane" />
				</params>
			</method>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
			<method visibility="public" name="ok" fulltype="void" type="void">
				<params>
					<param name="dispose" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="dispose" fulltype="void" type="void" />
			<method visibility="public" name="actionPerformed" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
				</params>
			</method>
			<method visibility="public" name="valueChanged" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="javax.swing.event.TreeSelectionEvent" type="TreeSelectionEvent" />
				</params>
			</method>
			<method abstract="true" visibility="protected" name="createOptionTreeModel" fulltype="org.gjt.sp.jedit.gui.OptionsDialog.OptionTreeModel" type="OptionsDialog.OptionTreeModel">
				<comment>
					<description>Creates the tree model that goes on the left of the option pane,
 loading all the items that are needed.</description>
				</comment>
			</method>
			<method abstract="true" visibility="protected" name="getDefaultGroup" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup" />
			<method visibility="protected" name="init" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>name the name of this pane</description>
					</attribute>
					<attribute name="@param">
						<description>pane - a sub-pane name to select (?)
 Could someone please write better docs for this function?
 Creates buttons, adds listeners, and makes the pane visible.
 This method is called automatically from the constructor,

 and also calls init on each of the optionPanes?</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre9 (was private before)</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of this pane" fulltype="java.lang.String" type="String" />
					<param name="pane" comment="- a sub-pane name to select (?)
 Could someone please write better docs for this function?
 Creates buttons, adds listeners, and makes the pane visible.
 This method is called automatically from the constructor,

 and also calls init on each of the optionPanes?" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="EnhancedTreeCellRenderer" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.util.EnhancedTreeCellRenderer" fulltype="org.gjt.sp.jedit.gui.OptionsDialog.PaneNameRenderer" type="OptionsDialog.PaneNameRenderer">
			<methods>
				<constructor visibility="public" name="OptionsDialog.PaneNameRenderer" />
				<method visibility="protected" name="newInstance" fulltype="javax.swing.tree.TreeCellRenderer" type="TreeCellRenderer" />
				<method visibility="protected" name="configureTreeCellRendererComponent" fulltype="void" type="void">
					<params>
						<param name="tree" fulltype="javax.swing.JTree" type="JTree" />
						<param name="value" fulltype="java.lang.Object" type="Object" />
						<param name="selected" fulltype="boolean" type="boolean" />
						<param name="expanded" fulltype="boolean" type="boolean" />
						<param name="leaf" fulltype="boolean" type="boolean" />
						<param name="row" fulltype="int" type="int" />
						<param name="hasFocus" fulltype="boolean" type="boolean" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.OptionsDialog.OptionTreeModel" type="OptionsDialog.OptionTreeModel">
			<implements>
				<interface fulltype="javax.swing.tree.TreeModel" type="TreeModel" />
			</implements>
			<methods>
				<constructor visibility="public" name="OptionsDialog.OptionTreeModel" />
				<constructor visibility="public" name="OptionsDialog.OptionTreeModel">
					<params>
						<param name="root" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup" />
					</params>
				</constructor>
				<method visibility="public" name="addTreeModelListener" fulltype="void" type="void">
					<params>
						<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
					</params>
				</method>
				<method visibility="public" name="removeTreeModelListener" fulltype="void" type="void">
					<params>
						<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
					</params>
				</method>
				<method visibility="public" name="getChild" fulltype="java.lang.Object" type="Object">
					<params>
						<param name="parent" fulltype="java.lang.Object" type="Object" />
						<param name="index" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="getChildCount" fulltype="int" type="int">
					<params>
						<param name="parent" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="getIndexOfChild" fulltype="int" type="int">
					<params>
						<param name="parent" fulltype="java.lang.Object" type="Object" />
						<param name="child" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="getRoot" fulltype="java.lang.Object" type="Object" />
				<method visibility="public" name="isLeaf" fulltype="boolean" type="boolean">
					<params>
						<param name="node" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="valueForPathChanged" fulltype="void" type="void">
					<params>
						<param name="path" fulltype="javax.swing.tree.TreePath" type="TreePath" />
						<param name="newValue" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireNodesChanged" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireNodesInserted" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireNodesRemoved" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireTreeStructureChanged" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="EnhancedTreeCellRenderer" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.util.EnhancedTreeCellRenderer" fulltype="org.gjt.sp.jedit.gui.OptionsDialog.PaneNameRenderer" type="OptionsDialog.PaneNameRenderer">
		<methods>
			<constructor visibility="public" name="OptionsDialog.PaneNameRenderer" />
			<method visibility="protected" name="newInstance" fulltype="javax.swing.tree.TreeCellRenderer" type="TreeCellRenderer" />
			<method visibility="protected" name="configureTreeCellRendererComponent" fulltype="void" type="void">
				<params>
					<param name="tree" fulltype="javax.swing.JTree" type="JTree" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
					<param name="selected" fulltype="boolean" type="boolean" />
					<param name="expanded" fulltype="boolean" type="boolean" />
					<param name="leaf" fulltype="boolean" type="boolean" />
					<param name="row" fulltype="int" type="int" />
					<param name="hasFocus" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.OptionsDialog.OptionTreeModel" type="OptionsDialog.OptionTreeModel">
		<implements>
			<interface fulltype="javax.swing.tree.TreeModel" type="TreeModel" />
		</implements>
		<methods>
			<constructor visibility="public" name="OptionsDialog.OptionTreeModel" />
			<constructor visibility="public" name="OptionsDialog.OptionTreeModel">
				<params>
					<param name="root" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup" />
				</params>
			</constructor>
			<method visibility="public" name="addTreeModelListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
				</params>
			</method>
			<method visibility="public" name="removeTreeModelListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
				</params>
			</method>
			<method visibility="public" name="getChild" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="parent" fulltype="java.lang.Object" type="Object" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getChildCount" fulltype="int" type="int">
				<params>
					<param name="parent" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getIndexOfChild" fulltype="int" type="int">
				<params>
					<param name="parent" fulltype="java.lang.Object" type="Object" />
					<param name="child" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getRoot" fulltype="java.lang.Object" type="Object" />
			<method visibility="public" name="isLeaf" fulltype="boolean" type="boolean">
				<params>
					<param name="node" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="valueForPathChanged" fulltype="void" type="void">
				<params>
					<param name="path" fulltype="javax.swing.tree.TreePath" type="TreePath" />
					<param name="newValue" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireNodesChanged" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireNodesInserted" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireNodesRemoved" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireTreeStructureChanged" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.PanelWindowContainer" type="PanelWindowContainer">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.DockableWindowContainer" type="DockableWindowContainer" />
			<interface fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingArea" type="DockableWindowManager.DockingArea" />
		</implements>
		<comment>
			<description>A container for dockable windows. This class should never be used
 directly.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: PanelWindowContainer.java 21504 2012-03-29 17:45:22Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.0pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PanelWindowContainer">
				<params>
					<param name="wm" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl" type="DockableWindowManagerImpl" />
					<param name="position" fulltype="java.lang.String" type="String" />
					<param name="dimension" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="getDockableWindowManager" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl" type="DockableWindowManagerImpl">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="register" fulltype="void" type="void">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.Entry" type="DockableWindowManagerImpl.Entry" />
				</params>
			</method>
			<method visibility="public" name="unregister" fulltype="void" type="void">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.Entry" type="DockableWindowManagerImpl.Entry" />
				</params>
			</method>
			<method visibility="public" name="remove" fulltype="void" type="void">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.Entry" type="DockableWindowManagerImpl.Entry" />
				</params>
			</method>
			<method visibility="public" name="showMostRecent" fulltype="void" type="void" />
			<method visibility="public" name="show" fulltype="void" type="void">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.Entry" type="DockableWindowManagerImpl.Entry" />
				</params>
			</method>
			<method visibility="public" name="isVisible" fulltype="boolean" type="boolean">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.gui.DockableWindowManagerImpl.Entry" type="DockableWindowManagerImpl.Entry" />
				</params>
			</method>
			<method visibility="public" name="getCurrent" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the dockable in this container.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDimension" fulltype="int" type="int">
				<comment>
					<description>Returns the width or height (depending on position) of the dockable
 window container.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getPosition" fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDockables" fulltype="java.lang.String[]" type="String" />
			<method visibility="public" name="show" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.PanelWindowContainer.RotatedTextIcon" type="PanelWindowContainer.RotatedTextIcon">
			<implements>
				<interface fulltype="javax.swing.Icon" type="Icon" />
			</implements>
			<fields>
				<field final="true" static="true" const="0" visibility="public" name="NONE" constexpr="0" fulltype="int" type="int" />
				<field final="true" static="true" const="1" visibility="public" name="CW" constexpr="1" fulltype="int" type="int" />
				<field final="true" static="true" const="2" visibility="public" name="CCW" constexpr="2" fulltype="int" type="int" />
			</fields>
			<methods>
				<constructor visibility="public" name="PanelWindowContainer.RotatedTextIcon">
					<params>
						<param name="rotate" fulltype="int" type="int" />
						<param name="font" fulltype="java.awt.Font" type="Font" />
						<param name="text" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="getIconWidth" fulltype="int" type="int" />
				<method visibility="public" name="getIconHeight" fulltype="int" type="int" />
				<method visibility="public" name="paintIcon" fulltype="void" type="void">
					<params>
						<param name="c" fulltype="java.awt.Component" type="Component" />
						<param name="g" fulltype="java.awt.Graphics" type="Graphics" />
						<param name="x" fulltype="int" type="int" />
						<param name="y" fulltype="int" type="int" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.PanelWindowContainer.RotatedTextIcon" type="PanelWindowContainer.RotatedTextIcon">
		<implements>
			<interface fulltype="javax.swing.Icon" type="Icon" />
		</implements>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="NONE" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="CW" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="CCW" constexpr="2" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="PanelWindowContainer.RotatedTextIcon">
				<params>
					<param name="rotate" fulltype="int" type="int" />
					<param name="font" fulltype="java.awt.Font" type="Font" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getIconWidth" fulltype="int" type="int" />
			<method visibility="public" name="getIconHeight" fulltype="int" type="int" />
			<method visibility="public" name="paintIcon" fulltype="void" type="void">
				<params>
					<param name="c" fulltype="java.awt.Component" type="Component" />
					<param name="g" fulltype="java.awt.Graphics" type="Graphics" />
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.PasteFromListDialog" type="PasteFromListDialog">
		<comment>
			<description>Paste previous/paste deleted dialog</description>
		</comment>
		<methods>
			<constructor visibility="public" name="PasteFromListDialog">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="model" fulltype="org.gjt.sp.jedit.gui.MutableListModel" type="MutableListModel" />
				</params>
			</constructor>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.PasteSpecialDialog" type="PasteSpecialDialog">
		<comment>
			<description>&quot;Paste Special&quot; dialog.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PasteSpecialDialog">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</constructor>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.gui.PingPongList" type="PingPongList">
		<comment>
			<description>A panel with two lists, allowing the user to move items between them.
 All methods ensure that an element cannot appear in both lists simultaneously.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PingPongList">
				<params>
					<param name="leftData" fulltype="java.util.List" type="List" />
					<param name="rightData" fulltype="java.util.List" type="List" />
				</params>
			</constructor>
			<constructor visibility="public" name="PingPongList">
				<params>
					<param name="newOrientation" fulltype="int" type="int" />
					<param name="leftData" fulltype="java.util.List" type="List" />
					<param name="rightData" fulltype="java.util.List" type="List" />
				</params>
			</constructor>
			<method visibility="public" name="setLeftTooltip" fulltype="void" type="void">
				<params>
					<param name="leftTooltip" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setRightTooltip" fulltype="void" type="void">
				<params>
					<param name="rightTooltip" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setLeftTitle" fulltype="void" type="void">
				<params>
					<param name="leftTitle" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setRightTitle" fulltype="void" type="void">
				<params>
					<param name="rightTitle" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="removeLeftTitle" fulltype="void" type="void" />
			<method visibility="public" name="removeRightTitle" fulltype="void" type="void" />
			<method visibility="public" name="getLeftSize" fulltype="int" type="int" />
			<method visibility="public" name="getRightSize" fulltype="int" type="int" />
			<method visibility="public" name="getLeftDataIterator" fulltype="java.util.Iterator" type="Iterator" />
			<method visibility="public" name="getRightDataIterator" fulltype="java.util.Iterator" type="Iterator" />
			<method visibility="public" name="moveAllToLeft" fulltype="void" type="void" />
			<method visibility="public" name="moveAllToRight" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.gui.RegisterViewer" type="RegisterViewer">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.DockableWindow" type="DockableWindow" />
			<interface fulltype="org.gjt.sp.jedit.gui.DefaultFocusComponent" type="DefaultFocusComponent" />
		</implements>
		<comment>
			<description>Dockable view of register contents</description>
		</comment>
		<methods>
			<constructor visibility="public" name="RegisterViewer">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="position" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="focusOnDefaultComponent" fulltype="void" type="void" />
			<method visibility="public" name="handleRegisterChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.RegisterChanged" type="RegisterChanged" />
				</params>
			</method>
			<method visibility="public" name="addNotify" fulltype="void" type="void" />
			<method visibility="public" name="removeNotify" fulltype="void" type="void" />
			<method visibility="public" name="move" fulltype="void" type="void">
				<params>
					<param name="newPosition" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JButton" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JButton" fulltype="org.gjt.sp.jedit.gui.RolloverButton" type="RolloverButton">
		<comment>
			<description>Class for buttons that implement rollovers

 If you wish to have rollovers on your buttons, use this class.

 Unlike the Swing rollover support, this class works outside of
 &lt;code&gt;JToolBar&lt;/code&gt;s, and does not require undocumented client
 property hacks or JDK1.4-specific API calls.&lt;p&gt;

 Note: You should not call &lt;code&gt;setBorder()&lt;/code&gt; on your buttons,
 as they probably won&apos;t work properly.</description>
			<attribute name="@version">
				<description>$Id: RolloverButton.java 21506 2012-03-29 17:58:53Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="RolloverButton">
				<comment>
					<description>Setup the border (invisible initially)</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="RolloverButton">
				<comment>
					<description>Setup the border (invisible initially)</description>
					<attribute name="@param">
						<description>icon the icon of this button</description>
					</attribute>
				</comment>
				<params>
					<param name="icon" comment="the icon of this button" fulltype="javax.swing.Icon" type="Icon" />
				</params>
			</constructor>
			<method visibility="public" name="updateUI" fulltype="void" type="void" />
			<method visibility="public" name="setEnabled" fulltype="void" type="void">
				<params>
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setBorderPainted" fulltype="void" type="void">
				<params>
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="revalidate" fulltype="void" type="void">
				<comment>
					<description>We block calls to revalidate() from a setBorderPainted(), for
 performance reasons.</description>
				</comment>
			</method>
			<method visibility="public" name="paint" fulltype="void" type="void">
				<params>
					<param name="g" fulltype="java.awt.Graphics" type="Graphics" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.SelectLineRange" type="SelectLineRange">
		<implements>
			<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
		</implements>
		<comment>
			<description>Dialog for selection of a range of lines</description>
		</comment>
		<methods>
			<constructor visibility="public" name="SelectLineRange">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
			<method visibility="public" name="actionPerformed" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="ChangeEvent" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.event.ChangeEvent" fulltype="org.gjt.sp.jedit.gui.ShortcutPrefixActiveEvent" type="ShortcutPrefixActiveEvent">
		<comment>
			<description>Event fired when jEdit starts and stops listening for shortcut completions</description>
			<attribute name="@author">
				<description>jchoyt
 created    December 17, 2005</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="bindings" fulltype="java.util.Hashtable" type="Hashtable">
				<comment>
					<description>Description of the Field</description>
				</comment>
			</field>
			<field visibility="protected" name="active" fulltype="boolean" type="boolean">
				<comment>
					<description>Description of the Field</description>
				</comment>
			</field>
			<field static="true" visibility="protected" name="listenerList" fulltype="javax.swing.event.EventListenerList" type="EventListenerList">
				<comment>
					<description>Description of the Field</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="ShortcutPrefixActiveEvent">
				<comment>
					<description>Constructor for the ShortcutPrefixActiveEvent object</description>
					<attribute name="@param">
						<description>bindings Description of the Parameter</description>
					</attribute>
					<attribute name="@param">
						<description>active   Description of the Parameter</description>
					</attribute>
				</comment>
				<params>
					<param name="bindings" comment="Description of the Parameter" fulltype="java.util.Hashtable" type="Hashtable" />
					<param name="active" comment="Description of the Parameter" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="addChangeEventListener" fulltype="void" type="void">
				<comment>
					<description>Adds a feature to the ChangeEventListener attribute of the
 ShortcutPrefixActiveEvent class</description>
					<attribute name="@param">
						<description>l The feature to be added to the ChangeEventListener attribute</description>
					</attribute>
				</comment>
				<params>
					<param name="l" comment="The feature to be added to the ChangeEventListener attribute" fulltype="javax.swing.event.ChangeListener" type="ChangeListener" />
				</params>
			</method>
			<method static="true" visibility="public" name="removeChangeEventListener" fulltype="void" type="void">
				<comment>
					<description>Description of the Method</description>
					<attribute name="@param">
						<description>l Description of the Parameter</description>
					</attribute>
				</comment>
				<params>
					<param name="l" comment="Description of the Parameter" fulltype="javax.swing.event.ChangeListener" type="ChangeListener" />
				</params>
			</method>
			<method static="true" visibility="public" name="firePrefixStateChange" fulltype="void" type="void">
				<comment>
					<description>Description of the Method</description>
					<attribute name="@param">
						<description>bindings                       Description of the Parameter</description>
					</attribute>
					<attribute name="@param">
						<description>listeningForShortcutCompletion Description of the Parameter</description>
					</attribute>
				</comment>
				<params>
					<param name="bindings" comment="Description of the Parameter" fulltype="java.util.Hashtable" type="Hashtable" />
					<param name="listeningForShortcutCompletion" comment="Description of the Parameter" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getBindings" returncomment="The bindings value" fulltype="java.util.Hashtable" type="Hashtable">
				<comment>
					<description>Gets the bindings attribute of the ShortcutPrefixActiveEvent object</description>
					<attribute name="@return">
						<description>The bindings value</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getActive" returncomment="The active value" fulltype="boolean" type="boolean">
				<comment>
					<description>Gets the active attribute of the ShortcutPrefixActiveEvent object</description>
					<attribute name="@return">
						<description>The active value</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JComponent" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JComponent" fulltype="org.gjt.sp.jedit.gui.SplashScreen" type="SplashScreen">
		<comment>
			<description>The splash screen displayed on startup.</description>
			<attribute name="@version">
				<description>$Id: SplashScreen.java 21515 2012-03-31 08:35:49Z jarekczek $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SplashScreen" />
			<method visibility="public" name="dispose" fulltype="void" type="void" />
			<method synchronized="true" visibility="public" name="advance" fulltype="void" type="void" />
			<method synchronized="true" visibility="public" name="advance" fulltype="void" type="void">
				<params>
					<param name="label" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="paintComponent" fulltype="void" type="void">
				<params>
					<param name="g" fulltype="java.awt.Graphics" type="Graphics" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.BufferSetWidgetFactory" type="BufferSetWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<description>A Statusbar widget that show the bufferSet&apos;s scope of the current edit pane.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre15</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferSetWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.ClockWidgetFactory" type="ClockWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ClockWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.EncodingWidgetFactory" type="EncodingWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EncodingWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.ErrorsWidgetFactory" type="ErrorsWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<description>This widget will show you in the status bar the last errors reported in jEdit.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre15</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ErrorsWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.FoldWidgetFactory" type="FoldWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="FoldWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.IndentWidgetFactory" type="IndentWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Evan Wright</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 5.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IndentWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.LastModifiedWidgetFactory" type="LastModifiedWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<description>A Statusbar widget that show the time of last save of the current buffer.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.5pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="LastModifiedWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.LastModifiedWidgetFactory.LastModifiedWidget" type="LastModifiedWidgetFactory.LastModifiedWidget">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget" />
			</implements>
			<methods>
				<method visibility="public" name="getComponent" fulltype="javax.swing.JComponent" type="JComponent" />
				<method visibility="public" name="update" fulltype="void" type="void" />
				<method visibility="public" name="propertiesChanged" fulltype="void" type="void" />
				<method visibility="public" name="handleMessage" fulltype="void" type="void">
					<params>
						<param name="message" fulltype="org.gjt.sp.jedit.msg.EditPaneUpdate" type="EditPaneUpdate" />
					</params>
				</method>
				<method visibility="public" name="handleMessage" fulltype="void" type="void">
					<params>
						<param name="message" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.LastModifiedWidgetFactory.LastModifiedWidget" type="LastModifiedWidgetFactory.LastModifiedWidget">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget" />
		</implements>
		<methods>
			<method visibility="public" name="getComponent" fulltype="javax.swing.JComponent" type="JComponent" />
			<method visibility="public" name="update" fulltype="void" type="void" />
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void" />
			<method visibility="public" name="handleMessage" fulltype="void" type="void">
				<params>
					<param name="message" fulltype="org.gjt.sp.jedit.msg.EditPaneUpdate" type="EditPaneUpdate" />
				</params>
			</method>
			<method visibility="public" name="handleMessage" fulltype="void" type="void">
				<params>
					<param name="message" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.LineSepWidgetFactory" type="LineSepWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="LineSepWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.MemoryStatusWidgetFactory" type="MemoryStatusWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="MemoryStatusWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.ModeWidgetFactory" type="ModeWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ModeWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.MultiSelectWidgetFactory" type="MultiSelectWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="MultiSelectWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.OverwriteWidgetFactory" type="OverwriteWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="OverwriteWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.RectSelectWidgetFactory" type="RectSelectWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="RectSelectWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.SelectionLengthWidgetFactory" type="SelectionLengthWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre15</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SelectionLengthWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.SelectionLengthWidgetFactory.SelectionLengthWidget" type="SelectionLengthWidgetFactory.SelectionLengthWidget">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget" />
			</implements>
			<methods>
				<method visibility="public" name="getComponent" fulltype="javax.swing.JComponent" type="JComponent" />
				<method visibility="public" name="update" fulltype="void" type="void" />
				<method visibility="public" name="propertiesChanged" fulltype="void" type="void" />
				<method visibility="public" name="handleViewUpdate" fulltype="void" type="void">
					<params>
						<param name="viewUpdate" fulltype="org.gjt.sp.jedit.msg.ViewUpdate" type="ViewUpdate" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.SelectionLengthWidgetFactory.SelectionLengthWidget" type="SelectionLengthWidgetFactory.SelectionLengthWidget">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget" />
		</implements>
		<methods>
			<method visibility="public" name="getComponent" fulltype="javax.swing.JComponent" type="JComponent" />
			<method visibility="public" name="update" fulltype="void" type="void" />
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void" />
			<method visibility="public" name="handleViewUpdate" fulltype="void" type="void">
				<params>
					<param name="viewUpdate" fulltype="org.gjt.sp.jedit.msg.ViewUpdate" type="ViewUpdate" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" interface="true" fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory">
		<comment>
			<description>A widget factory for the status bar.
 
 Implement this interface and register via
 services.xml to add another status bar widget.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getWidget" returncomment="a widget instance" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<comment>
					<description>returns an instance of Widget for the given view</description>
					<attribute name="@param">
						<description>view the view to which the created widget will belong</description>
					</attribute>
					<attribute name="@return">
						<description>a widget instance</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="the view to which the created widget will belong" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.TaskMonitorWidgetFactory" type="TaskMonitorWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<description>A Statusbar widget that monitor the task manager.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.5pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="TaskMonitorWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JLabel" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" serializable="true" superclassfulltype="javax.swing.JLabel" fulltype="org.gjt.sp.jedit.gui.statusbar.ToolTipLabel" type="ToolTipLabel">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ToolTipLabel" />
			<method visibility="public" name="getToolTipLocation" fulltype="java.awt.Point" type="Point">
				<params>
					<param name="event" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" interface="true" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
		<comment>
			<description>Status Bar Widget interface.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getComponent" returncomment="a JComponent" fulltype="javax.swing.JComponent" type="JComponent">
				<comment>
					<description>Returns the component that will be inserted in the status bar</description>
					<attribute name="@return">
						<description>a JComponent</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void">
				<comment>
					<description>a callback telling that the properties have been changed, the widget
 can update itself if needed</description>
				</comment>
			</method>
			<method visibility="public" name="update" fulltype="void" type="void">
				<comment>
					<description>A refresh is asked to the widget</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.statusbar" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.statusbar.WrapWidgetFactory" type="WrapWidgetFactory">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory" type="StatusWidgetFactory" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre14</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="WrapWidgetFactory" />
			<method visibility="public" name="getWidget" fulltype="org.gjt.sp.jedit.gui.statusbar.Widget" type="Widget">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.gui.StatusBar" type="StatusBar">
		<implements>
			<interface fulltype="org.gjt.sp.util.WorkThreadProgressListener" type="WorkThreadProgressListener" />
		</implements>
		<comment>
			<description>The status bar used to display various information to the user.

 Currently, it is used for the following:
 &lt;ul&gt;
 &lt;li&gt;Displaying caret position information
 &lt;li&gt;Displaying {@link InputHandler#readNextChar(String,String)} prompts
 &lt;li&gt;Displaying {@link #setMessage(String)} messages
 &lt;li&gt;Displaying I/O progress
 &lt;li&gt;Displaying various editor settings
 &lt;li&gt;Displaying memory status
 &lt;/ul&gt;</description>
			<attribute name="@version">
				<description>$Id: StatusBar.java 21616 2012-04-30 08:32:24Z kpouer $</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 3.2pre2</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="StatusBar">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void" />
			<method visibility="public" name="addNotify" fulltype="void" type="void" />
			<method visibility="public" name="removeNotify" fulltype="void" type="void" />
			<method visibility="public" name="statusUpdate" fulltype="void" type="void">
				<params>
					<param name="threadPool" fulltype="org.gjt.sp.util.WorkThreadPool" type="WorkThreadPool" />
					<param name="threadIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="progressUpdate" fulltype="void" type="void">
				<params>
					<param name="threadPool" fulltype="org.gjt.sp.util.WorkThreadPool" type="WorkThreadPool" />
					<param name="threadIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getMessage" returncomment="the current message" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the current message.</description>
					<attribute name="@return">
						<description>the current message</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setMessageAndClear" fulltype="void" type="void">
				<comment>
					<description>Show a message for a short period of time.</description>
					<attribute name="@param">
						<description>message The message</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="The message" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setMessage" fulltype="void" type="void">
				<comment>
					<description>Displays a status message.</description>
					<attribute name="@param">
						<description>message the message to display, it can be null</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the message to display, it can be null" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setMessageComponent" fulltype="void" type="void">
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="updateCaretStatus" fulltype="void" type="void" />
			<method visibility="public" name="updateBufferStatus" fulltype="void" type="void" />
			<method visibility="public" name="updateMiscStatus" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.StyleEditor" type="StyleEditor">
		<implements>
			<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
		</implements>
		<comment>
			<description>Style editor dialog</description>
		</comment>
		<methods>
			<constructor visibility="public" name="StyleEditor">
				<params>
					<param name="parent" fulltype="javax.swing.JDialog" type="JDialog" />
					<param name="style" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle" type="SyntaxStyle" />
					<param name="styleName" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="StyleEditor">
				<params>
					<param name="parent" fulltype="javax.swing.JFrame" type="JFrame" />
					<param name="style" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle" type="SyntaxStyle" />
					<param name="styleName" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="invokeForCaret" fulltype="void" type="void">
				<comment>
					<description>Edit the syntax style of the token under the caret.</description>
					<attribute name="@param">
						<description>textArea the textarea where your caret is</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="the textarea where your caret is" fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea" />
				</params>
			</method>
			<method visibility="public" name="actionPerformed" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
				</params>
			</method>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
			<method visibility="public" name="getStyle" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle" type="SyntaxStyle" />
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.gui.TaskMonitor" type="TaskMonitor">
		<implements>
			<interface fulltype="org.gjt.sp.util.TaskListener" type="TaskListener" />
		</implements>
		<comment>
			<description>Task Monitor dockable panel, for showing progress on active tasks.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="TaskMonitor" />
			<method visibility="public" name="addNotify" fulltype="void" type="void" />
			<method visibility="public" name="removeNotify" fulltype="void" type="void" />
			<method visibility="public" name="waiting" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="running" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="done" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="statusUpdated" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="maximumUpdated" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="valueUpdated" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.TextAreaDialog" type="TextAreaDialog">
		<comment>
			<description>A dialog box with a text area</description>
		</comment>
		<methods>
			<constructor visibility="public" name="TextAreaDialog">
				<params>
					<param name="frame" fulltype="java.awt.Frame" type="Frame" />
					<param name="title" fulltype="java.lang.String" type="String" />
					<param name="caption" fulltype="java.lang.String" type="String" />
					<param name="icon" fulltype="javax.swing.Icon" type="Icon" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="TextAreaDialog">
				<params>
					<param name="frame" fulltype="java.awt.Frame" type="Frame" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="TextAreaDialog">
				<params>
					<param name="frame" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="title" fulltype="java.lang.String" type="String" />
					<param name="caption" fulltype="java.lang.String" type="String" />
					<param name="icon" fulltype="javax.swing.Icon" type="Icon" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="TextAreaDialog">
				<params>
					<param name="frame" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.gui.TipOfTheDay" type="TipOfTheDay">
		<comment>
			<description>Tip of the day window</description>
		</comment>
		<methods>
			<constructor visibility="public" name="TipOfTheDay">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.ToolBarManager" type="ToolBarManager">
		<comment>
			<description>Handles toolbars for a single View</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ToolBarManager">
				<params>
					<param name="top" fulltype="java.awt.Container" type="Container" />
					<param name="bottom" fulltype="java.awt.Container" type="Container" />
				</params>
			</constructor>
			<method visibility="public" name="addToolBar" fulltype="void" type="void">
				<params>
					<param name="group" fulltype="int" type="int" />
					<param name="layer" fulltype="int" type="int" />
					<param name="toolbar" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="removeToolBar" fulltype="void" type="void">
				<params>
					<param name="toolbar" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JEditTrayIcon" visibility="public" package="org.gjt.sp.jedit.gui.tray" superclassfulltype="org.gjt.sp.jedit.gui.tray.JEditTrayIcon" fulltype="org.gjt.sp.jedit.gui.tray.JEditSwingTrayIcon" type="JEditSwingTrayIcon">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.5pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JEditSwingTrayIcon" />
			<method visibility="public" name="handleMessage" fulltype="void" type="void">
				<params>
					<param name="message" fulltype="org.gjt.sp.jedit.EBMessage" type="EBMessage" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="JTrayIcon" visibility="public" package="org.gjt.sp.jedit.gui.tray" superclassfulltype="org.gjt.sp.jedit.gui.tray.JTrayIcon" fulltype="org.gjt.sp.jedit.gui.tray.JEditTrayIcon" type="JEditTrayIcon">
		<comment>
			<description>The mother class of the tray icon service.
 If you want to replace the tray icon of jEdit, you must extend it
 and declare a service &quot;org.gjt.sp.jedit.gui.tray.JEditTrayIcon&quot;</description>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.ServiceManager</description>
			</attribute>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="JEditTrayIcon">
				<params>
					<param name="image" fulltype="java.awt.Image" type="Image" />
					<param name="tooltip" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="TrayIcon" visibility="public" package="org.gjt.sp.jedit.gui.tray" superclassfulltype="java.awt.TrayIcon" fulltype="org.gjt.sp.jedit.gui.tray.JTrayIcon" type="JTrayIcon">
		<comment>
			<description>A TrayIcon that accepts Swing JPopupMenu.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.5pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JTrayIcon">
				<params>
					<param name="image" fulltype="java.awt.Image" type="Image" />
					<param name="tooltip" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getMenu" fulltype="javax.swing.JPopupMenu" type="JPopupMenu" />
			<method visibility="public" name="setMenu" fulltype="void" type="void">
				<params>
					<param name="menu" fulltype="javax.swing.JPopupMenu" type="JPopupMenu" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui.tray" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.tray.JTrayIconManager" type="JTrayIconManager">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.5pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JTrayIconManager" />
			<method static="true" visibility="public" name="setTrayIconArgs" fulltype="void" type="void">
				<params>
					<param name="restore" fulltype="boolean" type="boolean" />
					<param name="userDir" fulltype="java.lang.String" type="String" />
					<param name="args" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="addTrayIcon" fulltype="void" type="void" />
			<method static="true" visibility="public" name="removeTrayIcon" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.gui" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.gui.VariableGridLayout" type="VariableGridLayout">
		<implements>
			<interface fulltype="java.awt.LayoutManager2" type="LayoutManager2" />
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>A rectangular grid layout manager with variable cell sizes

 The container is divided into rectangles, and one component is placed
 in each rectangle. Each row is as large as the largest component in
 that row, and each column is as wide as the widest component in
 that column.&lt;p&gt;

 This behavior is basically the same as in
 &lt;code&gt;java.awt.GridLayout&lt;/code&gt;, but with different row heights and
 column widths for each row/column.&lt;p&gt;

 For example, the following is an applet that lays out six buttons
 into three rows and two columns:&lt;p&gt;

 &lt;blockquote&gt;&lt;pre&gt;
 import java.awt.*;
 import java.applet.Applet;
 public class ButtonGrid extends Applet {
     public void init() {
         setLayout(new VariableGridLayout(VariableGridLayout.FIXED_NUM_COLUMNS, 2));
         add(new Button(&quot;1&quot;));
         add(new Button(&quot;2&quot;));
         add(new Button(&quot;3&quot;));
         add(new Button(&quot;4&quot;));
         add(new Button(&quot;5&quot;));
         add(new Button(&quot;6&quot;));
     }
 }
 &lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;

 &lt;b&gt;Programmer&apos;s remark:&lt;/b&gt; VariableGridLayout could be faster, if it would
 reside in the package java.awt, because then it could access some
 package private fields of &lt;code&gt;Container&lt;/code&gt; or
 &lt;code&gt;Component&lt;/code&gt;. Instead, it has to call
 &lt;code&gt;Component.getSize()&lt;/code&gt;,
 which allocates memory on the heap.&lt;p&gt;

 &lt;b&gt;Todo:&lt;/b&gt;
 &lt;ul&gt;
 &lt;li&gt;Ability to span components over more than one cell horizontally and vertically.
 &lt;/ul&gt;</description>
			<attribute name="@author">
				<description>Dirk Moebius, Björn &quot;Vampire&quot; Kautler</description>
			</attribute>
			<attribute name="@version">
				<description>1.5</description>
			</attribute>
			<attribute name="@see">
				<description>java.awt.GridLayout</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="1" visibility="public" name="FIXED_NUM_ROWS" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="FIXED_NUM_COLUMNS" constexpr="2" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="VariableGridLayout">
				<comment>
					<description>Creates a variable grid layout manager with the specified mode,
 size, horizontal and vertical gap, eventually taking minimum and maximum
 sizes into account when distributing free space, depending on takeSizesIntoAccount
 and the specified distance to the borders.</description>
					<attribute name="@param">
						<description>mode The mode in which to operate. Either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS</description>
					</attribute>
					<attribute name="@param">
						<description>size The amount of rows for mode FIXED_NUM_ROWS or the amount of columns for mode FIXED_NUM_COLUMNS (&gt;0)</description>
					</attribute>
					<attribute name="@param">
						<description>hgap The horizontal space between cells (&gt;=0)</description>
					</attribute>
					<attribute name="@param">
						<description>vgap The vertical space between cells (&gt;=0)</description>
					</attribute>
					<attribute name="@param">
						<description>takeSizesIntoAccount Whether to take minimum and maximum sizes into account when distributing free space
        Javier Diaz Soto (jbds) warns in #2997417 that this may cause gui freeze and provides a patch</description>
					</attribute>
					<attribute name="@param">
						<description>distanceToBorders The distances to the borders</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if mode is not either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS or size is &lt;= 0 or hgap or vgap is &lt; 0</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" comment="The mode in which to operate. Either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS" fulltype="int" type="int" />
					<param name="size" comment="The amount of rows for mode FIXED_NUM_ROWS or the amount of columns for mode FIXED_NUM_COLUMNS (&gt;0)" fulltype="int" type="int" />
					<param name="hgap" comment="The horizontal space between cells (&gt;=0)" fulltype="int" type="int" />
					<param name="vgap" comment="The vertical space between cells (&gt;=0)" fulltype="int" type="int" />
					<param name="takeSizesIntoAccount" comment="Whether to take minimum and maximum sizes into account when distributing free space
        Javier Diaz Soto (jbds) warns in #2997417 that this may cause gui freeze and provides a patch" fulltype="boolean" type="boolean" />
					<param name="distanceToBorders" comment="The distances to the borders" fulltype="java.awt.Insets" type="Insets" />
				</params>
			</constructor>
			<constructor visibility="public" name="VariableGridLayout">
				<comment>
					<description>Creates a variable grid layout manager with the specified mode,
 size, horizontal and vertical gap, eventually taking minimum and maximum
 sizes into account when distributing free space, depending on takeSizesIntoAccount
 and zero distance to borders.</description>
					<attribute name="@param">
						<description>mode The mode in which to operate. Either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS</description>
					</attribute>
					<attribute name="@param">
						<description>size The amount of rows for mode FIXED_NUM_ROWS or the amount of columns for mode FIXED_NUM_COLUMNS (&gt;0)</description>
					</attribute>
					<attribute name="@param">
						<description>hgap The horizontal space between cells (&gt;=0)</description>
					</attribute>
					<attribute name="@param">
						<description>vgap The vertical space between cells (&gt;=0)</description>
					</attribute>
					<attribute name="@param">
						<description>takeSizesIntoAccount Whether to take minimum and maximum sizes into account when distributing free space
        Javier Diaz Soto (jbds) warns in #2997417 that this may cause gui freeze and provides a patch</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if mode is not either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS or size is &lt;= 0 or hgap or vgap is &lt; 0</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" comment="The mode in which to operate. Either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS" fulltype="int" type="int" />
					<param name="size" comment="The amount of rows for mode FIXED_NUM_ROWS or the amount of columns for mode FIXED_NUM_COLUMNS (&gt;0)" fulltype="int" type="int" />
					<param name="hgap" comment="The horizontal space between cells (&gt;=0)" fulltype="int" type="int" />
					<param name="vgap" comment="The vertical space between cells (&gt;=0)" fulltype="int" type="int" />
					<param name="takeSizesIntoAccount" comment="Whether to take minimum and maximum sizes into account when distributing free space
        Javier Diaz Soto (jbds) warns in #2997417 that this may cause gui freeze and provides a patch" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="VariableGridLayout">
				<comment>
					<description>Creates a variable grid layout manager with the specified mode,
 size, horizontal and vertical gap, and zero distance to borders.
 The minimum and maximum Component sizes are not taken into account
 when distributing free space.</description>
					<attribute name="@param">
						<description>mode The mode in which to operate. Either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS</description>
					</attribute>
					<attribute name="@param">
						<description>size The amount of rows for mode FIXED_NUM_ROWS or the amount of columns for mode FIXED_NUM_COLUMNS</description>
					</attribute>
					<attribute name="@param">
						<description>hgap The horizontal space between cells</description>
					</attribute>
					<attribute name="@param">
						<description>vgap The vertical space between cells</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if mode is not either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS or size is &lt;= 0 or hgap or vgap is &lt; 0</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" comment="The mode in which to operate. Either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS" fulltype="int" type="int" />
					<param name="size" comment="The amount of rows for mode FIXED_NUM_ROWS or the amount of columns for mode FIXED_NUM_COLUMNS" fulltype="int" type="int" />
					<param name="hgap" comment="The horizontal space between cells" fulltype="int" type="int" />
					<param name="vgap" comment="The vertical space between cells" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="VariableGridLayout">
				<comment>
					<description>Creates a variable grid layout manager with the specified mode
 and size, zero horizontal and vertical gap, and zero distance to borders.
 Does not take minimum and maximum Component sizes into account when distributing
 free space.</description>
					<attribute name="@param">
						<description>mode The mode in which to operate. Either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS</description>
					</attribute>
					<attribute name="@param">
						<description>size The amount of rows for mode FIXED_NUM_ROWS or the amount of columns for mode FIXED_NUM_COLUMNS</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if mode is not either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS or size is &lt;= 0</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" comment="The mode in which to operate. Either FIXED_NUM_ROWS or FIXED_NUM_COLUMNS" fulltype="int" type="int" />
					<param name="size" comment="The amount of rows for mode FIXED_NUM_ROWS or the amount of columns for mode FIXED_NUM_COLUMNS" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="VariableGridLayout">
				<comment>
					<description>Creates a variable grid layout manager with mode FIXED_NUM_ROWS,
 number of rows == 1, zero horizontal and vertical gap, and zero distance to borders.
 Does not take minimum and maximum Component sizes into account when
 distributing free space.</description>
				</comment>
			</constructor>
			<method visibility="public" name="addLayoutComponent" fulltype="void" type="void">
				<comment>
					<description>Not used in this class.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="component" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="addLayoutComponent" fulltype="void" type="void">
				<comment>
					<description>Not used in this class.</description>
				</comment>
				<params>
					<param name="component" fulltype="java.awt.Component" type="Component" />
					<param name="constraints" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="removeLayoutComponent" fulltype="void" type="void">
				<comment>
					<description>Not used in this class.</description>
				</comment>
				<params>
					<param name="component" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="getLayoutAlignmentX" fulltype="float" type="float">
				<comment>
					<description>Always returns 0.5.</description>
				</comment>
				<params>
					<param name="container" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="getLayoutAlignmentY" fulltype="float" type="float">
				<comment>
					<description>Always returns 0.5.</description>
				</comment>
				<params>
					<param name="container" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="preferredLayoutSize" fulltype="java.awt.Dimension" type="Dimension">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="minimumLayoutSize" fulltype="java.awt.Dimension" type="Dimension">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="maximumLayoutSize" fulltype="java.awt.Dimension" type="Dimension">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="layoutContainer" fulltype="void" type="void">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="invalidateLayout" fulltype="void" type="void">
				<params>
					<param name="container" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of this variable grid layout." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of this variable grid layout&apos;s values.</description>
					<attribute name="@return">
						<description>a string representation of this variable grid layout.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.GUIUtilities" type="GUIUtilities">
		<comment>
			<description>Various GUI utility functions related to icons, menus, toolbars, keyboard shortcuts, etc. 

 The most frequently used members of this class are:

 &lt;ul&gt;
 &lt;li&gt;{@link #loadIcon(String)}&lt;/li&gt;
 &lt;li&gt;{@link #confirm(Component,String,Object[],int,int)}&lt;/li&gt;
 &lt;li&gt;{@link #error(Component,String,Object[])}&lt;/li&gt;
 &lt;li&gt;{@link #message(Component,String,Object[])}&lt;/li&gt;

 &lt;li&gt;{@link #showVFSFileDialog(View,String,int,boolean)}&lt;/li&gt;
 &lt;li&gt;{@link #loadGeometry(Window,String)}&lt;/li&gt;
 &lt;li&gt;{@link #saveGeometry(Window,String)}&lt;/li&gt;
 &lt;li&gt;{@link #showPopupMenu(JPopupMenu,Component,int,int)}&lt;/li&gt;
 &lt;/ul&gt;</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: GUIUtilities.java 21469 2012-03-28 17:33:10Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="setIconPath" fulltype="void" type="void">
				<comment>
					<description>Sets the path where jEdit looks for icons.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="iconPath" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadIcon" fulltype="javax.swing.Icon" type="Icon">
				<comment>
					<description>Loads an icon.</description>
					<attribute name="@param">
						<description>iconName The icon name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="iconName" comment="The icon name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getEditorIcon" fulltype="java.awt.Image" type="Image">
				<comment>
					<description>Returns the default editor window image.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getPluginIcon" fulltype="java.awt.Image" type="Image">
				<comment>
					<description>Returns the default plugin window image.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="loadMenuBar" fulltype="javax.swing.JMenuBar" type="JMenuBar">
				<comment>
					<description>Creates a menubar. Plugins should not need to call this method.</description>
					<attribute name="@param">
						<description>name The menu bar name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The menu bar name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadMenuBar" fulltype="javax.swing.JMenuBar" type="JMenuBar">
				<comment>
					<description>Creates a menubar. Plugins should not need to call this method.</description>
					<attribute name="@param">
						<description>context An action context</description>
					</attribute>
					<attribute name="@param">
						<description>name The menu bar name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="context" comment="An action context" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
					<param name="name" comment="The menu bar name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadMenu" fulltype="javax.swing.JMenu" type="JMenu">
				<comment>
					<description>Creates a menu. The menu label is set from the
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt; property. The menu contents is taken
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt; property, which is a whitespace
 separated list of action names. An action name of &lt;code&gt;-&lt;/code&gt;
 inserts a separator in the menu.</description>
					<attribute name="@param">
						<description>name The menu name</description>
					</attribute>
					<attribute name="@see">
						<description>#loadMenuItem(String)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The menu name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadMenu" fulltype="javax.swing.JMenu" type="JMenu">
				<comment>
					<description>Creates a menu. The menu label is set from the
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt; property. The menu contents is taken
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt; property, which is a whitespace
 separated list of action names. An action name of &lt;code&gt;-&lt;/code&gt;
 inserts a separator in the menu.</description>
					<attribute name="@param">
						<description>context An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>name The menu name</description>
					</attribute>
					<attribute name="@see">
						<description>#loadMenuItem(String)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="context" comment="An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;." fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
					<param name="name" comment="The menu name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadPopupMenu" fulltype="javax.swing.JPopupMenu" type="JPopupMenu">
				<comment>
					<description>Creates a popup menu.</description>
					<attribute name="@param">
						<description>name The menu name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The menu name" fulltype="java.lang.String" type="String" />
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea" />
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadPopupMenu" fulltype="javax.swing.JPopupMenu" type="JPopupMenu">
				<comment>
					<description>Creates a popup menu.</description>
					<attribute name="@param">
						<description>name The menu name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The menu name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadPopupMenu" fulltype="javax.swing.JPopupMenu" type="JPopupMenu">
				<comment>
					<description>Creates a popup menu.</description>
					<attribute name="@param">
						<description>context An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>name The menu name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="context" comment="An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;." fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
					<param name="name" comment="The menu name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadPopupMenu" fulltype="javax.swing.JPopupMenu" type="JPopupMenu">
				<comment>
					<description>Creates a popup menu.</description>
					<attribute name="@param">
						<description>context An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>name The menu name</description>
					</attribute>
					<attribute name="@param">
						<description>textArea the textArea wanting to show the popup.
 	If not null, include context menu items defined by services.</description>
					</attribute>
					<attribute name="@param">
						<description>evt additional context info about where the mouse was when menu was requested</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="context" comment="An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;." fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
					<param name="name" comment="The menu name" fulltype="java.lang.String" type="String" />
					<param name="textArea" comment="the textArea wanting to show the popup.
 	If not null, include context menu items defined by services." fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea" />
					<param name="evt" comment="additional context info about where the mouse was when menu was requested" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method static="true" visibility="public" name="getServiceContextMenuItems" returncomment="a list of menu items defined by services." fulltype="java.util.List" type="List">
				<comment>
					<attribute name="@return">
						<description>a list of menu items defined by services.</description>
					</attribute>
					<attribute name="@param">
						<description>textArea the TextArea desiring to display these menu items</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="the TextArea desiring to display these menu items" fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea" />
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadMenuItem" fulltype="javax.swing.JMenuItem" type="JMenuItem">
				<comment>
					<description>Creates a menu item. The menu item is bound to the action named by
 &lt;code&gt;name&lt;/code&gt; with label taken from the return value of the
 {@link EditAction#getLabel()} method.</description>
					<attribute name="@param">
						<description>name The menu item name</description>
					</attribute>
					<attribute name="@see">
						<description>#loadMenu(String)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The menu item name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadMenuItem" fulltype="javax.swing.JMenuItem" type="JMenuItem">
				<comment>
					<description>Creates a menu item.</description>
					<attribute name="@param">
						<description>name The menu item name</description>
					</attribute>
					<attribute name="@param">
						<description>setMnemonic True if the menu item should have a mnemonic</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The menu item name" fulltype="java.lang.String" type="String" />
					<param name="setMnemonic" comment="True if the menu item should have a mnemonic" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadMenuItem" fulltype="javax.swing.JMenuItem" type="JMenuItem">
				<comment>
					<description>Creates a menu item.</description>
					<attribute name="@param">
						<description>context An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>name The menu item name</description>
					</attribute>
					<attribute name="@param">
						<description>setMnemonic True if the menu item should have a mnemonic</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="context" comment="An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;." fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
					<param name="name" comment="The menu item name" fulltype="java.lang.String" type="String" />
					<param name="setMnemonic" comment="True if the menu item should have a mnemonic" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadMenuItem" fulltype="javax.swing.JMenuItem" type="JMenuItem">
				<params>
					<param name="editAction" fulltype="org.gjt.sp.jedit.EditAction" type="EditAction" />
					<param name="setMnemonic" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadToolBar" fulltype="java.awt.Container" type="Container">
				<comment>
					<description>Creates a toolbar.</description>
					<attribute name="@param">
						<description>name The toolbar name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The toolbar name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadToolBar" fulltype="java.awt.Container" type="Container">
				<comment>
					<description>Creates a toolbar.</description>
					<attribute name="@param">
						<description>context An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>name The toolbar name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="context" comment="An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;." fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
					<param name="name" comment="The toolbar name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadToolButton" fulltype="org.gjt.sp.jedit.gui.EnhancedButton" type="EnhancedButton">
				<comment>
					<description>Loads a tool bar button. The tooltip is constructed from
 the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt; and
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.shortcut&lt;/code&gt; properties and the icon is loaded
 from the resource named &apos;/org/gjt/sp/jedit/icons/&apos; suffixed
 with the value of the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.icon&lt;/code&gt; property.</description>
					<attribute name="@param">
						<description>name The name of the button</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name of the button" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadToolButton" fulltype="org.gjt.sp.jedit.gui.EnhancedButton" type="EnhancedButton">
				<comment>
					<description>Loads a tool bar button. The tooltip is constructed from
 the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt; and
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.shortcut&lt;/code&gt; properties and the icon is loaded
 from the resource named &apos;/org/gjt/sp/jedit/icons/&apos; suffixed
 with the value of the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.icon&lt;/code&gt; property.</description>
					<attribute name="@param">
						<description>context An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the button</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="context" comment="An action context; either
 &lt;code&gt;jEdit.getActionContext()&lt;/code&gt; or
 &lt;code&gt;VFSBrowser.getActionContext()&lt;/code&gt;." fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
					<param name="name" comment="The name of the button" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="prettifyMenuLabel" fulltype="java.lang.String" type="String">
				<comment>
					<description>`Prettifies&apos; a menu item label by removing the `$&apos; sign. This
 can be used to process the contents of an &lt;i&gt;action&lt;/i&gt;.label
 property.</description>
				</comment>
				<params>
					<param name="label" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getPlatformShortcutLabel" fulltype="java.lang.String" type="String">
				<comment>
					<description>Translates a shortcut description string (e.g. &quot;CS+SEMICOLON&quot;) to
 a platform-localized description.  On OS X this puts in the pretty
 unicode characters for Shift, Cmd, etc.</description>
				</comment>
				<params>
					<param name="label" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getShortcutLabel" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a label string to show users what shortcut are
 assigned to the action.</description>
				</comment>
				<params>
					<param name="action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="message" fulltype="void" type="void">
				<comment>
					<description>Displays a dialog box.
 The title of the dialog is fetched from
 the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.title&lt;/code&gt; property. The message is fetched
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.message&lt;/code&gt; property. The message
 is formatted by the property manager with &lt;code&gt;args&lt;/code&gt; as
 positional parameters.</description>
					<attribute name="@param">
						<description>comp The component to display the dialog for</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the dialog</description>
					</attribute>
					<attribute name="@param">
						<description>args Positional parameters to be substituted into the
 message text</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to display the dialog for" fulltype="java.awt.Component" type="Component" />
					<param name="name" comment="The name of the dialog" fulltype="java.lang.String" type="String" />
					<param name="args" comment="Positional parameters to be substituted into the
 message text" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="error" fulltype="void" type="void">
				<comment>
					<description>Displays an error dialog box.
 The title of the dialog is fetched from
 the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.title&lt;/code&gt; property. The message is fetched
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.message&lt;/code&gt; property. The message
 is formatted by the property manager with &lt;code&gt;args&lt;/code&gt; as
 positional parameters.</description>
					<attribute name="@param">
						<description>comp The component to display the dialog for</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the dialog</description>
					</attribute>
					<attribute name="@param">
						<description>args Positional parameters to be substituted into the
 message text</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to display the dialog for" fulltype="java.awt.Component" type="Component" />
					<param name="name" comment="The name of the dialog" fulltype="java.lang.String" type="String" />
					<param name="args" comment="Positional parameters to be substituted into the
 message text" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="input" fulltype="java.lang.String" type="String">
				<comment>
					<description>Displays an input dialog box and returns any text the user entered.
 The title of the dialog is fetched from
 the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.title&lt;/code&gt; property. The message is fetched
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.message&lt;/code&gt; property.</description>
					<attribute name="@param">
						<description>comp The component to display the dialog for</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the dialog</description>
					</attribute>
					<attribute name="@param">
						<description>def The text to display by default in the input field</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to display the dialog for" fulltype="java.awt.Component" type="Component" />
					<param name="name" comment="The name of the dialog" fulltype="java.lang.String" type="String" />
					<param name="def" comment="The text to display by default in the input field" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="inputProperty" fulltype="java.lang.String" type="String">
				<comment>
					<description>Displays an input dialog box and returns any text the user entered.
 The title of the dialog is fetched from
 the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.title&lt;/code&gt; property. The message is fetched
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.message&lt;/code&gt; property.</description>
					<attribute name="@param">
						<description>comp The component to display the dialog for</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the dialog</description>
					</attribute>
					<attribute name="@param">
						<description>def The property whose text to display in the input field</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to display the dialog for" fulltype="java.awt.Component" type="Component" />
					<param name="name" comment="The name of the dialog" fulltype="java.lang.String" type="String" />
					<param name="def" comment="The property whose text to display in the input field" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="input" fulltype="java.lang.String" type="String">
				<comment>
					<description>Displays an input dialog box and returns any text the user entered.
 The title of the dialog is fetched from
 the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.title&lt;/code&gt; property. The message is fetched
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.message&lt;/code&gt; property.</description>
					<attribute name="@param">
						<description>comp The component to display the dialog for</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the dialog</description>
					</attribute>
					<attribute name="@param">
						<description>def The text to display by default in the input field</description>
					</attribute>
					<attribute name="@param">
						<description>args Positional parameters to be substituted into the
 message text</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to display the dialog for" fulltype="java.awt.Component" type="Component" />
					<param name="name" comment="The name of the dialog" fulltype="java.lang.String" type="String" />
					<param name="args" comment="Positional parameters to be substituted into the
 message text" fulltype="java.lang.Object[]" type="Object" />
					<param name="def" comment="The text to display by default in the input field" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="inputProperty" fulltype="java.lang.String" type="String">
				<comment>
					<description>Displays an input dialog box and returns any text the user entered.
 The title of the dialog is fetched from
 the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.title&lt;/code&gt; property. The message is fetched
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.message&lt;/code&gt; property.</description>
					<attribute name="@param">
						<description>comp The component to display the dialog for</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the dialog</description>
					</attribute>
					<attribute name="@param">
						<description>args Positional parameters to be substituted into the
 message text</description>
					</attribute>
					<attribute name="@param">
						<description>def The property whose text to display in the input field</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to display the dialog for" fulltype="java.awt.Component" type="Component" />
					<param name="name" comment="The name of the dialog" fulltype="java.lang.String" type="String" />
					<param name="args" comment="Positional parameters to be substituted into the
 message text" fulltype="java.lang.Object[]" type="Object" />
					<param name="def" comment="The property whose text to display in the input field" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="confirm" fulltype="int" type="int">
				<comment>
					<description>Displays a confirm dialog box and returns the button pushed by the
 user. The title of the dialog is fetched from the
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.title&lt;/code&gt; property. The message is fetched
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.message&lt;/code&gt; property.</description>
					<attribute name="@param">
						<description>comp The component to display the dialog for</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the dialog</description>
					</attribute>
					<attribute name="@param">
						<description>args Positional parameters to be substituted into the
 message text</description>
					</attribute>
					<attribute name="@param">
						<description>buttons The buttons to display - for example,
 JOptionPane.YES_NO_CANCEL_OPTION</description>
					</attribute>
					<attribute name="@param">
						<description>type The dialog type - for example,
 JOptionPane.WARNING_MESSAGE</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to display the dialog for" fulltype="java.awt.Component" type="Component" />
					<param name="name" comment="The name of the dialog" fulltype="java.lang.String" type="String" />
					<param name="args" comment="Positional parameters to be substituted into the
 message text" fulltype="java.lang.Object[]" type="Object" />
					<param name="buttons" comment="The buttons to display - for example,
 JOptionPane.YES_NO_CANCEL_OPTION" fulltype="int" type="int" />
					<param name="type" comment="The dialog type - for example,
 JOptionPane.WARNING_MESSAGE" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="option" fulltype="int" type="int">
				<comment>
					<description>Displays an option dialog dialog box and returns the button pushed by the
 user. The title of the dialog is fetched from the
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.title&lt;/code&gt; property. The message is fetched
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.message&lt;/code&gt; property.</description>
					<attribute name="@param">
						<description>comp The component to display the dialog for</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the dialog</description>
					</attribute>
					<attribute name="@param">
						<description>args Positional parameters to be substituted into the
 message text</description>
					</attribute>
					<attribute name="@param">
						<description>type The dialog type - for example,
 JOptionPane.WARNING_MESSAGE</description>
					</attribute>
					<attribute name="@param">
						<description>options the buttons</description>
					</attribute>
					<attribute name="@param">
						<description>initialValue the initial value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to display the dialog for" fulltype="java.awt.Component" type="Component" />
					<param name="name" comment="The name of the dialog" fulltype="java.lang.String" type="String" />
					<param name="args" comment="Positional parameters to be substituted into the
 message text" fulltype="java.lang.Object[]" type="Object" />
					<param name="type" comment="The dialog type - for example,
 JOptionPane.WARNING_MESSAGE" fulltype="int" type="int" />
					<param name="options" comment="the buttons" fulltype="java.lang.Object[]" type="Object" />
					<param name="initialValue" comment="the initial value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="listConfirm" returncomment="an integer indicating the option selected by the user" fulltype="int" type="int">
				<comment>
					<description>Displays a confirm dialog box and returns the button pushed by the
 user. The title of the dialog is fetched from the
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.title&lt;/code&gt; property. The message is fetched
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.message&lt;/code&gt; property. The dialog
 also shows a list of entries given by the &lt;code&gt;listModel&lt;/code&gt;
 parameter.</description>
					<attribute name="@param">
						<description>comp the parent component</description>
					</attribute>
					<attribute name="@param">
						<description>name the name of the confirm dialog</description>
					</attribute>
					<attribute name="@param">
						<description>args the for the message</description>
					</attribute>
					<attribute name="@param">
						<description>listModel the items in the list</description>
					</attribute>
					<attribute name="@return">
						<description>an integer indicating the option selected by the user</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="the parent component" fulltype="java.awt.Component" type="Component" />
					<param name="name" comment="the name of the confirm dialog" fulltype="java.lang.String" type="String" />
					<param name="args" comment="the for the message" fulltype="java.lang.String[]" type="String" />
					<param name="listModel" comment="the items in the list" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="listConfirm" returncomment="an integer indicating the option selected by the user" fulltype="int" type="int">
				<comment>
					<description>Displays a confirm dialog box and returns the button pushed by the
 user. The title of the dialog is fetched from the
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.title&lt;/code&gt; property. The message is fetched
 from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.message&lt;/code&gt; property. The dialog
 also shows a list of entries given by the &lt;code&gt;listModel&lt;/code&gt;
 parameter.</description>
					<attribute name="@param">
						<description>comp the parent component</description>
					</attribute>
					<attribute name="@param">
						<description>name the name of the confirm dialog</description>
					</attribute>
					<attribute name="@param">
						<description>args the for the message</description>
					</attribute>
					<attribute name="@param">
						<description>listModel the items in the list</description>
					</attribute>
					<attribute name="@param">
						<description>selectedItems give an empty list, it will contains in return the selected items</description>
					</attribute>
					<attribute name="@return">
						<description>an integer indicating the option selected by the user</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre12</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="the parent component" fulltype="java.awt.Component" type="Component" />
					<param name="name" comment="the name of the confirm dialog" fulltype="java.lang.String" type="String" />
					<param name="args" comment="the for the message" fulltype="java.lang.String[]" type="String" />
					<param name="listModel" comment="the items in the list" fulltype="java.lang.Object[]" type="Object" />
					<param name="selectedItems" comment="give an empty list, it will contains in return the selected items" fulltype="java.util.List" type="List" />
				</params>
			</method>
			<method static="true" visibility="public" name="showVFSFileDialog" returncomment="The selected file(s)" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Displays a VFS file selection dialog box.</description>
					<attribute name="@param">
						<description>view The view, should be non-null</description>
					</attribute>
					<attribute name="@param">
						<description>path The initial directory to display. May be null</description>
					</attribute>
					<attribute name="@param">
						<description>type The dialog type. One of
 {@link org.gjt.sp.jedit.browser.VFSBrowser#OPEN_DIALOG},
 {@link org.gjt.sp.jedit.browser.VFSBrowser#SAVE_DIALOG}, or
 {@link org.gjt.sp.jedit.browser.VFSBrowser#CHOOSE_DIRECTORY_DIALOG}.</description>
					</attribute>
					<attribute name="@param">
						<description>multipleSelection True if multiple selection should be allowed</description>
					</attribute>
					<attribute name="@return">
						<description>The selected file(s)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view, should be non-null" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The initial directory to display. May be null" fulltype="java.lang.String" type="String" />
					<param name="type" comment="The dialog type. One of
 {@link org.gjt.sp.jedit.browser.VFSBrowser#OPEN_DIALOG},
 {@link org.gjt.sp.jedit.browser.VFSBrowser#SAVE_DIALOG}, or
 {@link org.gjt.sp.jedit.browser.VFSBrowser#CHOOSE_DIRECTORY_DIALOG}." fulltype="int" type="int" />
					<param name="multipleSelection" comment="True if multiple selection should be allowed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="showVFSFileDialog" returncomment="The selected file(s)" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Displays a VFS file selection dialog box.
 This version can specify a dialog as the parent instead
 of the view.</description>
					<attribute name="@param">
						<description>view The view, should be non-null</description>
					</attribute>
					<attribute name="@param">
						<description>path The initial directory to display. May be null</description>
					</attribute>
					<attribute name="@param">
						<description>type The dialog type. One of
 {@link org.gjt.sp.jedit.browser.VFSBrowser#OPEN_DIALOG},
 {@link org.gjt.sp.jedit.browser.VFSBrowser#SAVE_DIALOG}, or
 {@link org.gjt.sp.jedit.browser.VFSBrowser#CHOOSE_DIRECTORY_DIALOG}.</description>
					</attribute>
					<attribute name="@param">
						<description>multipleSelection True if multiple selection should be allowed</description>
					</attribute>
					<attribute name="@return">
						<description>The selected file(s)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="view" comment="The view, should be non-null" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The initial directory to display. May be null" fulltype="java.lang.String" type="String" />
					<param name="type" comment="The dialog type. One of
 {@link org.gjt.sp.jedit.browser.VFSBrowser#OPEN_DIALOG},
 {@link org.gjt.sp.jedit.browser.VFSBrowser#SAVE_DIALOG}, or
 {@link org.gjt.sp.jedit.browser.VFSBrowser#CHOOSE_DIRECTORY_DIALOG}." fulltype="int" type="int" />
					<param name="multipleSelection" comment="True if multiple selection should be allowed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="showVFSFileDialog" returncomment="The selected file(s)" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Displays a VFS file selection dialog box.
 This version can specify a frame as the parent instead
 of the view.</description>
					<attribute name="@param">
						<description>parent The parent frame</description>
					</attribute>
					<attribute name="@param">
						<description>view The view, should be non-null</description>
					</attribute>
					<attribute name="@param">
						<description>path The initial directory to display. May be null</description>
					</attribute>
					<attribute name="@param">
						<description>type The dialog type. One of
 {@link org.gjt.sp.jedit.browser.VFSBrowser#OPEN_DIALOG},
 {@link org.gjt.sp.jedit.browser.VFSBrowser#SAVE_DIALOG}, or
 {@link org.gjt.sp.jedit.browser.VFSBrowser#CHOOSE_DIRECTORY_DIALOG}.</description>
					</attribute>
					<attribute name="@param">
						<description>multipleSelection True if multiple selection should be allowed</description>
					</attribute>
					<attribute name="@return">
						<description>The selected file(s)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="The parent frame" fulltype="java.awt.Frame" type="Frame" />
					<param name="view" comment="The view, should be non-null" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The initial directory to display. May be null" fulltype="java.lang.String" type="String" />
					<param name="type" comment="The dialog type. One of
 {@link org.gjt.sp.jedit.browser.VFSBrowser#OPEN_DIALOG},
 {@link org.gjt.sp.jedit.browser.VFSBrowser#SAVE_DIALOG}, or
 {@link org.gjt.sp.jedit.browser.VFSBrowser#CHOOSE_DIRECTORY_DIALOG}." fulltype="int" type="int" />
					<param name="multipleSelection" comment="True if multiple selection should be allowed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Converts a color name to a color object. The name must either be
 a known string, such as `red&apos;, `green&apos;, etc (complete list is in
 the &lt;code&gt;java.awt.Color&lt;/code&gt; class) or a hex color value
 prefixed with `#&apos;, for example `#ff0088&apos;.</description>
					<attribute name="@param">
						<description>name The color name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The color name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseStyle" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle" type="SyntaxStyle">
				<comment>
					<description>Converts a style string to a style object.</description>
					<attribute name="@param">
						<description>str The style string</description>
					</attribute>
					<attribute name="@param">
						<description>family Style strings only specify font style, not font family</description>
					</attribute>
					<attribute name="@param">
						<description>size Style strings only specify font style, not font family</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if the style is invalid</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The style string" fulltype="java.lang.String" type="String" />
					<param name="family" comment="Style strings only specify font style, not font family" fulltype="java.lang.String" type="String" />
					<param name="size" comment="Style strings only specify font style, not font family" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="if the style is invalid" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getStyleString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts a style into it&apos;s string representation.</description>
					<attribute name="@param">
						<description>style The style</description>
					</attribute>
				</comment>
				<params>
					<param name="style" comment="The style" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle" type="SyntaxStyle" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadGeometry" fulltype="void" type="void">
				<comment>
					<description>Loads a windows&apos;s geometry from the properties.
 The geometry is loaded from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.x&lt;/code&gt;,
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.y&lt;/code&gt;, &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.width&lt;/code&gt; and
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.height&lt;/code&gt; properties.</description>
					<attribute name="@param">
						<description>win The window to load geometry from</description>
					</attribute>
					<attribute name="@param">
						<description>parent The parent frame to be relative to.</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the window</description>
					</attribute>
				</comment>
				<params>
					<param name="win" comment="The window to load geometry from" fulltype="java.awt.Window" type="Window" />
					<param name="parent" comment="The parent frame to be relative to." fulltype="java.awt.Container" type="Container" />
					<param name="name" comment="The name of the window" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadGeometry" fulltype="void" type="void">
				<comment>
					<description>Loads a windows&apos;s geometry from the properties.
 The geometry is loaded from the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.x&lt;/code&gt;,
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.y&lt;/code&gt;, &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.width&lt;/code&gt; and
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.height&lt;/code&gt; properties.</description>
					<attribute name="@param">
						<description>win The window to load geometry from</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the window</description>
					</attribute>
				</comment>
				<params>
					<param name="win" comment="The window to load geometry from" fulltype="java.awt.Window" type="Window" />
					<param name="name" comment="The name of the window" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="adjustForScreenBounds" fulltype="void" type="void">
				<comment>
					<description>Gives a rectangle the specified bounds, ensuring it is within the
 screen bounds.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="desired" fulltype="java.awt.Rectangle" type="Rectangle" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveGeometry" fulltype="void" type="void">
				<comment>
					<description>Saves a window&apos;s geometry to the properties.
 The geometry is saved to the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.x&lt;/code&gt;,
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.y&lt;/code&gt;, &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.width&lt;/code&gt; and
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.height&lt;/code&gt; properties.&lt;br /&gt;
 For Frame&apos;s and descendents use {@link #addSizeSaver(Frame,String)} to save the sizes
 correct even if the Frame is in maximized or iconified state.</description>
					<attribute name="@param">
						<description>win The window to load geometry from</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the window</description>
					</attribute>
					<attribute name="@see">
						<description>#addSizeSaver(Frame,String)</description>
					</attribute>
				</comment>
				<params>
					<param name="win" comment="The window to load geometry from" fulltype="java.awt.Window" type="Window" />
					<param name="name" comment="The name of the window" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveGeometry" fulltype="void" type="void">
				<comment>
					<description>Saves a window&apos;s geometry to the properties.
 The geometry is saved to the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.x&lt;/code&gt;,
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.y&lt;/code&gt;, &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.width&lt;/code&gt; and
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.height&lt;/code&gt; properties.&lt;br /&gt;
 For Frame&apos;s and descendents use {@link #addSizeSaver(Frame,Container,String)} to save the sizes
 correct even if the Frame is in maximized or iconified state.</description>
					<attribute name="@param">
						<description>win The window to load geometry from</description>
					</attribute>
					<attribute name="@param">
						<description>parent The parent frame to be relative to.</description>
					</attribute>
					<attribute name="@param">
						<description>name The name of the window</description>
					</attribute>
					<attribute name="@see">
						<description>#addSizeSaver(Frame,Container,String)</description>
					</attribute>
				</comment>
				<params>
					<param name="win" comment="The window to load geometry from" fulltype="java.awt.Window" type="Window" />
					<param name="parent" comment="The parent frame to be relative to." fulltype="java.awt.Container" type="Container" />
					<param name="name" comment="The name of the window" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="hideSplashScreen" fulltype="void" type="void">
				<comment>
					<description>Ensures that the splash screen is not visible. This should be
 called before displaying any dialog boxes or windows at
 startup.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="applyTextAreaColors" fulltype="void" type="void">
				<comment>
					<description>experimental - applies the text area colors on a Component 
 (such as a dockable window) and its children.</description>
					<attribute name="@since">
						<description>jEdit 5.0pre1</description>
					</attribute>
					<attribute name="@author">
						<description>ezust</description>
					</attribute>
				</comment>
				<params>
					<param name="win" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method static="true" visibility="public" name="createMultilineLabel" fulltype="javax.swing.JComponent" type="JComponent">
				<comment>
					<description>Creates a component that displays a multiple line message. This
 is implemented by assembling a number of &lt;code&gt;JLabels&lt;/code&gt; in
 a &lt;code&gt;JPanel&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>str The string, with lines delimited by newline
 (&lt;code&gt;\n&lt;/code&gt;) characters.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string, with lines delimited by newline
 (&lt;code&gt;\n&lt;/code&gt;) characters." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="requestFocus" fulltype="void" type="void">
				<comment>
					<description>Focuses on the specified component as soon as the window becomes
 active.</description>
					<attribute name="@param">
						<description>win The window</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
				</comment>
				<params>
					<param name="win" comment="The window" fulltype="java.awt.Window" type="Window" />
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method static="true" visibility="public" name="isPopupTrigger" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified event is the popup trigger event.
 This implements precisely defined behavior, as opposed to
 MouseEvent.isPopupTrigger().</description>
					<attribute name="@param">
						<description>evt The event</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre8</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="The event" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method static="true" visibility="public" name="isMiddleButton" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@param">
						<description>modifiers The modifiers flag from a mouse event</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="modifiers" comment="The modifiers flag from a mouse event" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isRightButton" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@param">
						<description>modifiers The modifiers flag from a mouse event</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="modifiers" comment="The modifiers flag from a mouse event" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getScreenBounds" fulltype="java.awt.Rectangle" type="Rectangle">
				<comment>
					<description>Returns the screen bounds, taking into account multi-screen
 environments.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="showPopupMenu" fulltype="void" type="void">
				<comment>
					<description>Shows the specified popup menu, ensuring it is displayed within
 the bounds of the screen.</description>
					<attribute name="@param">
						<description>popup The popup menu</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component to show it for</description>
					</attribute>
					<attribute name="@param">
						<description>x The x co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
					<attribute name="@see">
						<description>javax.swing.JComponent#setComponentPopupMenu(javax.swing.JPopupMenu) setComponentPopupMenu
 which works better and is simpler to use: you don&apos;t have to write the code to
 show/hide popups in response to mouse events anymore.</description>
					</attribute>
				</comment>
				<params>
					<param name="popup" comment="The popup menu" fulltype="javax.swing.JPopupMenu" type="JPopupMenu" />
					<param name="comp" comment="The component to show it for" fulltype="java.awt.Component" type="Component" />
					<param name="x" comment="The x co-ordinate" fulltype="int" type="int" />
					<param name="y" comment="The y co-ordinate" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="showPopupMenu" fulltype="void" type="void">
				<comment>
					<description>Shows the specified popup menu, ensuring it is displayed within
 the bounds of the screen.</description>
					<attribute name="@param">
						<description>popup The popup menu</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component to show it for</description>
					</attribute>
					<attribute name="@param">
						<description>x The x co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>point If true, then the popup originates from a single point;
 otherwise it will originate from the component itself. This affects
 positioning in the case where the popup does not fit onscreen.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="popup" comment="The popup menu" fulltype="javax.swing.JPopupMenu" type="JPopupMenu" />
					<param name="comp" comment="The component to show it for" fulltype="java.awt.Component" type="Component" />
					<param name="x" comment="The x co-ordinate" fulltype="int" type="int" />
					<param name="y" comment="The y co-ordinate" fulltype="int" type="int" />
					<param name="point" comment="If true, then the popup originates from a single point;
 otherwise it will originate from the component itself. This affects
 positioning in the case where the popup does not fit onscreen." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="isAncestorOf" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the first component is an ancestor of the
 second by traversing up the component hierarchy.</description>
					<attribute name="@param">
						<description>comp1 The ancestor</description>
					</attribute>
					<attribute name="@param">
						<description>comp2 The component to check</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="comp1" comment="The ancestor" fulltype="java.awt.Component" type="Component" />
					<param name="comp2" comment="The component to check" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method static="true" visibility="public" name="getParentDialog" fulltype="javax.swing.JDialog" type="JDialog">
				<comment>
					<description>Traverses the given component&apos;s parent tree looking for an
 instance of JDialog, and return it. If not found, return null.</description>
					<attribute name="@param">
						<description>c The component</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="The component" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method static="true" visibility="public" name="getComponentParent" fulltype="java.awt.Component" type="Component">
				<comment>
					<description>Finds a parent of the specified component.</description>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
					<attribute name="@param">
						<description>clazz Looks for a parent with this class (exact match, not
 derived).</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
					<param name="clazz" comment="Looks for a parent with this class (exact match, not
 derived)." fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="setEnabledRecursively" fulltype="void" type="void">
				<comment>
					<description>Call setEnabled() recursively on the container and its descendants.</description>
					<attribute name="@param">
						<description>c The container</description>
					</attribute>
					<attribute name="@param">
						<description>enabled The enabled state to set</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="The container" fulltype="java.awt.Container" type="Container" />
					<param name="enabled" comment="The enabled state to set" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getView" returncomment="the parent view, or null if the component was not in a View." fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Finds the view parent of the specified component.</description>
					<attribute name="@param">
						<description>comp the component from which you want to get the parent view</description>
					</attribute>
					<attribute name="@return">
						<description>the parent view, or null if the component was not in a View.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="the component from which you want to get the parent view" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method static="true" visibility="public" name="addSizeSaver" fulltype="void" type="void">
				<comment>
					<description>Adds a SizeSaver to the specified Frame. For non-Frame&apos;s use {@link #saveGeometry(Window,String)}</description>
					<attribute name="@param">
						<description>frame The Frame for which to save the size</description>
					</attribute>
					<attribute name="@param">
						<description>name The prefix for the settings</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre6</description>
					</attribute>
					<attribute name="@see">
						<description>#saveGeometry(Window,String)</description>
					</attribute>
				</comment>
				<params>
					<param name="frame" comment="The Frame for which to save the size" fulltype="java.awt.Frame" type="Frame" />
					<param name="name" comment="The prefix for the settings" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="addSizeSaver" fulltype="void" type="void">
				<comment>
					<description>Adds a SizeSaver to the specified Frame. For non-Frame&apos;s use {@link #saveGeometry(Window,Container,String)}</description>
					<attribute name="@param">
						<description>frame The Frame for which to save the size</description>
					</attribute>
					<attribute name="@param">
						<description>parent The parent to be relative to</description>
					</attribute>
					<attribute name="@param">
						<description>name The prefix for the settings</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
					<attribute name="@see">
						<description>#saveGeometry(Window,Container,String)</description>
					</attribute>
				</comment>
				<params>
					<param name="frame" comment="The Frame for which to save the size" fulltype="java.awt.Frame" type="Frame" />
					<param name="parent" comment="The parent to be relative to" fulltype="java.awt.Container" type="Container" />
					<param name="name" comment="The prefix for the settings" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="initContinuousLayout" fulltype="void" type="void">
				<comment>
					<description>This method do nothing.</description>
					<attribute name="@param">
						<description>split the split. It must never be null</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre9</description>
					</attribute>
					<attribute name="@deprecated">
						<description>since jEdit 5.0 using or not continuous layout is not anymore an option.</description>
					</attribute>
				</comment>
				<params>
					<param name="split" comment="the split. It must never be null" fulltype="javax.swing.JSplitPane" type="JSplitPane" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.GUIUtilities.UnixWorkaround" type="GUIUtilities.UnixWorkaround">
			<methods>
				<constructor visibility="public" name="GUIUtilities.UnixWorkaround">
					<params>
						<param name="win" fulltype="java.awt.Window" type="Window" />
						<param name="name" fulltype="java.lang.String" type="String" />
						<param name="desired" fulltype="java.awt.Rectangle" type="Rectangle" />
						<param name="extState" fulltype="int" type="int" />
					</params>
				</constructor>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.GUIUtilities.UnixWorkaround" type="GUIUtilities.UnixWorkaround">
		<methods>
			<constructor visibility="public" name="GUIUtilities.UnixWorkaround">
				<params>
					<param name="win" fulltype="java.awt.Window" type="Window" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="desired" fulltype="java.awt.Rectangle" type="Rectangle" />
					<param name="extState" fulltype="int" type="int" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.help" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.help.HelpHistoryModel" type="HelpHistoryModel">
		<comment>
			<description>History model used by the help browser</description>
			<attribute name="@author">
				<description>Nicholas O&apos;Leary</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HelpHistoryModel.java 14598 2009-02-07 18:52:28Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="HelpHistoryModel">
				<params>
					<param name="size" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="hasNext" fulltype="boolean" type="boolean" />
			<method visibility="public" name="hasPrevious" fulltype="boolean" type="boolean" />
			<method visibility="public" name="addToHistory" fulltype="void" type="void">
				<params>
					<param name="url" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setCurrentScrollPosition" fulltype="void" type="void">
				<params>
					<param name="currentPage" fulltype="java.net.URL" type="URL" />
					<param name="scrollPosition" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setCurrentEntry" fulltype="void" type="void">
				<params>
					<param name="entry" fulltype="org.gjt.sp.jedit.help.HelpHistoryModel.HistoryEntry" type="HelpHistoryModel.HistoryEntry" />
				</params>
			</method>
			<method visibility="public" name="updateTitle" fulltype="void" type="void">
				<params>
					<param name="url" fulltype="java.lang.String" type="String" />
					<param name="title" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="addHelpHistoryModelListener" fulltype="void" type="void">
				<params>
					<param name="hhml" fulltype="org.gjt.sp.jedit.help.HelpHistoryModelListener" type="HelpHistoryModelListener" />
				</params>
			</method>
			<method visibility="public" name="removeHelpHistoryModelListener" fulltype="void" type="void">
				<params>
					<param name="hhml" fulltype="org.gjt.sp.jedit.help.HelpHistoryModelListener" type="HelpHistoryModelListener" />
				</params>
			</method>
			<method visibility="public" name="fireUpdate" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.help" interface="true" fulltype="org.gjt.sp.jedit.help.HelpHistoryModelListener" type="HelpHistoryModelListener">
		<comment>
			<description>Listener interface to montior changes to a HelpHistoryModel</description>
			<attribute name="@author">
				<description>Nicholas O&apos;Leary</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HelpHistoryModelListener.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="historyUpdated" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.help" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.help.HelpSearchPanel" type="HelpSearchPanel">
		<methods>
			<constructor visibility="public" name="HelpSearchPanel">
				<params>
					<param name="helpViewer" fulltype="org.gjt.sp.jedit.help.HelpViewerInterface" type="HelpViewerInterface" />
				</params>
			</constructor>
		</methods>
		<jelclass superclass="MouseAdapter" visibility="public" package="org.gjt.sp.jedit.help" superclassfulltype="java.awt.event.MouseAdapter" fulltype="org.gjt.sp.jedit.help.HelpSearchPanel.MouseHandler" type="HelpSearchPanel.MouseHandler">
			<methods>
				<constructor visibility="public" name="HelpSearchPanel.MouseHandler" />
				<method visibility="public" name="mouseReleased" fulltype="void" type="void">
					<params>
						<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="MouseAdapter" visibility="public" package="org.gjt.sp.jedit.help" superclassfulltype="java.awt.event.MouseAdapter" fulltype="org.gjt.sp.jedit.help.HelpSearchPanel.MouseHandler" type="HelpSearchPanel.MouseHandler">
		<methods>
			<constructor visibility="public" name="HelpSearchPanel.MouseHandler" />
			<method visibility="public" name="mouseReleased" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.help" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.help.HelpTOCPanel" type="HelpTOCPanel">
		<methods>
			<constructor visibility="public" name="HelpTOCPanel">
				<params>
					<param name="helpViewer" fulltype="org.gjt.sp.jedit.help.HelpViewerInterface" type="HelpViewerInterface" />
				</params>
			</constructor>
			<method visibility="public" name="selectNode" fulltype="void" type="void">
				<params>
					<param name="shortURL" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="load" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JFrame" visibility="public" package="org.gjt.sp.jedit.help" serializable="true" superclassfulltype="javax.swing.JFrame" fulltype="org.gjt.sp.jedit.help.HelpViewer" type="HelpViewer">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.help.HelpViewerInterface" type="HelpViewerInterface" />
			<interface fulltype="org.gjt.sp.jedit.help.HelpHistoryModelListener" type="HelpHistoryModelListener" />
		</implements>
		<comment>
			<description>jEdit&apos;s searchable help viewer. It uses a Swing JEditorPane to display the HTML,
 and implements a URL history.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HelpViewer.java 21419 2012-03-23 08:21:20Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="HelpViewer">
				<comment>
					<description>Creates a new help viewer with the default help page.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</constructor>
			<constructor visibility="public" name="HelpViewer">
				<comment>
					<description>Creates a new help viewer for the specified URL.</description>
					<attribute name="@param">
						<description>url The URL</description>
					</attribute>
				</comment>
				<params>
					<param name="url" comment="The URL" fulltype="java.net.URL" type="URL" />
				</params>
			</constructor>
			<constructor visibility="public" name="HelpViewer">
				<comment>
					<description>Creates a new help viewer for the specified URL.</description>
					<attribute name="@param">
						<description>url The URL</description>
					</attribute>
				</comment>
				<params>
					<param name="url" comment="The URL" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="gotoURL" fulltype="void" type="void">
				<comment>
					<description>Displays the specified URL in the HTML component.</description>
					<attribute name="@param">
						<description>url 		 The URL</description>
					</attribute>
					<attribute name="@param">
						<description>addToHistory   Should the URL be added to the back/forward
 			 history?</description>
					</attribute>
					<attribute name="@param">
						<description>scrollPosition The vertical scrollPosition</description>
					</attribute>
				</comment>
				<params>
					<param name="url" comment="The URL" fulltype="java.lang.String" type="String" />
					<param name="addToHistory" comment="Should the URL be added to the back/forward
 			 history?" fulltype="boolean" type="boolean" />
					<param name="scrollPosition" comment="The vertical scrollPosition" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="dispose" fulltype="void" type="void" />
			<method visibility="public" name="handlePluginUpdate" fulltype="void" type="void">
				<params>
					<param name="pmsg" fulltype="org.gjt.sp.jedit.msg.PluginUpdate" type="PluginUpdate" />
				</params>
			</method>
			<method visibility="public" name="getBaseURL" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getShortURL" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="historyUpdated" fulltype="void" type="void" />
			<method visibility="public" name="getComponent" fulltype="java.awt.Component" type="Component" />
			<method visibility="public" name="queueTOCReload" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.help" interface="true" fulltype="org.gjt.sp.jedit.help.HelpViewerInterface" type="HelpViewerInterface">
		<comment>
			<description>Interface supported by all HelpViewer classes.
 Currently used by @ref infoviewer.InfoViewerPlugin and @ref HelpViewer</description>
			<attribute name="@since">
				<description>Jedit 4.2pre5</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HelpViewerInterface.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="gotoURL" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>url</description>
					</attribute>
					<attribute name="@param">
						<description>addToHistory</description>
					</attribute>
					<attribute name="@param">
						<description>scrollPos desired vertical scrollbar position after we go there</description>
					</attribute>
				</comment>
				<params>
					<param name="url" comment="" fulltype="java.lang.String" type="String" />
					<param name="addToHistory" comment="" fulltype="boolean" type="boolean" />
					<param name="scrollPos" comment="desired vertical scrollbar position after we go there" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getBaseURL" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="addPropertyChangeListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="java.beans.PropertyChangeListener" type="PropertyChangeListener" />
				</params>
			</method>
			<method visibility="public" name="dispose" fulltype="void" type="void">
				<comment>
					<description>Called when the helpviewer is closed</description>
				</comment>
			</method>
			<method visibility="public" name="getComponent" returncomment="the root pane of this help viewer" fulltype="java.awt.Component" type="Component">
				<comment>
					<attribute name="@return">
						<description>the root pane of this help viewer</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getShortURL" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="queueTOCReload" fulltype="void" type="void" />
			<method visibility="public" name="setTitle" fulltype="void" type="void">
				<params>
					<param name="newTitle" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.help" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.help.HistoryButton" type="HistoryButton">
		<implements>
			<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
		</implements>
		<comment>
			<description>History Button</description>
			<attribute name="@author">
				<description>Nicholas O&apos;Leary</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HistoryButton.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="BACK" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="FORWARD" constexpr="1" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="HistoryButton">
				<params>
					<param name="type" fulltype="int" type="int" />
					<param name="model" fulltype="org.gjt.sp.jedit.help.HelpHistoryModel" type="HelpHistoryModel" />
				</params>
			</constructor>
			<method visibility="public" name="setEnabled" fulltype="void" type="void">
				<params>
					<param name="state" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="addActionListener" fulltype="void" type="void">
				<params>
					<param name="al" fulltype="java.awt.event.ActionListener" type="ActionListener" />
				</params>
			</method>
			<method visibility="public" name="actionPerformed" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.BracketIndentRule" type="BracketIndentRule">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BracketIndentRule.java 21723 2012-05-27 14:34:13Z k_satoda $</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="openBracket" fulltype="char" type="char" />
			<field visibility="protected" name="closeBracket" fulltype="char" type="char" />
		</fields>
		<methods>
			<constructor visibility="public" name="BracketIndentRule">
				<params>
					<param name="openBracket" fulltype="char" type="char" />
					<param name="closeBracket" fulltype="char" type="char" />
				</params>
			</constructor>
			<method visibility="public" name="getBrackets" fulltype="org.gjt.sp.jedit.indent.BracketIndentRule.Brackets" type="BracketIndentRule.Brackets">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="lineIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getBrackets" fulltype="org.gjt.sp.jedit.indent.BracketIndentRule.Brackets" type="BracketIndentRule.Brackets">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="lineIndex" fulltype="int" type="int" />
					<param name="begin" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.BracketIndentRule.Brackets" type="BracketIndentRule.Brackets">
			<methods>
				<constructor visibility="public" name="BracketIndentRule.Brackets" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.BracketIndentRule.Brackets" type="BracketIndentRule.Brackets">
		<methods>
			<constructor visibility="public" name="BracketIndentRule.Brackets" />
		</methods>
	</jelclass>
	<jelclass superclass="BracketIndentRule" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="org.gjt.sp.jedit.indent.BracketIndentRule" fulltype="org.gjt.sp.jedit.indent.CloseBracketIndentRule" type="CloseBracketIndentRule">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: CloseBracketIndentRule.java 21723 2012-05-27 14:34:13Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="CloseBracketIndentRule">
				<params>
					<param name="closeBracket" fulltype="char" type="char" />
					<param name="aligned" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="apply" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="thisLineIndex" fulltype="int" type="int" />
					<param name="prevLineIndex" fulltype="int" type="int" />
					<param name="prevPrevLineIndex" fulltype="int" type="int" />
					<param name="indentActions" fulltype="java.util.List" type="List" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.DeepIndentRule" type="DeepIndentRule">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule" />
		</implements>
		<comment>
			<description>Deep indent rule.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DeepIndentRule.java 21723 2012-05-27 14:34:13Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DeepIndentRule">
				<params>
					<param name="openChar" fulltype="char" type="char" />
					<param name="closeChar" fulltype="char" type="char" />
				</params>
			</constructor>
			<method visibility="public" name="apply" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="thisLineIndex" fulltype="int" type="int" />
					<param name="prevLineIndex" fulltype="int" type="int" />
					<param name="prevPrevLineIndex" fulltype="int" type="int" />
					<param name="indentActions" fulltype="java.util.List" type="List" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.indent" interface="true" fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction">
		<comment>
			<description>Abstract Indentation Action</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: IndentAction.java 21398 2012-03-20 04:32:13Z ezust $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="PrevCollapse" fulltype="org.gjt.sp.jedit.indent.IndentAction.Collapse" type="IndentAction.Collapse">
				<comment>
					<description>This handles the following Java code:
 if(something)
 { // no indentation on this line, even though previous matches a rule</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="PrevPrevCollapse" fulltype="org.gjt.sp.jedit.indent.IndentAction.Collapse" type="IndentAction.Collapse">
				<comment>
					<description>This handles cases like:
 if (foo)
     bar;
 for (something; condition; action) {
 }
 Without this the &quot;for&quot; line would be incorrectly indented.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<method visibility="public" name="calculateIndent" fulltype="int" type="int">
				<comment>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>line The line number that matched the rule; not necessarily
 the line being indented.</description>
					</attribute>
					<attribute name="@param">
						<description>oldIndent Original indent.</description>
					</attribute>
					<attribute name="@param">
						<description>newIndent The new indent -- ie, indent returned by previous
 indent action.</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" comment="The line number that matched the rule; not necessarily
 the line being indented." fulltype="int" type="int" />
					<param name="oldIndent" comment="Original indent." fulltype="int" type="int" />
					<param name="newIndent" comment="The new indent -- ie, indent returned by previous
 indent action." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="keepChecking" returncomment="true if the indent engine should keep processing after
 this rule." fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@return">
						<description>true if the indent engine should keep processing after
 this rule.</description>
					</attribute>
				</comment>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.Collapse" type="IndentAction.Collapse">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
			</implements>
			<comment>
				<description>See comments for each instance of this class below.</description>
			</comment>
			<methods>
				<method visibility="public" name="calculateIndent" fulltype="int" type="int">
					<comment>
						<description>This does nothing; it is merely a sentinel for the
 &lt;code&gt;OpenBracketIndentRule&lt;/code&gt;.</description>
					</comment>
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
						<param name="oldIndent" fulltype="int" type="int" />
						<param name="newIndent" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.Reset" type="IndentAction.Reset">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
			</implements>
			<methods>
				<constructor visibility="public" name="IndentAction.Reset" />
				<method visibility="public" name="calculateIndent" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
						<param name="oldIndent" fulltype="int" type="int" />
						<param name="newIndent" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.Increase" type="IndentAction.Increase">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
			</implements>
			<methods>
				<constructor visibility="public" name="IndentAction.Increase" />
				<constructor visibility="public" name="IndentAction.Increase">
					<params>
						<param name="amount" fulltype="int" type="int" />
					</params>
				</constructor>
				<method visibility="public" name="calculateIndent" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
						<param name="oldIndent" fulltype="int" type="int" />
						<param name="newIndent" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
				<method visibility="public" name="equals" fulltype="boolean" type="boolean">
					<params>
						<param name="o" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.Decrease" type="IndentAction.Decrease">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
			</implements>
			<methods>
				<constructor visibility="public" name="IndentAction.Decrease" />
				<method visibility="public" name="calculateIndent" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
						<param name="oldIndent" fulltype="int" type="int" />
						<param name="newIndent" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.AlignOffset" type="IndentAction.AlignOffset">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
			</implements>
			<comment>
				<attribute name="@author">
					<description>Matthieu Casanova</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="public" name="IndentAction.AlignOffset">
					<params>
						<param name="offset" fulltype="int" type="int" />
					</params>
				</constructor>
				<method visibility="public" name="calculateIndent" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
						<param name="oldIndent" fulltype="int" type="int" />
						<param name="newIndent" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.AlignParameter" type="IndentAction.AlignParameter">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
			</implements>
			<comment>
				<description>Indent action used for deep indent.</description>
				<attribute name="@author">
					<description>Matthieu Casanova</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="public" name="IndentAction.AlignParameter">
					<params>
						<param name="openParensColumn" fulltype="int" type="int" />
					</params>
				</constructor>
				<method visibility="public" name="calculateIndent" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
						<param name="oldIndent" fulltype="int" type="int" />
						<param name="newIndent" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.NoIncrease" type="IndentAction.NoIncrease">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
			</implements>
			<comment>
				<description>Used to cancel increases in indentation.</description>
				<attribute name="@author">
					<description>Marcelo Vanzin</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="public" name="IndentAction.NoIncrease" />
				<method visibility="public" name="calculateIndent" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
						<param name="oldIndent" fulltype="int" type="int" />
						<param name="newIndent" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.Collapse" type="IndentAction.Collapse">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
		</implements>
		<comment>
			<description>See comments for each instance of this class below.</description>
		</comment>
		<methods>
			<method visibility="public" name="calculateIndent" fulltype="int" type="int">
				<comment>
					<description>This does nothing; it is merely a sentinel for the
 &lt;code&gt;OpenBracketIndentRule&lt;/code&gt;.</description>
				</comment>
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
					<param name="oldIndent" fulltype="int" type="int" />
					<param name="newIndent" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.Reset" type="IndentAction.Reset">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
		</implements>
		<methods>
			<constructor visibility="public" name="IndentAction.Reset" />
			<method visibility="public" name="calculateIndent" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
					<param name="oldIndent" fulltype="int" type="int" />
					<param name="newIndent" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.Increase" type="IndentAction.Increase">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
		</implements>
		<methods>
			<constructor visibility="public" name="IndentAction.Increase" />
			<constructor visibility="public" name="IndentAction.Increase">
				<params>
					<param name="amount" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="calculateIndent" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
					<param name="oldIndent" fulltype="int" type="int" />
					<param name="newIndent" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.Decrease" type="IndentAction.Decrease">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
		</implements>
		<methods>
			<constructor visibility="public" name="IndentAction.Decrease" />
			<method visibility="public" name="calculateIndent" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
					<param name="oldIndent" fulltype="int" type="int" />
					<param name="newIndent" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.AlignOffset" type="IndentAction.AlignOffset">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IndentAction.AlignOffset">
				<params>
					<param name="offset" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="calculateIndent" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
					<param name="oldIndent" fulltype="int" type="int" />
					<param name="newIndent" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.AlignParameter" type="IndentAction.AlignParameter">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
		</implements>
		<comment>
			<description>Indent action used for deep indent.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IndentAction.AlignParameter">
				<params>
					<param name="openParensColumn" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="calculateIndent" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
					<param name="oldIndent" fulltype="int" type="int" />
					<param name="newIndent" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentAction.NoIncrease" type="IndentAction.NoIncrease">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
		</implements>
		<comment>
			<description>Used to cancel increases in indentation.</description>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IndentAction.NoIncrease" />
			<method visibility="public" name="calculateIndent" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
					<param name="oldIndent" fulltype="int" type="int" />
					<param name="newIndent" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="keepChecking" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.indent" interface="true" fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule">
		<comment>
			<description>Abstract Indentation Rule</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: IndentRule.java 21723 2012-05-27 14:34:13Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="apply" fulltype="void" type="void">
				<comment>
					<description>Apply the indent rule to this line, and return an indent action.</description>
					<attribute name="@param">
						<description>buffer the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>thisLineIndex the line index</description>
					</attribute>
					<attribute name="@param">
						<description>prevLineIndex the prior non empty line index
 (or -1 if there is no prior non empty line)</description>
					</attribute>
					<attribute name="@param">
						<description>prevPrevLineIndex the prior non empty line index before the prevLineIndex
 (or -1 if there is no prior non empty line)</description>
					</attribute>
					<attribute name="@param">
						<description>indentActions the indent actions list. The rule can add an action in it if
 it is necessary</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="the buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="thisLineIndex" comment="the line index" fulltype="int" type="int" />
					<param name="prevLineIndex" comment="the prior non empty line index
 (or -1 if there is no prior non empty line)" fulltype="int" type="int" />
					<param name="prevPrevLineIndex" comment="the prior non empty line index before the prevLineIndex
 (or -1 if there is no prior non empty line)" fulltype="int" type="int" />
					<param name="indentActions" comment="the indent actions list. The rule can add an action in it if
 it is necessary" fulltype="java.util.List" type="List" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.IndentRuleFactory" type="IndentRuleFactory">
		<methods>
			<constructor visibility="public" name="IndentRuleFactory" />
			<method static="true" visibility="public" name="indentNextLines" fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule">
				<params>
					<param name="regexp" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="indentNextLine" fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule">
				<params>
					<param name="regexp" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="unindentThisLine" fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule">
				<params>
					<param name="regexp" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="unindentNextLines" fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule">
				<params>
					<param name="regexp" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="indentOpenBracket" fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule">
				<params>
					<param name="bracket" fulltype="char" type="char" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="indentCloseBracket" fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule">
				<params>
					<param name="bracket" fulltype="char" type="char" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="unalignedOpenBracket" fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule">
				<params>
					<param name="bracket" fulltype="char" type="char" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="unalignedCloseBracket" fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule">
				<params>
					<param name="bracket" fulltype="char" type="char" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="BracketIndentRule" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="org.gjt.sp.jedit.indent.BracketIndentRule" fulltype="org.gjt.sp.jedit.indent.OpenBracketIndentRule" type="OpenBracketIndentRule">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: OpenBracketIndentRule.java 21723 2012-05-27 14:34:13Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="OpenBracketIndentRule">
				<params>
					<param name="openBracket" fulltype="char" type="char" />
					<param name="aligned" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="apply" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="thisLineIndex" fulltype="int" type="int" />
					<param name="prevLineIndex" fulltype="int" type="int" />
					<param name="prevPrevLineIndex" fulltype="int" type="int" />
					<param name="indentActions" fulltype="java.util.List" type="List" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.RegexpIndentRule" type="RegexpIndentRule">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: RegexpIndentRule.java 21723 2012-05-27 14:34:13Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="RegexpIndentRule">
				<comment>
					<attribute name="@param">
						<description>collapse If true, then if the next indent rule is
 an opening bracket, this rule will not increase indent.</description>
					</attribute>
				</comment>
				<params>
					<param name="regexp" fulltype="java.lang.String" type="String" />
					<param name="prevPrev" fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
					<param name="prev" fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
					<param name="thisLine" fulltype="org.gjt.sp.jedit.indent.IndentAction" type="IndentAction" />
					<param name="collapse" comment="If true, then if the next indent rule is
 an opening bracket, this rule will not increase indent." fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</constructor>
			<method visibility="public" name="apply" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="thisLineIndex" fulltype="int" type="int" />
					<param name="prevLineIndex" fulltype="int" type="int" />
					<param name="prevPrevLineIndex" fulltype="int" type="int" />
					<param name="indentActions" fulltype="java.util.List" type="List" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.indent" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.indent.WhitespaceRule" type="WhitespaceRule">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.indent.IndentRule" type="IndentRule" />
		</implements>
		<comment>
			<description>Whitespace rule. This rule cancels all indent actions in the
 following case:

 &lt;ul&gt;
 &lt;li&gt;The previous line is all whitespace&lt;/li&gt;
 &lt;li&gt;The current line is not empty&lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;The result is that this rule won&apos;t allow the indentation to be
 increased, only decreased (by rules triggered by unindentThisLine).
 If the requirements above do not apply, this rule does nothing.&lt;/p&gt;</description>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: WhitespaceRule.java 21723 2012-05-27 14:34:13Z k_satoda $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre10</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="WhitespaceRule" />
			<method visibility="public" name="apply" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="thisLineIndex" fulltype="int" type="int" />
					<param name="prevLineIndex" fulltype="int" type="int" />
					<param name="prevPrevLineIndex" fulltype="int" type="int" />
					<param name="indentActions" fulltype="java.util.List" type="List" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.input" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.input.AbstractInputHandler" type="AbstractInputHandler">
		<comment>
			<description>The abstract input handler manage the keyboard handling.
 The entry point is
 {@link #processKeyEvent(java.awt.event.KeyEvent, int, boolean)}</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FoldHandler.java 5568 2006-07-10 20:52:23Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="lastActionCount" fulltype="int" type="int" />
			<field visibility="protected" name="keyEventInterceptor" fulltype="java.awt.event.KeyListener" type="KeyListener">
				<comment>
					<description>This listener will receive keyboard events if it is not null.</description>
				</comment>
			</field>
			<field visibility="protected" name="readNextChar" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="repeatCount" fulltype="int" type="int" />
			<field visibility="protected" name="lastAction" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction" type="JEditAbstractEditAction" />
			<field final="true" static="true" const="20" visibility="protected" name="REPEAT_COUNT_THRESHOLD" constexpr="20" fulltype="int" type="int" />
			<field static="true" visibility="public" name="PREFIX_STR" fulltype="java.lang.Object" type="Object" />
			<field visibility="protected" name="shortcutOn" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="bindings" fulltype="java.util.Hashtable" type="Hashtable" />
			<field visibility="protected" name="currentBindings" fulltype="java.util.Hashtable" type="Hashtable" />
		</fields>
		<methods>
			<constructor visibility="public" name="AbstractInputHandler" />
			<method visibility="public" name="addKeyBinding" fulltype="void" type="void">
				<comment>
					<description>Adds a key binding to this input handler. The key binding is
 a list of white space separated key strokes of the form
 &lt;i&gt;[modifiers+]key&lt;/i&gt; where modifier is C for Control, A for Alt,
 or S for Shift, and key is either a character (a-z) or a field
 name in the KeyEvent class prefixed with VK_ (e.g., BACK_SPACE)</description>
					<attribute name="@param">
						<description>keyBinding The key binding</description>
					</attribute>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="keyBinding" comment="The key binding" fulltype="java.lang.String" type="String" />
					<param name="action" comment="The action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="addKeyBinding" fulltype="void" type="void">
				<comment>
					<description>Adds a key binding to this input handler. The key binding is
 a list of white space separated key strokes of the form
 &lt;i&gt;[modifiers+]key&lt;/i&gt; where modifier is C for Control, A for Alt,
 or S for Shift, and key is either a character (a-z) or a field
 name in the KeyEvent class prefixed with VK_ (e.g., BACK_SPACE)</description>
					<attribute name="@param">
						<description>keyBinding The key binding</description>
					</attribute>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
				</comment>
				<params>
					<param name="keyBinding" comment="The key binding" fulltype="java.lang.String" type="String" />
					<param name="action" comment="The action" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction" type="JEditAbstractEditAction" />
				</params>
			</method>
			<method visibility="public" name="addKeyBinding" fulltype="void" type="void">
				<comment>
					<description>Adds a key binding to this input handler. The key binding is
 a list of white space separated key strokes of the form
 &lt;i&gt;[modifiers+]key&lt;/i&gt; where modifier is C for Control, A for Alt,
 or S for Shift, and key is either a character (a-z) or a field
 name in the KeyEvent class prefixed with VK_ (e.g., BACK_SPACE)</description>
					<attribute name="@param">
						<description>keyBinding The key binding</description>
					</attribute>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="keyBinding" comment="The key binding" fulltype="java.lang.String" type="String" />
					<param name="action" comment="The action" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="removeKeyBinding" fulltype="void" type="void">
				<comment>
					<description>Removes a key binding from this input handler. This is not yet
 implemented.</description>
					<attribute name="@param">
						<description>keyBinding The key binding</description>
					</attribute>
				</comment>
				<params>
					<param name="keyBinding" comment="The key binding" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="removeAllKeyBindings" fulltype="void" type="void">
				<comment>
					<description>Removes all key bindings from this input handler.</description>
				</comment>
			</method>
			<method visibility="public" name="getKeyBinding" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns either an edit action, or a hashtable if the specified key
 is a prefix.</description>
					<attribute name="@param">
						<description>keyBinding The key binding</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="keyBinding" comment="The key binding" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getLastActionCount" returncomment="the number of times the last action was executed" fulltype="int" type="int">
				<comment>
					<description>Returns the number of times the last action was executed.
 It can be used with smartHome and smartEnd</description>
					<attribute name="@return">
						<description>the number of times the last action was executed</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.5pre5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="resetLastActionCount" fulltype="void" type="void">
				<comment>
					<description>Resets the last action count. This should be called when an
 editing operation that is not an action is invoked, for example
 a mouse click.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getKeyEventInterceptor" fulltype="java.awt.event.KeyListener" type="KeyListener" />
			<method visibility="public" name="setKeyEventInterceptor" fulltype="void" type="void">
				<comment>
					<description>Sets the listener that will handle all key events in this
 view. For example, the complete word command uses this so
 that all key events are passed to the word list popup while
 it is visible.</description>
					<attribute name="@param">
						<description>keyEventInterceptor the KeyListener that will receive the events</description>
					</attribute>
				</comment>
				<params>
					<param name="keyEventInterceptor" comment="the KeyListener that will receive the events" fulltype="java.awt.event.KeyListener" type="KeyListener" />
				</params>
			</method>
			<method visibility="public" name="isPrefixActive" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if a prefix key has been pressed.</description>
				</comment>
			</method>
			<method visibility="public" name="setBindings" fulltype="void" type="void">
				<comment>
					<description>Replace the set of key bindings.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="bindings" fulltype="java.util.Hashtable" type="Hashtable" />
				</params>
			</method>
			<method visibility="public" name="setCurrentBindings" fulltype="void" type="void">
				<params>
					<param name="bindings" fulltype="java.util.Hashtable" type="Hashtable" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="handleKey" returncomment="true if the input could be handled." fulltype="boolean" type="boolean">
				<comment>
					<description>Handles a keystroke.</description>
					<attribute name="@param">
						<description>keyStroke The key stroke.</description>
					</attribute>
					<attribute name="@param">
						<description>dryRun only calculate the return value, do not have any other effect</description>
					</attribute>
					<attribute name="@return">
						<description>true if the input could be handled.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="keyStroke" comment="The key stroke." fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator.Key" type="KeyEventTranslator.Key" />
					<param name="dryRun" comment="only calculate the return value, do not have any other effect" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="processKeyEvent" fulltype="void" type="void">
				<comment>
					<description>Process a keyboard event.
 This is the entry point of the keyboard handling</description>
					<attribute name="@param">
						<description>evt the keyboard event</description>
					</attribute>
					<attribute name="@param">
						<description>from the source, it can be {@link org.gjt.sp.jedit.View#VIEW},
 {@link org.gjt.sp.jedit.View#ACTION_BAR} or {@link org.gjt.sp.jedit.View#TEXT_AREA}</description>
					</attribute>
					<attribute name="@param">
						<description>global tell if the event comes from the DefaultKeyboardFocusManager or not</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="the keyboard event" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
					<param name="from" comment="the source, it can be {@link org.gjt.sp.jedit.View#VIEW},
 {@link org.gjt.sp.jedit.View#ACTION_BAR} or {@link org.gjt.sp.jedit.View#TEXT_AREA}" fulltype="int" type="int" />
					<param name="global" comment="tell if the event comes from the DefaultKeyboardFocusManager or not" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="sendShortcutPrefixOff" fulltype="void" type="void" />
			<method abstract="true" visibility="public" name="invokeAction" fulltype="void" type="void">
				<params>
					<param name="action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="invokeAction" fulltype="void" type="void">
				<params>
					<param name="action" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction" type="JEditAbstractEditAction" />
				</params>
			</method>
			<method static="true" visibility="public" name="toString" returncomment="a String representation for this keyboard event" fulltype="java.lang.String" type="String">
				<comment>
					<description>Return a String representation of the keyboard event for
 debugging purpose.</description>
					<attribute name="@param">
						<description>evt the keyboard event</description>
					</attribute>
					<attribute name="@return">
						<description>a String representation for this keyboard event</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="the keyboard event" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method visibility="protected" name="processKeyEventKeyStrokeHandling" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>evt the keyboard event</description>
					</attribute>
					<attribute name="@param">
						<description>from the source, it can be {@link org.gjt.sp.jedit.View#VIEW},
 {@link org.gjt.sp.jedit.View#ACTION_BAR} or {@link org.gjt.sp.jedit.View#TEXT_AREA}</description>
					</attribute>
					<attribute name="@param">
						<description>mode the mode is &quot;press&quot; or &quot;type&quot; and is used for debug only</description>
					</attribute>
					<attribute name="@param">
						<description>global tell if the event comes from the DefaultKeyboardFocusManager or not</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="the keyboard event" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
					<param name="from" comment="the source, it can be {@link org.gjt.sp.jedit.View#VIEW},
 {@link org.gjt.sp.jedit.View#ACTION_BAR} or {@link org.gjt.sp.jedit.View#TEXT_AREA}" fulltype="int" type="int" />
					<param name="mode" comment="the mode is &quot;press&quot; or &quot;type&quot; and is used for debug only" fulltype="java.lang.String" type="String" />
					<param name="global" comment="tell if the event comes from the DefaultKeyboardFocusManager or not" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.input" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.input.DefaultInputHandlerProvider" type="DefaultInputHandlerProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.input.InputHandlerProvider" type="InputHandlerProvider" />
		</implements>
		<comment>
			<description>This class provide the input handler used by the textarea.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FoldHandler.java 5568 2006-07-10 20:52:23Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DefaultInputHandlerProvider">
				<params>
					<param name="inputHandler" fulltype="org.gjt.sp.jedit.input.AbstractInputHandler" type="AbstractInputHandler" />
				</params>
			</constructor>
			<method visibility="public" name="getInputHandler" fulltype="org.gjt.sp.jedit.input.AbstractInputHandler" type="AbstractInputHandler" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.input" interface="true" fulltype="org.gjt.sp.jedit.input.InputHandlerProvider" type="InputHandlerProvider">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FoldHandler.java 5568 2006-07-10 20:52:23Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getInputHandler" fulltype="org.gjt.sp.jedit.input.AbstractInputHandler" type="AbstractInputHandler" />
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="AbstractInputHandler" visibility="public" package="org.gjt.sp.jedit.input" superclassfulltype="org.gjt.sp.jedit.input.AbstractInputHandler" fulltype="org.gjt.sp.jedit.input.TextAreaInputHandler" type="TextAreaInputHandler">
		<comment>
			<description>This class manage the key bindings and execute the actions binded on the
 keyboard events for the standalone textarea.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FoldHandler.java 5568 2006-07-10 20:52:23Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="TextAreaInputHandler">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</constructor>
			<method visibility="public" name="processKeyEvent" fulltype="void" type="void">
				<comment>
					<description>Forwards key events directly to the input handler.
 This is slightly faster than using a KeyListener
 because some Swing overhead is avoided.</description>
					<attribute name="@param">
						<description>evt the keyboard event</description>
					</attribute>
					<attribute name="@param">
						<description>from the source of the event. Since this is the input handler of the textarea, it should always be 1</description>
					</attribute>
					<attribute name="@param">
						<description>global it is only true if the event comes from the DefaultKeyboardFocusManager</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="the keyboard event" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
					<param name="from" comment="the source of the event. Since this is the input handler of the textarea, it should always be 1" fulltype="int" type="int" />
					<param name="global" comment="it is only true if the event comes from the DefaultKeyboardFocusManager" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method abstract="true" visibility="protected" name="getAction" fulltype="org.gjt.sp.jedit.JEditBeanShellAction" type="JEditBeanShellAction">
				<params>
					<param name="action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="invokeAction" fulltype="void" type="void">
				<comment>
					<description>Invokes the specified action, repeating and recording it as
 necessary.</description>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="The action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="invokeAction" fulltype="void" type="void">
				<comment>
					<description>Invokes the specified action, repeating and recording it as
 necessary.</description>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="The action" fulltype="org.gjt.sp.jedit.JEditBeanShellAction" type="JEditBeanShellAction" />
				</params>
			</method>
			<method visibility="public" name="handleKey" fulltype="boolean" type="boolean">
				<comment>
					<description>Handles the given keystroke.</description>
					<attribute name="@param">
						<description>keyStroke The key stroke</description>
					</attribute>
					<attribute name="@param">
						<description>dryRun only calculate the return value, do not have any other effect</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="keyStroke" comment="The key stroke" fulltype="org.gjt.sp.jedit.gui.KeyEventTranslator.Key" type="KeyEventTranslator.Key" />
					<param name="dryRun" comment="only calculate the return value, do not have any other effect" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="userInput" fulltype="void" type="void">
				<params>
					<param name="ch" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="protected" name="invokeReadNextChar" fulltype="void" type="void">
				<params>
					<param name="ch" fulltype="char" type="char" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.AutoDetection" type="AutoDetection">
		<comment>
			<description>Some functions for auto detection of I/O stream properties.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="AutoDetection" />
			<method static="true" visibility="public" name="getMarkedStream" fulltype="java.io.BufferedInputStream" type="BufferedInputStream">
				<comment>
					<description>Returns a marked, rewindable stream.
 Calling reset() method rewinds the stream to its beginning.
 But reset() can fail if too long bytes were read.</description>
				</comment>
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</method>
			<method static="true" visibility="public" name="isGzipped" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns wheather the stream is gzipped.
 This method reads a few bytes from the sample. So a caller
 must take care of mark() to reuse the contents. Wraping the
 stream by getMarkedStream() is suitable.</description>
				</comment>
				<params>
					<param name="sample" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getEncodingDetectors" fulltype="java.util.List" type="List">
				<comment>
					<description>Returns the user configured ordered list of encoding detectors.
 This method reads property &quot;encodingDetectors&quot;.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getDetectedEncoding" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns an auto detected encoding from content of markedStream.
 This method assumes that markedStream is wrapped by
 getMarkedStream() method.</description>
				</comment>
				<params>
					<param name="markedStream" fulltype="java.io.BufferedInputStream" type="BufferedInputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.AutoDetection.Result" type="AutoDetection.Result">
			<comment>
				<description>An utility class to hold the result of some auto detections.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="AutoDetection.Result">
					<comment>
						<description>Do some auto detection for a stream and hold the
 result in this instance.</description>
						<attribute name="@param">
							<description>in the stream</description>
						</attribute>
					</comment>
					<params>
						<param name="in" comment="the stream" fulltype="java.io.InputStream" type="InputStream" />
					</params>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</constructor>
				<method visibility="public" name="getRewindedStream" fulltype="java.io.BufferedInputStream" type="BufferedInputStream">
					<comment>
						<description>Returns the stream which can be read the contents of
 the original stream.
 Some bytes ware read from original stream for auto
 detections. But they are rewinded at this method.</description>
					</comment>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
				<method visibility="public" name="streamIsGzipped" fulltype="boolean" type="boolean">
					<comment>
						<description>Returns true if the stream is gzipped.</description>
					</comment>
				</method>
				<method visibility="public" name="getDetectedEncoding" fulltype="java.lang.String" type="String">
					<comment>
						<description>Returns the auto detected encoding.
 Returns null if no encoding was detected.</description>
					</comment>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.AutoDetection.Result" type="AutoDetection.Result">
		<comment>
			<description>An utility class to hold the result of some auto detections.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="AutoDetection.Result">
				<comment>
					<description>Do some auto detection for a stream and hold the
 result in this instance.</description>
					<attribute name="@param">
						<description>in the stream</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="the stream" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</constructor>
			<method visibility="public" name="getRewindedStream" fulltype="java.io.BufferedInputStream" type="BufferedInputStream">
				<comment>
					<description>Returns the stream which can be read the contents of
 the original stream.
 Some bytes ware read from original stream for auto
 detections. But they are rewinded at this method.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="streamIsGzipped" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the stream is gzipped.</description>
				</comment>
			</method>
			<method visibility="public" name="getDetectedEncoding" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the auto detected encoding.
 Returns null if no encoding was detected.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.CharsetEncoding" type="CharsetEncoding">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.io.Encoding" type="Encoding" />
		</implements>
		<comment>
			<description>Encodings which are provided by java.nio.charset.Charset.</description>
			<attribute name="@since">
				<description>4.3pre10</description>
			</attribute>
			<attribute name="@author">
				<description>Kazutoshi Satoda</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="CharsetEncoding">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getTextReader" fulltype="java.io.Reader" type="Reader">
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getTextWriter" fulltype="java.io.Writer" type="Writer">
				<params>
					<param name="out" fulltype="java.io.OutputStream" type="OutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getPermissiveTextReader" fulltype="java.io.Reader" type="Reader">
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Task" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="org.gjt.sp.util.Task" fulltype="org.gjt.sp.jedit.io.CopyFileWorker" type="CopyFileWorker">
		<comment>
			<description>This worker will copy a file. Be careful it override files if the target
 already exists</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre13</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="CopyFileWorker">
				<comment>
					<description>Copy a file. Careful, it will &lt;b&gt;overwrite&lt;/b&gt; the target.</description>
					<attribute name="@param">
						<description>comp   the component that will be used as parent in case of error</description>
					</attribute>
					<attribute name="@param">
						<description>source the source path</description>
					</attribute>
					<attribute name="@param">
						<description>target the target path (it is the file path, not a parent directory)</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="the component that will be used as parent in case of error" fulltype="java.awt.Component" type="Component" />
					<param name="source" comment="the source path" fulltype="java.lang.String" type="String" />
					<param name="target" comment="the target path (it is the file path, not a parent directory)" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="CopyFileWorker">
				<comment>
					<description>Copy all files from the list to the target directory.
 If some files already exist in the target directory the files will 
 be skipped.</description>
					<attribute name="@param">
						<description>comp   the component that will be used as parent in case of error</description>
					</attribute>
					<attribute name="@param">
						<description>sources the sources path to copy</description>
					</attribute>
					<attribute name="@param">
						<description>target the target path (it must be a directory otherwise nothing will be copied)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="the component that will be used as parent in case of error" fulltype="java.awt.Component" type="Component" />
					<param name="sources" comment="the sources path to copy" fulltype="java.util.List" type="List" />
					<param name="target" comment="the target path (it must be a directory otherwise nothing will be copied)" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="CopyFileWorker">
				<comment>
					<description>Copy all files from the list to the target directory.
 If some files already exist in the target directory the &lt;code&gt;Behavior&lt;/code&gt; will decide what
 to do.</description>
					<attribute name="@param">
						<description>comp   the component that will be used as parent in case of error</description>
					</attribute>
					<attribute name="@param">
						<description>sources the sources path to copy</description>
					</attribute>
					<attribute name="@param">
						<description>target the target path (it must be a directory otherwise nothing will be copied)</description>
					</attribute>
					<attribute name="@param">
						<description>behavior the behavior if the target file already exists</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="the component that will be used as parent in case of error" fulltype="java.awt.Component" type="Component" />
					<param name="sources" comment="the sources path to copy" fulltype="java.util.List" type="List" />
					<param name="target" comment="the target path (it must be a directory otherwise nothing will be copied)" fulltype="java.lang.String" type="String" />
					<param name="behavior" comment="the behavior if the target file already exists" fulltype="org.gjt.sp.jedit.io.CopyFileWorker.Behavior" type="CopyFileWorker.Behavior" />
				</params>
			</constructor>
			<method visibility="public" name="_run" fulltype="void" type="void" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.io" interface="true" fulltype="org.gjt.sp.jedit.io.Encoding" type="Encoding">
		<comment>
			<description>An interface to represent an encoding.
 An encoding is a mapping between a character stream and a byte
 stream. It is like java.nio.charset.Charset but has slightly
 different form. This can represents some extended encodings like
 UTF-8Y which drops (inserts) the BOM bytes before actual decoding
 (encoding). This also enables to add some extended encodings such
 as ASCII representation used by Java property files.</description>
			<attribute name="@since">
				<description>4.3pre10</description>
			</attribute>
			<attribute name="@author">
				<description>Kazutoshi Satoda</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getTextReader" fulltype="java.io.Reader" type="Reader">
				<comment>
					<description>Map an InputStream to a Reader.
 Decode-error while reading from this Reader should be reported
 by throwing an IOException.</description>
				</comment>
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getTextWriter" fulltype="java.io.Writer" type="Writer">
				<comment>
					<description>Map an OutputStream to a Writer.
 Encode-error while writing to this Writer should be reported
 by throwing an IOException.</description>
				</comment>
				<params>
					<param name="out" fulltype="java.io.OutputStream" type="OutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getPermissiveTextReader" fulltype="java.io.Reader" type="Reader">
				<comment>
					<description>Map an InputStream to a Reader.
 Decode-error while reading from this Reader should be ignored
 or replaced.</description>
				</comment>
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.io" interface="true" fulltype="org.gjt.sp.jedit.io.EncodingDetector" type="EncodingDetector">
		<comment>
			<description>An interface to detect a reasonable encoding from some bytes at the
 beginning of a file. To offer your own EncodingDetector, implement this 
 interface and define a service in your &lt;tt&gt;services.xml&lt;/tt&gt; file. 
 For example:&lt;pre&gt;
&amp;lt;SERVICE CLASS=&amp;quot;org.gjt.sp.jedit.io.EncodingDetector&amp;quot; NAME=&amp;quot;XML-PI&amp;quot;&amp;gt;
        new XMLEncodingDetector();
&amp;lt;/SERVICE&amp;gt; &lt;/pre&gt;</description>
			<attribute name="@since">
				<description>4.3pre10</description>
			</attribute>
			<attribute name="@author">
				<description>Kazutoshi Satoda</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="detectEncoding" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of a detected encoding for the bytes in sample.
 Returns null if this instance could not detect reasonable one.</description>
				</comment>
				<params>
					<param name="sample" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.EncodingServer" type="EncodingServer">
		<comment>
			<description>A class for some static methods to deal with encodings.</description>
			<attribute name="@since">
				<description>4.3pre10</description>
			</attribute>
			<attribute name="@author">
				<description>Kazutoshi Satoda</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EncodingServer" />
			<method static="true" visibility="public" name="getEncoding" fulltype="org.gjt.sp.jedit.io.Encoding" type="Encoding">
				<comment>
					<description>Returns an instance of Encoding for specified name.
 The name is used for search the following domains in the
 listed order.
   - java.nio.charset.Charset
   - jEdit ServiceManager</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAvailableNames" fulltype="java.util.Set" type="Set">
				<comment>
					<description>Returns the set of all available encoding names.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getSelectedNames" fulltype="java.util.Set" type="Set">
				<comment>
					<description>Returns the set of user selected encoding names.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getTextReader" fulltype="java.io.Reader" type="Reader">
				<comment>
					<description>Returns a Reader object that reads the InputStream with
 the encoding. This method is same with
 &quot;getEncoding(encoding).getTextReader(in)&quot;.</description>
				</comment>
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
					<param name="encoding" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getTextWriter" fulltype="java.io.Writer" type="Writer">
				<comment>
					<description>Returns a Writer object that writes to the OutputStream with
 the encoding. This method is same with
 &quot;getEncoding(encoding).getTextWriter(out)&quot;.</description>
				</comment>
				<params>
					<param name="out" fulltype="java.io.OutputStream" type="OutputStream" />
					<param name="encoding" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="hasEncoding" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified name is supported as a name for an Encoding.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.EncodingWithBOM" type="EncodingWithBOM">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.io.Encoding" type="Encoding" />
		</implements>
		<comment>
			<description>Encodings which have BOM at the beginning of byte stream.</description>
			<attribute name="@since">
				<description>4.3pre10</description>
			</attribute>
			<attribute name="@author">
				<description>Kazutoshi Satoda</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EncodingWithBOM">
				<params>
					<param name="plain" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getTextReader" fulltype="java.io.Reader" type="Reader">
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getTextWriter" fulltype="java.io.Writer" type="Writer">
				<params>
					<param name="out" fulltype="java.io.OutputStream" type="OutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getPermissiveTextReader" fulltype="java.io.Reader" type="Reader">
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.EncodingWithBOM.Detector" type="EncodingWithBOM.Detector">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.io.EncodingDetector" type="EncodingDetector" />
			</implements>
			<methods>
				<constructor visibility="public" name="EncodingWithBOM.Detector" />
				<method visibility="public" name="detectEncoding" fulltype="java.lang.String" type="String">
					<params>
						<param name="sample" fulltype="java.io.InputStream" type="InputStream" />
					</params>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.EncodingWithBOM.Detector" type="EncodingWithBOM.Detector">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.io.EncodingDetector" type="EncodingDetector" />
		</implements>
		<methods>
			<constructor visibility="public" name="EncodingWithBOM.Detector" />
			<method visibility="public" name="detectEncoding" fulltype="java.lang.String" type="String">
				<params>
					<param name="sample" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="VFS" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="org.gjt.sp.jedit.io.VFS" fulltype="org.gjt.sp.jedit.io.FavoritesVFS" type="FavoritesVFS">
		<comment>
			<description>A VFS used for remembering frequently-visited directories. Listing it
 returns the favorites list. The deletePath of each entry is the
 directory prefixed with &quot;favorites:&quot; so that right-clicking on a
 favorite and clicking &apos;delete&apos; in the browser just deletes the
 favorite, and not the directory itself.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FavoritesVFS.java 21627 2012-05-04 16:58:22Z jarekczek $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="favorites" visibility="public" name="PROTOCOL" constexpr="&quot;favorites&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="FavoritesVFS" />
			<method visibility="public" name="getParentOfPath" fulltype="java.lang.String" type="String">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="_listFiles" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="url" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="_getFile" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="_delete" fulltype="boolean" type="boolean">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="_rename" returncomment="true if the favorite having that old path exists" fulltype="boolean" type="boolean">
				<comment>
					<description>Rename a favorite</description>
					<attribute name="@param">
						<description>session no session needed you can give null</description>
					</attribute>
					<attribute name="@param">
						<description>from The old path (not the name)</description>
					</attribute>
					<attribute name="@param">
						<description>to the new name</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@return">
						<description>true if the favorite having that old path exists</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="no session needed you can give null" fulltype="java.lang.Object" type="Object" />
					<param name="from" comment="The old path (not the name)" fulltype="java.lang.String" type="String" />
					<param name="to" comment="the new name" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadFavorites" fulltype="void" type="void" />
			<method static="true" visibility="public" name="addToFavorites" fulltype="void" type="void">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="type" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveFavorites" fulltype="void" type="void" />
			<method static="true" visibility="public" name="getFavorites" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
		</methods>
		<jelclass superclass="VFSFile" visibility="public" package="org.gjt.sp.jedit.io" serializable="true" superclassfulltype="org.gjt.sp.jedit.io.VFSFile" fulltype="org.gjt.sp.jedit.io.FavoritesVFS.Favorite" type="FavoritesVFS.Favorite">
			<methods>
				<method visibility="public" name="getLabel" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="getExtendedAttribute" fulltype="java.lang.String" type="String">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="getVFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="VFSFile" visibility="public" package="org.gjt.sp.jedit.io" serializable="true" superclassfulltype="org.gjt.sp.jedit.io.VFSFile" fulltype="org.gjt.sp.jedit.io.FavoritesVFS.Favorite" type="FavoritesVFS.Favorite">
		<methods>
			<method visibility="public" name="getLabel" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getExtendedAttribute" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getVFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
		</methods>
	</jelclass>
	<jelclass superclass="VFS" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="org.gjt.sp.jedit.io.VFS" fulltype="org.gjt.sp.jedit.io.FileRootsVFS" type="FileRootsVFS">
		<comment>
			<description>A VFS that lists local root filesystems.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FileRootsVFS.java 21627 2012-05-04 16:58:22Z jarekczek $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="roots" visibility="public" name="PROTOCOL" constexpr="&quot;roots&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="FileRootsVFS" />
			<method visibility="public" name="getParentOfPath" fulltype="java.lang.String" type="String">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="_listFiles" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="url" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="_getFile" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="VFS" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="org.gjt.sp.jedit.io.VFS" fulltype="org.gjt.sp.jedit.io.FileVFS" type="FileVFS">
		<comment>
			<description>Local filesystem VFS.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FileVFS.java 21721 2012-05-27 09:03:56Z jarekczek $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="FileVFS__perms" visibility="public" name="PERMISSIONS_PROPERTY" constexpr="&quot;FileVFS__perms&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="FileVFS" />
			<method visibility="public" name="getParentOfPath" fulltype="java.lang.String" type="String">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="constructPath" fulltype="java.lang.String" type="String">
				<params>
					<param name="parent" fulltype="java.lang.String" type="String" />
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFileSeparator" fulltype="char" type="char" />
			<method visibility="public" name="getTwoStageSaveName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a temporary file name based on the given path.

 &lt;p&gt;If the directory where the file would be created cannot be
 written (i.e., no new files can be created in that directory),
 this method returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="save" fulltype="boolean" type="boolean">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="boolean" type="boolean">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="recursiveDelete" returncomment="true if successful, else false" fulltype="boolean" type="boolean">
				<comment>
					<description>#</description>
					<attribute name="@param">
						<description>path the directory path to recursive delete</description>
					</attribute>
					<attribute name="@return">
						<description>true if successful, else false</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="the directory path to recursive delete" fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method visibility="public" name="_canonPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the canonical form if the specified path name. For example,
 &lt;code&gt;~&lt;/code&gt; might be expanded to the user&apos;s home directory.</description>
					<attribute name="@param">
						<description>session The session</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurred</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The session" fulltype="java.lang.Object" type="Object" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurred" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_listFiles" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="_getFile" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="_delete" fulltype="boolean" type="boolean">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="_rename" fulltype="boolean" type="boolean">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="from" fulltype="java.lang.String" type="String" />
					<param name="to" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="_mkdir" fulltype="boolean" type="boolean">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="directory" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="_createInputStream" fulltype="java.io.InputStream" type="InputStream">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="ignoreErrors" fulltype="boolean" type="boolean" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_createOutputStream" fulltype="java.io.OutputStream" type="OutputStream">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_saveComplete" fulltype="void" type="void">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method static="true" visibility="public" name="getPermissions" fulltype="int" type="int">
				<comment>
					<description>Returns numeric permissions of a file. On non-Unix systems, always
 returns zero.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="setPermissions" fulltype="void" type="void">
				<comment>
					<description>Sets numeric permissions of a file. On non-Unix platforms,
 does nothing.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="permissions" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
		<jelclass superclass="VFSFile" visibility="public" package="org.gjt.sp.jedit.io" serializable="true" superclassfulltype="org.gjt.sp.jedit.io.VFSFile" fulltype="org.gjt.sp.jedit.io.FileVFS.LocalFile" type="FileVFS.LocalFile">
			<fields>
				<field static="true" visibility="public" name="DATE_FORMAT" fulltype="java.text.DateFormat" type="DateFormat" />
			</fields>
			<methods>
				<constructor visibility="public" name="FileVFS.LocalFile">
					<params>
						<param name="file" fulltype="java.io.File" type="File" />
					</params>
				</constructor>
				<method visibility="public" name="getExtendedAttribute" fulltype="java.lang.String" type="String">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="protected" name="fetchAttrs" fulltype="void" type="void">
					<comment>
						<description>Fetch the attributes of the local file.</description>
					</comment>
				</method>
				<method visibility="public" name="getIcon" returncomment="the file system icon" fulltype="javax.swing.Icon" type="Icon">
					<comment>
						<description>Returns the file system icon for the file.</description>
						<attribute name="@param">
							<description>expanded not used here</description>
						</attribute>
						<attribute name="@param">
							<description>openBuffer not used here</description>
						</attribute>
						<attribute name="@return">
							<description>the file system icon</description>
						</attribute>
						<attribute name="@since">
							<description>4.3pre9</description>
						</attribute>
					</comment>
					<params>
						<param name="expanded" comment="not used here" fulltype="boolean" type="boolean" />
						<param name="openBuffer" comment="not used here" fulltype="boolean" type="boolean" />
					</params>
				</method>
				<method visibility="public" name="getSymlinkPath" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="getLength" fulltype="long" type="long" />
				<method visibility="public" name="isReadable" fulltype="boolean" type="boolean" />
				<method visibility="public" name="isWriteable" fulltype="boolean" type="boolean" />
				<method visibility="public" name="getModified" fulltype="long" type="long" />
				<method visibility="public" name="setModified" fulltype="void" type="void">
					<params>
						<param name="modified" fulltype="long" type="long" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="VFSFile" visibility="public" package="org.gjt.sp.jedit.io" serializable="true" superclassfulltype="org.gjt.sp.jedit.io.VFSFile" fulltype="org.gjt.sp.jedit.io.FileVFS.LocalFile" type="FileVFS.LocalFile">
		<fields>
			<field static="true" visibility="public" name="DATE_FORMAT" fulltype="java.text.DateFormat" type="DateFormat" />
		</fields>
		<methods>
			<constructor visibility="public" name="FileVFS.LocalFile">
				<params>
					<param name="file" fulltype="java.io.File" type="File" />
				</params>
			</constructor>
			<method visibility="public" name="getExtendedAttribute" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="fetchAttrs" fulltype="void" type="void">
				<comment>
					<description>Fetch the attributes of the local file.</description>
				</comment>
			</method>
			<method visibility="public" name="getIcon" returncomment="the file system icon" fulltype="javax.swing.Icon" type="Icon">
				<comment>
					<description>Returns the file system icon for the file.</description>
					<attribute name="@param">
						<description>expanded not used here</description>
					</attribute>
					<attribute name="@param">
						<description>openBuffer not used here</description>
					</attribute>
					<attribute name="@return">
						<description>the file system icon</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="expanded" comment="not used here" fulltype="boolean" type="boolean" />
					<param name="openBuffer" comment="not used here" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getSymlinkPath" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getLength" fulltype="long" type="long" />
			<method visibility="public" name="isReadable" fulltype="boolean" type="boolean" />
			<method visibility="public" name="isWriteable" fulltype="boolean" type="boolean" />
			<method visibility="public" name="getModified" fulltype="long" type="long" />
			<method visibility="public" name="setModified" fulltype="void" type="void">
				<params>
					<param name="modified" fulltype="long" type="long" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.GlobVFSFileFilter" type="GlobVFSFileFilter">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.io.VFSFileFilter" type="VFSFileFilter" />
		</implements>
		<comment>
			<description>Implementation of {@link VFSFileFilter} that uses Unix-style globs
 to filter files. This doesn&apos;t filter directories - just files.</description>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
			<attribute name="@version">
				<description>$Id$</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre7</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="GlobVFSFileFilter">
				<params>
					<param name="glob" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<params>
					<param name="file" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
				</params>
			</method>
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<params>
					<param name="url" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDescription" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setGlob" fulltype="void" type="void">
				<params>
					<param name="glob" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getGlob" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Task" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="org.gjt.sp.util.Task" fulltype="org.gjt.sp.jedit.io.LocalFileSaveTask" type="LocalFileSaveTask">
		<comment>
			<description>The Task for asynchronous saving local file to disk ommiting VFS API stack.
 Can be used to store backup files, settings, etc</description>
			<attribute name="@example">
				<description>This class used for example by ftp.FtpVFS to perform local backups of remote files in background with no GUI freeze</description>
			</attribute>
			<attribute name="@example">
				<description>ThreadUtilities.runInBackground( new LocalFileSaveTask(...) )</description>
			</attribute>
			<attribute name="@author">
				<description>Vadim Voituk</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.5pre
 
 TODO: Add setLabel() &amp;&amp; ProgressObserver methods</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="LocalFileSaveTask">
				<params>
					<param name="file" fulltype="java.io.File" type="File" />
					<param name="body" fulltype="java.lang.String" type="String" />
					<param name="charset" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="_run" fulltype="void" type="void">
				<comment>
					<attribute name="@see">
						<description>org.gjt.sp.util.Task#_run()</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.RegexEncodingDetector" type="RegexEncodingDetector">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.io.EncodingDetector" type="EncodingDetector" />
		</implements>
		<comment>
			<description>An encoding detector which finds regex pattern.

 This reads the sample in the system default encoding for first some
 lines and look for a regex pattern. This can fail if the
 stream cannot be read in the system default encoding or the
 pattern is not found at near the top of the stream.</description>
			<attribute name="@since">
				<description>4.3pre16</description>
			</attribute>
			<attribute name="@author">
				<description>Kazutoshi Satoda</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="\p{Alnum}[\p{Alnum}\-.:_]*" visibility="public" name="VALID_ENCODING_PATTERN" constexpr="&quot;\\p{Alnum}[\\p{Alnum}\\-.:_]*&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>A regex pattern matches to &quot;Charset names&quot; specified for
 java.nio.charset.Charset.</description>
					<attribute name="@see">
						<description>&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html#names&quot;&gt;Charset names&lt;/a&gt;</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="RegexEncodingDetector">
				<params>
					<param name="pattern" fulltype="java.lang.String" type="String" />
					<param name="replacement" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="detectEncoding" fulltype="java.lang.String" type="String">
				<params>
					<param name="sample" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="VFS" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="org.gjt.sp.jedit.io.VFS" fulltype="org.gjt.sp.jedit.io.UrlVFS" type="UrlVFS">
		<comment>
			<description>URL VFS.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: UrlVFS.java 21627 2012-05-04 16:58:22Z jarekczek $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="UrlVFS" />
			<method visibility="public" name="constructPath" fulltype="java.lang.String" type="String">
				<params>
					<param name="parent" fulltype="java.lang.String" type="String" />
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="_createInputStream" fulltype="java.io.InputStream" type="InputStream">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="ignoreErrors" fulltype="boolean" type="boolean" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_createOutputStream" fulltype="java.io.OutputStream" type="OutputStream">
				<params>
					<param name="session" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getFilePath" fulltype="java.lang.String" type="String">
				<params>
					<param name="vfsPath" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS">
		<comment>
			<description>A virtual filesystem implementation.&lt;p&gt;

 Plugins can provide virtual file systems by defining entries in their
 &lt;code&gt;services.xml&lt;/code&gt; files like so:

 &lt;pre&gt;&amp;lt;SERVICE CLASS=&quot;org.gjt.sp.jedit.io.VFS&quot; NAME=&quot;&lt;i&gt;name&lt;/i&gt;&quot;&amp;gt;
    new &lt;i&gt;MyVFS&lt;/i&gt;();
&amp;lt;/SERVICE&amp;gt;&lt;/pre&gt;

 URLs of the form &lt;code&gt;&lt;i&gt;name&lt;/i&gt;:&lt;i&gt;path&lt;/i&gt;&lt;/code&gt; will then be handled
 by the VFS named &lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;.&lt;p&gt;

 See {@link org.gjt.sp.jedit.ServiceManager} for details.&lt;p&gt;

 &lt;h3&gt;Session objects:&lt;/h3&gt;

 A session is used to persist things like login information, any network
 sockets, etc. File system implementations that do not need this kind of
 persistence return a dummy object as a session.&lt;p&gt;

 Methods whose names are prefixed with &quot;_&quot; expect to be given a
 previously-obtained session object. A session must be obtained with
 this method:

 &lt;ul&gt;
 &lt;li&gt;{@link #createVFSSession(String,Component)}&lt;/li&gt;
 &lt;/ul&gt;

 That method should be called from the AWT (EDT) thread, unless
 the filesystem has &lt;code&gt;NON_AWT_SESSION_CAP&lt;/code&gt; capability.&lt;p&gt;

 When done, the session must be disposed of using
 {@link #_endVFSSession(Object,Component)}.&lt;p&gt;

 &lt;h3&gt;Thread safety:&lt;/h3&gt;

 The following methods cannot be called from an I/O thread:

 &lt;ul&gt;
 &lt;li&gt;{@link #createVFSSession(String,Component)} - unless
     &lt;code&gt;NON_AWT_SESSION_CAP&lt;/code&gt; capability is set&lt;/li&gt;
 &lt;li&gt;{@link #insert(View,Buffer,String)}&lt;/li&gt;
 &lt;li&gt;{@link #load(View,Buffer,String)}&lt;/li&gt;
 &lt;li&gt;{@link #save(View,Buffer,String)}&lt;/li&gt;
 &lt;/ul&gt;

 All remaining methods are required to be thread-safe in subclasses.

 &lt;h3&gt;Implementing a VFS&lt;/h3&gt;

 You can override as many or as few methods as you want. Make sure
 {@link #getCapabilities()} returns a value reflecting the functionality
 implemented by your VFS.</description>
			<attribute name="@see">
				<description>VFSManager#getVFSForPath(String)</description>
			</attribute>
			<attribute name="@see">
				<description>VFSManager#getVFSForProtocol(String)</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>$Id: VFS.java 21720 2012-05-27 08:31:15Z jarekczek $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="1" visibility="public" name="READ_CAP" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>Read capability.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="2" visibility="public" name="WRITE_CAP" constexpr="2" fulltype="int" type="int">
				<comment>
					<description>Write capability.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="4" visibility="public" name="BROWSE_CAP" constexpr="4" fulltype="int" type="int">
				<comment>
					<description>Browse capability</description>
					<attribute name="@since">
						<description>jEdit 4.3pre11

 This was the official API for adding items to a file
 system browser&apos;s &lt;b&gt;Plugins&lt;/b&gt; menu in jEdit 4.1 and earlier. In
 jEdit 4.2, there is a different way of doing this, you must provide
 a &lt;code&gt;browser.actions.xml&lt;/code&gt; file in your plugin JAR, and
 define &lt;code&gt;plugin.&lt;i&gt;class&lt;/i&gt;.browser-menu-item&lt;/code&gt;
 or &lt;code&gt;plugin.&lt;i&gt;class&lt;/i&gt;.browser-menu&lt;/code&gt; properties.
 See {@link org.gjt.sp.jedit.EditPlugin} for details.</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="8" visibility="public" name="DELETE_CAP" constexpr="8" fulltype="int" type="int">
				<comment>
					<description>Delete file capability.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="16" visibility="public" name="RENAME_CAP" constexpr="16" fulltype="int" type="int">
				<comment>
					<description>Rename file capability.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="32" visibility="public" name="MKDIR_CAP" constexpr="32" fulltype="int" type="int">
				<comment>
					<description>Make directory capability.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="64" visibility="public" name="LOW_LATENCY_CAP" constexpr="64" fulltype="int" type="int">
				<comment>
					<description>Low latency capability. If this is not set, then a confirm dialog
 will be shown before doing a directory search in this VFS.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="128" visibility="public" name="CASE_INSENSITIVE_CAP" constexpr="128" fulltype="int" type="int">
				<comment>
					<description>Case insensitive file system capability.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="256" visibility="public" name="NON_AWT_SESSION_CAP" constexpr="256" fulltype="int" type="int">
				<comment>
					<description>Sessions created outside Event Dispatching Thread -
 file system capability. Set for the file system that does not
 require that &lt;code&gt;createVFSSession&lt;/code&gt; is called on edt.
 All systems that do not implement &lt;code&gt;createVFSSession&lt;/code&gt;
 should set it, but others may too.</description>
					<attribute name="@since">
						<description>jEdit 5.0pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="type" visibility="public" name="EA_TYPE" constexpr="&quot;type&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>File type.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="status" visibility="public" name="EA_STATUS" constexpr="&quot;status&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>File status (read only, read write, etc).</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="size" visibility="public" name="EA_SIZE" constexpr="&quot;size&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>File size.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="modified" visibility="public" name="EA_MODIFIED" constexpr="&quot;modified&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>File last modified date.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field static="true" visibility="public" name="IOBUFSIZE" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="protected" name="VFS">
				<comment>
					<description>Creates a new virtual filesystem.</description>
					<attribute name="@param">
						<description>name The name</description>
					</attribute>
					<attribute name="@param">
						<description>caps The capabilities</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name" fulltype="java.lang.String" type="String" />
					<param name="caps" comment="The capabilities" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="protected" name="VFS">
				<comment>
					<description>Creates a new virtual filesystem.</description>
					<attribute name="@param">
						<description>name The name</description>
					</attribute>
					<attribute name="@param">
						<description>caps The capabilities</description>
					</attribute>
					<attribute name="@param">
						<description>extAttrs The extended attributes</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name" fulltype="java.lang.String" type="String" />
					<param name="caps" comment="The capabilities" fulltype="int" type="int" />
					<param name="extAttrs" comment="The extended attributes" fulltype="java.lang.String[]" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns this VFS&apos;s name. The name is used to obtain the
 label stored in the &lt;code&gt;vfs.&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt;
 property.</description>
				</comment>
			</method>
			<method visibility="public" name="getCapabilities" fulltype="int" type="int">
				<comment>
					<description>Returns the capabilities of this VFS.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isMarkersFileSupported" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if an additional markers file can be saved by this VFS.
 Default is {@code true}.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getExtendedAttributes" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns the extended attributes supported by this VFS.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getFileName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the file name component of the specified path.</description>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFilePath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the path component of the specified VFS path.
 The standard implementation cuts off the protocol
 and the protocol separator character and then delegates
 to eventually present sub-VFS-paths present in the VFS path
 like &quot;jode:archive:/test.zip!/test.txt&quot;.
 &lt;p/&gt;
 If a VFS implementation can have additional
 information in the VFS path like username / password / host / port
 for FTP VFS or archive filename for archive VFS, this
 method should be overridden to remove those information also.
 The easiest would be to remove those additional information
 and then delegate to {@code super.getFilePath()}.</description>
					<attribute name="@param">
						<description>vfsPath The VFS path</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="vfsPath" comment="The VFS path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getParentOfPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the parent of the specified path. This must be
 overridden to return a non-null value for browsing of this
 filesystem to work.</description>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="constructPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Constructs a path from the specified directory and
 file name component. This must be overridden to return a
 non-null value, otherwise browsing this filesystem will
 not work.&lt;p&gt;

 Unless you are writing a VFS, this method should not be called
 directly. To ensure correct behavior, you &lt;b&gt;must&lt;/b&gt; call
 {@link org.gjt.sp.jedit.MiscUtilities#constructPath(String,String)}
 instead.</description>
					<attribute name="@param">
						<description>parent The parent directory</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="The parent directory" fulltype="java.lang.String" type="String" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFileSeparator" fulltype="char" type="char">
				<comment>
					<description>Returns the file separator used by this VFS.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre9</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getTwoStageSaveName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a temporary file name based on the given path.

 By default jEdit first saves a file to &lt;code&gt;#&lt;i&gt;name&lt;/i&gt;#save#&lt;/code&gt;
 and then renames it to the original file. However some virtual file
 systems might not support the &lt;code&gt;#&lt;/code&gt; character in filenames,
 so this method permits the VFS to override this behavior.

 If this method returns &lt;code&gt;null&lt;/code&gt;, two stage save will not
 be used for that particular file (introduced in jEdit 4.3pre1).</description>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="reloadDirectory" fulltype="void" type="void">
				<comment>
					<description>Called before a directory is reloaded by the file system browser.
 Can be used to flush a cache, etc.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="createVFSSession" returncomment="The session. The session can be null if there were errors" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Creates a VFS session. This method is called from the AWT thread,
 so it should not do any I/O. It could, however, prompt for
 a login name and password, for example. A simpler filesystem
 may set the &lt;code&gt;NON_AWT_SESSION_CAP&lt;/code&gt; capability. When set,
 sessions may be obtained from any thread.</description>
					<attribute name="@param">
						<description>path The path in question</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent any dialog boxes shown</description>
					</attribute>
					<attribute name="@return">
						<description>The session. The session can be null if there were errors</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path in question" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent any dialog boxes shown" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="createVFSSessionSafe" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Same as {@link #createVFSSession}, but may be called fromy any
 thread. It first checks the &lt;code&gt;NON_AWT_SESSION_CAP&lt;/code&gt;
 capability and enters EDT thread if necessary.</description>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="load" fulltype="boolean" type="boolean">
				<comment>
					<description>Loads the specified buffer. The default implementation posts
 an I/O request to the I/O thread.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="save" fulltype="boolean" type="boolean">
				<comment>
					<description>Saves the specifies buffer. The default implementation posts
 an I/O request to the I/O thread.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="copy" returncomment="true if the copy was successful" fulltype="boolean" type="boolean">
				<comment>
					<description>Copy a file to another using VFS.</description>
					<attribute name="@param">
						<description>progress the progress observer. It could be null if you don&apos;t want to monitor progress. If not null
                  you should probably launch this command in a WorkThread</description>
					</attribute>
					<attribute name="@param">
						<description>sourceVFS the source VFS</description>
					</attribute>
					<attribute name="@param">
						<description>sourceSession the VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>sourcePath the source path. It must be a file and must exists</description>
					</attribute>
					<attribute name="@param">
						<description>targetVFS the target VFS</description>
					</attribute>
					<attribute name="@param">
						<description>targetSession the target session</description>
					</attribute>
					<attribute name="@param">
						<description>targetPath the target path.
 If it is a path, it must exists, if it is a file, the parent must
 exists</description>
					</attribute>
					<attribute name="@param">
						<description>comp comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@param">
						<description>canStop could this copy be stopped ?</description>
					</attribute>
					<attribute name="@return">
						<description>true if the copy was successful</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException  IOException If an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="progress" comment="the progress observer. It could be null if you don&apos;t want to monitor progress. If not null
                  you should probably launch this command in a WorkThread" fulltype="org.gjt.sp.util.ProgressObserver" type="ProgressObserver" />
					<param name="sourceVFS" comment="the source VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="sourceSession" comment="the VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="sourcePath" comment="the source path. It must be a file and must exists" fulltype="java.lang.String" type="String" />
					<param name="targetVFS" comment="the target VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="targetSession" comment="the target session" fulltype="java.lang.Object" type="Object" />
					<param name="targetPath" comment="the target path.
 If it is a path, it must exists, if it is a file, the parent must
 exists" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="comp The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
					<param name="canStop" comment="could this copy be stopped ?" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="IOException If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="copy" returncomment="true if the copy was successful" fulltype="boolean" type="boolean">
				<comment>
					<description>Copy a file to another using VFS.</description>
					<attribute name="@param">
						<description>progress the progress observer. It could be null if you don&apos;t want to monitor progress. If not null
                  you should probably launch this command in a WorkThread</description>
					</attribute>
					<attribute name="@param">
						<description>sourceVFS the source VFS</description>
					</attribute>
					<attribute name="@param">
						<description>sourceSession the VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>sourcePath the source path. It must be a file and must exists</description>
					</attribute>
					<attribute name="@param">
						<description>targetVFS the target VFS</description>
					</attribute>
					<attribute name="@param">
						<description>targetSession the target session</description>
					</attribute>
					<attribute name="@param">
						<description>targetPath the target path.
 If it is a path, it must exists, if it is a file, the parent must
 exists</description>
					</attribute>
					<attribute name="@param">
						<description>comp comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@param">
						<description>canStop could this copy be stopped ?</description>
					</attribute>
					<attribute name="@param">
						<description>sendVFSUpdate true if you want to send a VFS update after the copy. False otherwise (if you do a lot
                      of copy)</description>
					</attribute>
					<attribute name="@return">
						<description>true if the copy was successful</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException  IOException If an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0</description>
					</attribute>
				</comment>
				<params>
					<param name="progress" comment="the progress observer. It could be null if you don&apos;t want to monitor progress. If not null
                  you should probably launch this command in a WorkThread" fulltype="org.gjt.sp.util.ProgressObserver" type="ProgressObserver" />
					<param name="sourceVFS" comment="the source VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="sourceSession" comment="the VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="sourcePath" comment="the source path. It must be a file and must exists" fulltype="java.lang.String" type="String" />
					<param name="targetVFS" comment="the target VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="targetSession" comment="the target session" fulltype="java.lang.Object" type="Object" />
					<param name="targetPath" comment="the target path.
 If it is a path, it must exists, if it is a file, the parent must
 exists" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="comp The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
					<param name="canStop" comment="could this copy be stopped ?" fulltype="boolean" type="boolean" />
					<param name="sendVFSUpdate" comment="true if you want to send a VFS update after the copy. False otherwise (if you do a lot
                      of copy)" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="IOException If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="copy" returncomment="true if the copy was successful" fulltype="boolean" type="boolean">
				<comment>
					<description>Copy a file to another using VFS.</description>
					<attribute name="@param">
						<description>progress the progress observer. It could be null if you don&apos;t want to monitor progress. If not null
                  you should probably launch this command in a WorkThread</description>
					</attribute>
					<attribute name="@param">
						<description>sourcePath the source path</description>
					</attribute>
					<attribute name="@param">
						<description>targetPath the target path</description>
					</attribute>
					<attribute name="@param">
						<description>comp comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@param">
						<description>canStop if true the copy can be stopped</description>
					</attribute>
					<attribute name="@param">
						<description>sendVFSUpdate true if you want to send a VFS update after the copy. False otherwise (if you do a lot
                      of copy)</description>
					</attribute>
					<attribute name="@return">
						<description>true if the copy was successful</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException IOException If an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0</description>
					</attribute>
				</comment>
				<params>
					<param name="progress" comment="the progress observer. It could be null if you don&apos;t want to monitor progress. If not null
                  you should probably launch this command in a WorkThread" fulltype="org.gjt.sp.util.ProgressObserver" type="ProgressObserver" />
					<param name="sourcePath" comment="the source path" fulltype="java.lang.String" type="String" />
					<param name="targetPath" comment="the target path" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="comp The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
					<param name="canStop" comment="if true the copy can be stopped" fulltype="boolean" type="boolean" />
					<param name="sendVFSUpdate" comment="true if you want to send a VFS update after the copy. False otherwise (if you do a lot
                      of copy)" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="IOException If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="copy" returncomment="true if the copy was successful" fulltype="boolean" type="boolean">
				<comment>
					<description>Copy a file to another using VFS.</description>
					<attribute name="@param">
						<description>progress the progress observer. It could be null if you don&apos;t want to monitor progress. If not null
                  you should probably launch this command in a WorkThread</description>
					</attribute>
					<attribute name="@param">
						<description>sourcePath the source path</description>
					</attribute>
					<attribute name="@param">
						<description>targetPath the target path</description>
					</attribute>
					<attribute name="@param">
						<description>comp comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@param">
						<description>canStop if true the copy can be stopped</description>
					</attribute>
					<attribute name="@return">
						<description>true if the copy was successful</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException IOException If an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="progress" comment="the progress observer. It could be null if you don&apos;t want to monitor progress. If not null
                  you should probably launch this command in a WorkThread" fulltype="org.gjt.sp.util.ProgressObserver" type="ProgressObserver" />
					<param name="sourcePath" comment="the source path" fulltype="java.lang.String" type="String" />
					<param name="targetPath" comment="the target path" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="comp The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
					<param name="canStop" comment="if true the copy can be stopped" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="IOException If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="insert" fulltype="boolean" type="boolean">
				<comment>
					<description>Inserts a file into the specified buffer. The default implementation
 posts an I/O request to the I/O thread.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="_canonPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the canonical form of the specified path name. For example,
 &lt;code&gt;~&lt;/code&gt; might be expanded to the user&apos;s home directory.</description>
					<attribute name="@param">
						<description>session The session</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurred</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The session" fulltype="java.lang.Object" type="Object" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurred" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_listDirectory" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>A convinience method that matches file names against globs, and can
 optionally list the directory recursively.</description>
					<attribute name="@param">
						<description>session The session</description>
					</attribute>
					<attribute name="@param">
						<description>directory The directory. Note that this must be a full
 URL, including the host name, path name, and so on. The
 username and password (if needed by the VFS) is obtained from the
 session instance.</description>
					</attribute>
					<attribute name="@param">
						<description>glob Only file names matching this glob will be returned</description>
					</attribute>
					<attribute name="@param">
						<description>recursive If true, subdirectories will also be listed.</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurred</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The session" fulltype="java.lang.Object" type="Object" />
					<param name="directory" comment="The directory. Note that this must be a full
 URL, including the host name, path name, and so on. The
 username and password (if needed by the VFS) is obtained from the
 session instance." fulltype="java.lang.String" type="String" />
					<param name="glob" comment="Only file names matching this glob will be returned" fulltype="java.lang.String" type="String" />
					<param name="recursive" comment="If true, subdirectories will also be listed." fulltype="boolean" type="boolean" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurred" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_listDirectory" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>A convenience method that matches file names against globs, and can
 optionally list the directory recursively.</description>
					<attribute name="@param">
						<description>session The session</description>
					</attribute>
					<attribute name="@param">
						<description>directory The directory. Note that this must be a full
 URL, including the host name, path name, and so on. The
 username and password (if needed by the VFS) is obtained from the
 session instance.</description>
					</attribute>
					<attribute name="@param">
						<description>glob Only file names matching this glob will be returned</description>
					</attribute>
					<attribute name="@param">
						<description>recursive If true, subdirectories will also be listed.</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurred</description>
					</attribute>
					<attribute name="@param">
						<description>skipBinary ignore binary files (do not return them).
    This will slow down the process since it will open the files</description>
					</attribute>
					<attribute name="@param">
						<description>skipHidden skips hidden files, directories, and
        backup files. Ignores any file beginning with . or #, or ending with ~
        or .bak</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The session" fulltype="java.lang.Object" type="Object" />
					<param name="directory" comment="The directory. Note that this must be a full
 URL, including the host name, path name, and so on. The
 username and password (if needed by the VFS) is obtained from the
 session instance." fulltype="java.lang.String" type="String" />
					<param name="glob" comment="Only file names matching this glob will be returned" fulltype="java.lang.String" type="String" />
					<param name="recursive" comment="If true, subdirectories will also be listed." fulltype="boolean" type="boolean" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
					<param name="skipBinary" comment="ignore binary files (do not return them).
    This will slow down the process since it will open the files" fulltype="boolean" type="boolean" />
					<param name="skipHidden" comment="skips hidden files, directories, and
        backup files. Ignores any file beginning with . or #, or ending with ~
        or .bak" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurred" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_listDirectory" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>A convenience method that filters the directory listing
 according to a filter, and can optionally list the directory
 recursively.</description>
					<attribute name="@param">
						<description>session The session</description>
					</attribute>
					<attribute name="@param">
						<description>directory The directory. Note that this must be a full
 URL, including the host name, path name, and so on. The
 username and password (if needed by the VFS) is obtained from the
 session instance.</description>
					</attribute>
					<attribute name="@param">
						<description>filter The {@link VFSFileFilter} to use for filtering.</description>
					</attribute>
					<attribute name="@param">
						<description>recursive If true, subdirectories will also be listed.</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurred</description>
					</attribute>
					<attribute name="@param">
						<description>skipBinary ignore binary files (do not return them).
    This will slow down the process since it will open the files</description>
					</attribute>
					<attribute name="@param">
						<description>skipHidden skips hidden files, directories, and
        backup files. Ignores any file beginning with . or #, or ending with ~
        or .bak</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The session" fulltype="java.lang.Object" type="Object" />
					<param name="directory" comment="The directory. Note that this must be a full
 URL, including the host name, path name, and so on. The
 username and password (if needed by the VFS) is obtained from the
 session instance." fulltype="java.lang.String" type="String" />
					<param name="filter" comment="The {@link VFSFileFilter} to use for filtering." fulltype="org.gjt.sp.jedit.io.VFSFileFilter" type="VFSFileFilter" />
					<param name="recursive" comment="If true, subdirectories will also be listed." fulltype="boolean" type="boolean" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
					<param name="skipBinary" comment="ignore binary files (do not return them).
    This will slow down the process since it will open the files" fulltype="boolean" type="boolean" />
					<param name="skipHidden" comment="skips hidden files, directories, and
        backup files. Ignores any file beginning with . or #, or ending with ~
        or .bak" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurred" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_listFiles" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile">
				<comment>
					<description>Lists the specified directory.</description>
					<attribute name="@param">
						<description>session The session</description>
					</attribute>
					<attribute name="@param">
						<description>directory The directory. Note that this must be a full
 URL, including the host name, path name, and so on. The
 username and password (if needed by the VFS) is obtained from the
 session instance.</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurred</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The session" fulltype="java.lang.Object" type="Object" />
					<param name="directory" comment="The directory. Note that this must be a full
 URL, including the host name, path name, and so on. The
 username and password (if needed by the VFS) is obtained from the
 session instance." fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurred" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_getFile" returncomment="The specified directory entry, or null if it doesn&apos;t exist." fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile">
				<comment>
					<description>Returns the specified directory entry.</description>
					<attribute name="@param">
						<description>session The session get it with {@link VFS#createVFSSession(String, Component)}</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurred</description>
					</attribute>
					<attribute name="@return">
						<description>The specified directory entry, or null if it doesn&apos;t exist.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The session get it with {@link VFS#createVFSSession(String, Component)}" fulltype="java.lang.Object" type="Object" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurred" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_delete" fulltype="boolean" type="boolean">
				<comment>
					<description>Deletes the specified URL.</description>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_rename" fulltype="boolean" type="boolean">
				<comment>
					<description>Renames the specified URL. Some filesystems might support moving
 URLs between directories, however others may not. Do not rely on
 this behavior.</description>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>from The old path</description>
					</attribute>
					<attribute name="@param">
						<description>to The new path</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="from" comment="The old path" fulltype="java.lang.String" type="String" />
					<param name="to" comment="The new path" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_mkdir" fulltype="boolean" type="boolean">
				<comment>
					<description>Creates a new directory with the specified URL.</description>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>directory The directory</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="directory" comment="The directory" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_backup" fulltype="void" type="void">
				<comment>
					<description>Backs up the specified file. Default implementation in 5.0pre1
 copies the file to the backup directory. Before 5.0pre1 it was
 empty.</description>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_createInputStream" returncomment="an inputstream or &lt;code&gt;null&lt;/code&gt; if there was a problem" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Creates an input stream. This method is called from the I/O
 thread.</description>
					<attribute name="@param">
						<description>session the VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreErrors If true, file not found errors should be
 ignored</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@return">
						<description>an inputstream or &lt;code&gt;null&lt;/code&gt; if there was a problem</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException If an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="the VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
					<param name="ignoreErrors" comment="If true, file not found errors should be
 ignored" fulltype="boolean" type="boolean" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_createOutputStream" fulltype="java.io.OutputStream" type="OutputStream">
				<comment>
					<description>Creates an output stream. This method is called from the I/O
 thread.</description>
					<attribute name="@param">
						<description>session the VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException If an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="the VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_saveComplete" fulltype="void" type="void">
				<comment>
					<description>Called after a file has been saved.</description>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>path The path the buffer was saved to (can be different from
 {@link org.gjt.sp.jedit.Buffer#getPath()} if the user invoked the
 &lt;b&gt;Save a Copy As&lt;/b&gt; command, for example).</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException If an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="path" comment="The path the buffer was saved to (can be different from
 {@link org.gjt.sp.jedit.Buffer#getPath()} if the user invoked the
 &lt;b&gt;Save a Copy As&lt;/b&gt; command, for example)." fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_finishTwoStageSave" fulltype="void" type="void">
				<comment>
					<description>Called after a file has been saved and we use twoStageSave (first saving to
 another file). This should re-apply permissions for example.</description>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>path The path the buffer was saved to (can be different from
 {@link org.gjt.sp.jedit.Buffer#getPath()} if the user invoked the
 &lt;b&gt;Save a Copy As&lt;/b&gt; command, for example).</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException If an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="path" comment="The path the buffer was saved to (can be different from
 {@link org.gjt.sp.jedit.Buffer#getPath()} if the user invoked the
 &lt;b&gt;Save a Copy As&lt;/b&gt; command, for example)." fulltype="java.lang.String" type="String" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="_endVFSSession" fulltype="void" type="void">
				<comment>
					<description>Finishes the specified VFS session. This must be called
 after all I/O with this VFS is complete, to avoid leaving
 stale network connections and such.</description>
					<attribute name="@param">
						<description>session The VFS session</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component that will parent error dialog boxes</description>
					</attribute>
					<attribute name="@exception">
						<description>IOException if an I/O error occurred</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="The VFS session" fulltype="java.lang.Object" type="Object" />
					<param name="comp" comment="The component that will parent error dialog boxes" fulltype="java.awt.Component" type="Component" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurred" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getDefaultColorFor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns color of the specified file name, by matching it against
 user-specified regular expressions.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.VFS.DirectoryEntryCompare" type="VFS.DirectoryEntryCompare">
			<implements>
				<interface fulltype="java.util.Comparator" type="Comparator" />
			</implements>
			<comment>
				<description>Implementation of {@link Comparator}
 interface that compares {@link VFSFile} instances.</description>
				<attribute name="@since">
					<description>jEdit 4.2pre1</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="public" name="VFS.DirectoryEntryCompare">
					<comment>
						<description>Creates a new &lt;code&gt;DirectoryEntryCompare&lt;/code&gt;.</description>
						<attribute name="@param">
							<description>sortMixFilesAndDirs If false, directories are
 put at the top of the listing.</description>
						</attribute>
						<attribute name="@param">
							<description>sortIgnoreCase If false, upper case comes before
 lower case.</description>
						</attribute>
					</comment>
					<params>
						<param name="sortMixFilesAndDirs" comment="If false, directories are
 put at the top of the listing." fulltype="boolean" type="boolean" />
						<param name="sortIgnoreCase" comment="If false, upper case comes before
 lower case." fulltype="boolean" type="boolean" />
					</params>
				</constructor>
				<method visibility="public" name="compare" fulltype="int" type="int">
					<params>
						<param name="file1" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
						<param name="file2" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.VFS.DirectoryEntryCompare" type="VFS.DirectoryEntryCompare">
		<implements>
			<interface fulltype="java.util.Comparator" type="Comparator" />
		</implements>
		<comment>
			<description>Implementation of {@link Comparator}
 interface that compares {@link VFSFile} instances.</description>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="VFS.DirectoryEntryCompare">
				<comment>
					<description>Creates a new &lt;code&gt;DirectoryEntryCompare&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>sortMixFilesAndDirs If false, directories are
 put at the top of the listing.</description>
					</attribute>
					<attribute name="@param">
						<description>sortIgnoreCase If false, upper case comes before
 lower case.</description>
					</attribute>
				</comment>
				<params>
					<param name="sortMixFilesAndDirs" comment="If false, directories are
 put at the top of the listing." fulltype="boolean" type="boolean" />
					<param name="sortIgnoreCase" comment="If false, upper case comes before
 lower case." fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="compare" fulltype="int" type="int">
				<params>
					<param name="file1" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
					<param name="file2" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>A directory entry returned from a file listing.</description>
			<attribute name="@since">
				<description>jEdit 4.3pre2</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="FILE" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="DIRECTORY" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="FILESYSTEM" constexpr="2" fulltype="int" type="int" />
			<field visibility="protected" name="colorCalculated" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="color" fulltype="java.awt.Color" type="Color" />
		</fields>
		<methods>
			<constructor visibility="public" name="VFSFile">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
			</constructor>
			<constructor visibility="public" name="VFSFile">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="deletePath" fulltype="java.lang.String" type="String" />
					<param name="type" fulltype="int" type="int" />
					<param name="length" fulltype="long" type="long" />
					<param name="hidden" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="findCompletion" fulltype="int" type="int">
				<comment>
					<description>Return the index of a file whose name matches the given string,
 in a case-insensitive manner. Exact matches are preferred.</description>
					<attribute name="@param">
						<description>files The list of files</description>
					</attribute>
					<attribute name="@param">
						<description>start The start index, inclusive</description>
					</attribute>
					<attribute name="@param">
						<description>end The end index, exclusive</description>
					</attribute>
					<attribute name="@param">
						<description>str The string to match</description>
					</attribute>
					<attribute name="@param">
						<description>dirsOnly Only match directories?</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="files" comment="The list of files" fulltype="org.gjt.sp.jedit.io.VFSFile[]" type="VFSFile" />
					<param name="start" comment="The start index, inclusive" fulltype="int" type="int" />
					<param name="end" comment="The end index, exclusive" fulltype="int" type="int" />
					<param name="str" comment="The string to match" fulltype="java.lang.String" type="String" />
					<param name="dirsOnly" comment="Only match directories?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="findCompletion" fulltype="java.lang.String" type="String">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="complete" fulltype="java.lang.String" type="String" />
					<param name="browser" fulltype="org.gjt.sp.jedit.browser.VFSBrowser" type="VFSBrowser" />
					<param name="dirsOnly" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getIcon" fulltype="javax.swing.Icon" type="Icon">
				<comment>
					<description>Returns the icon for the file.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="expanded" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getIcon" fulltype="javax.swing.Icon" type="Icon">
				<comment>
					<description>Returns the icon for the file.
 Implementations of File system browsers can override this method</description>
					<attribute name="@since">
						<description>jEdit 4.3pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="expanded" fulltype="boolean" type="boolean" />
					<param name="openBuffer" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getDefaultIcon" fulltype="javax.swing.Icon" type="Icon">
				<comment>
					<description>Returns the default icon for the file.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="expanded" fulltype="boolean" type="boolean" />
					<param name="openBuffer" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getDefaultIcon" returncomment="the default icon of the file" fulltype="javax.swing.Icon" type="Icon">
				<comment>
					<description>Returns the default icon of the file.</description>
					<attribute name="@return">
						<description>the default icon of the file</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="expanded" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getVFS" returncomment="The originating virtual file system of this file." fulltype="org.gjt.sp.jedit.io.VFS" type="VFS">
				<comment>
					<attribute name="@return">
						<description>The originating virtual file system of this file.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setName" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="isBinary" returncomment="&lt;code&gt;true&lt;/code&gt; if the file was detected as binary" fulltype="boolean" type="boolean">
				<comment>
					<description>Check if a file is binary file.</description>
					<attribute name="@param">
						<description>session the VFS session</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the file was detected as binary</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException IOException If an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="session" comment="the VFS session" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="IOException If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getPath" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setPath" fulltype="void" type="void">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getSymlinkPath" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setSymlinkPath" fulltype="void" type="void">
				<params>
					<param name="symlinkPath" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDeletePath" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setDeletePath" fulltype="void" type="void">
				<params>
					<param name="deletePath" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getType" fulltype="int" type="int" />
			<method visibility="public" name="setType" fulltype="void" type="void">
				<params>
					<param name="type" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLength" fulltype="long" type="long" />
			<method visibility="public" name="setLength" fulltype="void" type="void">
				<params>
					<param name="length" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="isHidden" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setHidden" fulltype="void" type="void">
				<params>
					<param name="hidden" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isReadable" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setReadable" fulltype="void" type="void">
				<params>
					<param name="canRead" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isWriteable" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setWriteable" fulltype="void" type="void">
				<params>
					<param name="canWrite" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getExtendedAttribute" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the value of an extended attribute. Note that this
 returns formatted strings (eg, &quot;10 Mb&quot; for a file size of
 1048576 bytes). If you need access to the raw data, access
 fields and methods of this class.</description>
					<attribute name="@param">
						<description>name The extended attribute name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The extended attribute name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getColor" returncomment="the color of the file" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the color that will be used to display the file.</description>
					<attribute name="@return">
						<description>the color of the file</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="protected" name="fetchedAttrs" returncomment="&lt;code&gt;true&lt;/code&gt; if the attributes are already fetched" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the attributes are already fetched.</description>
					<attribute name="@see">
						<description>#fetchAttrs()</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the attributes are already fetched</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="fetchAttrs" fulltype="void" type="void">
				<comment>
					<description>Fetch some attributes of the file.
 Some attributes are not fetched during
 file initialization because it takes time.
 They are fetched here.
 VFS implementation should overwrite this</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.io" interface="true" fulltype="org.gjt.sp.jedit.io.VFSFileFilter" type="VFSFileFilter">
		<comment>
			<description>An interface similar to &lt;code&gt;java.io.FilenameFilter&lt;/code&gt;, that
 is used by {@link org.gjt.sp.jedit.browser.VFSBrowser} to define what
 files to show in the directory view.</description>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
			<attribute name="@version">
				<description>$Id$</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre7</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="SERVICE_NAME" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<comment>
					<description>Should return whether the entry represented by the given URL
 should be listed in the browser view. Can be a file or a directory.</description>
				</comment>
				<params>
					<param name="file" fulltype="org.gjt.sp.jedit.io.VFSFile" type="VFSFile" />
				</params>
			</method>
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<comment>
					<description>Same thing as {@link #accept(VFSFile)} above, but operates on
 the raw URL instead of a VFSFile object.</description>
				</comment>
				<params>
					<param name="url" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDescription" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the description of the filter, to be used in the
 VFSBrowser window.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.VFSManager" type="VFSManager">
		<comment>
			<description>jEdit&apos;s virtual filesystem allows it to transparently edit files
 stored elsewhere than the local filesystem, for example on an FTP
 site. See the {@link VFS} class for implementation details.&lt;p&gt;

 Note that most of the jEdit API is not thread-safe, so special care
 must be taken when making jEdit API calls. Also, it is not safe to
 call &lt;code&gt;SwingUtilities.invokeAndWait()&lt;/code&gt; from a work request;
 it can cause a deadlock if the given runnable then later calls
 {@link #waitForRequests()}.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: VFSManager.java 21594 2012-04-22 11:44:00Z jarekczek $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="org.gjt.sp.jedit.io.VFS" visibility="public" name="SERVICE" constexpr="&quot;org.gjt.sp.jedit.io.VFS&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>The service type. See {@link org.gjt.sp.jedit.ServiceManager}.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<method static="true" visibility="public" name="init" fulltype="void" type="void">
				<comment>
					<description>Do not call.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="start" fulltype="void" type="void">
				<comment>
					<description>Do not call.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getFileVFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS">
				<comment>
					<description>Returns the local filesystem VFS.</description>
					<attribute name="@since">
						<description>jEdit 2.5pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getUrlVFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS">
				<comment>
					<description>Returns the URL VFS.</description>
					<attribute name="@since">
						<description>jEdit 2.5pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getVFSForProtocol" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS">
				<comment>
					<description>Returns the VFS for the specified protocol.</description>
					<attribute name="@param">
						<description>protocol The protocol</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="protocol" comment="The protocol" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getVFSForPath" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS">
				<comment>
					<description>Returns the VFS for the specified path.</description>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getVFSs" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns a list of all registered filesystems.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getIOThreadPool" fulltype="org.gjt.sp.util.WorkThreadPool" type="WorkThreadPool">
				<comment>
					<description>Returns the I/O thread pool.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="waitForRequests" fulltype="void" type="void">
				<comment>
					<description>Returns when all pending requests are complete.</description>
					<attribute name="@since">
						<description>jEdit 2.5pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="errorOccurred" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the last request caused an error.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getRequestCount" fulltype="int" type="int">
				<comment>
					<description>Returns the number of pending I/O requests.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="runInAWTThread" fulltype="void" type="void">
				<comment>
					<description>Executes the specified runnable in the AWT thread once all
 pending I/O requests are complete. Even if there are no requests
 active, the &lt;code&gt;Runnable&lt;/code&gt; is not executed immediately,
 but through &lt;code&gt;invokeLater&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>jEdit 2.5pre1</description>
					</attribute>
					<attribute name="@deprecated">
						<description>Using that method, when you run a task in AWT Thread,
 it will wait for all background task causing some unwanted delays.
 If you need calling a task after a background work, please add your
 runnable to the EDT thread yourself at the end of the background task</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.util.ThreadUtilities#runInDispatchThread(Runnable)</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.util.ThreadUtilities#runInDispatchThreadAndWait(Runnable)</description>
					</attribute>
				</comment>
				<params>
					<param name="run" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method static="true" visibility="public" name="runInWorkThread" fulltype="void" type="void">
				<comment>
					<description>Executes the specified runnable in one of the I/O threads.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre2</description>
					</attribute>
					<attribute name="@deprecated">
						<description>You should not use this method, this threadpool
 links the AWT Threads and Work threads.</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.util.ThreadUtilities#runInBackground(org.gjt.sp.util.Task)</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.util.ThreadUtilities#runInBackground(Runnable)</description>
					</attribute>
				</comment>
				<params>
					<param name="run" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method static="true" visibility="public" name="error" fulltype="void" type="void">
				<comment>
					<description>Handle an I/O error.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="e" fulltype="java.io.IOException" type="IOException" />
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method static="true" visibility="public" name="error" fulltype="void" type="void">
				<comment>
					<description>Reports an I/O error with default urgency, &lt;code&gt;Log.ERROR&lt;/code&gt;</description>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name that caused the error</description>
					</attribute>
					<attribute name="@param">
						<description>messageProp The error message property name</description>
					</attribute>
					<attribute name="@param">
						<description>args Positional parameters</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
					<param name="path" comment="The path name that caused the error" fulltype="java.lang.String" type="String" />
					<param name="messageProp" comment="The error message property name" fulltype="java.lang.String" type="String" />
					<param name="args" comment="Positional parameters" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="error" fulltype="void" type="void">
				<comment>
					<description>Reports an I/O error.</description>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name that caused the error</description>
					</attribute>
					<attribute name="@param">
						<description>messageProp The error message property name</description>
					</attribute>
					<attribute name="@param">
						<description>args Positional parameters</description>
					</attribute>
					<attribute name="@param">
						<description>urgency Logging urgency (level)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
					<param name="path" comment="The path name that caused the error" fulltype="java.lang.String" type="String" />
					<param name="messageProp" comment="The error message property name" fulltype="java.lang.String" type="String" />
					<param name="args" comment="Positional parameters" fulltype="java.lang.Object[]" type="Object" />
					<param name="urgency" comment="Logging urgency (level)" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="sendVFSUpdate" fulltype="void" type="void">
				<comment>
					<description>Sends a VFS update message.</description>
					<attribute name="@param">
						<description>vfs The VFS</description>
					</attribute>
					<attribute name="@param">
						<description>path The path that changed</description>
					</attribute>
					<attribute name="@param">
						<description>parent True if an update should be sent for the path&apos;s
 parent too</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="vfs" comment="The VFS" fulltype="org.gjt.sp.jedit.io.VFS" type="VFS" />
					<param name="path" comment="The path that changed" fulltype="java.lang.String" type="String" />
					<param name="parent" comment="True if an update should be sent for the path&apos;s
 parent too" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.io" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.io.XMLEncodingDetector" type="XMLEncodingDetector">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.io.EncodingDetector" type="EncodingDetector" />
		</implements>
		<comment>
			<description>An encoding detector which extracts encoding from XML declaration.</description>
			<attribute name="@since">
				<description>4.3pre10</description>
			</attribute>
			<attribute name="@author">
				<description>Kazutoshi Satoda</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="XMLEncodingDetector" />
			<method visibility="public" name="detectEncoding" fulltype="java.lang.String" type="String">
				<params>
					<param name="sample" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit" interface="true" fulltype="org.gjt.sp.jedit.IPropertyManager" type="IPropertyManager">
		<comment>
			<description>Interface for class that returns properties.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getProperty" returncomment="the string property or null if it doesn&apos;t exist" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a String property</description>
					<attribute name="@param">
						<description>name the name of the property</description>
					</attribute>
					<attribute name="@return">
						<description>the string property or null if it doesn&apos;t exist</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the property" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="ClassLoader" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.ClassLoader" fulltype="org.gjt.sp.jedit.JARClassLoader" type="JARClassLoader">
		<comment>
			<description>A class loader implementation that loads classes from JAR files. All
 instances share the same set of classes.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: JARClassLoader.java 18919 2010-11-04 10:52:55Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JARClassLoader">
				<comment>
					<description>This constructor creates a class loader for loading classes from all
 plugins. For example BeanShell uses one of these so that scripts can
 use plugin classes.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="JARClassLoader">
				<comment>
					<description>Creates a class loader that will optionally delegate the
 finding of classes to the parent class loader by default.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="delegateFirst" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="loadClass" fulltype="java.lang.Class" type="Class">
				<comment>
					<attribute name="@exception">
						<description>ClassNotFoundException if the class could not be found</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" fulltype="java.lang.String" type="String" />
					<param name="resolveIt" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="if the class could not be found" fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="public" name="getResourceAsStream" fulltype="java.io.InputStream" type="InputStream">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getResource" fulltype="java.net.URL" type="URL">
				<comment>
					<description>overriding getResource() because we want to search FIRST in this
 ClassLoader, then the parent, the path, etc.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getResourceAsPath" returncomment="jeditresource:/path_to_the_jar!name_of_the_resource" fulltype="java.lang.String" type="String">
				<comment>
					<description>construct a jeditresource:/etc path from the name
 of a resource in the associated jar.
 The existence of the resource is not actually checked.</description>
					<attribute name="@param">
						<description>name name of the resource</description>
					</attribute>
					<attribute name="@return">
						<description>jeditresource:/path_to_the_jar!name_of_the_resource</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedOperationException if this is an anonymous
 JARClassLoader (no associated jar).</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of the resource" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="dump" fulltype="void" type="void">
				<comment>
					<description>For debugging.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getResources" returncomment="zero or one resource, as returned by getResource()" fulltype="java.util.Enumeration" type="Enumeration">
				<comment>
					<attribute name="@return">
						<description>zero or one resource, as returned by getResource()</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="protected" name="finalize" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.jEdit" type="jEdit">
		<comment>
			<description>The main class of the jEdit text editor.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: jEdit.java 21568 2012-04-10 18:56:42Z jarekczek $</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="getVersion" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the jEdit version as a human-readable string.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getBuild" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the internal version. MiscUtilities.compareStrings() can be used
 to compare different internal versions.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="main" fulltype="void" type="void">
				<comment>
					<description>The main method of the jEdit application.
 This should never be invoked directly.</description>
					<attribute name="@param">
						<description>args The command line arguments</description>
					</attribute>
				</comment>
				<params>
					<param name="args" comment="The command line arguments" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getCurrentLanguage" returncomment="the current language, never null" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the current language used by jEdit.</description>
					<attribute name="@return">
						<description>the current language, never null</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getProperties" fulltype="java.util.Properties" type="Properties">
				<comment>
					<description>Returns the properties object which contains all known
 jEdit properties. Note that as of jEdit 4.2pre10, this returns a
 new collection, not the existing properties instance.</description>
					<attribute name="@since">
						<description>jEdit 3.1pre4</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getProperty" fulltype="java.lang.String" type="String">
				<comment>
					<description>Fetches a property, returning null if it&apos;s not defined.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getProperty" fulltype="java.lang.String" type="String">
				<comment>
					<description>Fetches a property, returning the default value if it&apos;s not
 defined.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@param">
						<description>def The default value</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
					<param name="def" comment="The default value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getProperty" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the property with the specified name.&lt;p&gt;

 The elements of the &lt;code&gt;args&lt;/code&gt; array are substituted
 into the value of the property in place of strings of the
 form &lt;code&gt;{&lt;i&gt;n&lt;/i&gt;}&lt;/code&gt;, where &lt;code&gt;&lt;i&gt;n&lt;/i&gt;&lt;/code&gt; is an index
 in the array.&lt;p&gt;

 You can find out more about this feature by reading the
 documentation for the &lt;code&gt;format&lt;/code&gt; method of the
 &lt;code&gt;java.text.MessageFormat&lt;/code&gt; class.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@param">
						<description>args The positional parameters</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
					<param name="args" comment="The positional parameters" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBooleanProperty" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the value of a boolean property.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBooleanProperty" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the value of a boolean property.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@param">
						<description>def The default value</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
					<param name="def" comment="The default value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getIntegerProperty" fulltype="int" type="int">
				<comment>
					<description>Returns the value of an integer property.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getIntegerProperty" fulltype="int" type="int">
				<comment>
					<description>Returns the value of an integer property.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@param">
						<description>def The default value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
					<param name="def" comment="The default value" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getDoubleProperty" fulltype="double" type="double">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="def" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="getFontProperty" fulltype="java.awt.Font" type="Font">
				<comment>
					<description>Returns the value of a font property. The family is stored
 in the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt; property, the font size is stored
 in the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;size&lt;/code&gt; property, and the font style is
 stored in &lt;code&gt;&lt;i&gt;name&lt;/i&gt;style&lt;/code&gt;. For example, if
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt; is &lt;code&gt;view.gutter.font&lt;/code&gt;, the
 properties will be named &lt;code&gt;view.gutter.font&lt;/code&gt;,
 &lt;code&gt;view.gutter.fontsize&lt;/code&gt;, and
 &lt;code&gt;view.gutter.fontstyle&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getFontProperty" fulltype="java.awt.Font" type="Font">
				<comment>
					<description>Returns the value of a font property. The family is stored
 in the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt; property, the font size is stored
 in the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;size&lt;/code&gt; property, and the font style is
 stored in &lt;code&gt;&lt;i&gt;name&lt;/i&gt;style&lt;/code&gt;. For example, if
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt; is &lt;code&gt;view.gutter.font&lt;/code&gt;, the
 properties will be named &lt;code&gt;view.gutter.font&lt;/code&gt;,
 &lt;code&gt;view.gutter.fontsize&lt;/code&gt;, and
 &lt;code&gt;view.gutter.fontstyle&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@param">
						<description>def The default value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
					<param name="def" comment="The default value" fulltype="java.awt.Font" type="Font" />
				</params>
			</method>
			<method static="true" visibility="public" name="getColorProperty" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the value of a color property.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getColorProperty" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the value of a color property.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@param">
						<description>def The default value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
					<param name="def" comment="The default value" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method static="true" visibility="public" name="setColorProperty" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a color property.</description>
					<attribute name="@param">
						<description>name The property name</description>
					</attribute>
					<attribute name="@param">
						<description>value The value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property name" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The value" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method static="true" visibility="public" name="setProperty" fulltype="void" type="void">
				<comment>
					<description>Sets a property to a new value.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@param">
						<description>value The new value</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The new value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="setTemporaryProperty" fulltype="void" type="void">
				<comment>
					<description>Sets a property to a new value. Properties set using this
 method are not saved to the user properties list.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@param">
						<description>value The new value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.3final</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The new value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="setBooleanProperty" fulltype="void" type="void">
				<comment>
					<description>Sets a boolean property.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@param">
						<description>value The value</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="setIntegerProperty" fulltype="void" type="void">
				<comment>
					<description>Sets the value of an integer property.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@param">
						<description>value The value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The value" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="setDoubleProperty" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="setFontProperty" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a font property. The family is stored
 in the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt; property, the font size is stored
 in the &lt;code&gt;&lt;i&gt;name&lt;/i&gt;size&lt;/code&gt; property, and the font style is
 stored in &lt;code&gt;&lt;i&gt;name&lt;/i&gt;style&lt;/code&gt;. For example, if
 &lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt; is &lt;code&gt;view.gutter.font&lt;/code&gt;, the
 properties will be named &lt;code&gt;view.gutter.font&lt;/code&gt;,
 &lt;code&gt;view.gutter.fontsize&lt;/code&gt;, and
 &lt;code&gt;view.gutter.fontstyle&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@param">
						<description>value The value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The value" fulltype="java.awt.Font" type="Font" />
				</params>
			</method>
			<method static="true" visibility="public" name="unsetProperty" fulltype="void" type="void">
				<comment>
					<description>Unsets (clears) a property.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="resetProperty" fulltype="void" type="void">
				<comment>
					<description>Resets a property to its default value.</description>
					<attribute name="@param">
						<description>name The property</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.5pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The property" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="propertiesChanged" fulltype="void" type="void">
				<comment>
					<description>Reloads various settings from the properties.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getNotLoadedPluginJARs" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns a list of plugin JARs pathnames that are not currently loaded
 by examining the user and system plugin directories.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getPlugin" fulltype="org.gjt.sp.jedit.EditPlugin" type="EditPlugin">
				<comment>
					<description>Returns the plugin with the specified class name.
 Only works for plugins that were loaded.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getPlugin" fulltype="org.gjt.sp.jedit.EditPlugin" type="EditPlugin">
				<comment>
					<description>Returns the plugin with the specified class name.
 If * &lt;code&gt;loadIfNecessary&lt;/code&gt; is true, the plugin will be searched for,
 loaded, and activated in case it has not yet been loaded.</description>
					<attribute name="@param">
						<description>name the classname of the main Plugin class.</description>
					</attribute>
					<attribute name="@param">
						<description>loadIfNecessary - loads plugin + dependencies if it is not loaded yet.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the classname of the main Plugin class." fulltype="java.lang.String" type="String" />
					<param name="loadIfNecessary" comment="- loads plugin + dependencies if it is not loaded yet." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getPlugins" fulltype="org.gjt.sp.jedit.EditPlugin[]" type="EditPlugin">
				<comment>
					<description>Returns an array of installed plugins.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getPluginJARs" fulltype="org.gjt.sp.jedit.PluginJAR[]" type="PluginJAR">
				<comment>
					<description>Returns an array of installed plugins.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getPluginJAR" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR">
				<comment>
					<description>Returns the JAR with the specified path name.</description>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="addPluginJAR" fulltype="void" type="void">
				<comment>
					<description>Loads the plugin JAR with the specified path. Some notes about this
 method:

 &lt;ul&gt;
 &lt;li&gt;Calling this at a time other than jEdit startup can have
 unpredictable results if the plugin has not been updated for the
 jEdit 4.2 plugin API.
 &lt;li&gt;You must make sure yourself the plugin is not already loaded.
 &lt;li&gt;After loading, you just make sure all the plugin&apos;s dependencies
 are satisified before activating the plugin, using the
 {@link PluginJAR#checkDependencies()} method.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>path The JAR file path</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The JAR file path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="removePluginJAR" fulltype="void" type="void">
				<comment>
					<description>Unloads the given plugin JAR with the specified path. Note that
 calling this at a time other than jEdit shutdown can have
 unpredictable results if the plugin has not been updated for the
 jEdit 4.2 plugin API.</description>
					<attribute name="@param">
						<description>jar The &lt;code&gt;PluginJAR&lt;/code&gt; instance</description>
					</attribute>
					<attribute name="@param">
						<description>exit Set to true if jEdit is exiting; enables some
 shortcuts so the editor can close faster.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="jar" comment="The &lt;code&gt;PluginJAR&lt;/code&gt; instance" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
					<param name="exit" comment="Set to true if jEdit is exiting; enables some
 shortcuts so the editor can close faster." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getActionContext" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext">
				<comment>
					<description>Returns the action context used to store editor actions.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="addActionSet" fulltype="void" type="void">
				<comment>
					<description>Adds a new action set to jEdit&apos;s list of ActionSets (viewable from the shortcuts
 option pane). By default, each plugin has one ActionSet,
 but some plugins may create dynamic action sets, such as ProjectViewer and Console.
 These plugins must call removeActionSet() when the plugin is unloaded.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
					<attribute name="@see">
						<description>#removeActionSet(ActionSet)</description>
					</attribute>
				</comment>
				<params>
					<param name="actionSet" fulltype="org.gjt.sp.jedit.ActionSet" type="ActionSet" />
				</params>
			</method>
			<method static="true" visibility="public" name="removeActionSet" fulltype="void" type="void">
				<comment>
					<description>Removes an action set from jEdit&apos;s list.
 Plugins that add a dynamic action set must call this method at plugin
 unload time.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="actionSet" fulltype="org.gjt.sp.jedit.ActionSet" type="ActionSet" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBuiltInActionSet" fulltype="org.gjt.sp.jedit.ActionSet" type="ActionSet">
				<comment>
					<description>Returns the set of commands built into jEdit.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getActionSets" returncomment="the ActionSet(s)" fulltype="org.gjt.sp.jedit.ActionSet[]" type="ActionSet">
				<comment>
					<description>Returns all registered action sets.</description>
					<attribute name="@return">
						<description>the ActionSet(s)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getAction" fulltype="org.gjt.sp.jedit.EditAction" type="EditAction">
				<comment>
					<description>Returns the specified action.</description>
					<attribute name="@param">
						<description>name The action name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The action name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getActionSetForAction" fulltype="org.gjt.sp.jedit.ActionSet" type="ActionSet">
				<comment>
					<description>Returns the action set that contains the specified action.</description>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="The action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getActionNames" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns all registered action names.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="reloadModes" fulltype="void" type="void">
				<comment>
					<description>Reloads all edit modes.  User defined edit modes are loaded after
 global modes so that user modes supercede global modes.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getMode" fulltype="org.gjt.sp.jedit.Mode" type="Mode">
				<comment>
					<description>Returns the edit mode with the specified name.</description>
					<attribute name="@param">
						<description>name The edit mode</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The edit mode" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getModes" fulltype="org.gjt.sp.jedit.Mode[]" type="Mode">
				<comment>
					<description>Returns an array of installed edit modes.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="openFiles" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Opens the file names specified in the argument array. This
 handles +line and +marker arguments just like the command
 line parser.</description>
					<attribute name="@param">
						<description>parent The parent directory</description>
					</attribute>
					<attribute name="@param">
						<description>args The file names to open</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="parent" comment="The parent directory" fulltype="java.lang.String" type="String" />
					<param name="args" comment="The file names to open" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="openFileAfterStartup" returncomment="the buffer if succesfully loaded immediately, or null otherwise" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Opens a file, either immediately if the application is finished starting up,
 or after the first view has been created if not.</description>
					<attribute name="@param">
						<description>path The file path</description>
					</attribute>
					<attribute name="@return">
						<description>the buffer if succesfully loaded immediately, or null otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The file path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="openFile" returncomment="the buffer, or null if jEdit was unable to load it" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Opens a file. Note that as of jEdit 2.5pre1, this may return
 null if the buffer could not be opened.</description>
					<attribute name="@param">
						<description>view The view to open the file in</description>
					</attribute>
					<attribute name="@param">
						<description>path The file path</description>
					</attribute>
					<attribute name="@return">
						<description>the buffer, or null if jEdit was unable to load it</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view to open the file in" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The file path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="openFile" returncomment="the buffer, or null if jEdit was unable to load it" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Opens a file. This may return null if the buffer could not be
 opened for some reason.</description>
					<attribute name="@param">
						<description>view The view to open the file in. If it is null, the file
 will be opened and added to the bufferSet of the current edit pane,
 but not selected</description>
					</attribute>
					<attribute name="@param">
						<description>parent The parent directory of the file</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name of the file</description>
					</attribute>
					<attribute name="@param">
						<description>newFile True if the file should not be loaded from disk
 be prompted if it should be reloaded</description>
					</attribute>
					<attribute name="@param">
						<description>props Buffer-local properties to set in the buffer</description>
					</attribute>
					<attribute name="@return">
						<description>the buffer, or null if jEdit was unable to load it</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view to open the file in. If it is null, the file
 will be opened and added to the bufferSet of the current edit pane,
 but not selected" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="parent" comment="The parent directory of the file" fulltype="java.lang.String" type="String" />
					<param name="path" comment="The path name of the file" fulltype="java.lang.String" type="String" />
					<param name="newFile" comment="True if the file should not be loaded from disk
 be prompted if it should be reloaded" fulltype="boolean" type="boolean" />
					<param name="props" comment="Buffer-local properties to set in the buffer" fulltype="java.util.Hashtable" type="Hashtable" />
				</params>
			</method>
			<method static="true" visibility="public" name="openFile" returncomment="the buffer, or null if jEdit was unable to load it" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Opens a file. Note that as of jEdit 2.5pre1, this may return
 null if the buffer could not be opened.</description>
					<attribute name="@param">
						<description>editPane the EditPane to open the file in.</description>
					</attribute>
					<attribute name="@param">
						<description>path The file path</description>
					</attribute>
					<attribute name="@return">
						<description>the buffer, or null if jEdit was unable to load it</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="the EditPane to open the file in." fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="path" comment="The file path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="openFile" returncomment="the buffer, or null if jEdit was unable to load it" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Opens a file. This may return null if the buffer could not be
 opened for some reason.</description>
					<attribute name="@param">
						<description>editPane the EditPane to open the file in.</description>
					</attribute>
					<attribute name="@param">
						<description>parent The parent directory of the file</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name of the file</description>
					</attribute>
					<attribute name="@param">
						<description>newFile True if the file should not be loaded from disk
 be prompted if it should be reloaded</description>
					</attribute>
					<attribute name="@param">
						<description>props Buffer-local properties to set in the buffer</description>
					</attribute>
					<attribute name="@return">
						<description>the buffer, or null if jEdit was unable to load it</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="the EditPane to open the file in." fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="parent" comment="The parent directory of the file" fulltype="java.lang.String" type="String" />
					<param name="path" comment="The path name of the file" fulltype="java.lang.String" type="String" />
					<param name="newFile" comment="True if the file should not be loaded from disk
 be prompted if it should be reloaded" fulltype="boolean" type="boolean" />
					<param name="props" comment="Buffer-local properties to set in the buffer" fulltype="java.util.Hashtable" type="Hashtable" />
				</params>
			</method>
			<method static="true" visibility="public" name="openTemporary" returncomment="the buffer, or null if jEdit was unable to load it" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Opens a temporary buffer. A temporary buffer is like a normal
 buffer, except that an event is not fired and the buffer is
 not added to the buffers list.
 &lt;p&gt;If a buffer for the given &lt;code&gt;path&lt;/code&gt; was
 already opened in jEdit, then this instance is returned.
 Otherwise jEdit will not store a reference
 to the returned Buffer object.
 &lt;p&gt;This method is thread-safe.</description>
					<attribute name="@param">
						<description>view The view to open the file in</description>
					</attribute>
					<attribute name="@param">
						<description>parent The parent directory of the file</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name of the file</description>
					</attribute>
					<attribute name="@param">
						<description>newFile True if the file should not be loaded from disk</description>
					</attribute>
					<attribute name="@return">
						<description>the buffer, or null if jEdit was unable to load it</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view to open the file in" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="parent" comment="The parent directory of the file" fulltype="java.lang.String" type="String" />
					<param name="path" comment="The path name of the file" fulltype="java.lang.String" type="String" />
					<param name="newFile" comment="True if the file should not be loaded from disk" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="openTemporary" returncomment="the buffer, or null if jEdit was unable to load it" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Opens a temporary buffer.
 Details: {@link #openTemporary(View, String, String, boolean)}</description>
					<attribute name="@param">
						<description>view The view to open the file in</description>
					</attribute>
					<attribute name="@param">
						<description>parent The parent directory of the file</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name of the file</description>
					</attribute>
					<attribute name="@param">
						<description>newFile True if the file should not be loaded from disk</description>
					</attribute>
					<attribute name="@param">
						<description>props Buffer-local properties to set in the buffer</description>
					</attribute>
					<attribute name="@return">
						<description>the buffer, or null if jEdit was unable to load it</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view to open the file in" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="parent" comment="The parent directory of the file" fulltype="java.lang.String" type="String" />
					<param name="path" comment="The path name of the file" fulltype="java.lang.String" type="String" />
					<param name="newFile" comment="True if the file should not be loaded from disk" fulltype="boolean" type="boolean" />
					<param name="props" comment="Buffer-local properties to set in the buffer" fulltype="java.util.Hashtable" type="Hashtable" />
				</params>
			</method>
			<method static="true" visibility="public" name="commitTemporary" fulltype="void" type="void">
				<comment>
					<description>Adds a temporary buffer to the buffer list. This must be done
 before allowing the user to interact with the buffer in any
 way.</description>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method static="true" visibility="public" name="newFile" returncomment="the new buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Creates a new `untitled&apos; file.</description>
					<attribute name="@param">
						<description>view The view to create the file in</description>
					</attribute>
					<attribute name="@return">
						<description>the new buffer</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view to create the file in" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="newFile" returncomment="the new buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Creates a new `untitled&apos; file.</description>
					<attribute name="@param">
						<description>view The view to create the file in</description>
					</attribute>
					<attribute name="@param">
						<description>dir The directory to create the file in</description>
					</attribute>
					<attribute name="@return">
						<description>the new buffer</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view to create the file in" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="dir" comment="The directory to create the file in" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="newFile" returncomment="the new buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Creates a new `untitled&apos; file.</description>
					<attribute name="@param">
						<description>editPane The editPane to create the file in</description>
					</attribute>
					<attribute name="@return">
						<description>the new buffer</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="The editPane to create the file in" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
				</params>
			</method>
			<method static="true" visibility="public" name="newFile" returncomment="the new buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Creates a new `untitled&apos; file.</description>
					<attribute name="@param">
						<description>editPane The editPane to create the file in</description>
					</attribute>
					<attribute name="@param">
						<description>dir The directory to create the file in</description>
					</attribute>
					<attribute name="@return">
						<description>the new buffer</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="The editPane to create the file in" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="dir" comment="The directory to create the file in" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="closeBuffer" returncomment="True if the buffer was really closed, false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Closes a buffer. If there are unsaved changes, the user is
 prompted if they should be saved first.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@return">
						<description>True if the buffer was really closed, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method static="true" visibility="public" name="closeBuffer" fulltype="void" type="void">
				<comment>
					<description>Close a buffer.
 The buffer is first removed from the EditPane&apos;s bufferSet.
 If the buffer is not in any bufferSet after that, it is closed</description>
					<attribute name="@param">
						<description>editPane the edit pane (it cannot be null)</description>
					</attribute>
					<attribute name="@param">
						<description>buffer the buffer (it cannot be null)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="the edit pane (it cannot be null)" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="buffer" comment="the buffer (it cannot be null)" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method static="true" visibility="public" name="_closeBuffer" fulltype="void" type="void">
				<comment>
					<description>Closes the buffer, even if it has unsaved changes.</description>
					<attribute name="@param">
						<description>view The view, may be null</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the buffer is null</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view, may be null" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method static="true" visibility="public" name="closeAllBuffers" returncomment="true if all buffers were closed, false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Closes all open buffers.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@return">
						<description>true if all buffers were closed, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="closeAllBuffers" returncomment="true if all buffers were closed, false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Closes all open buffers.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>isExiting This must be false unless this method is
 being called by the exit() method</description>
					</attribute>
					<attribute name="@return">
						<description>true if all buffers were closed, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="isExiting" comment="This must be false unless this method is
 being called by the exit() method" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveAllBuffers" fulltype="void" type="void">
				<comment>
					<description>Saves all open buffers.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveAllBuffers" fulltype="void" type="void">
				<comment>
					<description>Saves all open buffers.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>confirm If true, a confirmation dialog will be shown first</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="confirm" comment="If true, a confirmation dialog will be shown first" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="reloadAllBuffers" fulltype="void" type="void">
				<comment>
					<description>Reloads all open buffers.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>confirm If true, a confirmation dialog will be shown first
	if any buffers are dirty</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="confirm" comment="If true, a confirmation dialog will be shown first
	if any buffers are dirty" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="_getBuffer" returncomment="the searched buffer, or null if it is not already open" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Returns the buffer with the specified path name. The path name
 must be an absolute, canonical, path.</description>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
					<attribute name="@return">
						<description>the searched buffer, or null if it is not already open</description>
					</attribute>
					<attribute name="@see">
						<description>MiscUtilities#constructPath(String,String)</description>
					</attribute>
					<attribute name="@see">
						<description>MiscUtilities#resolveSymlinks(String)</description>
					</attribute>
					<attribute name="@see">
						<description>#getBuffer(String)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBuffer" returncomment="the searched buffer, or null if it is not already open" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Returns the buffer with the specified path name. The path name
 must be an absolute path. This method automatically resolves
 symbolic links. If performance is critical, cache the canonical
 path and call {@link #_getBuffer(String)} instead.</description>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
					<attribute name="@return">
						<description>the searched buffer, or null if it is not already open</description>
					</attribute>
					<attribute name="@see">
						<description>MiscUtilities#constructPath(String,String)</description>
					</attribute>
					<attribute name="@see">
						<description>MiscUtilities#resolveSymlinks(String)</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBuffers" returncomment="an array of all open buffers" fulltype="org.gjt.sp.jedit.Buffer[]" type="Buffer">
				<comment>
					<description>Returns an array of open buffers.</description>
					<attribute name="@return">
						<description>an array of all open buffers</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getBufferCount" fulltype="int" type="int">
				<comment>
					<description>Returns the number of open buffers.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getFirstBuffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Returns the first buffer.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getLastBuffer" returncomment="the last buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Returns the last buffer.</description>
					<attribute name="@return">
						<description>the last buffer</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="moveBuffer" fulltype="void" type="void">
				<comment>
					<description>Moves a buffer from a old position to a new position in the
 BufferSet used in an EditPane.</description>
					<attribute name="@param">
						<description>editPane The EditPane in which a buffer is moved</description>
					</attribute>
					<attribute name="@param">
						<description>oldPosition The position before the move</description>
					</attribute>
					<attribute name="@param">
						<description>newPosition The position after the move</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="The EditPane in which a buffer is moved" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="oldPosition" comment="The position before the move" fulltype="int" type="int" />
					<param name="newPosition" comment="The position after the move" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBufferSetManager" returncomment="the bufferSetManager" fulltype="org.gjt.sp.jedit.bufferset.BufferSetManager" type="BufferSetManager">
				<comment>
					<description>Returns the bufferSet manager.</description>
					<attribute name="@return">
						<description>the bufferSetManager</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getPropertyManager" returncomment="the propertyManager" fulltype="org.gjt.sp.jedit.jEdit.JEditPropertyManager" type="jEdit.JEditPropertyManager">
				<comment>
					<attribute name="@return">
						<description>the propertyManager</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="checkBufferStatus" fulltype="void" type="void">
				<comment>
					<description>Checks each buffer&apos;s status on disk and shows the dialog box
 informing the user that buffers changed on disk, if necessary.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="checkBufferStatus" fulltype="void" type="void">
				<comment>
					<description>Checks buffer status on disk and shows the dialog box
 informing the user that buffers changed on disk, if necessary.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>currentBuffer indicates whether to check only the current buffer</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="currentBuffer" comment="indicates whether to check only the current buffer" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getInputHandler" fulltype="org.gjt.sp.jedit.gui.InputHandler" type="InputHandler">
				<comment>
					<description>Returns the current input handler (key binding to action mapping)</description>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.gui.InputHandler</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="newView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Creates a new view.</description>
					<attribute name="@param">
						<description>view An existing view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="An existing view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="newView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Creates a new view of a buffer.</description>
					<attribute name="@param">
						<description>view An existing view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="An existing view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method static="true" visibility="public" name="newView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Creates a new view of a buffer.</description>
					<attribute name="@param">
						<description>view An existing view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>plainView If true, the view will not have dockable windows or
 tool bars.</description>
					</attribute>
					<attribute name="@since">
						<description>4.1pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="An existing view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="plainView" comment="If true, the view will not have dockable windows or
 tool bars." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="newView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Creates a new view.</description>
					<attribute name="@param">
						<description>view An existing view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer A buffer to display, or null</description>
					</attribute>
					<attribute name="@param">
						<description>config Encapsulates the view geometry, split configuration
 and if the view is a plain view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="An existing view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="A buffer to display, or null" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="config" comment="Encapsulates the view geometry, split configuration
 and if the view is a plain view" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig" />
				</params>
			</method>
			<method static="true" visibility="public" name="closeView" fulltype="void" type="void">
				<comment>
					<description>Closes a view.

 jEdit will exit if this was the last open view.</description>
				</comment>
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="getViews" fulltype="org.gjt.sp.jedit.View[]" type="View">
				<comment>
					<description>Returns an array of all open views.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getViewCount" fulltype="int" type="int">
				<comment>
					<description>Returns the number of open views.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getFirstView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns the first view.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getLastView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns the last view.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getActiveView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns the currently focused view.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="relocateSettings" fulltype="void" type="void" />
			<method static="true" visibility="public" name="isStartupDone" fulltype="boolean" type="boolean">
				<comment>
					<description>Whether jEdit startup is over.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="isMainThread" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the currently running thread is the main thread.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="isBackgroundModeEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if jEdit was started with the &lt;code&gt;-background&lt;/code&gt;
 command-line switch.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="showMemoryDialog" fulltype="void" type="void">
				<comment>
					<description>Performs garbage collection and displays a dialog box showing
 memory status.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="getJEditHome" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the jEdit install directory.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getSettingsDirectory" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the path of the directory where user-specific settings
 are stored. This will be &lt;code&gt;null&lt;/code&gt; if jEdit was
 started with the &lt;code&gt;-nosettings&lt;/code&gt; command-line switch; do not
 blindly use this method without checking for a &lt;code&gt;null&lt;/code&gt;
 return value first.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getJARCacheDirectory" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the directory where plugin cache files are stored.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="backupSettingsFile" fulltype="void" type="void">
				<comment>
					<description>Backs up the specified file in the settings directory.
 You should call this on any settings files your plugin
 writes.</description>
					<attribute name="@param">
						<description>file The file</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="The file" fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveSettings" fulltype="void" type="void">
				<comment>
					<description>Saves all user preferences to disk.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="exit" fulltype="void" type="void">
				<comment>
					<description>Exits cleanly from jEdit, prompting the user if any unsaved files
 should be saved first.</description>
					<attribute name="@param">
						<description>view The view from which this exit was called</description>
					</attribute>
					<attribute name="@param">
						<description>reallyExit If background mode is enabled and this parameter
 is true, then jEdit will close all open views instead of exiting
 entirely.</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view from which this exit was called" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="reallyExit" comment="If background mode is enabled and this parameter
 is true, then jEdit will close all open views instead of exiting
 entirely." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getEditServer" fulltype="org.gjt.sp.jedit.EditServer" type="EditServer">
				<comment>
					<description>Returns the edit server instance. You can use this to find out the
 port number jEdit is listening on.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre10</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="visit" fulltype="void" type="void">
				<comment>
					<description>Visit the views, editpanes and textareas</description>
					<attribute name="@param">
						<description>visitor the visitor</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="visitor" comment="the visitor" fulltype="org.gjt.sp.jedit.visitors.JEditVisitor" type="JEditVisitor" />
				</params>
			</method>
			<method static="true" visibility="public" name="getRegisterStatusPrompt" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the status prompt for the given register action. Only
 intended to be called from &lt;code&gt;actions.xml&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre16</description>
					</attribute>
				</comment>
				<params>
					<param name="action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getKeymapManager" fulltype="org.jedit.keymap.KeymapManager" type="KeymapManager" />
			<method static="true" visibility="public" name="getActiveViewInternal" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns the internal active view, which might be null.</description>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getNextUntitledBufferId" fulltype="int" type="int" />
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.jEdit.JEditPropertyManager" type="jEdit.JEditPropertyManager">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.IPropertyManager" type="IPropertyManager" />
			</implements>
			<methods>
				<constructor visibility="public" name="jEdit.JEditPropertyManager" />
				<method visibility="public" name="getProperty" fulltype="java.lang.String" type="String">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.jEdit.JEditPropertyManager" type="jEdit.JEditPropertyManager">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.IPropertyManager" type="IPropertyManager" />
		</implements>
		<methods>
			<constructor visibility="public" name="jEdit.JEditPropertyManager" />
			<method visibility="public" name="getProperty" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction" type="JEditAbstractEditAction">
		<comment>
			<description>An action that can be bound to a menu item, tool bar button or keystroke.</description>
			<attribute name="@see">
				<description>jEdit#getAction(String)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#getActionNames()</description>
			</attribute>
			<attribute name="@see">
				<description>ActionSet</description>
			</attribute>
			<attribute name="@author">
				<description>S. Pestov, M. Casanova, K. Satoda</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EditAction.java 11177 2007-12-01 09:50:50Z k_satoda $</description>
			</attribute>
			<attribute name="@since">
				<description>4.3pre13</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="name" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="args" fulltype="java.lang.Object[]" type="Object" />
		</fields>
		<methods>
			<constructor visibility="protected" name="JEditAbstractEditAction">
				<comment>
					<description>Creates a new edit action with the specified name.</description>
					<attribute name="@param">
						<description>name The action name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The action name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="protected" name="JEditAbstractEditAction">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="newArgs" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="getName" returncomment="the action name" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the internal name of this action.</description>
					<attribute name="@return">
						<description>the action name</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setName" fulltype="void" type="void">
				<comment>
					<description>Changes the name of an action</description>
					<attribute name="@param">
						<description>newName the new name of the action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="newName" comment="the new name of the action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="invoke" fulltype="void" type="void">
				<comment>
					<description>Invokes the action. This is an implementation of the Command pattern,
 and concrete actions should override this.</description>
					<attribute name="@param">
						<description>arg the argument</description>
					</attribute>
				</comment>
				<params>
					<param name="arg" comment="the argument" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method final="true" visibility="public" name="invoke" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>arg the arguments of the action</description>
					</attribute>
					<attribute name="@param">
						<description>newArgs new argument list</description>
					</attribute>
				</comment>
				<params>
					<param name="arg" comment="the arguments of the action" fulltype="java.lang.Object" type="Object" />
					<param name="newArgs" comment="new argument list" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.JEditActionContext" type="JEditActionContext">
		<comment>
			<description>Manages a collection of action sets. There are two instances of this class
 in jEdit:
 &lt;ul&gt;
 &lt;li&gt;{@link org.gjt.sp.jedit.jEdit#getActionContext()} - editor actions
 &lt;li&gt;{@link org.gjt.sp.jedit.browser.VFSBrowser#getActionContext()} - browser
 actions
 &lt;/ul&gt;</description>
			<attribute name="@since">
				<description>jEdit 4.3pre13</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ActionContext.java 6884 2006-09-06 02:38:55Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JEditActionContext" />
			<method abstract="true" visibility="public" name="invokeAction" fulltype="void" type="void">
				<comment>
					<description>Invokes the given action in response to a user-generated event.</description>
					<attribute name="@param">
						<description>evt The event</description>
					</attribute>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="The event" fulltype="java.util.EventObject" type="EventObject" />
					<param name="action" comment="The action" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction" type="JEditAbstractEditAction" />
				</params>
			</method>
			<method visibility="public" name="addActionSet" fulltype="void" type="void">
				<comment>
					<description>Adds a new action set to the context.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="actionSet" fulltype="org.gjt.sp.jedit.JEditActionSet" type="JEditActionSet" />
				</params>
			</method>
			<method visibility="public" name="removeActionSet" fulltype="void" type="void">
				<comment>
					<description>Removes an action set from the context.</description>
					<attribute name="@since">
						<description>jEdit 4.23pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="actionSet" fulltype="org.gjt.sp.jedit.JEditActionSet" type="JEditActionSet" />
				</params>
			</method>
			<method visibility="public" name="getActionSets" fulltype="org.gjt.sp.jedit.JEditActionSet[]" type="JEditActionSet">
				<comment>
					<description>Returns all registered action sets.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getAction" returncomment="a JEditAbstractEditAction or null if it doesn&apos;t exist" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction" type="JEditAbstractEditAction">
				<comment>
					<description>Returns the specified action.</description>
					<attribute name="@param">
						<description>name The action name</description>
					</attribute>
					<attribute name="@return">
						<description>a JEditAbstractEditAction or null if it doesn&apos;t exist</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The action name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getActionSetForAction" returncomment="the actionSet that contains the given action" fulltype="org.gjt.sp.jedit.JEditActionSet" type="JEditActionSet">
				<comment>
					<description>Returns the action set that contains the specified action.</description>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@return">
						<description>the actionSet that contains the given action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="The action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getActionNames" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns all registered action names.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.JEditActionSet" type="JEditActionSet">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.input.InputHandlerProvider" type="InputHandlerProvider" />
		</implements>
		<comment>
			<description>A set of actions, either loaded from an XML file, or constructed at runtime
 by a plugin. &lt;p&gt;

 &lt;h3&gt;Action sets loaded from XML files&lt;/h3&gt;

 Action sets are read from these files inside the plugin JAR:
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;actions.xml&lt;/code&gt; - actions made available for use in jEdit views,
 including the view&apos;s &lt;b&gt;Plugins&lt;/b&gt; menu, the tool bar, etc.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;browser.actions.xml&lt;/code&gt; - actions for the file system browser&apos;s
 &lt;b&gt;Plugins&lt;/b&gt; menu.&lt;/li&gt;
 &lt;/ul&gt;

 An action definition file has the following form:

 &lt;pre&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;!DOCTYPE ACTIONS SYSTEM &quot;actions.dtd&quot;&amp;gt;
&amp;lt;ACTIONS&amp;gt;
    &amp;lt;ACTION NAME=&quot;some-action&quot;&amp;gt;
        &amp;lt;CODE&amp;gt;
            // BeanShell code evaluated when the action is invoked
        &amp;lt;/CODE&amp;gt;
    &amp;lt;/ACTION&amp;gt;
    &amp;lt;ACTION NAME=&quot;some-toggle-action&quot;&amp;gt;
        &amp;lt;CODE&amp;gt;
            // BeanShell code evaluated when the action is invoked
        &amp;lt;/CODE&amp;gt;
        &amp;lt;IS_SELECTED&amp;gt;
            // BeanShell code that should evaluate to true or false
        &amp;lt;/IS_SELECTED&amp;gt;
    &amp;lt;/ACTION&amp;gt;
&amp;lt;/ACTIONS&amp;gt;&lt;/pre&gt;

 The following elements are valid:

 &lt;ul&gt;
 &lt;li&gt;
 &lt;code&gt;ACTIONS&lt;/code&gt; is the top-level element and refers
 to the set of actions used by the plugin.
 &lt;/li&gt;
 &lt;li&gt;
 An &lt;code&gt;ACTION&lt;/code&gt; contains the data for a particular action.
 It has three attributes: a required &lt;code&gt;NAME&lt;/code&gt;;
 an optional &lt;code&gt;NO_REPEAT&lt;/code&gt;, which is a flag
 indicating whether the action should not be repeated with the
 &lt;b&gt;C+ENTER&lt;/b&gt; command; and an optional
 &lt;code&gt;NO_RECORD&lt;/code&gt; which is a a flag indicating whether the
 action should be recorded if it is invoked while the user is recording a
 macro. The two flag attributes
 can have two possible values, &quot;TRUE&quot; or
 &quot;FALSE&quot;. In both cases, &quot;FALSE&quot; is the
 default if the attribute is not specified.
 &lt;/li&gt;
 &lt;li&gt;
 An &lt;code&gt;ACTION&lt;/code&gt; can have two child elements
 within it: a required &lt;code&gt;CODE&lt;/code&gt; element which
 specifies the
 BeanShell code that will be executed when the action is invoked,
 and an optional &lt;code&gt;IS_SELECTED&lt;/code&gt; element, used for
 checkbox
 menu items.  The &lt;code&gt;IS_SELECTED&lt;/code&gt; element contains
 BeanShell code that returns a boolean flag that will
 determine the state of the checkbox.
 &lt;/li&gt;
 &lt;/ul&gt;

 Each action must have a property &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt; containing
 the action&apos;s menu item label.

 &lt;h3&gt;View actions&lt;/h3&gt;

 Actions defined in &lt;code&gt;actions.xml&lt;/code&gt; can be added to the view&apos;s
 &lt;b&gt;Plugins&lt;/b&gt; menu; see {@link EditPlugin}.
 The action code may use any standard predefined
 BeanShell variable; see {@link BeanShell}.

 &lt;h3&gt;File system browser actions&lt;/h3&gt;

 Actions defined in &lt;code&gt;actions.xml&lt;/code&gt; can be added to the file
 system browser&apos;s &lt;b&gt;Plugins&lt;/b&gt; menu; see {@link EditPlugin}.
 The action code may use any standard predefined
 BeanShell variable, in addition to a variable &lt;code&gt;browser&lt;/code&gt; which
 contains a reference to the current
 {@link org.gjt.sp.jedit.browser.VFSBrowser} instance.&lt;p&gt;

 File system browser actions should not define
 &lt;code&gt;&amp;lt;IS_SELECTED&amp;gt;&lt;/code&gt; blocks.

 &lt;h3&gt;Custom action sets&lt;/h3&gt;

 Call {@link jEdit#addActionSet(ActionSet)} to add a custom action set to
 jEdit&apos;s action context. You must also call {@link #initKeyBindings()} for new
 action sets. Don&apos;t forget to call {@link jEdit#removeActionSet(ActionSet)}
 before your plugin is unloaded, too.</description>
			<attribute name="@see">
				<description>jEdit#getActionContext()</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.browser.VFSBrowser#getActionContext()</description>
			</attribute>
			<attribute name="@see">
				<description>ActionContext#getActionNames()</description>
			</attribute>
			<attribute name="@see">
				<description>ActionContext#getAction(String)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#addActionSet(ActionSet)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#removeActionSet(ActionSet)</description>
			</attribute>
			<attribute name="@see">
				<description>PluginJAR#getActionSet()</description>
			</attribute>
			<attribute name="@see">
				<description>BeanShell</description>
			</attribute>
			<attribute name="@see">
				<description>View</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ActionSet.java 9529 2007-05-12 15:06:52Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre13</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="actions" fulltype="java.util.Hashtable" type="Hashtable" />
			<field visibility="protected" name="uri" fulltype="java.net.URL" type="URL" />
			<field visibility="protected" name="loaded" fulltype="boolean" type="boolean" />
			<field final="true" static="true" visibility="protected" name="placeholder" fulltype="java.lang.Object" type="Object" />
		</fields>
		<methods>
			<constructor visibility="protected" name="JEditActionSet">
				<comment>
					<description>Creates a new action set.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
			</constructor>
			<constructor visibility="protected" name="JEditActionSet">
				<comment>
					<description>Creates a new action set.</description>
					<attribute name="@param">
						<description>cachedActionNames The list of cached action names</description>
					</attribute>
					<attribute name="@param">
						<description>uri The actions.xml URI</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="cachedActionNames" comment="The list of cached action names" fulltype="java.lang.String[]" type="String" />
					<param name="uri" comment="The actions.xml URI" fulltype="java.net.URL" type="URL" />
				</params>
			</constructor>
			<method visibility="public" name="addAction" fulltype="void" type="void">
				<comment>
					<description>Adds an action to the action set.</description>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="The action" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction" type="JEditAbstractEditAction" />
				</params>
			</method>
			<method visibility="public" name="removeAction" fulltype="void" type="void">
				<comment>
					<description>Removes an action from the action set.</description>
					<attribute name="@param">
						<description>name The action name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The action name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="removeAllActions" fulltype="void" type="void">
				<comment>
					<description>Removes all actions from the action set.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getAction" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction" type="JEditAbstractEditAction">
				<comment>
					<description>Returns an action with the specified name.&lt;p&gt;

 &lt;b&gt;Deferred loading:&lt;/b&gt; this will load the action set if necessary.</description>
					<attribute name="@param">
						<description>name The action name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The action name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getActionCount" fulltype="int" type="int">
				<comment>
					<description>Returns the number of actions in the set.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getActionNames" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns an array of all action names in this action set.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCacheableActionNames" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns an array of all action names in this action set that should
 be cached; namely, &lt;code&gt;BeanShellAction&lt;/code&gt;s.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="protected" name="getArray" returncomment="the empty array" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction[]" type="JEditAbstractEditAction">
				<comment>
					<description>Returns an empty array E[].
 I know it is bad, if you find a method to instantiate a generic Array,
 tell me</description>
					<attribute name="@param">
						<description>size the size of the array</description>
					</attribute>
					<attribute name="@return">
						<description>the empty array</description>
					</attribute>
				</comment>
				<params>
					<param name="size" comment="the size of the array" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getActions" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction[]" type="JEditAbstractEditAction">
				<comment>
					<description>Returns an array of all actions in this action set.&lt;p&gt;

 &lt;b&gt;Deferred loading:&lt;/b&gt; this will load the action set if necessary.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="contains" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this action set contains the specified action.</description>
					<attribute name="@param">
						<description>action The action</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="The action" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="size" fulltype="int" type="int">
				<comment>
					<description>Returns the number of actions in this action set.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="load" fulltype="void" type="void">
				<comment>
					<description>Forces the action set to be loaded. Plugins and macros should not
 call this method.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="protected" name="createBeanShellAction" fulltype="org.gjt.sp.jedit.JEditAbstractEditAction" type="JEditAbstractEditAction">
				<comment>
					<description>This method should be implemented to return an action that will execute
 the given code</description>
					<attribute name="@since">
						<description>4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="actionName" fulltype="java.lang.String" type="String" />
					<param name="code" fulltype="java.lang.String" type="String" />
					<param name="selected" fulltype="java.lang.String" type="String" />
					<param name="noRepeat" fulltype="boolean" type="boolean" />
					<param name="noRecord" fulltype="boolean" type="boolean" />
					<param name="noRememberLast" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="initKeyBindings" fulltype="void" type="void">
				<comment>
					<description>Initializes the action set&apos;s key bindings.
 jEdit calls this method for all registered action sets when the
 user changes key bindings in the &lt;b&gt;Global Options&lt;/b&gt; dialog box.&lt;p&gt;

 Note if your plugin adds a custom action set to jEdit&apos;s collection,
 it must also call this method on the action set after adding it.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="protected" name="getProperty" returncomment="the property value" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a property for the given name.
 In jEdit it will returns a jEdit.getProperty(name), but it can
 return something else for a standalone textarea.</description>
					<attribute name="@param">
						<description>name the property name</description>
					</attribute>
					<attribute name="@return">
						<description>the property value</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the property name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JEditAbstractEditAction" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.JEditAbstractEditAction" fulltype="org.gjt.sp.jedit.JEditBeanShellAction" type="JEditBeanShellAction">
		<comment>
			<description>An action that evaluates BeanShell code when invoked. BeanShell actions are
 usually loaded from &lt;code&gt;actions.xml&lt;/code&gt; and
 &lt;code&gt;browser.actions.xml&lt;/code&gt; files; see {@link ActionSet} for syntax
 information.</description>
			<attribute name="@see">
				<description>jEdit#getAction(String)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#getActionNames()</description>
			</attribute>
			<attribute name="@see">
				<description>ActionSet</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BeanShellAction.java 10803 2007-10-04 20:45:31Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JEditBeanShellAction">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="code" fulltype="java.lang.String" type="String" />
					<param name="isSelected" fulltype="java.lang.String" type="String" />
					<param name="noRepeat" fulltype="boolean" type="boolean" />
					<param name="noRecord" fulltype="boolean" type="boolean" />
					<param name="noRememberLast" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="invoke" fulltype="void" type="void">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
			<method visibility="public" name="isSelected" fulltype="boolean" type="boolean">
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="noRepeat" fulltype="boolean" type="boolean" />
			<method visibility="public" name="noRecord" fulltype="boolean" type="boolean" />
			<method visibility="public" name="noRememberLast" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this edit action should not be remembered as the most
 recently invoked action.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCode" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Macros" type="Macros">
		<comment>
			<description>This class records and runs macros.&lt;p&gt;

 It also contains a few methods useful for displaying output messages
 or obtaining input from a macro:

 &lt;ul&gt;
 &lt;li&gt;{@link #confirm(Component,String,int)}&lt;/li&gt;
 &lt;li&gt;{@link #confirm(Component,String,int,int)}&lt;/li&gt;
 &lt;li&gt;{@link #error(Component,String)}&lt;/li&gt;
 &lt;li&gt;{@link #input(Component,String)}&lt;/li&gt;
 &lt;li&gt;{@link #input(Component,String,String)}&lt;/li&gt;
 &lt;li&gt;{@link #message(Component,String)}&lt;/li&gt;
 &lt;/ul&gt;

 Note that plugins should not use the above methods. Call
 the methods in the {@link GUIUtilities} class instead.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Macros.java 20414 2011-11-23 17:48:45Z daleanson $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="Macros" />
			<method static="true" visibility="public" name="showRunScriptDialog" fulltype="void" type="void">
				<comment>
					<description>Prompts for one or more files to run as macros</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="runScript" fulltype="void" type="void">
				<comment>
					<description>Runs the specified script.
 Unlike the {@link BeanShell#runScript(View,String,Reader,boolean)}
 method, this method can run scripts supported
 by any registered macro handler.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>path The VFS path of the script</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreUnknown If true, then unknown file types will be
 ignored; otherwise, a warning message will be printed and they will
 be evaluated as BeanShell scripts.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The VFS path of the script" fulltype="java.lang.String" type="String" />
					<param name="ignoreUnknown" comment="If true, then unknown file types will be
 ignored; otherwise, a warning message will be printed and they will
 be evaluated as BeanShell scripts." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="message" fulltype="void" type="void">
				<comment>
					<description>Utility method that can be used to display a message dialog in a macro.</description>
					<attribute name="@param">
						<description>comp The component to show the dialog on behalf of, this
 will usually be a view instance</description>
					</attribute>
					<attribute name="@param">
						<description>message The message</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to show the dialog on behalf of, this
 will usually be a view instance" fulltype="java.awt.Component" type="Component" />
					<param name="message" comment="The message" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="error" fulltype="void" type="void">
				<comment>
					<description>Utility method that can be used to display an error dialog in a macro.</description>
					<attribute name="@param">
						<description>comp The component to show the dialog on behalf of, this
 will usually be a view instance</description>
					</attribute>
					<attribute name="@param">
						<description>message The message</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to show the dialog on behalf of, this
 will usually be a view instance" fulltype="java.awt.Component" type="Component" />
					<param name="message" comment="The message" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="input" fulltype="java.lang.String" type="String">
				<comment>
					<description>Utility method that can be used to prompt for input in a macro.</description>
					<attribute name="@param">
						<description>comp The component to show the dialog on behalf of, this
 will usually be a view instance</description>
					</attribute>
					<attribute name="@param">
						<description>prompt The prompt string</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to show the dialog on behalf of, this
 will usually be a view instance" fulltype="java.awt.Component" type="Component" />
					<param name="prompt" comment="The prompt string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="input" fulltype="java.lang.String" type="String">
				<comment>
					<description>Utility method that can be used to prompt for input in a macro.</description>
					<attribute name="@param">
						<description>comp The component to show the dialog on behalf of, this
 will usually be a view instance</description>
					</attribute>
					<attribute name="@param">
						<description>prompt The prompt string</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.1final</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to show the dialog on behalf of, this
 will usually be a view instance" fulltype="java.awt.Component" type="Component" />
					<param name="prompt" comment="The prompt string" fulltype="java.lang.String" type="String" />
					<param name="defaultValue" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="confirm" fulltype="int" type="int">
				<comment>
					<description>Utility method that can be used to ask for confirmation in a macro.</description>
					<attribute name="@param">
						<description>comp The component to show the dialog on behalf of, this
 will usually be a view instance</description>
					</attribute>
					<attribute name="@param">
						<description>prompt The prompt string</description>
					</attribute>
					<attribute name="@param">
						<description>buttons The buttons to display - for example,
 JOptionPane.YES_NO_CANCEL_OPTION</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to show the dialog on behalf of, this
 will usually be a view instance" fulltype="java.awt.Component" type="Component" />
					<param name="prompt" comment="The prompt string" fulltype="java.lang.String" type="String" />
					<param name="buttons" comment="The buttons to display - for example,
 JOptionPane.YES_NO_CANCEL_OPTION" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="confirm" fulltype="int" type="int">
				<comment>
					<description>Utility method that can be used to ask for confirmation in a macro.</description>
					<attribute name="@param">
						<description>comp The component to show the dialog on behalf of, this
 will usually be a view instance</description>
					</attribute>
					<attribute name="@param">
						<description>prompt The prompt string</description>
					</attribute>
					<attribute name="@param">
						<description>buttons The buttons to display - for example,
 JOptionPane.YES_NO_CANCEL_OPTION</description>
					</attribute>
					<attribute name="@param">
						<description>type The dialog type - for example,
 JOptionPane.WARNING_MESSAGE</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component to show the dialog on behalf of, this
 will usually be a view instance" fulltype="java.awt.Component" type="Component" />
					<param name="prompt" comment="The prompt string" fulltype="java.lang.String" type="String" />
					<param name="buttons" comment="The buttons to display - for example,
 JOptionPane.YES_NO_CANCEL_OPTION" fulltype="int" type="int" />
					<param name="type" comment="The dialog type - for example,
 JOptionPane.WARNING_MESSAGE" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadMacros" fulltype="void" type="void">
				<comment>
					<description>Rebuilds the macros list, and sends a MacrosChanged message
 (views update their Macros menu upon receiving it)</description>
					<attribute name="@since">
						<description>jEdit 2.2pre4</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="registerHandler" fulltype="void" type="void">
				<comment>
					<description>Adds a macro handler to the handlers list</description>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="handler" fulltype="org.gjt.sp.jedit.Macros.Handler" type="Macros.Handler" />
				</params>
			</method>
			<method static="true" visibility="public" name="unregisterHandler" fulltype="void" type="void">
				<comment>
					<description>Removes a macro handler from the handlers list</description>
					<attribute name="@since">
						<description>jEdit 4.4.1</description>
					</attribute>
				</comment>
				<params>
					<param name="handler" fulltype="org.gjt.sp.jedit.Macros.Handler" type="Macros.Handler" />
				</params>
			</method>
			<method static="true" visibility="public" name="getHandlers" fulltype="org.gjt.sp.jedit.Macros.Handler[]" type="Macros.Handler">
				<comment>
					<description>Returns an array containing the list of registered macro handlers</description>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getHandlerForPathName" fulltype="org.gjt.sp.jedit.Macros.Handler" type="Macros.Handler">
				<comment>
					<description>Returns the macro handler suitable for running the specified file
 name, or null if there is no suitable handler.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="pathName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getHandler" fulltype="org.gjt.sp.jedit.Macros.Handler" type="Macros.Handler">
				<comment>
					<description>Returns the macro handler with the specified name, or null if
 there is no registered handler with that name.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getMacroHierarchy" fulltype="java.util.Vector" type="Vector">
				<comment>
					<description>Returns a vector hierarchy with all known macros in it.
 Each element of this vector is either a macro name string,
 or another vector. If it is a vector, the first element is a
 string label, the rest are again, either macro name strings
 or vectors.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getMacroActionSet" fulltype="org.gjt.sp.jedit.ActionSet" type="ActionSet">
				<comment>
					<description>Returns an action set with all known macros in it.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getMacro" fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro">
				<comment>
					<description>Returns the macro with the specified name.</description>
					<attribute name="@param">
						<description>macro The macro&apos;s name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="macro" comment="The macro&apos;s name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLastMacro" fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setLastMacro" fulltype="void" type="void">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="macro" fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro" />
				</params>
			</method>
			<method static="true" visibility="public" name="recordTemporaryMacro" fulltype="void" type="void">
				<comment>
					<description>Starts recording a temporary macro.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="recordMacro" fulltype="void" type="void">
				<comment>
					<description>Starts recording a macro.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="stopRecording" fulltype="void" type="void">
				<comment>
					<description>Stops a recording currently in progress.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="runTemporaryMacro" fulltype="void" type="void">
				<comment>
					<description>Runs the temporary macro.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
		<jelclass superclass="EditAction" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.EditAction" fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro">
			<comment>
				<description>Encapsulates the macro&apos;s label, name and path.</description>
				<attribute name="@since">
					<description>jEdit 2.2pre4</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="public" name="Macros.Macro">
					<params>
						<param name="handler" fulltype="org.gjt.sp.jedit.Macros.Handler" type="Macros.Handler" />
						<param name="name" fulltype="java.lang.String" type="String" />
						<param name="label" fulltype="java.lang.String" type="String" />
						<param name="path" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="getHandler" fulltype="org.gjt.sp.jedit.Macros.Handler" type="Macros.Handler" />
				<method visibility="public" name="getPath" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="invoke" fulltype="void" type="void">
					<params>
						<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					</params>
				</method>
				<method visibility="public" name="getCode" fulltype="java.lang.String" type="String" />
				<method static="true" visibility="public" name="macroNameToLabel" fulltype="java.lang.String" type="String">
					<params>
						<param name="macroName" fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Macros.Recorder" type="Macros.Recorder">
			<comment>
				<description>Handles macro recording.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="Macros.Recorder">
					<params>
						<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
						<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
						<param name="temporary" fulltype="boolean" type="boolean" />
					</params>
				</constructor>
				<method visibility="public" name="record" fulltype="void" type="void">
					<params>
						<param name="code" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="record" fulltype="void" type="void">
					<params>
						<param name="repeat" fulltype="int" type="int" />
						<param name="code" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="recordInput" fulltype="void" type="void">
					<comment>
						<attribute name="@since">
							<description>jEdit 4.2pre5</description>
						</attribute>
					</comment>
					<params>
						<param name="repeat" fulltype="int" type="int" />
						<param name="ch" fulltype="char" type="char" />
						<param name="overwrite" fulltype="boolean" type="boolean" />
					</params>
				</method>
				<method visibility="public" name="recordInput" fulltype="void" type="void">
					<comment>
						<attribute name="@since">
							<description>jEdit 4.2pre5</description>
						</attribute>
					</comment>
					<params>
						<param name="str" fulltype="java.lang.String" type="String" />
						<param name="overwrite" fulltype="boolean" type="boolean" />
					</params>
				</method>
				<method visibility="public" name="handleBufferUpdate" fulltype="void" type="void">
					<params>
						<param name="bmsg" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Macros.Handler" type="Macros.Handler">
			<comment>
				<description>Encapsulates creating and invoking macros in arbitrary scripting languages</description>
				<attribute name="@since">
					<description>jEdit 4.0pre6</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="protected" name="Macros.Handler">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="getLabel" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="accept" fulltype="boolean" type="boolean">
					<params>
						<param name="path" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method abstract="true" visibility="public" name="createMacro" fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro">
					<params>
						<param name="macroName" fulltype="java.lang.String" type="String" />
						<param name="path" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method abstract="true" visibility="public" name="runMacro" fulltype="void" type="void">
					<comment>
						<description>Runs the specified macro.</description>
						<attribute name="@param">
							<description>view The view - may be null.</description>
						</attribute>
						<attribute name="@param">
							<description>macro The macro.</description>
						</attribute>
					</comment>
					<params>
						<param name="view" comment="The view - may be null." fulltype="org.gjt.sp.jedit.View" type="View" />
						<param name="macro" comment="The macro." fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro" />
					</params>
				</method>
				<method visibility="public" name="runMacro" fulltype="void" type="void">
					<comment>
						<description>Runs the specified macro. This method is optional; it is
 called if the specified macro is a startup script. The
 default behavior is to simply call {@link #runMacro(View,Macros.Macro)}.</description>
						<attribute name="@param">
							<description>view The view - may be null.</description>
						</attribute>
						<attribute name="@param">
							<description>macro The macro.</description>
						</attribute>
						<attribute name="@param">
							<description>ownNamespace  A hint indicating whenever functions and
 variables defined in the script are to be self-contained, or
 made available to other scripts. The macro handler may ignore
 this parameter.</description>
						</attribute>
						<attribute name="@since">
							<description>jEdit 4.1pre3</description>
						</attribute>
					</comment>
					<params>
						<param name="view" comment="The view - may be null." fulltype="org.gjt.sp.jedit.View" type="View" />
						<param name="macro" comment="The macro." fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro" />
						<param name="ownNamespace" comment="A hint indicating whenever functions and
 variables defined in the script are to be self-contained, or
 made available to other scripts. The macro handler may ignore
 this parameter." fulltype="boolean" type="boolean" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="EditAction" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="org.gjt.sp.jedit.EditAction" fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro">
		<comment>
			<description>Encapsulates the macro&apos;s label, name and path.</description>
			<attribute name="@since">
				<description>jEdit 2.2pre4</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="Macros.Macro">
				<params>
					<param name="handler" fulltype="org.gjt.sp.jedit.Macros.Handler" type="Macros.Handler" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="label" fulltype="java.lang.String" type="String" />
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getHandler" fulltype="org.gjt.sp.jedit.Macros.Handler" type="Macros.Handler" />
			<method visibility="public" name="getPath" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="invoke" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getCode" fulltype="java.lang.String" type="String" />
			<method static="true" visibility="public" name="macroNameToLabel" fulltype="java.lang.String" type="String">
				<params>
					<param name="macroName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Macros.Recorder" type="Macros.Recorder">
		<comment>
			<description>Handles macro recording.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Macros.Recorder">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="temporary" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="record" fulltype="void" type="void">
				<params>
					<param name="code" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="record" fulltype="void" type="void">
				<params>
					<param name="repeat" fulltype="int" type="int" />
					<param name="code" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="recordInput" fulltype="void" type="void">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="repeat" fulltype="int" type="int" />
					<param name="ch" fulltype="char" type="char" />
					<param name="overwrite" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="recordInput" fulltype="void" type="void">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="overwrite" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="handleBufferUpdate" fulltype="void" type="void">
				<params>
					<param name="bmsg" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Macros.Handler" type="Macros.Handler">
		<comment>
			<description>Encapsulates creating and invoking macros in arbitrary scripting languages</description>
			<attribute name="@since">
				<description>jEdit 4.0pre6</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="Macros.Handler">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getLabel" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="createMacro" fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro">
				<params>
					<param name="macroName" fulltype="java.lang.String" type="String" />
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="runMacro" fulltype="void" type="void">
				<comment>
					<description>Runs the specified macro.</description>
					<attribute name="@param">
						<description>view The view - may be null.</description>
					</attribute>
					<attribute name="@param">
						<description>macro The macro.</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view - may be null." fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="macro" comment="The macro." fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro" />
				</params>
			</method>
			<method visibility="public" name="runMacro" fulltype="void" type="void">
				<comment>
					<description>Runs the specified macro. This method is optional; it is
 called if the specified macro is a startup script. The
 default behavior is to simply call {@link #runMacro(View,Macros.Macro)}.</description>
					<attribute name="@param">
						<description>view The view - may be null.</description>
					</attribute>
					<attribute name="@param">
						<description>macro The macro.</description>
					</attribute>
					<attribute name="@param">
						<description>ownNamespace  A hint indicating whenever functions and
 variables defined in the script are to be self-contained, or
 made available to other scripts. The macro handler may ignore
 this parameter.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view - may be null." fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="macro" comment="The macro." fulltype="org.gjt.sp.jedit.Macros.Macro" type="Macros.Macro" />
					<param name="ownNamespace" comment="A hint indicating whenever functions and
 variables defined in the script are to be self-contained, or
 made available to other scripts. The macro handler may ignore
 this parameter." fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Marker" type="Marker">
		<comment>
			<description>Buffers may contain one or more &lt;i&gt;markers&lt;/i&gt; which serve
 as textual bookmarks.&lt;p&gt;

 A &lt;code&gt;Marker&lt;/code&gt; has three key attributes: the
 &lt;code&gt;Buffer&lt;/code&gt; to which it relates, the offset to which
 the marker refers, and an optional shortcut character. The shortcut
 identifies the key that can be pressed with the
 &lt;b&gt;Markers&lt;/b&gt;&amp;gt;&lt;b&gt;Go To Marker&lt;/b&gt; command.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Marker.java 21778 2012-06-10 01:15:15Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getShortcut" fulltype="char" type="char">
				<comment>
					<description>Returns the marker&apos;s shortcut character.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getPosition" fulltype="int" type="int">
				<comment>
					<description>Returns the position of this marker.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.DirectoryProvider" type="DirectoryProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.menu.DynamicMenuProvider" type="DynamicMenuProvider" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DirectoryProvider.java 16207 2009-09-17 17:54:14Z shlomy $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DirectoryProvider">
				<params>
					<param name="dir" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="updateEveryTime" fulltype="boolean" type="boolean" />
			<method visibility="public" name="update" fulltype="void" type="void">
				<params>
					<param name="menu" fulltype="javax.swing.JMenu" type="JMenu" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.menu" interface="true" fulltype="org.gjt.sp.jedit.menu.DynamicMenuProvider" type="DynamicMenuProvider">
		<comment>
			<description>Interface for a pull-down menu whose contents are determined at runtime.&lt;p&gt;

 See {@link org.gjt.sp.jedit.EditPlugin} for properties you need to define to
 have your plugin provide a dynamic menu.</description>
			<attribute name="@since">
				<description>jEdit 4.2pre2</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DynamicMenuProvider.java 13060 2008-07-17 18:22:42Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="updateEveryTime" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the menu should be updated each time it is shown.
 Otherwise, it will only be updated when the menu is first created,
 and if the menu receives a {@link
 org.gjt.sp.jedit.msg.DynamicMenuChanged} message.</description>
				</comment>
			</method>
			<method visibility="public" name="update" fulltype="void" type="void">
				<comment>
					<description>Adds the menu items to the given menu.</description>
					<attribute name="@param">
						<description>menu The menu</description>
					</attribute>
				</comment>
				<params>
					<param name="menu" comment="The menu" fulltype="javax.swing.JMenu" type="JMenu" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JCheckBoxMenuItem" visibility="public" package="org.gjt.sp.jedit.menu" serializable="true" superclassfulltype="javax.swing.JCheckBoxMenuItem" fulltype="org.gjt.sp.jedit.menu.EnhancedCheckBoxMenuItem" type="EnhancedCheckBoxMenuItem">
		<comment>
			<description>jEdit&apos;s custom menu item. It adds support for multi-key shortcuts.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="EnhancedCheckBoxMenuItem">
				<comment>
					<description>Creates a new menu item. Most plugins should call
 GUIUtilities.loadMenuItem() instead.</description>
					<attribute name="@param">
						<description>label The menu item label</description>
					</attribute>
					<attribute name="@param">
						<description>action The edit action</description>
					</attribute>
					<attribute name="@param">
						<description>context An action context</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="label" comment="The menu item label" fulltype="java.lang.String" type="String" />
					<param name="action" comment="The edit action" fulltype="java.lang.String" type="String" />
					<param name="context" comment="An action context" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
				</params>
			</constructor>
			<method visibility="public" name="getPreferredSize" fulltype="java.awt.Dimension" type="Dimension" />
			<method visibility="public" name="paint" fulltype="void" type="void">
				<params>
					<param name="g" fulltype="java.awt.Graphics" type="Graphics" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JMenu" visibility="public" package="org.gjt.sp.jedit.menu" serializable="true" superclassfulltype="javax.swing.JMenu" fulltype="org.gjt.sp.jedit.menu.EnhancedMenu" type="EnhancedMenu">
		<implements>
			<interface fulltype="javax.swing.event.MenuListener" type="MenuListener" />
		</implements>
		<fields>
			<field visibility="protected" name="initialComponentCount" fulltype="int" type="int" />
			<field visibility="protected" name="context" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
			<field visibility="protected" name="providerCode" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="provider" fulltype="org.gjt.sp.jedit.menu.DynamicMenuProvider" type="DynamicMenuProvider" />
			<field visibility="protected" name="ebStub" fulltype="org.gjt.sp.jedit.menu.EnhancedMenu.EditBusStub" type="EnhancedMenu.EditBusStub" />
		</fields>
		<methods>
			<constructor visibility="public" name="EnhancedMenu">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="EnhancedMenu">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="label" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="EnhancedMenu">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="label" fulltype="java.lang.String" type="String" />
					<param name="context" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
				</params>
			</constructor>
			<method visibility="public" name="menuSelected" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="javax.swing.event.MenuEvent" type="MenuEvent" />
				</params>
			</method>
			<method visibility="public" name="menuDeselected" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="javax.swing.event.MenuEvent" type="MenuEvent" />
				</params>
			</method>
			<method visibility="public" name="menuCanceled" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="javax.swing.event.MenuEvent" type="MenuEvent" />
				</params>
			</method>
			<method visibility="public" name="init" fulltype="void" type="void" />
			<method visibility="protected" name="finalize" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.EnhancedMenu.EditBusStub" type="EnhancedMenu.EditBusStub">
			<methods>
				<method visibility="public" name="handleDynamicMenuChanged" fulltype="void" type="void">
					<params>
						<param name="msg" fulltype="org.gjt.sp.jedit.msg.DynamicMenuChanged" type="DynamicMenuChanged" />
					</params>
				</method>
				<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
					<params>
						<param name="msg" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.EnhancedMenu.EditBusStub" type="EnhancedMenu.EditBusStub">
		<methods>
			<method visibility="public" name="handleDynamicMenuChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.DynamicMenuChanged" type="DynamicMenuChanged" />
				</params>
			</method>
			<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JMenuItem" visibility="public" package="org.gjt.sp.jedit.menu" serializable="true" superclassfulltype="javax.swing.JMenuItem" fulltype="org.gjt.sp.jedit.menu.EnhancedMenuItem" type="EnhancedMenuItem">
		<comment>
			<description>jEdit&apos;s custom menu item. It adds support for multi-key shortcuts.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="EnhancedMenuItem">
				<comment>
					<description>Creates a new menu item. Most plugins should call
 GUIUtilities.loadMenuItem() instead.</description>
					<attribute name="@param">
						<description>label The menu item label</description>
					</attribute>
					<attribute name="@param">
						<description>action The edit action</description>
					</attribute>
					<attribute name="@param">
						<description>context An action context</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="label" comment="The menu item label" fulltype="java.lang.String" type="String" />
					<param name="action" comment="The edit action" fulltype="java.lang.String" type="String" />
					<param name="context" comment="An action context" fulltype="org.gjt.sp.jedit.ActionContext" type="ActionContext" />
				</params>
			</constructor>
			<method visibility="public" name="getPreferredSize" fulltype="java.awt.Dimension" type="Dimension" />
			<method visibility="public" name="paint" fulltype="void" type="void">
				<params>
					<param name="g" fulltype="java.awt.Graphics" type="Graphics" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.FavoritesProvider" type="FavoritesProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.menu.DynamicMenuProvider" type="DynamicMenuProvider" />
		</implements>
		<methods>
			<constructor visibility="public" name="FavoritesProvider" />
			<method visibility="public" name="updateEveryTime" fulltype="boolean" type="boolean" />
			<method visibility="public" name="update" fulltype="void" type="void">
				<params>
					<param name="menu" fulltype="javax.swing.JMenu" type="JMenu" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.MacrosProvider" type="MacrosProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.menu.DynamicMenuProvider" type="DynamicMenuProvider" />
		</implements>
		<methods>
			<constructor visibility="public" name="MacrosProvider" />
			<method visibility="public" name="updateEveryTime" fulltype="boolean" type="boolean" />
			<method visibility="public" name="update" fulltype="void" type="void">
				<params>
					<param name="menu" fulltype="javax.swing.JMenu" type="JMenu" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.MarkersProvider" type="MarkersProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.menu.DynamicMenuProvider" type="DynamicMenuProvider" />
		</implements>
		<methods>
			<constructor visibility="public" name="MarkersProvider" />
			<method visibility="public" name="updateEveryTime" fulltype="boolean" type="boolean" />
			<method visibility="public" name="update" fulltype="void" type="void">
				<params>
					<param name="menu" fulltype="javax.swing.JMenu" type="JMenu" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.MenuItemTextComparator" type="MenuItemTextComparator">
		<implements>
			<interface fulltype="java.util.Comparator" type="Comparator" />
		</implements>
		<comment>
			<description>MenuItemTextComparator implements java.util.Comparator, and compares the text
 value of JMenuItems using the case-insensitive smart comparison of
 StandardUtilities.compareStrings. If one of the JMenuItems is an
 EnhancedMenuItem it is given a higher comparison value.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="MenuItemTextComparator" />
			<method visibility="public" name="compare" fulltype="int" type="int">
				<params>
					<param name="obj1" fulltype="javax.swing.JMenuItem" type="JMenuItem" />
					<param name="obj2" fulltype="javax.swing.JMenuItem" type="JMenuItem" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.PluginsProvider" type="PluginsProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.menu.DynamicMenuProvider" type="DynamicMenuProvider" />
		</implements>
		<methods>
			<constructor visibility="public" name="PluginsProvider" />
			<method visibility="public" name="updateEveryTime" fulltype="boolean" type="boolean" />
			<method visibility="public" name="update" fulltype="void" type="void">
				<params>
					<param name="menu" fulltype="javax.swing.JMenu" type="JMenu" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.RecentDirectoriesProvider" type="RecentDirectoriesProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.menu.DynamicMenuProvider" type="DynamicMenuProvider" />
		</implements>
		<methods>
			<constructor visibility="public" name="RecentDirectoriesProvider" />
			<method visibility="public" name="updateEveryTime" fulltype="boolean" type="boolean" />
			<method visibility="public" name="update" fulltype="void" type="void">
				<params>
					<param name="menu" fulltype="javax.swing.JMenu" type="JMenu" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.RecentFilesProvider" type="RecentFilesProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.menu.DynamicMenuProvider" type="DynamicMenuProvider" />
		</implements>
		<methods>
			<constructor visibility="public" name="RecentFilesProvider" />
			<method visibility="public" name="updateEveryTime" fulltype="boolean" type="boolean" />
			<method visibility="public" name="update" fulltype="void" type="void">
				<params>
					<param name="menu" fulltype="javax.swing.JMenu" type="JMenu" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.menu" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.menu.ReloadWithEncodingProvider" type="ReloadWithEncodingProvider">
		<implements>
			<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
			<interface fulltype="org.gjt.sp.jedit.menu.DynamicMenuProvider" type="DynamicMenuProvider" />
		</implements>
		<comment>
			<description>Menu provider for actions to reload the current buffer with a
 specific encoding.</description>
			<attribute name="@version">
				<description>$Id: ReloadWithEncodingProvider.java 20367 2011-11-17 22:29:08Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ReloadWithEncodingProvider" />
			<method visibility="public" name="updateEveryTime" fulltype="boolean" type="boolean" />
			<method visibility="public" name="update" fulltype="void" type="void">
				<params>
					<param name="menu" fulltype="javax.swing.JMenu" type="JMenu" />
				</params>
			</method>
			<method visibility="public" name="actionPerformed" fulltype="void" type="void">
				<params>
					<param name="ae" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.MiscUtilities" type="MiscUtilities">
		<comment>
			<description>Path name manipulation, string manipulation, and more.&lt;p&gt;

 The most frequently used members of this class are:&lt;p&gt;

 &lt;b&gt;Some path name methods:&lt;/b&gt;&lt;p&gt;
 &lt;ul&gt;
 &lt;li&gt;{@link #getFileName(String)}&lt;/li&gt;
 &lt;li&gt;{@link #getParentOfPath(String)}&lt;/li&gt;
 &lt;li&gt;{@link #constructPath(String,String)}&lt;/li&gt;
 &lt;/ul&gt;</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: MiscUtilities.java 21619 2012-04-30 18:05:30Z jarekczek $</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="canonPath" returncomment="the canonical form of the specified path name. Currently
 only expands a leading &lt;code&gt;~&lt;/code&gt;. &lt;b&gt;For local path names
 only.&lt;/b&gt;" fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@return">
						<description>the canonical form of the specified path name. Currently
 only expands a leading &lt;code&gt;~&lt;/code&gt;. &lt;b&gt;For local path names
 only.&lt;/b&gt;</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="expandVariables" returncomment="a string which is either the unchanged input string, or one with expanded variables." fulltype="java.lang.String" type="String">
				<comment>
					<description>Accepts a string from the user which may contain variables of various syntaxes.
  The function supports the following expansion syntaxes:
     $varname
     ${varname} (on non-windows)
     %varname% (on Windows)
     And expand each of these by looking at the system environment variables for possible
     expansions.</description>
					<attribute name="@return">
						<description>a string which is either the unchanged input string, or one with expanded variables.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3</description>
					</attribute>
					<attribute name="@see">
						<description>#abbreviate</description>
					</attribute>
					<attribute name="@author">
						<description>ezust</description>
					</attribute>
				</comment>
				<params>
					<param name="arg" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="abbreviate" returncomment="an abbreviated path, replacing values with variables, if a prefix exists.
                uses platform convention (%varname% on windows, $varname on other platforms)" fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@return">
						<description>an abbreviated path, replacing values with variables, if a prefix exists.
                uses platform convention (%varname% on windows, $varname on other platforms)</description>
					</attribute>
					<attribute name="@see">
						<description>#expandVariables</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre16</description>
					</attribute>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="resolveSymlinks" fulltype="java.lang.String" type="String">
				<comment>
					<description>Resolves any symbolic links in the path name specified
 using &lt;code&gt;File.getCanonicalPath()&lt;/code&gt;. &lt;b&gt;For local path
 names only.&lt;/b&gt;</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="isAbsolutePath" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified path name is an absolute path or URL.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre11</description>
					</attribute>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="constructPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Constructs an absolute path name from a directory and another
 path name. This method is VFS-aware.</description>
					<attribute name="@param">
						<description>parent The directory</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="The directory" fulltype="java.lang.String" type="String" />
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="constructPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Constructs an absolute path name from three path components.
 This method is VFS-aware.</description>
					<attribute name="@param">
						<description>parent The parent directory</description>
					</attribute>
					<attribute name="@param">
						<description>path1 The first path</description>
					</attribute>
					<attribute name="@param">
						<description>path2 The second path</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="The parent directory" fulltype="java.lang.String" type="String" />
					<param name="path1" comment="The first path" fulltype="java.lang.String" type="String" />
					<param name="path2" comment="The second path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="concatPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Like {@link #constructPath}, except &lt;code&gt;path&lt;/code&gt; will be
 appended to &lt;code&gt;parent&lt;/code&gt; even if it is absolute.
 &lt;b&gt;For local path names only.&lt;/b&gt;.</description>
					<attribute name="@param">
						<description>parent the parent path</description>
					</attribute>
					<attribute name="@param">
						<description>path the path to append to the parent</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="the parent path" fulltype="java.lang.String" type="String" />
					<param name="path" comment="the path to append to the parent" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getFirstSeparatorIndex" fulltype="int" type="int">
				<comment>
					<description>Return the first index of either / or the OS-specific file
 separator.</description>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLastSeparatorIndex" fulltype="int" type="int">
				<comment>
					<description>Return the last index of either / or the OS-specific file
 separator.</description>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getFileExtension" returncomment="the last dot (.) and the text that follows, or an empty
 string if no dots are found.
 i.e. if your filename is
    IP-192.168.1.1-data.tar.gz
 it will return
    .gz" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the extension of the specified filename, starting with the last dot.</description>
					<attribute name="@param">
						<description>path The path</description>
					</attribute>
					<attribute name="@return">
						<description>the last dot (.) and the text that follows, or an empty
 string if no dots are found.
 i.e. if your filename is
    IP-192.168.1.1-data.tar.gz
 it will return
    .gz</description>
					</attribute>
					<attribute name="@see">
						<description>#getCompleteBaseName(String)</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getFileName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the last component of the specified path.
 This method is VFS-aware.</description>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getCompleteBaseName" returncomment="the complete basename of a fileName (before the last period).
 i.e. if your filename is
    /net/log/IP-192.168.1.1-data.tar.gz
 it will return
    IP-192.168.1.1-data.tar" fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@return">
						<description>the complete basename of a fileName (before the last period).
 i.e. if your filename is
    /net/log/IP-192.168.1.1-data.tar.gz
 it will return
    IP-192.168.1.1-data.tar</description>
					</attribute>
					<attribute name="@param">
						<description>path the path name</description>
					</attribute>
					<attribute name="@see">
						<description>#getBaseName(String) getBaseName</description>
					</attribute>
					<attribute name="@see">
						<description>#getFileExtension(String) getFileExtension</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="the path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBaseName" returncomment="the base name of a fileName (before the first period).
 i.e. If your filename is
     /net/log/IP-192.168.1.1-data.tar.gz
 it will return
     IP-192" fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@return">
						<description>the base name of a fileName (before the first period).
 i.e. If your filename is
     /net/log/IP-192.168.1.1-data.tar.gz
 it will return
     IP-192</description>
					</attribute>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0</description>
					</attribute>
					<attribute name="@see">
						<description>#getCompleteBaseName(String)</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getFileNameNoExtension" returncomment="the same thing as getBaseName()" fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@return">
						<description>the same thing as getBaseName()</description>
					</attribute>
					<attribute name="@deprecated">
						<description>use getBaseName() instead.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0</description>
					</attribute>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getParentOfPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the parent of the specified path. This method is VFS-aware.</description>
					<attribute name="@param">
						<description>path The path name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getProtocolOfURL" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the protocol specified by a URL.</description>
					<attribute name="@param">
						<description>url The URL</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="url" comment="The URL" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="isURL" returncomment="True if the string is a URL, false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Checks if the specified string is a URL.</description>
					<attribute name="@param">
						<description>str The string to check</description>
					</attribute>
					<attribute name="@return">
						<description>True if the string is a URL, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string to check" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getNthBackupFile" fulltype="java.io.File" type="File">
				<comment>
					<description>Gets the file to store the Nth backup of the given file.</description>
					<attribute name="@param">
						<description>name The last part of the filename of the file being
             backed up.</description>
					</attribute>
					<attribute name="@param">
						<description>backup The number of the current backup.</description>
					</attribute>
					<attribute name="@param">
						<description>backups Total number of backup copies.</description>
					</attribute>
					<attribute name="@since">
						<description>5.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The last part of the filename of the file being
             backed up." fulltype="java.lang.String" type="String" />
					<param name="backup" comment="The number of the current backup." fulltype="int" type="int" />
					<param name="backups" comment="Total number of backup copies." fulltype="int" type="int" />
					<param name="backupPrefix" fulltype="java.lang.String" type="String" />
					<param name="backupSuffix" fulltype="java.lang.String" type="String" />
					<param name="backupDirectory" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="prepareBackupDirectory" returncomment="Backup directory, never &lt;code&gt;null&lt;/code&gt;." fulltype="java.io.File" type="File">
				<comment>
					<description>Prepares the directory to backup the specified file.
 jedit property is used to determine the directory.
 It is created if not exists.</description>
					<attribute name="@return">
						<description>Backup directory, never &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>5.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="file" fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method static="true" visibility="public" name="prepareBackupFile" returncomment="File suitable for backup of &lt;code&gt;file&lt;/code&gt;,
                   or &lt;code&gt;null&lt;/code&gt; if the last backup was
                   less than &lt;code&gt;backup.minTime&lt;/code&gt; ms ago." fulltype="java.io.File" type="File">
				<comment>
					<description>Prepares the filename for performing backup of the given file.
 In case of multiple backups does necessary backup renumbering.
 Checks whether the last backup was not earlier than
 &lt;code&gt;backup.minTime&lt;/code&gt; (property) ms ago.
 Uses jedit properties to determine backup parameters,
 like prefix, suffix.</description>
					<attribute name="@param">
						<description>file The file to back up.</description>
					</attribute>
					<attribute name="@param">
						<description>backupDir The directory, usually obtained from
                  &lt;code&gt;prepareBackupDirectory&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>File suitable for backup of &lt;code&gt;file&lt;/code&gt;,
                   or &lt;code&gt;null&lt;/code&gt; if the last backup was
                   less than &lt;code&gt;backup.minTime&lt;/code&gt; ms ago.</description>
					</attribute>
					<attribute name="@since">
						<description>5.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="The file to back up." fulltype="java.io.File" type="File" />
					<param name="backupDir" comment="The directory, usually obtained from
                  &lt;code&gt;prepareBackupDirectory&lt;/code&gt;." fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method static="true" visibility="public" name="prepareBackupFile" returncomment="File suitable for backup of &lt;code&gt;file&lt;/code&gt;,
                   or &lt;code&gt;null&lt;/code&gt; if the last backup was
                   less than &lt;code&gt;backupTimeDistance&lt;/code&gt; ms ago." fulltype="java.io.File" type="File">
				<comment>
					<description>Prepares the filename for performing backup of the given file.
 In case of multiple backups does necessary backup renumbering.
 Checks whether the last backup was not earlier than
 &lt;code&gt;backupTimeDistance&lt;/code&gt; ms ago.</description>
					<attribute name="@param">
						<description>file The file to back up.</description>
					</attribute>
					<attribute name="@param">
						<description>backups The number of backups. Must be &gt;= 1. If &gt; 1, backup
 files will be numbered.</description>
					</attribute>
					<attribute name="@param">
						<description>backupDirectory The directory determined externally or
 obtained from &lt;code&gt;prepareBackupDirectory&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>File suitable for backup of &lt;code&gt;file&lt;/code&gt;,
                   or &lt;code&gt;null&lt;/code&gt; if the last backup was
                   less than &lt;code&gt;backupTimeDistance&lt;/code&gt; ms ago.</description>
					</attribute>
					<attribute name="@since">
						<description>5.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="The file to back up." fulltype="java.io.File" type="File" />
					<param name="backups" comment="The number of backups. Must be &gt;= 1. If &gt; 1, backup
 files will be numbered." fulltype="int" type="int" />
					<param name="backupPrefix" fulltype="java.lang.String" type="String" />
					<param name="backupSuffix" fulltype="java.lang.String" type="String" />
					<param name="backupDirectory" comment="The directory determined externally or
 obtained from &lt;code&gt;prepareBackupDirectory&lt;/code&gt;." fulltype="java.lang.String" type="String" />
					<param name="backupTimeDistance" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveBackup" fulltype="void" type="void">
				<comment>
					<description>Saves a backup (optionally numbered) of a file. Reads 
 jedit properties to determine backup parameters, like
 prefix, suffix, directory.
 &lt;p&gt;This version calls
 &lt;code&gt;prepareBackupDirectory&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>file A local file</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="A local file" fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveBackup" fulltype="void" type="void">
				<comment>
					<description>Saves a backup (optionally numbered) of a file.</description>
					<attribute name="@param">
						<description>file A local file</description>
					</attribute>
					<attribute name="@param">
						<description>backups The number of backups. Must be &gt;= 1. If &gt; 1, backup
 files will be numbered.</description>
					</attribute>
					<attribute name="@param">
						<description>backupPrefix The backup file name prefix</description>
					</attribute>
					<attribute name="@param">
						<description>backupSuffix The backup file name suffix</description>
					</attribute>
					<attribute name="@param">
						<description>backupDirectory The directory where to save backups; if null,
 they will be saved in the same directory as the file itself.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="A local file" fulltype="java.io.File" type="File" />
					<param name="backups" comment="The number of backups. Must be &gt;= 1. If &gt; 1, backup
 files will be numbered." fulltype="int" type="int" />
					<param name="backupPrefix" comment="The backup file name prefix" fulltype="java.lang.String" type="String" />
					<param name="backupSuffix" comment="The backup file name suffix" fulltype="java.lang.String" type="String" />
					<param name="backupDirectory" comment="The directory where to save backups; if null,
 they will be saved in the same directory as the file itself." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveBackup" fulltype="void" type="void">
				<comment>
					<description>Saves a backup (optionally numbered) of a file. Requires
 specifying the backup directory and generates the backup filename.</description>
					<attribute name="@param">
						<description>file A local file</description>
					</attribute>
					<attribute name="@param">
						<description>backups The number of backups. Must be &gt;= 1. If &gt; 1, backup
 files will be numbered.</description>
					</attribute>
					<attribute name="@param">
						<description>backupPrefix The backup file name prefix</description>
					</attribute>
					<attribute name="@param">
						<description>backupSuffix The backup file name suffix</description>
					</attribute>
					<attribute name="@param">
						<description>backupDirectory The directory where to save backups; if null,
 they will be saved in the same directory as the file itself.</description>
					</attribute>
					<attribute name="@param">
						<description>backupTimeDistance The minimum time in minutes when a backup
 version 1 shall be moved into version 2; if 0, backups are always
 moved.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="A local file" fulltype="java.io.File" type="File" />
					<param name="backups" comment="The number of backups. Must be &gt;= 1. If &gt; 1, backup
 files will be numbered." fulltype="int" type="int" />
					<param name="backupPrefix" comment="The backup file name prefix" fulltype="java.lang.String" type="String" />
					<param name="backupSuffix" comment="The backup file name suffix" fulltype="java.lang.String" type="String" />
					<param name="backupDirectory" comment="The directory where to save backups; if null,
 they will be saved in the same directory as the file itself." fulltype="java.lang.String" type="String" />
					<param name="backupTimeDistance" comment="The minimum time in minutes when a backup
 version 1 shall be moved into version 2; if 0, backups are always
 moved." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="saveBackup" fulltype="void" type="void">
				<comment>
					<description>Saves a backup of a local file. Requires
 specifying source and destination files.</description>
					<attribute name="@param">
						<description>file A local file</description>
					</attribute>
					<attribute name="@param">
						<description>backupFile A local backup file.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="A local file" fulltype="java.io.File" type="File" />
					<param name="backupFile" comment="A local backup file." fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method static="true" visibility="public" name="isBinary" returncomment="&lt;code&gt;true&lt;/code&gt; if the stream was detected as binary" fulltype="boolean" type="boolean">
				<comment>
					<description>Check if an InputStream is binary.
 First this tries encoding auto detection. If an encoding is
 detected, the stream should be a text stream. Otherwise, this
 will check the first characters 100
 (jEdit property vfs.binaryCheck.length) in the system default
 encoding. If more than 1 (jEdit property vfs.binaryCheck.count)
 NUL was found, the stream is declared binary.

 This is not 100% because sometimes the autodetection could fail.

 This method will not close the stream. You have to do it yourself</description>
					<attribute name="@param">
						<description>in the stream</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the stream was detected as binary</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException IOException If an I/O error occurs</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="the stream" fulltype="java.io.InputStream" type="InputStream" />
				</params>
				<exceptions>
					<exception comment="IOException If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="isBackup" returncomment="true if this is a backup file." fulltype="boolean" type="boolean">
				<comment>
					<description>Check if the filename is a backup file.</description>
					<attribute name="@param">
						<description>filename the filename to check</description>
					</attribute>
					<attribute name="@return">
						<description>true if this is a backup file.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="filename" comment="the filename to check" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="autodetect" returncomment="a Reader using the detected encoding" fulltype="java.io.Reader" type="Reader">
				<comment>
					<description>Tries to detect if the stream is gzipped, and if it has an encoding
 specified with an XML PI.</description>
					<attribute name="@param">
						<description>in the input stream reader that must be autodetected</description>
					</attribute>
					<attribute name="@param">
						<description>buffer a buffer. It can be null if you only want to autodetect the encoding of a file</description>
					</attribute>
					<attribute name="@return">
						<description>a Reader using the detected encoding</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException io exception during read</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="the input stream reader that must be autodetected" fulltype="java.io.InputStream" type="InputStream" />
					<param name="buffer" comment="a buffer. It can be null if you only want to autodetect the encoding of a file" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
				<exceptions>
					<exception comment="io exception during read" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="fileToClass" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts a file name to a class name. All slash characters are
 replaced with periods and the trailing &apos;.class&apos; is removed.</description>
					<attribute name="@param">
						<description>name The file name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The file name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="classToFile" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts a class name to a file name. All periods are replaced
 with slashes and the &apos;.class&apos; extension is added.</description>
					<attribute name="@param">
						<description>name The class name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The class name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="pathsEqual" returncomment="True if both paths are equal, ignoring trailing slashes, as
 well as case insensitivity on Windows." fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@param">
						<description>p1 A path name</description>
					</attribute>
					<attribute name="@param">
						<description>p2 A path name</description>
					</attribute>
					<attribute name="@return">
						<description>True if both paths are equal, ignoring trailing slashes, as
 well as case insensitivity on Windows.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="p1" comment="A path name" fulltype="java.lang.String" type="String" />
					<param name="p2" comment="A path name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="escapesToChars" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts &quot;\n&quot; and &quot;\t&quot; escapes in the specified string to
 newlines and tabs.</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLongestPrefix" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the longest common prefix in the given set of strings.</description>
					<attribute name="@param">
						<description>str The strings</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreCase If true, case insensitive</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The strings" fulltype="java.util.List" type="List" />
					<param name="ignoreCase" comment="If true, case insensitive" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLongestPrefix" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the longest common prefix in the given set of strings.</description>
					<attribute name="@param">
						<description>str The strings</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreCase If true, case insensitive</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The strings" fulltype="java.lang.String[]" type="String" />
					<param name="ignoreCase" comment="If true, case insensitive" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLongestPrefix" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the longest common prefix in the given set of strings.</description>
					<attribute name="@param">
						<description>str The strings (calls &lt;code&gt;toString()&lt;/code&gt; on each object)</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreCase If true, case insensitive</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The strings (calls &lt;code&gt;toString()&lt;/code&gt; on each object)" fulltype="java.lang.Object[]" type="Object" />
					<param name="ignoreCase" comment="If true, case insensitive" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="buildToVersion" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts an internal version number (build) into a
 `human-readable&apos; form.</description>
					<attribute name="@param">
						<description>build The build</description>
					</attribute>
				</comment>
				<params>
					<param name="build" comment="The build" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="isToolsJarAvailable" returncomment="&lt;code&gt;false&lt;/code&gt; if and only if on JDK 1.2 and tools.jar
    could not be found. In this case it prints some warnings on Log,
    too, about the places where it was searched for." fulltype="boolean" type="boolean">
				<comment>
					<description>If on JDK 1.2 or higher, make sure that tools.jar is available.
 This method should be called by plugins requiring the classes
 in this library.
 &lt;p&gt;
 tools.jar is searched for in the following places:
 &lt;ol&gt;
   &lt;li&gt;the classpath that was used when jEdit was started,
   &lt;li&gt;jEdit&apos;s jars folder in the user&apos;s home,
   &lt;li&gt;jEdit&apos;s system jars folder,
   &lt;li&gt;&lt;i&gt;java.home&lt;/i&gt;/lib/. In this case, tools.jar is added to
       jEdit&apos;s list of known jars using jEdit.addPluginJAR(),
       so that it gets loaded through JARClassLoader.
 &lt;/ol&gt;&lt;p&gt;

 On older JDK&apos;s this method does not perform any checks, and returns
 &lt;code&gt;true&lt;/code&gt; (even though there is no tools.jar).</description>
					<attribute name="@return">
						<description>&lt;code&gt;false&lt;/code&gt; if and only if on JDK 1.2 and tools.jar
    could not be found. In this case it prints some warnings on Log,
    too, about the places where it was searched for.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2.2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="parsePermissions" fulltype="int" type="int">
				<comment>
					<description>Parse a Unix-style permission string (rwxrwxrwx).</description>
					<attribute name="@param">
						<description>s The string (must be 9 characters long).</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre8</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="The string (must be 9 characters long)." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getEncodings" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns a list of supported character encodings.</description>
					<attribute name="@since">
						<description>jEdit 4.3</description>
					</attribute>
					<attribute name="@param">
						<description>getSelected Whether to return just the selected encodings or all.</description>
					</attribute>
				</comment>
				<params>
					<param name="getSelected" comment="Whether to return just the selected encodings or all." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="throwableToString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string containing the stack trace of the given throwable.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="t" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Mode" type="Mode">
		<comment>
			<description>An edit mode defines specific settings for editing some type of file.
 One instance of this class is created for each supported edit mode.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Mode.java 21723 2012-05-27 14:34:13Z k_satoda $</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="name" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="props" fulltype="java.util.Map" type="Map" />
			<field visibility="protected" name="marker" fulltype="org.gjt.sp.jedit.syntax.TokenMarker" type="TokenMarker" />
		</fields>
		<methods>
			<constructor visibility="public" name="Mode">
				<comment>
					<description>Creates a new edit mode.</description>
					<attribute name="@param">
						<description>name The name used in mode listings and to query mode
 properties</description>
					</attribute>
					<attribute name="@see">
						<description>#getProperty(String)</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name used in mode listings and to query mode
 properties" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="init" fulltype="void" type="void">
				<comment>
					<description>Initializes the edit mode. Should be called after all properties
 are loaded and set.</description>
				</comment>
			</method>
			<method visibility="public" name="getTokenMarker" fulltype="org.gjt.sp.jedit.syntax.TokenMarker" type="TokenMarker">
				<comment>
					<description>Returns the token marker for this mode.</description>
				</comment>
			</method>
			<method visibility="public" name="setTokenMarker" fulltype="void" type="void">
				<comment>
					<description>Sets the token marker for this mode.</description>
					<attribute name="@param">
						<description>marker The new token marker</description>
					</attribute>
				</comment>
				<params>
					<param name="marker" comment="The new token marker" fulltype="org.gjt.sp.jedit.syntax.TokenMarker" type="TokenMarker" />
				</params>
			</method>
			<method visibility="public" name="loadIfNecessary" fulltype="void" type="void">
				<comment>
					<description>Loads the mode from disk if it hasn&apos;t been loaded already.</description>
					<attribute name="@since">
						<description>jEdit 2.5pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getProperty" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns a mode property.</description>
					<attribute name="@param">
						<description>key The property name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="The property name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getBooleanProperty" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the value of a boolean property.</description>
					<attribute name="@param">
						<description>key The property name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.5pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="The property name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setProperty" fulltype="void" type="void">
				<comment>
					<description>Sets a mode property.</description>
					<attribute name="@param">
						<description>key The property name</description>
					</attribute>
					<attribute name="@param">
						<description>value The property value</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="The property name" fulltype="java.lang.String" type="String" />
					<param name="value" comment="The property value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="unsetProperty" fulltype="void" type="void">
				<comment>
					<description>Unsets a mode property.</description>
					<attribute name="@param">
						<description>key The property name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="The property name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setProperties" fulltype="void" type="void">
				<comment>
					<description>Should only be called by &lt;code&gt;XModeHandler&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="props" fulltype="java.util.Map" type="Map" />
				</params>
			</method>
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the edit mode is suitable for editing the specified
 file. The buffer name and first line is checked against the
 file name and first line globs, respectively.</description>
					<attribute name="@param">
						<description>fileName The buffer&apos;s name, can be {@code null}</description>
					</attribute>
					<attribute name="@param">
						<description>firstLine The first line of the buffer</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="The buffer&apos;s name, can be {@code null}" fulltype="java.lang.String" type="String" />
					<param name="firstLine" comment="The first line of the buffer" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the edit mode is suitable for editing the specified
 file. The buffer name and first line is checked against the
 file name and first line globs, respectively.</description>
					<attribute name="@param">
						<description>filePath The buffer&apos;s path, can be {@code null}</description>
					</attribute>
					<attribute name="@param">
						<description>fileName The buffer&apos;s name, can be {@code null}</description>
					</attribute>
					<attribute name="@param">
						<description>firstLine The first line of the buffer</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="filePath" comment="The buffer&apos;s path, can be {@code null}" fulltype="java.lang.String" type="String" />
					<param name="fileName" comment="The buffer&apos;s name, can be {@code null}" fulltype="java.lang.String" type="String" />
					<param name="firstLine" comment="The first line of the buffer" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="acceptFilename" returncomment="true if the file name matches the file name glob." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the buffer name matches the file name glob.</description>
					<attribute name="@param">
						<description>fileName The buffer&apos;s name, can be {@code null}</description>
					</attribute>
					<attribute name="@return">
						<description>true if the file name matches the file name glob.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
					<attribute name="@deprecated">
						<description>use {@link #acceptFile(String, String)} instead</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="The buffer&apos;s name, can be {@code null}" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="acceptFile" returncomment="true if the file path or name matches the file name glob." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the buffer&apos;s name or path matches the file name glob.</description>
					<attribute name="@param">
						<description>filePath The buffer&apos;s path, can be {@code null}</description>
					</attribute>
					<attribute name="@param">
						<description>fileName The buffer&apos;s name, can be {@code null}</description>
					</attribute>
					<attribute name="@return">
						<description>true if the file path or name matches the file name glob.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="filePath" comment="The buffer&apos;s path, can be {@code null}" fulltype="java.lang.String" type="String" />
					<param name="fileName" comment="The buffer&apos;s name, can be {@code null}" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="acceptFilenameIdentical" returncomment="true if the file name matches the file name glob." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the buffer name is identical to the file name glob.
 This works only for regular expressions that only represent themselves,
 i.e. without any meta-characters.</description>
					<attribute name="@param">
						<description>fileName The buffer&apos;s name, can be {@code null}</description>
					</attribute>
					<attribute name="@return">
						<description>true if the file name matches the file name glob.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="The buffer&apos;s name, can be {@code null}" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="acceptIdentical" returncomment="true if the file name matches the file name glob." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the buffer path or name is identical to the file name glob.
 This works only for regular expressions that only represent themselves,
 i.e. without any meta-characters.</description>
					<attribute name="@param">
						<description>filePath The buffer&apos;s path, can be {@code null}</description>
					</attribute>
					<attribute name="@param">
						<description>fileName The buffer&apos;s name, can be {@code null}</description>
					</attribute>
					<attribute name="@return">
						<description>true if the file name matches the file name glob.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="filePath" comment="The buffer&apos;s path, can be {@code null}" fulltype="java.lang.String" type="String" />
					<param name="fileName" comment="The buffer&apos;s name, can be {@code null}" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="acceptFirstLine" returncomment="true if the first line matches the first line glob." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the first line matches the first line glob.</description>
					<attribute name="@param">
						<description>firstLine The first line of the buffer</description>
					</attribute>
					<attribute name="@return">
						<description>true if the first line matches the first line glob.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
				<params>
					<param name="firstLine" comment="The first line of the buffer" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the internal name of this edit mode.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this edit mode.</description>
				</comment>
			</method>
			<method visibility="public" name="getIgnoreWhitespace" fulltype="boolean" type="boolean" />
			<method synchronized="true" visibility="public" name="getIndentRules" fulltype="java.util.List" type="List" />
			<method synchronized="true" visibility="public" name="isElectricKey" fulltype="boolean" type="boolean">
				<params>
					<param name="ch" fulltype="char" type="char" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="PositionChanging" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.msg.PositionChanging" fulltype="org.gjt.sp.jedit.msg.BufferChanging" type="BufferChanging">
		<comment>
			<description>An EBMessage sent by the EditPane just before the buffer changes.
 
 jEdit core emits this whenever the EditPane&apos;s buffer changes.
 
 Known plugins to be using this: BufferLocal, Navigator.</description>
			<attribute name="@since">
				<description>jEdit 4.3pre4</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferChanging.java 16342 2009-10-14 10:07:18Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferChanging">
				<comment>
					<attribute name="@param">
						<description>editPane the editPane that sent the message</description>
					</attribute>
					<attribute name="@param">
						<description>newBuffer the buffer that will soon be displayed.</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="the editPane that sent the message" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="newBuffer" comment="the buffer that will soon be displayed." fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</constructor>
			<method visibility="public" name="getBuffer" returncomment="the new buffer that is about to be displayed" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<attribute name="@return">
						<description>the new buffer that is about to be displayed</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate">
		<comment>
			<description>Message sent when a buffer-related change occurs.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferUpdate.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.2pre6</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="CREATED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Buffer created.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CLOSING" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>About to be closed</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LOAD_STARTED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Buffer load started.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LOADED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Buffer loaded.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CLOSED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Buffer closed.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DIRTY_CHANGED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Buffer dirty changed.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MARKERS_CHANGED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Buffer markers changed.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SAVING" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Buffer saving.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SAVED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Buffer saved.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="PROPERTIES_CHANGED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Properties changed.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="BufferUpdate">
				<comment>
					<description>Creates a new buffer update message.</description>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>what What happened</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="what" comment="What happened" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="getWhat" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns what caused this buffer update.</description>
				</comment>
			</method>
			<method visibility="public" name="getBuffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Returns the buffer involved.</description>
				</comment>
			</method>
			<method visibility="public" name="getView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns the view involved, which may be null.</description>
				</comment>
			</method>
			<method visibility="public" name="paramString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.DockableWindowUpdate" type="DockableWindowUpdate">
		<comment>
			<description>Message sent when dockable window state changes.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DockableWindowUpdate.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="PROPERTIES_CHANGED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Properties changed. Fired instead of global
 &lt;code&gt;PropertiesChanged&lt;/code&gt; for improved performance.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ACTIVATED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Dockable activated. This is sent when the dockable is made visible.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DEACTIVATED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Dockable deactivated. This is sent when the dockable is hidden.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="DockableWindowUpdate">
				<comment>
					<description>Creates a new dockable window update message.</description>
					<attribute name="@param">
						<description>wm The dockable window manager</description>
					</attribute>
					<attribute name="@param">
						<description>what What happened</description>
					</attribute>
					<attribute name="@param">
						<description>dockable The dockable window in question</description>
					</attribute>
				</comment>
				<params>
					<param name="wm" comment="The dockable window manager" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager" type="DockableWindowManager" />
					<param name="what" comment="What happened" fulltype="java.lang.Object" type="Object" />
					<param name="dockable" comment="The dockable window in question" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getWhat" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns what caused this dockable update.</description>
				</comment>
			</method>
			<method visibility="public" name="getDockable" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the dockable in question, or null if the message type is
 &lt;code&gt;PROPERTIES_CHANGED&lt;/code&gt;.</description>
				</comment>
			</method>
			<method visibility="public" name="paramString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.DynamicMenuChanged" type="DynamicMenuChanged">
		<comment>
			<description>Sending this message will cause the specified dynamic menu to be recreated.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DynamicMenuChanged.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.2pre2</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DynamicMenuChanged">
				<comment>
					<description>Creates a new dynamic menu changed message.</description>
					<attribute name="@param">
						<description>name The menu name. All dynamic menus with this name will be
 recreated next time they are displayed.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The menu name. All dynamic menus with this name will be
 recreated next time they are displayed." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getMenuName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the menu in question.</description>
				</comment>
			</method>
			<method visibility="public" name="paramString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.EditorExiting" type="EditorExiting">
		<comment>
			<description>Message sent just before jEdit exits.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EditorExiting.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.3pre2</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EditorExiting">
				<comment>
					<description>Creates a new editor exiting message.</description>
					<attribute name="@param">
						<description>source The message source</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The message source" fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.EditorExitRequested" type="EditorExitRequested">
		<comment>
			<description>Message sent when jEdit starts the exit process. It is send before
 the settings are saved and the buffers are closed. Listeners of this
 message should be aware that jEdit might not exit truely, maybe because
 of errors, or the user cancelled the &quot;Save unsaved changed&quot; dialog, or
 jEdit is in background mode.</description>
			<attribute name="@author">
				<description>Dirk Moebius</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EditorExitRequested.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 3.1pre4</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EditorExitRequested">
				<comment>
					<description>Creates a new editor exiting started message.</description>
					<attribute name="@param">
						<description>view The view from which this exit was called</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view from which this exit was called" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<method visibility="public" name="getView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns the view involved.</description>
				</comment>
			</method>
			<method visibility="public" name="cancelExit" fulltype="void" type="void">
				<comment>
					<description>Cancels the exit process. If a plugin calls this method, jEdit will not
 exit anymore</description>
				</comment>
			</method>
			<method visibility="public" name="hasBeenExitCancelled" fulltype="boolean" type="boolean">
				<comment>
					<description>Check if the exit process has been cancelled.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.EditorStarted" type="EditorStarted">
		<comment>
			<description>Message sent after jEdit has finished starting up, but before the initial
 view is created.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EditorStarted.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.3pre2</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EditorStarted">
				<comment>
					<description>Creates a new editor started message.</description>
					<attribute name="@param">
						<description>source The message source</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The message source" fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.EditPaneUpdate" type="EditPaneUpdate">
		<comment>
			<description>Message sent when an edit pane-related change occurs.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EditPaneUpdate.java 14916 2009-04-12 15:49:33Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.5pre1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="CREATED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Edit pane created.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DESTROYED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Edit pane destroyed.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BUFFER_CHANGED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>The current buffer in the EditPane has changed to show a different buffer. This
 happens when an action results in a call to EditPane.setBuffer().</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="POSITION_CHANGING" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Edit pane caret position is about to change in a major way</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BUFFER_CHANGING" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Edit pane buffer is about to change. You should see this before BUFFER_CHANGED.</description>
					<attribute name="@since">
						<description>4.3pre3</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BUFFERSET_CHANGED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>The bufferSet scope of the EditPane was changed.</description>
					<attribute name="@since">
						<description>4.3pre15</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="EditPaneUpdate">
				<comment>
					<description>Creates a new edit pane update message.</description>
					<attribute name="@param">
						<description>editPane The edit pane</description>
					</attribute>
					<attribute name="@param">
						<description>what What happened</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="The edit pane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="what" comment="What happened" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="getWhat" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns what caused this edit pane update.</description>
				</comment>
			</method>
			<method visibility="public" name="getEditPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane">
				<comment>
					<description>Returns the edit pane involved.</description>
				</comment>
			</method>
			<method visibility="public" name="paramString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.PluginUpdate" type="PluginUpdate">
		<comment>
			<description>Message sent when plugins are loaded and unloaded.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: PluginUpdate.java 17313 2010-02-17 22:32:09Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="LOADED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Plugin loaded. This is sent after a JAR file is added to the
 list and scanned.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ACTIVATED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Plugin activated. This is sent after the plugin core class
 is loaded and its &lt;code&gt;start()&lt;/code&gt; method is called.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DEACTIVATED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Plugin deactivated. This is sent after the plugin core class
 &lt;code&gt;stop()&lt;/code&gt; method is called.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="UNLOADED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Plugin unloaded.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="PluginUpdate">
				<comment>
					<description>Creates a new plugin update message.</description>
					<attribute name="@param">
						<description>jar The plugin</description>
					</attribute>
					<attribute name="@param">
						<description>what What happened</description>
					</attribute>
					<attribute name="@param">
						<description>exit Is the editor exiting?</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="jar" comment="The plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
					<param name="what" comment="What happened" fulltype="java.lang.Object" type="Object" />
					<param name="exit" comment="Is the editor exiting?" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="getWhat" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns what caused this plugin update.</description>
				</comment>
			</method>
			<method visibility="public" name="isExiting" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this plugin is being unloaded as part of the
 shutdown process, in which case some components like the help
 viewer and plugin manager ignore the event.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getPluginJAR" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR">
				<comment>
					<description>Returns the plugin involved.</description>
				</comment>
			</method>
			<method visibility="public" name="getPluginVersion" returncomment="the plugin version. It may be null in some case like for the libraries" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the plugin version.</description>
					<attribute name="@return">
						<description>the plugin version. It may be null in some case like for the libraries</description>
					</attribute>
					<attribute name="@since">
						<description>4.4pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="paramString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="EditPaneUpdate" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.msg.EditPaneUpdate" fulltype="org.gjt.sp.jedit.msg.PositionChanging" type="PositionChanging">
		<comment>
			<description>An EBMessage associated with an EditPane that is sent just before its caret 
 position changes in a &quot;major way&quot; to another location in the same Buffer.
 These messages are tracked by the Navigator plugin, 
 and other interested plugins.
 
 jEdit plugins such as SideKick, Tags, Jump, CscopeFinder, etc, should 
 emit this message whenever the user wants to jump from one position
 to another in the same buffer.
 
 For jumps to a different buffer entirely, it is not necessary for plugins
 to send any message, since BufferChanging is sent by jEdit whenever 
 EditPane.setBuffer() is called, and it serves as a PositionChanging message
 also.</description>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.msg.BufferChanging</description>
			</attribute>
			<attribute name="@author">
				<description>ezust</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre15</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="PositionChanging">
				<params>
					<param name="editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
					<param name="whatt" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<constructor visibility="public" name="PositionChanging">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</constructor>
			<constructor visibility="public" name="PositionChanging">
				<params>
					<param name="editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged">
		<comment>
			<description>Message sent when properties are changed using the global options or
 plugin options dialog box.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: PropertiesChanged.java 16730 2009-12-25 16:53:12Z shlomy $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.2pre6</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PropertiesChanged">
				<comment>
					<description>Creates a new properties changed message.</description>
					<attribute name="@param">
						<description>source The message source</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The message source" fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
				</params>
			</constructor>
			<constructor visibility="public" name="PropertiesChanged">
				<comment>
					<description>Creates a new properties changed message.</description>
					<attribute name="@param">
						<description>source The message source</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The message source" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging" type="PropertiesChanging">
		<comment>
			<description>Message sent right before the global options dialog is shown. This
 allows plugins to flush any state before the options pane is loaded
 and the properties are read by the panes.</description>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
			<attribute name="@version">
				<description>$Id$</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre9</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PropertiesChanging">
				<comment>
					<description>Creates a new properties changing message.</description>
					<attribute name="@param">
						<description>source 	The message source</description>
					</attribute>
					<attribute name="@param">
						<description>state		An enum describing what is happening.</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The message source" fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
					<param name="state" comment="An enum describing what is happening." fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State" type="PropertiesChanging.State" />
				</params>
			</constructor>
			<method visibility="public" name="getState" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State" type="PropertiesChanging.State" />
		</methods>
		<jelclass final="true" superclass="Enum" visibility="public" package="org.gjt.sp.jedit.msg" serializable="true" superclassfulltype="java.lang.Enum" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State" type="PropertiesChanging.State">
			<fields>
				<field final="true" static="true" visibility="public" name="LOADING" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State" type="PropertiesChanging.State" />
				<field final="true" static="true" visibility="public" name="CANCELED" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State" type="PropertiesChanging.State" />
			</fields>
			<methods>
				<method static="true" visibility="public" name="values" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State[]" type="PropertiesChanging.State" />
				<method static="true" visibility="public" name="valueOf" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State" type="PropertiesChanging.State">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass final="true" superclass="Enum" visibility="public" package="org.gjt.sp.jedit.msg" serializable="true" superclassfulltype="java.lang.Enum" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State" type="PropertiesChanging.State">
		<fields>
			<field final="true" static="true" visibility="public" name="LOADING" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State" type="PropertiesChanging.State" />
			<field final="true" static="true" visibility="public" name="CANCELED" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State" type="PropertiesChanging.State" />
		</fields>
		<methods>
			<method static="true" visibility="public" name="values" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State[]" type="PropertiesChanging.State" />
			<method static="true" visibility="public" name="valueOf" fulltype="org.gjt.sp.jedit.msg.PropertiesChanging.State" type="PropertiesChanging.State">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.RegisterChanged" type="RegisterChanged">
		<comment>
			<description>Message sent when a register is updated.</description>
			<attribute name="@author">
				<description>Nicholas O&apos;Leary</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: RegisterChanged.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="RegisterChanged">
				<comment>
					<description>Creates a new registers changed message.</description>
					<attribute name="@param">
						<description>source The message source</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The message source" fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
					<param name="name" fulltype="char" type="char" />
				</params>
			</constructor>
			<method visibility="public" name="getRegisterName" fulltype="char" type="char" />
			<method visibility="public" name="getRegisterValue" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="paramString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.SearchSettingsChanged" type="SearchSettingsChanged">
		<comment>
			<description>Message sent when search and replace settings change.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: SearchSettingsChanged.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.3pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SearchSettingsChanged">
				<comment>
					<description>Creates a new search and replace settings changed message.</description>
					<attribute name="@param">
						<description>source The message source</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The message source" fulltype="org.gjt.sp.jedit.EBComponent" type="EBComponent" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.VFSPathSelected" type="VFSPathSelected">
		<comment>
			<description>Message sent when a file system tree node,
 or a ProjectViewer tree node, is selected.</description>
			<attribute name="@since">
				<description>jEdit 4.3pre11</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="VFSPathSelected">
				<comment>
					<attribute name="@param">
						<description>source the View that is considered the &quot;source&quot; of this event</description>
					</attribute>
					<attribute name="@param">
						<description>isDirectory true if the path is pointing to a folder, false if it&apos;s a regular file</description>
					</attribute>
					<attribute name="@param">
						<description>path The selected path.</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="the View that is considered the &quot;source&quot; of this event" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The selected path." fulltype="java.lang.String" type="String" />
					<param name="isDirectory" comment="true if the path is pointing to a folder, false if it&apos;s a regular file" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="getView" fulltype="org.gjt.sp.jedit.View" type="View" />
			<method visibility="public" name="getPath" returncomment="The selected URL (or file path)." fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@return">
						<description>The selected URL (or file path).</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isDirectory" returncomment="true if this is a directory node" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@return">
						<description>true if this is a directory node</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.VFSUpdate" type="VFSUpdate">
		<comment>
			<description>Message sent when a file or directory changes.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: VFSUpdate.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.6pre4</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="VFSUpdate">
				<comment>
					<description>Creates a VFS update message.</description>
					<attribute name="@param">
						<description>path The path in question</description>
					</attribute>
				</comment>
				<params>
					<param name="path" comment="The path in question" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the path that changed.</description>
				</comment>
			</method>
			<method visibility="public" name="paramString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="EBMessage" visibility="public" package="org.gjt.sp.jedit.msg" superclassfulltype="org.gjt.sp.jedit.EBMessage" fulltype="org.gjt.sp.jedit.msg.ViewUpdate" type="ViewUpdate">
		<comment>
			<description>Message sent when a view-related change occurs.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ViewUpdate.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.2pre6</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="CREATED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>View created.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CLOSED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>View closed.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="EDIT_PANE_CHANGED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Active edit pane changed.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ACTIVATED" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Active view changed.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre4</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="ViewUpdate">
				<comment>
					<description>Creates a new view update message.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>what What happened</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="what" comment="What happened" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="getWhat" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns what caused this view update.</description>
				</comment>
			</method>
			<method visibility="public" name="getView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns the view involved.</description>
				</comment>
			</method>
			<method visibility="public" name="paramString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.OperatingSystem" type="OperatingSystem">
		<comment>
			<description>Operating system detection routines.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: OperatingSystem.java 20631 2011-12-12 23:35:36Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.0pre4</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="OperatingSystem" />
			<method static="true" visibility="public" name="getScreenBounds" fulltype="java.awt.Rectangle" type="Rectangle">
				<comment>
					<description>Returns the bounds of the default screen.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getScreenBounds" fulltype="java.awt.Rectangle" type="Rectangle">
				<comment>
					<description>Returns the bounds of the (virtual) screen that the window should be in</description>
					<attribute name="@param">
						<description>window The bounds of the window to get the screen for</description>
					</attribute>
				</comment>
				<params>
					<param name="window" comment="The bounds of the window to get the screen for" fulltype="java.awt.Rectangle" type="Rectangle" />
				</params>
			</method>
			<method static="true" visibility="public" name="isDOSDerived" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if we&apos;re running Windows 95/98/ME/NT/2000/XP/Vista/Win7.</description>
					<attribute name="@deprecated">
						<description>use {@link #isWindows()}</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="isWindows" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if we&apos;re running Windows 95/98/ME/NT/2000/XP/Vista/Win7.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="isWindows9x" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if we&apos;re running Windows 95/98/ME.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="isWindowsNT" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if we&apos;re running Windows NT/2000/XP/Vista/Win7.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="isUnix" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if we&apos;re running Unix (this includes MacOS X).</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="isMacOS" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if we&apos;re running MacOS X.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="isX11" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this OS is likely to be using X11 as the graphics
 system.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="isVMS" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if we&apos;re running VMS.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="isMacOSLF" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if we&apos;re running MacOS X and using the native look and feel.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="hasScreenMenuBar" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns whether the screen menu bar on Mac OS X is in use.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="hasJava16" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true always</description>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
					<attribute name="@deprecated">
						<description>obsolete, since we depend on Java 1.6 now</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="hasJava17" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if Java 2 version 1.7 is in use.</description>
					<attribute name="@since">
						<description>jEdit 5.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="isCaseInsensitiveFS" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup">
		<comment>
			<description>A set of option panes shown in one branch in the options dialog.&lt;p&gt;

 Plugins should not create instances of this class directly. See
 {@link EditPlugin} for information on how jEdit obtains and constructs
 option pane instances.</description>
			<attribute name="@author">
				<description>Mike Dillon</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: OptionGroup.java 14444 2009-01-24 06:19:57Z shlomy $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="protected" name="name" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="protected" name="label" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="protected" name="members" fulltype="java.util.Vector" type="Vector" />
		</fields>
		<methods>
			<constructor visibility="public" name="OptionGroup">
				<comment>
					<description>Creates an option group.</description>
					<attribute name="@param">
						<description>name The internal name of the option group, used to key a
 property &lt;code&gt;options.&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt; which is the
 label displayed in the options dialog.</description>
					</attribute>
					<attribute name="@see">
						<description>jEdit#getProperty(String)</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The internal name of the option group, used to key a
 property &lt;code&gt;options.&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt; which is the
 label displayed in the options dialog." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="OptionGroup">
				<comment>
					<description>Creates an option group.</description>
					<attribute name="@param">
						<description>label The label</description>
					</attribute>
					<attribute name="@param">
						<description>options A whitespace-separated list of option pane names</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="label" comment="The label" fulltype="java.lang.String" type="String" />
					<param name="options" comment="A whitespace-separated list of option pane names" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getLabel" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the option group&apos;s human-readable label.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addOptionGroup" fulltype="void" type="void">
				<params>
					<param name="group" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup" />
				</params>
			</method>
			<method visibility="public" name="addOptionPane" fulltype="void" type="void">
				<params>
					<param name="pane" fulltype="org.gjt.sp.jedit.OptionPane" type="OptionPane" />
				</params>
			</method>
			<method visibility="public" name="addOptionPane" fulltype="void" type="void">
				<params>
					<param name="pane" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getMembers" fulltype="java.util.Enumeration" type="Enumeration" />
			<method visibility="public" name="getMember" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getMemberIndex" fulltype="int" type="int">
				<params>
					<param name="member" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getMemberCount" fulltype="int" type="int" />
			<method visibility="public" name="setSort" fulltype="void" type="void">
				<comment>
					<description>Sets if the members of this group should be sorted.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="sort" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit" interface="true" fulltype="org.gjt.sp.jedit.OptionPane" type="OptionPane">
		<comment>
			<description>The interface all option panes must implement.&lt;p&gt;

 See {@link EditPlugin} for information on how jEdit obtains and constructs
 option pane instances.&lt;p&gt;

 Note that in most cases it is much easier to extend
 {@link AbstractOptionPane} instead.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: OptionPane.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the internal name of this option pane. The option pane&apos;s label
 is set to the value of the property named
 &lt;code&gt;options.&lt;i&gt;name&lt;/i&gt;.label&lt;/code&gt;.</description>
					<attribute name="@see">
						<description>jEdit#getProperty(String)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getComponent" fulltype="java.awt.Component" type="Component">
				<comment>
					<description>Returns the component that should be displayed for this option pane.</description>
				</comment>
			</method>
			<method visibility="public" name="init" fulltype="void" type="void">
				<comment>
					<description>This method is called every time the option pane is displayed.</description>
				</comment>
			</method>
			<method visibility="public" name="save" fulltype="void" type="void">
				<comment>
					<description>Called when the options dialog&apos;s &quot;ok&quot; button is clicked.
 This should save any properties being edited in this option
 pane.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.AbbrevsOptionPane" type="AbbrevsOptionPane">
		<comment>
			<description>Abbrev editor.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: AbbrevsOptionPane.java 20328 2011-11-13 05:59:59Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="AbbrevsOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.AppearanceOptionPane" type="AppearanceOptionPane">
		<fields>
			<field final="true" static="true" visibility="public" name="builtInIconThemes" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>List of icon themes that are supported in jEdit core.
 Possible values of the jedit property &apos;icon-theme&apos;</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="AppearanceOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.BrowserColorsOptionPane" type="BrowserColorsOptionPane">
		<comment>
			<description>Browser color editor.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BrowserColorsOptionPane.java 14468 2009-01-25 13:26:51Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BrowserColorsOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractContextOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.AbstractContextOptionPane" fulltype="org.gjt.sp.jedit.options.BrowserContextOptionPane" type="BrowserContextOptionPane">
		<comment>
			<description>Right-click context menu editor.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ContextOptionPane.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BrowserContextOptionPane" />
			<method visibility="protected" name="getContextMenu" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns jEdit&apos;s context menu configuration.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="saveContextMenu" fulltype="void" type="void">
				<comment>
					<description>Saves jEdit&apos;s context menu configuration.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="menu" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.BrowserOptionPane" type="BrowserOptionPane">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BrowserOptionPane.java 20328 2011-11-13 05:59:59Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BrowserOptionPane" />
			<method visibility="public" name="_init" fulltype="void" type="void" />
			<method visibility="public" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.BufferOptionPane" type="BufferOptionPane">
		<methods>
			<constructor visibility="public" name="BufferOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractContextOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.AbstractContextOptionPane" fulltype="org.gjt.sp.jedit.options.ContextOptionPane" type="ContextOptionPane">
		<comment>
			<description>Right-click context menu editor.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ContextOptionPane.java 19655 2011-07-07 10:02:06Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ContextOptionPane" />
			<method visibility="protected" name="getContextMenu" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns jEdit&apos;s context menu configuration.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="saveContextMenu" fulltype="void" type="void">
				<comment>
					<description>Saves jEdit&apos;s context menu configuration.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="menu" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.DockingOptionPane" type="DockingOptionPane">
		<fields>
			<field final="true" static="true" const="options.docking.autoLoadModeLayout" visibility="public" name="AUTO_LOAD_MODE_LAYOUT_PROP" constexpr="&quot;options.docking.autoLoadModeLayout&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="options.docking.autoSaveModeLayout" visibility="public" name="AUTO_SAVE_MODE_LAYOUT_PROP" constexpr="&quot;options.docking.autoSaveModeLayout&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="DockingOptionPane" />
			<method visibility="public" name="_init" fulltype="void" type="void" />
			<method visibility="public" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.EditingOptionPane" type="EditingOptionPane">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EditingOptionPane.java 21723 2012-05-27 14:34:13Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EditingOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.EncodingsOptionPane" type="EncodingsOptionPane">
		<comment>
			<description>Encodings options.</description>
			<attribute name="@author">
				<description>Björn Kautler</description>
			</attribute>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre6</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: EncodingsOptionPane.java 20572 2011-12-07 21:43:12Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="EncodingsOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.FirewallOptionPane" type="FirewallOptionPane">
		<methods>
			<constructor visibility="public" name="FirewallOptionPane" />
			<method visibility="public" name="_init" fulltype="void" type="void" />
			<method visibility="public" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.GeneralOptionPane" type="GeneralOptionPane">
		<comment>
			<description>jEdit&apos;s General Options Pane</description>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="checkFileStatus_focus" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="checkFileStatus_all" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="checkFileStatus_operations" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="3" visibility="public" name="checkFileStatus_focusBuffer" constexpr="3" fulltype="int" type="int" />
			<field final="true" static="true" const="4" visibility="public" name="checkFileStatus_none" constexpr="4" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="GeneralOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="OptionsDialog" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.OptionsDialog" fulltype="org.gjt.sp.jedit.options.GlobalOptions" type="GlobalOptions">
		<comment>
			<attribute name="@deprecated">
				<description>- use CombinedOptions</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="GlobalOptions">
				<params>
					<param name="frame" fulltype="java.awt.Frame" type="Frame" />
				</params>
			</constructor>
			<constructor visibility="public" name="GlobalOptions">
				<params>
					<param name="frame" fulltype="java.awt.Frame" type="Frame" />
					<param name="pane" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="GlobalOptions">
				<params>
					<param name="dialog" fulltype="java.awt.Dialog" type="Dialog" />
				</params>
			</constructor>
			<constructor visibility="public" name="GlobalOptions">
				<params>
					<param name="dialog" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="pane" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="protected" name="createOptionTreeModel" fulltype="org.gjt.sp.jedit.gui.OptionsDialog.OptionTreeModel" type="OptionsDialog.OptionTreeModel" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
			<method visibility="protected" name="init" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="pane" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="getDefaultGroup" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.GutterOptionPane" type="GutterOptionPane">
		<methods>
			<constructor visibility="public" name="GutterOptionPane" />
			<method visibility="public" name="_init" fulltype="void" type="void" />
			<method visibility="public" name="_save" fulltype="void" type="void" />
			<method static="true" visibility="public" name="isGutterEnabled" fulltype="boolean" type="boolean" />
			<method static="true" visibility="public" name="getMinLineNumberDigits" fulltype="int" type="int" />
			<method static="true" visibility="public" name="isSelectionAreaEnabled" fulltype="boolean" type="boolean" />
			<method static="true" visibility="public" name="getSelectionAreaBackground" fulltype="java.awt.Color" type="Color" />
			<method static="true" visibility="public" name="getSelectionAreaWidth" fulltype="int" type="int" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.options" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.options.IconTheme" type="IconTheme">
		<methods>
			<constructor visibility="public" name="IconTheme" />
			<method static="true" visibility="public" name="builtInNames" fulltype="java.lang.String[]" type="String" />
			<method static="true" visibility="public" name="get" fulltype="java.lang.String" type="String" />
			<method static="true" visibility="public" name="set" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.MouseOptionPane" type="MouseOptionPane">
		<methods>
			<constructor visibility="public" name="MouseOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="public" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.PluginManagerOptionPane" type="PluginManagerOptionPane">
		<comment>
			<description>The plugin manager option pane.</description>
			<attribute name="@version">
				<description>$Id: PluginManagerOptionPane.java 17941 2010-06-01 14:22:58Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PluginManagerOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="OptionsDialog" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.OptionsDialog" fulltype="org.gjt.sp.jedit.options.PluginOptions" type="PluginOptions">
		<comment>
			<attribute name="@deprecated">
				<description>use CombinedOptions</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PluginOptions">
				<params>
					<param name="frame" fulltype="java.awt.Frame" type="Frame" />
				</params>
			</constructor>
			<constructor visibility="public" name="PluginOptions">
				<params>
					<param name="frame" fulltype="java.awt.Frame" type="Frame" />
					<param name="pane" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="PluginOptions">
				<params>
					<param name="dialog" fulltype="java.awt.Dialog" type="Dialog" />
				</params>
			</constructor>
			<constructor visibility="public" name="PluginOptions">
				<params>
					<param name="dialog" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="pane" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="protected" name="createOptionTreeModel" fulltype="org.gjt.sp.jedit.gui.OptionsDialog.OptionTreeModel" type="OptionsDialog.OptionTreeModel" />
			<method visibility="protected" name="getDefaultGroup" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup" />
		</methods>
		<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.PluginOptions.NoPluginsPane" type="PluginOptions.NoPluginsPane">
			<methods>
				<constructor visibility="public" name="PluginOptions.NoPluginsPane" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.PluginOptions.NoPluginsPane" type="PluginOptions.NoPluginsPane">
		<methods>
			<constructor visibility="public" name="PluginOptions.NoPluginsPane" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.PrintOptionPane" type="PrintOptionPane">
		<methods>
			<constructor visibility="public" name="PrintOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.SaveBackupOptionPane" type="SaveBackupOptionPane">
		<comment>
			<description>The Save and Backup option panel.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>$Id: SaveBackupOptionPane.java 21743 2012-05-31 20:23:35Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SaveBackupOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.ShortcutsOptionPane" type="ShortcutsOptionPane">
		<comment>
			<description>Key binding editor.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ShortcutsOptionPane.java 20759 2012-01-12 11:06:22Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ShortcutsOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.StatusBarOptionPane" type="StatusBarOptionPane">
		<comment>
			<description>Status bar editor.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: StatusBarOptionPane.java 21616 2012-04-30 08:32:24Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="StatusBarOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.SyntaxHiliteOptionPane" type="SyntaxHiliteOptionPane">
		<comment>
			<description>Style option pane.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: SyntaxHiliteOptionPane.java 14127 2008-12-01 10:10:57Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="noFocusBorder" fulltype="javax.swing.border.EmptyBorder" type="EmptyBorder" />
		</fields>
		<methods>
			<constructor visibility="public" name="SyntaxHiliteOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.TextAreaOptionPane" type="TextAreaOptionPane">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: TextAreaOptionPane.java 20953 2012-01-25 19:35:49Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="TextAreaOptionPane" />
			<method visibility="public" name="_init" fulltype="void" type="void" />
			<method visibility="public" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.ToolBarOptionPane" type="ToolBarOptionPane">
		<comment>
			<description>Tool bar editor.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ToolBarOptionPane.java 20328 2011-11-13 05:59:59Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ToolBarOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.gjt.sp.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.gjt.sp.jedit.options.ViewOptionPane" type="ViewOptionPane">
		<methods>
			<constructor visibility="public" name="ViewOptionPane" />
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.PerspectiveManager" type="PerspectiveManager">
		<comment>
			<description>Manages persistence of open buffers and views across jEdit sessions.</description>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: PerspectiveManager.java 21398 2012-03-20 04:32:13Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PerspectiveManager" />
			<method static="true" visibility="public" name="isPerspectiveDirty" fulltype="boolean" type="boolean">
				<comment>
					<description>We only autosave the perspective if it has changed, to avoid spinning
 up the disk on laptops.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre13</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setPerspectiveDirty" fulltype="void" type="void">
				<comment>
					<description>We only autosave the perspective if it has changed, to avoid spinning
 up the disk on laptops.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="dirty" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="isPerspectiveEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>We disable saving of the perspective while the &apos;close all&apos; dialog is
 showing.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setPerspectiveEnabled" fulltype="void" type="void">
				<comment>
					<description>We disable saving of the perspective while the &apos;close all&apos; dialog is
 showing.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="enabled" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadPerspective" fulltype="org.gjt.sp.jedit.View" type="View">
				<params>
					<param name="restoreFiles" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="savePerspective" fulltype="void" type="void">
				<params>
					<param name="autosave" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR">
		<comment>
			<description>Loads and unloads plugins.&lt;p&gt;

 &lt;h3&gt;JAR file contents&lt;/h3&gt;

 When loading a plugin, jEdit looks for the following resources:

 &lt;ul&gt;
 &lt;li&gt;A file named &lt;code&gt;actions.xml&lt;/code&gt; defining plugin actions.
 Only one such file per plugin is allowed. See {@link ActionSet} for
 syntax.&lt;/li&gt;
 &lt;li&gt;A file named &lt;code&gt;browser.actions.xml&lt;/code&gt; defining file system
 browser actions.
 Only one such file per plugin is allowed. See {@link ActionSet} for
 syntax.&lt;/li&gt;
 &lt;li&gt;A file named &lt;code&gt;dockables.xml&lt;/code&gt; defining dockable windows.
 Only one such file per plugin is allowed. See {@link
 DockableWindowManager} for
 syntax.&lt;/li&gt;
 &lt;li&gt;A file named &lt;code&gt;services.xml&lt;/code&gt; defining additional services
 offered by the plugin, such as virtual file systems.
 Only one such file per plugin is allowed. See {@link
 ServiceManager} for
 syntax.&lt;/li&gt;
 &lt;li&gt;File with extension &lt;code&gt;.props&lt;/code&gt; containing name/value pairs
 separated by an equals sign.
 A plugin can supply any number of property files. Property files are used
 to define plugin men items, plugin option panes, as well as arbitriary
 settings and strings used by the plugin. See {@link EditPlugin} for
 information about properties used by jEdit. See
 &lt;code&gt;java.util.Properties&lt;/code&gt; for property file syntax.&lt;/li&gt;
 &lt;li&gt;Since jEdit 5.0, files named lang_[language_iso_code].properties are
 localization files. If one of those files match the current language, jEdit
 will load it. If a label is missing in the localization file, it will be
 loaded from the other .props files.
 Those files will be ignored by jEdit&apos;s versions older than 5.0 and do not
 cause any problem
 See &lt;a href=&quot;http://sourceforge.net/apps/mediawiki/jedit/index.php?title=Localization&quot;&gt;
         jEdit&apos;s localization wiki&lt;/a&gt;
 &lt;/ul&gt;

 For a plugin to actually do something once it is resident in memory,
 it must contain a class whose name ends with &lt;code&gt;Plugin&lt;/code&gt;.
 This class, known as the &lt;i&gt;plugin core class&lt;/i&gt; must extend
 {@link EditPlugin} and define a few required properties, otherwise it is
 ignored.

 &lt;h3&gt;Dynamic and deferred loading&lt;/h3&gt;

 Unlike in prior jEdit versions, jEdit 4.2 and later allow
 plugins to be added and removed to the resident set at any time using
 the {@link jEdit#addPluginJAR(String)} and
 {@link jEdit#removePluginJAR(PluginJAR,boolean)} methods. Furthermore, the
  plugin core class might not be loaded until the plugin is first used. See
 {@link EditPlugin#start()} for a full description.</description>
			<attribute name="@see">
				<description>jEdit#getProperty(String)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#getPlugin(String)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#getPlugins()</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#getPluginJAR(String)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#getPluginJARs()</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#addPluginJAR(String)</description>
			</attribute>
			<attribute name="@see">
				<description>jEdit#removePluginJAR(PluginJAR,boolean)</description>
			</attribute>
			<attribute name="@see">
				<description>ActionSet</description>
			</attribute>
			<attribute name="@see">
				<description>DockableWindowManager</description>
			</attribute>
			<attribute name="@see">
				<description>OptionPane</description>
			</attribute>
			<attribute name="@see">
				<description>PluginJAR</description>
			</attribute>
			<attribute name="@see">
				<description>ServiceManager</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: PluginJAR.java 21554 2012-04-03 14:34:47Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PluginJAR">
				<comment>
					<description>Creates a PluginJAR object which is not necessarily loaded, but can be later.</description>
					<attribute name="@see">
						<description>#load(String, boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="file" fulltype="java.io.File" type="File" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="load" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR">
				<comment>
					<description>Loads a plugin, and its dependent plugins if necessary.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
					<param name="loadDependents" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the full path name of this plugin&apos;s JAR file.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="findPlugin" returncomment="the JARpath of the first PluginJAR it can find which contains this className,
 		    or null if not found." fulltype="java.lang.String" type="String">
				<comment>
					<description>Unlike getPlugin(), will return a PluginJAR that is not yet loaded,
 given its classname.</description>
					<attribute name="@param">
						<description>className a class name</description>
					</attribute>
					<attribute name="@return">
						<description>the JARpath of the first PluginJAR it can find which contains this className,
 		    or null if not found.</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="className" comment="a class name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getCachePath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the full path name of this plugin&apos;s summary file.
 The summary file is used to store certain information which allows
 loading of the plugin&apos;s resources and core class to be deferred
 until the plugin is first used. As long as a plugin is using the
 jEdit 4.2 plugin API, no extra effort is required to take advantage
 of the summary cache.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getDependencySet" returncomment="an ordered set of JARpaths that contains the
      plugins that need to be (re)loaded, in the correct order." fulltype="java.util.Set" type="Set">
				<comment>
					<attribute name="@param">
						<description>className of a plugin that we wish to load</description>
					</attribute>
					<attribute name="@return">
						<description>an ordered set of JARpaths that contains the
      plugins that need to be (re)loaded, in the correct order.</description>
					</attribute>
				</comment>
				<params>
					<param name="className" comment="of a plugin that we wish to load" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFile" fulltype="java.io.File" type="File">
				<comment>
					<description>Returns a file pointing to the plugin JAR.</description>
				</comment>
			</method>
			<method visibility="public" name="getClassLoader" fulltype="org.gjt.sp.jedit.JARClassLoader" type="JARClassLoader">
				<comment>
					<description>Returns the plugin&apos;s class loader.</description>
				</comment>
			</method>
			<method synchronized="true" visibility="public" name="getZipFile" fulltype="java.util.zip.ZipFile" type="ZipFile">
				<comment>
					<description>Returns the plugin&apos;s JAR file, opening it if necessary.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getActionSet" fulltype="org.gjt.sp.jedit.ActionSet" type="ActionSet">
				<comment>
					<description>Returns the plugin&apos;s action set for the jEdit action context
 {@link jEdit#getActionContext()}. These actions are loaded from
 the &lt;code&gt;actions.xml&lt;/code&gt; file; see {@link ActionSet}.
.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getBrowserActionSet" fulltype="org.gjt.sp.jedit.ActionSet" type="ActionSet">
				<comment>
					<description>Returns the plugin&apos;s action set for the file system browser action
 context {@link
 VFSBrowser#getActionContext()}.
 These actions are loaded from
 the &lt;code&gt;browser.actions.xml&lt;/code&gt; file; see {@link ActionSet}.
.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="checkDependencies" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if all dependencies are satisified, false otherwise.
 Also if dependencies are not satisfied, the plugin is marked as
 &quot;broken&quot;.</description>
				</comment>
			</method>
			<method visibility="public" name="getRequiredJars" returncomment="the required jars of this plugin" fulltype="java.util.Set" type="Set">
				<comment>
					<description>Returns the required jars of this plugin.</description>
					<attribute name="@return">
						<description>the required jars of this plugin</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre12</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="transitiveClosure" fulltype="void" type="void">
				<comment>
					<description>If plugin A is needed by B, and B is needed by C, we want to
 tell the user that A is needed by B and C when they try to
 unload A.</description>
					<attribute name="@param">
						<description>dependents a set of plugins which we wish to disable</description>
					</attribute>
					<attribute name="@param">
						<description>listModel a set of plugins which will be affected, and will need
  to be disabled also.</description>
					</attribute>
				</comment>
				<params>
					<param name="dependents" comment="a set of plugins which we wish to disable" fulltype="java.lang.String[]" type="String" />
					<param name="listModel" comment="a set of plugins which will be affected, and will need
  to be disabled also." fulltype="java.util.List" type="List" />
				</params>
			</method>
			<method visibility="public" name="getDependentPlugins" fulltype="java.lang.String[]" type="String" />
			<method visibility="public" name="getPlugin" fulltype="org.gjt.sp.jedit.EditPlugin" type="EditPlugin">
				<comment>
					<description>Returns the plugin core class for this JAR file. Note that if the
 plugin has not been activated, this will return an instance of
 {@link EditPlugin.Deferred}. If you need the actual plugin core
 class instance, call {@link #activatePlugin()} first.
 If the plugin is not yet loaded, returns null</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="activatePlugin" fulltype="void" type="void">
				<comment>
					<description>Loads the plugin core class. Does nothing if the plugin core class
 has already been loaded. This method might be called on startup,
 depending on what properties are set. See {@link EditPlugin#start()}.
 This method is thread-safe.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="activatePluginIfNecessary" fulltype="void" type="void">
				<comment>
					<description>Should be called after a new plugin is installed.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="deactivatePlugin" fulltype="void" type="void">
				<comment>
					<description>Unloads the plugin core class. Does nothing if the plugin core class
 has not been loaded.
 This method can only be called from the AWT event dispatch thread!</description>
					<attribute name="@see">
						<description>EditPlugin#stop()</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="exit" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getDockablesURI" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Returns the location of the plugin&apos;s
 &lt;code&gt;dockables.xml&lt;/code&gt; file.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getServicesURI" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Returns the location of the plugin&apos;s
 &lt;code&gt;services.xml&lt;/code&gt; file.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method static="true" visibility="public" name="getPluginCache" fulltype="org.gjt.sp.jedit.PluginJAR.PluginCacheEntry" type="PluginJAR.PluginCacheEntry">
				<params>
					<param name="plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
				</params>
			</method>
			<method visibility="public" name="getResources" fulltype="java.lang.String[]" type="String" />
			<method visibility="public" name="generateCache" fulltype="org.gjt.sp.jedit.PluginJAR.PluginCacheEntry" type="PluginJAR.PluginCacheEntry">
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.PluginJAR.PluginCacheEntry" type="PluginJAR.PluginCacheEntry">
			<comment>
				<description>Used by the &lt;code&gt;DockableWindowManager&lt;/code&gt; and
 &lt;code&gt;ServiceManager&lt;/code&gt; to handle caching.</description>
				<attribute name="@since">
					<description>jEdit 4.2pre1</description>
				</attribute>
			</comment>
			<fields>
				<field final="true" static="true" const="-1214061532" visibility="public" name="MAGIC" constexpr="-1214061532" fulltype="int" type="int" />
				<field visibility="public" name="plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
				<field visibility="public" name="modTime" fulltype="long" type="long" />
				<field visibility="public" name="classes" fulltype="java.lang.String[]" type="String" />
				<field visibility="public" name="resources" fulltype="java.lang.String[]" type="String" />
				<field visibility="public" name="actionsURI" fulltype="java.net.URL" type="URL" />
				<field visibility="public" name="cachedActionNames" fulltype="java.lang.String[]" type="String" />
				<field visibility="public" name="cachedActionToggleFlags" fulltype="boolean[]" type="boolean" />
				<field visibility="public" name="browserActionsURI" fulltype="java.net.URL" type="URL" />
				<field visibility="public" name="cachedBrowserActionNames" fulltype="java.lang.String[]" type="String" />
				<field visibility="public" name="cachedBrowserActionToggleFlags" fulltype="boolean[]" type="boolean" />
				<field visibility="public" name="dockablesURI" fulltype="java.net.URL" type="URL" />
				<field visibility="public" name="cachedDockableNames" fulltype="java.lang.String[]" type="String" />
				<field visibility="public" name="cachedDockableActionFlags" fulltype="boolean[]" type="boolean" />
				<field visibility="public" name="cachedDockableMovableFlags" fulltype="boolean[]" type="boolean" />
				<field visibility="public" name="servicesURI" fulltype="java.net.URL" type="URL" />
				<field visibility="public" name="cachedProperties" fulltype="java.util.Properties" type="Properties" />
				<field visibility="public" name="localizationProperties" fulltype="java.util.Map" type="Map" />
				<field visibility="public" name="pluginClass" fulltype="java.lang.String" type="String" />
			</fields>
			<methods>
				<constructor visibility="public" name="PluginJAR.PluginCacheEntry" />
				<method visibility="public" name="read" fulltype="boolean" type="boolean">
					<params>
						<param name="din" fulltype="java.io.DataInputStream" type="DataInputStream" />
					</params>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
				<method visibility="public" name="write" fulltype="void" type="void">
					<params>
						<param name="dout" fulltype="java.io.DataOutputStream" type="DataOutputStream" />
					</params>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.PluginJAR.PluginCacheEntry" type="PluginJAR.PluginCacheEntry">
		<comment>
			<description>Used by the &lt;code&gt;DockableWindowManager&lt;/code&gt; and
 &lt;code&gt;ServiceManager&lt;/code&gt; to handle caching.</description>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-1214061532" visibility="public" name="MAGIC" constexpr="-1214061532" fulltype="int" type="int" />
			<field visibility="public" name="plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
			<field visibility="public" name="modTime" fulltype="long" type="long" />
			<field visibility="public" name="classes" fulltype="java.lang.String[]" type="String" />
			<field visibility="public" name="resources" fulltype="java.lang.String[]" type="String" />
			<field visibility="public" name="actionsURI" fulltype="java.net.URL" type="URL" />
			<field visibility="public" name="cachedActionNames" fulltype="java.lang.String[]" type="String" />
			<field visibility="public" name="cachedActionToggleFlags" fulltype="boolean[]" type="boolean" />
			<field visibility="public" name="browserActionsURI" fulltype="java.net.URL" type="URL" />
			<field visibility="public" name="cachedBrowserActionNames" fulltype="java.lang.String[]" type="String" />
			<field visibility="public" name="cachedBrowserActionToggleFlags" fulltype="boolean[]" type="boolean" />
			<field visibility="public" name="dockablesURI" fulltype="java.net.URL" type="URL" />
			<field visibility="public" name="cachedDockableNames" fulltype="java.lang.String[]" type="String" />
			<field visibility="public" name="cachedDockableActionFlags" fulltype="boolean[]" type="boolean" />
			<field visibility="public" name="cachedDockableMovableFlags" fulltype="boolean[]" type="boolean" />
			<field visibility="public" name="servicesURI" fulltype="java.net.URL" type="URL" />
			<field visibility="public" name="cachedProperties" fulltype="java.util.Properties" type="Properties" />
			<field visibility="public" name="localizationProperties" fulltype="java.util.Map" type="Map" />
			<field visibility="public" name="pluginClass" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="PluginJAR.PluginCacheEntry" />
			<method visibility="public" name="read" fulltype="boolean" type="boolean">
				<params>
					<param name="din" fulltype="java.io.DataInputStream" type="DataInputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<params>
					<param name="dout" fulltype="java.io.DataOutputStream" type="DataOutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.pluginmgr" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.pluginmgr.ManagePanel" type="ManagePanel">
		<comment>
			<description>The ManagePanel is the JPanel that shows the installed plugins.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ManagePanel">
				<params>
					<param name="window" fulltype="org.gjt.sp.jedit.pluginmgr.PluginManager" type="PluginManager" />
				</params>
			</constructor>
			<method visibility="public" name="update" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.pluginmgr" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.pluginmgr.MirrorList" type="MirrorList">
		<comment>
			<attribute name="@version">
				<description>$Id: MirrorList.java 17940 2010-06-01 13:27:24Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="MirrorList">
				<params>
					<param name="download" fulltype="boolean" type="boolean" />
					<param name="observer" fulltype="org.gjt.sp.util.ProgressObserver" type="ProgressObserver" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</constructor>
			<method visibility="public" name="getXml" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getMirrors" fulltype="java.util.List" type="List" />
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.pluginmgr" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.pluginmgr.MirrorList.Mirror" type="MirrorList.Mirror">
			<fields>
				<field final="true" static="true" const="NONE" visibility="public" name="NONE" constexpr="&quot;NONE&quot;" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="id" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="description" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="location" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="country" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="continent" fulltype="java.lang.String" type="String" />
			</fields>
			<methods>
				<constructor visibility="public" name="MirrorList.Mirror" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.pluginmgr" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.pluginmgr.MirrorList.Mirror" type="MirrorList.Mirror">
		<fields>
			<field final="true" static="true" const="NONE" visibility="public" name="NONE" constexpr="&quot;NONE&quot;" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="id" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="description" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="location" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="country" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="continent" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="MirrorList.Mirror" />
		</methods>
	</jelclass>
	<jelclass superclass="JFrame" visibility="public" package="org.gjt.sp.jedit.pluginmgr" serializable="true" superclassfulltype="javax.swing.JFrame" fulltype="org.gjt.sp.jedit.pluginmgr.PluginManager" type="PluginManager">
		<comment>
			<attribute name="@version">
				<description>$Id: PluginManager.java 21092 2012-02-08 09:48:48Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="plugin-manager.pluginset.path" visibility="public" name="PROPERTY_PLUGINSET" constexpr="&quot;plugin-manager.pluginset.path&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<method static="true" visibility="public" name="getInstance" fulltype="org.gjt.sp.jedit.pluginmgr.PluginManager" type="PluginManager">
				<comment>
					<description>Returns the currently visible plugin manager window, or null.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="dispose" fulltype="void" type="void" />
			<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
				<params>
					<param name="message" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
				</params>
			</method>
			<method visibility="public" name="handlePluginUpdate" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.PluginUpdate" type="PluginUpdate" />
				</params>
			</method>
			<method static="true" visibility="public" name="showPluginManager" fulltype="void" type="void">
				<params>
					<param name="parent" fulltype="java.awt.Frame" type="Frame" />
				</params>
			</method>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
			<method visibility="public" name="processKeyEvents" fulltype="void" type="void">
				<params>
					<param name="ke" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.print" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.print.BufferPrinter1_3" type="BufferPrinter1_3">
		<methods>
			<constructor visibility="public" name="BufferPrinter1_3" />
			<method static="true" visibility="public" name="pageSetup" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="print" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getPageFormat" fulltype="java.awt.print.PageFormat" type="PageFormat" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.print" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.print.BufferPrinter1_4" type="BufferPrinter1_4">
		<methods>
			<constructor visibility="public" name="BufferPrinter1_4" />
			<method static="true" visibility="public" name="pageSetup" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="print" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getPageFormat" fulltype="java.awt.print.PageFormat" type="PageFormat" />
		</methods>
	</jelclass>
	<jelclass superclass="URLStreamHandler" visibility="public" package="org.gjt.sp.jedit.proto.jeditresource" superclassfulltype="java.net.URLStreamHandler" fulltype="org.gjt.sp.jedit.proto.jeditresource.Handler" type="Handler">
		<comment>
			<description>One somewhat unconventional requirement of URLStreamHandler classes 
 is that the class name and even the package name have certain restrictions. 
 You must name the handler class Handler, as in the previous example. 
 The package name must include the protocol name as the last dot-separated token.
 This way, the Handler is automatically created in a lazy-fashion by the default
 URLStreamHandlerFactory.

 see http://java.sun.com/developer/onlineTraining/protocolhandlers/
 
 You should never need to create an instance of this class directly.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Handler" />
			<method visibility="public" name="openConnection" fulltype="java.net.URLConnection" type="URLConnection">
				<params>
					<param name="url" fulltype="java.net.URL" type="URL" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="URLConnection" visibility="public" package="org.gjt.sp.jedit.proto.jeditresource" superclassfulltype="java.net.URLConnection" fulltype="org.gjt.sp.jedit.proto.jeditresource.PluginResURLConnection" type="PluginResURLConnection">
		<methods>
			<constructor visibility="public" name="PluginResURLConnection">
				<params>
					<param name="url" fulltype="java.net.URL" type="URL" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</constructor>
			<method visibility="public" name="connect" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getInputStream" fulltype="java.io.InputStream" type="InputStream">
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getHeaderField" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Registers" type="Registers">
		<comment>
			<description>jEdit&apos;s registers are an extension of the clipboard metaphor.&lt;p&gt;

 A {@link Registers.Register} is string of text indexed by a
 single character. Typically the text is taken from selected buffer text
 and the index character is a keyboard character selected by the user.&lt;p&gt;

 This class defines a number of static methods
 that give each register the properties of a virtual clipboard.&lt;p&gt;

 Two classes implement the {@link Registers.Register} interface. A
 {@link Registers.ClipboardRegister} is tied to the contents of the
 system clipboard. jEdit assigns a
 {@link Registers.ClipboardRegister} to the register indexed under
 the character &lt;code&gt;$&lt;/code&gt;. A
 {@link Registers.DefaultRegister} is created for registers assigned
 by the user. In addition, jEdit assigns &lt;code&gt;%&lt;/code&gt; to
 the last text segment selected in the text area. On Windows this is a
 {@link Registers.DefaultRegister}, on Unix under Java 2 version 1.4, a
 {@link Registers.ClipboardRegister}.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Registers.java 20594 2011-12-09 17:53:47Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="copy" fulltype="void" type="void">
				<comment>
					<description>Copies the text selected in the text area into the specified register.
 This will replace the existing contents of the designated register.</description>
					<attribute name="@param">
						<description>textArea The text area</description>
					</attribute>
					<attribute name="@param">
						<description>register The register</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="The text area" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="register" comment="The register" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="cut" fulltype="void" type="void">
				<comment>
					<description>Copies the text selected in the text area into the specified
 register, and then removes it from the buffer.</description>
					<attribute name="@param">
						<description>textArea The text area</description>
					</attribute>
					<attribute name="@param">
						<description>register The register</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="The text area" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="register" comment="The register" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="append" fulltype="void" type="void">
				<comment>
					<description>Appends the text selected in the text area to the specified register,
 with a newline between the old and new text.</description>
					<attribute name="@param">
						<description>textArea The text area</description>
					</attribute>
					<attribute name="@param">
						<description>register The register</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="The text area" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="register" comment="The register" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="append" fulltype="void" type="void">
				<comment>
					<description>Appends the text selected in the text area to the specified register.</description>
					<attribute name="@param">
						<description>textArea The text area</description>
					</attribute>
					<attribute name="@param">
						<description>register The register</description>
					</attribute>
					<attribute name="@param">
						<description>separator The separator to insert between the old and new text</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="The text area" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="register" comment="The register" fulltype="char" type="char" />
					<param name="separator" comment="The separator to insert between the old and new text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="append" fulltype="void" type="void">
				<comment>
					<description>Appends the text selected in the  text area to the specified register.</description>
					<attribute name="@param">
						<description>textArea The text area</description>
					</attribute>
					<attribute name="@param">
						<description>register The register</description>
					</attribute>
					<attribute name="@param">
						<description>separator The text to insert between the old and new text</description>
					</attribute>
					<attribute name="@param">
						<description>cut Should the current selection be removed?</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="The text area" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="register" comment="The register" fulltype="char" type="char" />
					<param name="separator" comment="The text to insert between the old and new text" fulltype="java.lang.String" type="String" />
					<param name="cut" comment="Should the current selection be removed?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="paste" fulltype="void" type="void">
				<comment>
					<description>Insets the contents of the specified register into the text area.</description>
					<attribute name="@param">
						<description>textArea The text area</description>
					</attribute>
					<attribute name="@param">
						<description>register The register</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="The text area" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="register" comment="The register" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="paste" fulltype="void" type="void">
				<comment>
					<description>Insets the contents of the specified register into the text area.</description>
					<attribute name="@param">
						<description>textArea The text area</description>
					</attribute>
					<attribute name="@param">
						<description>register The register</description>
					</attribute>
					<attribute name="@param">
						<description>preferredDataFlavor the preferred dataflavor. If not available
 &lt;tt&gt;DataFlavor.stringFlavor&lt;/tt&gt; will be used</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="The text area" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="register" comment="The register" fulltype="char" type="char" />
					<param name="preferredDataFlavor" comment="the preferred dataflavor. If not available
 &lt;tt&gt;DataFlavor.stringFlavor&lt;/tt&gt; will be used" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
				</params>
			</method>
			<method static="true" visibility="public" name="paste" fulltype="void" type="void">
				<comment>
					<description>Inserts the contents of the specified register into the text area.</description>
					<attribute name="@param">
						<description>textArea The text area</description>
					</attribute>
					<attribute name="@param">
						<description>register The register</description>
					</attribute>
					<attribute name="@param">
						<description>vertical Vertical (columnar) paste</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="The text area" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="register" comment="The register" fulltype="char" type="char" />
					<param name="vertical" comment="Vertical (columnar) paste" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="paste" fulltype="void" type="void">
				<comment>
					<description>Inserts the contents of the specified register into the text area.</description>
					<attribute name="@param">
						<description>textArea The text area</description>
					</attribute>
					<attribute name="@param">
						<description>register The register</description>
					</attribute>
					<attribute name="@param">
						<description>vertical Vertical (columnar) paste</description>
					</attribute>
					<attribute name="@param">
						<description>preferredDataFlavor the preferred dataflavor. If not available
 &lt;tt&gt;DataFlavor.stringFlavor&lt;/tt&gt; will be used</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="The text area" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="register" comment="The register" fulltype="char" type="char" />
					<param name="vertical" comment="Vertical (columnar) paste" fulltype="boolean" type="boolean" />
					<param name="preferredDataFlavor" comment="the preferred dataflavor. If not available
 &lt;tt&gt;DataFlavor.stringFlavor&lt;/tt&gt; will be used" fulltype="java.awt.datatransfer.DataFlavor" type="DataFlavor" />
				</params>
			</method>
			<method static="true" visibility="public" name="getRegister" fulltype="org.gjt.sp.jedit.Registers.Register" type="Registers.Register">
				<comment>
					<description>Returns the specified register.</description>
					<attribute name="@param">
						<description>name The name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="setRegister" fulltype="void" type="void">
				<comment>
					<description>Sets the specified register.</description>
					<attribute name="@param">
						<description>name The name</description>
					</attribute>
					<attribute name="@param">
						<description>newRegister The new value</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name" fulltype="char" type="char" />
					<param name="newRegister" comment="The new value" fulltype="org.gjt.sp.jedit.Registers.Register" type="Registers.Register" />
				</params>
			</method>
			<method static="true" visibility="public" name="setRegister" fulltype="void" type="void">
				<comment>
					<description>Sets the specified register.</description>
					<attribute name="@param">
						<description>name The name</description>
					</attribute>
					<attribute name="@param">
						<description>value The new value</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name" fulltype="char" type="char" />
					<param name="value" comment="The new value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="setRegister" fulltype="void" type="void">
				<comment>
					<description>Sets the specified register.</description>
					<attribute name="@param">
						<description>name The name</description>
					</attribute>
					<attribute name="@param">
						<description>transferable the transferable</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name" fulltype="char" type="char" />
					<param name="transferable" comment="the transferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
				</params>
			</method>
			<method static="true" visibility="public" name="clearRegister" fulltype="void" type="void">
				<comment>
					<description>Sets the value of the specified register to &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>name The register name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The register name" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="getRegisters" fulltype="org.gjt.sp.jedit.Registers.Register[]" type="Registers.Register">
				<comment>
					<description>Returns an array of all available registers. Some of the elements
 of this array might be &lt;code&gt;null&lt;/code&gt;.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getRegisterNameString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string of all defined registers, used by the status bar
 (eg, &quot;a b $ % ^&quot;).</description>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="saveRegisters" fulltype="void" type="void" />
			<method static="true" visibility="public" name="setListener" fulltype="void" type="void">
				<params>
					<param name="listener" fulltype="org.gjt.sp.jedit.RegistersListener" type="RegistersListener" />
				</params>
			</method>
			<method static="true" visibility="public" name="setSaver" fulltype="void" type="void">
				<params>
					<param name="saver" fulltype="org.gjt.sp.jedit.RegisterSaver" type="RegisterSaver" />
				</params>
			</method>
			<method static="true" visibility="public" name="isLoading" fulltype="boolean" type="boolean" />
			<method static="true" visibility="public" name="setLoading" fulltype="void" type="void">
				<params>
					<param name="loading" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="protected" name="debugListDataFlavors" fulltype="void" type="void">
				<params>
					<param name="transferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
				</params>
			</method>
		</methods>
		<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit" interface="true" fulltype="org.gjt.sp.jedit.Registers.Register" type="Registers.Register">
			<comment>
				<description>A register.</description>
			</comment>
			<methods>
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
					<comment>
						<description>Converts to a string.</description>
					</comment>
				</method>
				<method visibility="public" name="setValue" fulltype="void" type="void">
					<comment>
						<description>Sets the register contents.</description>
						<attribute name="@deprecated">
							<description>use {@link #setTransferable(java.awt.datatransfer.Transferable)}
 instead, for example
 &lt;code&gt;setTransferable(new StringSelection(&quot;&quot;))&lt;/code&gt;</description>
						</attribute>
					</comment>
					<params>
						<param name="value" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="getTransferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
				<method visibility="public" name="setTransferable" fulltype="void" type="void">
					<params>
						<param name="transferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Registers.ClipboardRegister" type="Registers.ClipboardRegister">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.Registers.Register" type="Registers.Register" />
			</implements>
			<comment>
				<description>A clipboard register. Register &quot;$&quot; should always be an
 instance of this.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="Registers.ClipboardRegister">
					<params>
						<param name="clipboard" fulltype="java.awt.datatransfer.Clipboard" type="Clipboard" />
					</params>
				</constructor>
				<method visibility="public" name="setValue" fulltype="void" type="void">
					<comment>
						<description>Sets the clipboard contents.</description>
					</comment>
					<params>
						<param name="value" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
					<comment>
						<description>Returns the clipboard contents.</description>
					</comment>
				</method>
				<method visibility="public" name="getTransferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
				<method visibility="public" name="setTransferable" fulltype="void" type="void">
					<params>
						<param name="transferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit" interface="true" fulltype="org.gjt.sp.jedit.Registers.Register" type="Registers.Register">
		<comment>
			<description>A register.</description>
		</comment>
		<methods>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts to a string.</description>
				</comment>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Sets the register contents.</description>
					<attribute name="@deprecated">
						<description>use {@link #setTransferable(java.awt.datatransfer.Transferable)}
 instead, for example
 &lt;code&gt;setTransferable(new StringSelection(&quot;&quot;))&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getTransferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
			<method visibility="public" name="setTransferable" fulltype="void" type="void">
				<params>
					<param name="transferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.Registers.ClipboardRegister" type="Registers.ClipboardRegister">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.Registers.Register" type="Registers.Register" />
		</implements>
		<comment>
			<description>A clipboard register. Register &quot;$&quot; should always be an
 instance of this.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Registers.ClipboardRegister">
				<params>
					<param name="clipboard" fulltype="java.awt.datatransfer.Clipboard" type="Clipboard" />
				</params>
			</constructor>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Sets the clipboard contents.</description>
				</comment>
				<params>
					<param name="value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the clipboard contents.</description>
				</comment>
			</method>
			<method visibility="public" name="getTransferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
			<method visibility="public" name="setTransferable" fulltype="void" type="void">
				<params>
					<param name="transferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit" interface="true" fulltype="org.gjt.sp.jedit.RegisterSaver" type="RegisterSaver">
		<comment>
			<description>An interface to delegate save/load operations of registers.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FoldHandler.java 5568 2006-07-10 20:52:23Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="loadRegisters" fulltype="void" type="void" />
			<method visibility="public" name="saveRegisters" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit" interface="true" fulltype="org.gjt.sp.jedit.RegistersListener" type="RegistersListener">
		<comment>
			<description>An interface to listen some events about registers.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FoldHandler.java 5568 2006-07-10 20:52:23Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="registerChanged" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="char" type="char" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="BufferListSet" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="org.gjt.sp.jedit.search.BufferListSet" fulltype="org.gjt.sp.jedit.search.AllBufferSet" type="AllBufferSet">
		<comment>
			<description>A file set for searching all open buffers.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: AllBufferSet.java 15834 2009-08-01 05:35:05Z shlomy $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="AllBufferSet">
				<comment>
					<description>Creates a new all buffer set.</description>
					<attribute name="@param">
						<description>glob The filename glob</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="glob" comment="The filename glob" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getFileFilter" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the filename filter.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCode" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the BeanShell code that will recreate this file set.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="_getFiles" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="SearchMatcher" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="org.gjt.sp.jedit.search.SearchMatcher" fulltype="org.gjt.sp.jedit.search.BoyerMooreSearchMatcher" type="BoyerMooreSearchMatcher">
		<comment>
			<description>Implements literal search using the Boyer-Moore algorithm.</description>
			<attribute name="@version">
				<description>$Id: BoyerMooreSearchMatcher.java 19386 2011-02-24 11:06:57Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BoyerMooreSearchMatcher">
				<comment>
					<description>Creates a new string literal matcher.</description>
					<attribute name="@param">
						<description>pattern the search pattern</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreCase &lt;code&gt;true&lt;/code&gt; if you want to ignore case</description>
					</attribute>
				</comment>
				<params>
					<param name="pattern" comment="the search pattern" fulltype="java.lang.String" type="String" />
					<param name="ignoreCase" comment="&lt;code&gt;true&lt;/code&gt; if you want to ignore case" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="BoyerMooreSearchMatcher">
				<comment>
					<description>Creates a new string literal matcher.</description>
					<attribute name="@param">
						<description>pattern the search pattern</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreCase &lt;code&gt;true&lt;/code&gt; if you want to ignore case</description>
					</attribute>
					<attribute name="@param">
						<description>wholeWord &lt;code&gt;true&lt;/code&gt; to search for whole word only</description>
					</attribute>
					<attribute name="@since">
						<description>4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="pattern" comment="the search pattern" fulltype="java.lang.String" type="String" />
					<param name="ignoreCase" comment="&lt;code&gt;true&lt;/code&gt; if you want to ignore case" fulltype="boolean" type="boolean" />
					<param name="wholeWord" comment="&lt;code&gt;true&lt;/code&gt; to search for whole word only" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="nextMatch" fulltype="org.gjt.sp.jedit.search.SearchMatcher.Match" type="SearchMatcher.Match">
				<params>
					<param name="text" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" fulltype="boolean" type="boolean" />
					<param name="end" fulltype="boolean" type="boolean" />
					<param name="firstTime" fulltype="boolean" type="boolean" />
					<param name="reverse" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="match" fulltype="int" type="int">
				<comment>
					<description>a good introduction to the Boyer-Moore fast string matching
  algorithm may be found on Moore&apos;s website at:

   http://www.cs.utexas.edu/users/moore/best-ideas/string-searching/</description>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="text" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="reverse" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.BufferListSet" type="BufferListSet">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.search.SearchFileSet" type="SearchFileSet" />
		</implements>
		<comment>
			<description>A file set for searching a user-specified list of buffers.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: BufferListSet.java 21027 2012-01-30 21:41:40Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="BufferListSet" />
			<method synchronized="true" visibility="public" name="getFirstFile" fulltype="java.lang.String" type="String">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="getLastFile" fulltype="java.lang.String" type="String">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="getNextFile" fulltype="java.lang.String" type="String">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="getPrevFile" fulltype="java.lang.String" type="String">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="getFiles" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="getFileCount" fulltype="int" type="int">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getCode" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="invalidateCachedList" fulltype="void" type="void" />
			<method abstract="true" visibility="protected" name="_getFiles" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Note that the paths in the returned list must be
 fully canonicalized.</description>
				</comment>
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.CurrentBufferSet" type="CurrentBufferSet">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.search.SearchFileSet" type="SearchFileSet" />
		</implements>
		<comment>
			<description>A file set for searching the current buffer.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: CurrentBufferSet.java 20610 2011-12-11 15:46:35Z evanpw $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="CurrentBufferSet" />
			<method visibility="public" name="getFirstFile" fulltype="java.lang.String" type="String">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getLastFile" fulltype="java.lang.String" type="String">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getNextFile" fulltype="java.lang.String" type="String">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="file" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getPrevFile" fulltype="java.lang.String" type="String">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="file" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFiles" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getFileCount" fulltype="int" type="int">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getCode" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="BufferListSet" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="org.gjt.sp.jedit.search.BufferListSet" fulltype="org.gjt.sp.jedit.search.DirectoryListSet" type="DirectoryListSet">
		<comment>
			<description>Recursive directory search.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DirectoryListSet.java 16365 2009-10-20 05:13:52Z vanza $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="DirectoryListSet">
				<params>
					<param name="directory" fulltype="java.lang.String" type="String" />
					<param name="glob" fulltype="java.lang.String" type="String" />
					<param name="recurse" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="getDirectory" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setDirectory" fulltype="void" type="void">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="directory" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFileFilter" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setFileFilter" fulltype="void" type="void">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="glob" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="isRecursive" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setRecursive" fulltype="void" type="void">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="recurse" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getCode" fulltype="java.lang.String" type="String" />
			<method visibility="protected" name="_getFiles" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.HyperSearchFileNode" type="HyperSearchFileNode">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.search.HyperSearchNode" type="HyperSearchNode" />
		</implements>
		<comment>
			<description>HyperSearch results window.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HyperSearchFileNode.java 13284 2008-08-12 18:41:18Z k_satoda $</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="public" name="path" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="showFullPath" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="public" name="HyperSearchFileNode">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getBuffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="goTo" fulltype="void" type="void">
				<params>
					<param name="editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="compareObj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getCount" returncomment="the result count" fulltype="int" type="int">
				<comment>
					<description>Returns the result count.</description>
					<attribute name="@return">
						<description>the result count</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre9</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setCount" fulltype="void" type="void">
				<comment>
					<description>Set the result count.</description>
					<attribute name="@param">
						<description>count the result count</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="count" comment="the result count" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.HyperSearchFolderNode" type="HyperSearchFolderNode">
		<methods>
			<constructor visibility="public" name="HyperSearchFolderNode">
				<params>
					<param name="nodeFile" fulltype="java.io.File" type="File" />
					<param name="showFullPath" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="getNodeFile" fulltype="java.io.File" type="File" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.search" interface="true" fulltype="org.gjt.sp.jedit.search.HyperSearchNode" type="HyperSearchNode">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getBuffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="goTo" fulltype="void" type="void">
				<params>
					<param name="editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.HyperSearchOperationNode" type="HyperSearchOperationNode">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HyperSearchOperationNode.java 19386 2011-02-24 11:06:57Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="HyperSearchOperationNode">
				<params>
					<param name="searchString" fulltype="java.lang.String" type="String" />
					<param name="searchMatcher" fulltype="org.gjt.sp.jedit.search.SearchMatcher" type="SearchMatcher" />
				</params>
			</constructor>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="isTreeViewDisplayed" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setTreeViewDisplayed" fulltype="void" type="void">
				<params>
					<param name="treeViewDisplayed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="restoreFlatNodes" fulltype="void" type="void">
				<params>
					<param name="resultTree" fulltype="javax.swing.JTree" type="JTree" />
					<param name="operNode" fulltype="javax.swing.tree.DefaultMutableTreeNode" type="DefaultMutableTreeNode" />
				</params>
			</method>
			<method visibility="public" name="cacheResultNodes" fulltype="void" type="void">
				<params>
					<param name="operNode" fulltype="javax.swing.tree.DefaultMutableTreeNode" type="DefaultMutableTreeNode" />
				</params>
			</method>
			<method static="true" visibility="public" name="removeNodeFromCache" fulltype="void" type="void">
				<params>
					<param name="mnode" fulltype="javax.swing.tree.MutableTreeNode" type="MutableTreeNode" />
				</params>
			</method>
			<method visibility="public" name="insertTreeNodes" fulltype="void" type="void">
				<params>
					<param name="resultTree" fulltype="javax.swing.JTree" type="JTree" />
					<param name="operNode" fulltype="javax.swing.tree.DefaultMutableTreeNode" type="DefaultMutableTreeNode" />
				</params>
			</method>
			<method visibility="public" name="getSearchMatcher" fulltype="org.gjt.sp.jedit.search.SearchMatcher" type="SearchMatcher" />
			<method visibility="public" name="getSearchString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.HyperSearchResult" type="HyperSearchResult">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.search.HyperSearchNode" type="HyperSearchNode" />
		</implements>
		<comment>
			<description>A set of occurrences of the search string on a given line in a buffer.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="public" name="path" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
			<field visibility="public" name="line" fulltype="int" type="int" />
			<field visibility="public" name="str" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="occur" fulltype="org.gjt.sp.jedit.search.HyperSearchResult.Occur" type="HyperSearchResult.Occur" />
			<field visibility="public" name="occurCount" fulltype="int" type="int" />
		</fields>
		<methods>
			<method visibility="public" name="getBuffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getSelection" fulltype="org.gjt.sp.jedit.textarea.Selection[]" type="Selection">
				<comment>
					<description>Returns an array of selection objects pointing to the occurrences
 of the search term on the current line. The buffer must be opened
 first.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="goTo" fulltype="void" type="void">
				<params>
					<param name="editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="compareObj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.HyperSearchResult.Occur" type="HyperSearchResult.Occur">
			<fields>
				<field visibility="public" name="start" fulltype="int" type="int" />
				<field visibility="public" name="end" fulltype="int" type="int" />
				<field visibility="public" name="startPos" fulltype="javax.swing.text.Position" type="Position" />
				<field visibility="public" name="endPos" fulltype="javax.swing.text.Position" type="Position" />
				<field visibility="public" name="next" fulltype="org.gjt.sp.jedit.search.HyperSearchResult.Occur" type="HyperSearchResult.Occur" />
			</fields>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.HyperSearchResult.GotoDelayed" type="HyperSearchResult.GotoDelayed">
			<implements>
				<interface fulltype="java.lang.Runnable" type="Runnable" />
			</implements>
			<methods>
				<method visibility="public" name="run" fulltype="void" type="void" />
				<method visibility="public" name="handleBufferUpdate" fulltype="void" type="void">
					<params>
						<param name="msg" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.HyperSearchResult.Occur" type="HyperSearchResult.Occur">
		<fields>
			<field visibility="public" name="start" fulltype="int" type="int" />
			<field visibility="public" name="end" fulltype="int" type="int" />
			<field visibility="public" name="startPos" fulltype="javax.swing.text.Position" type="Position" />
			<field visibility="public" name="endPos" fulltype="javax.swing.text.Position" type="Position" />
			<field visibility="public" name="next" fulltype="org.gjt.sp.jedit.search.HyperSearchResult.Occur" type="HyperSearchResult.Occur" />
		</fields>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.HyperSearchResult.GotoDelayed" type="HyperSearchResult.GotoDelayed">
		<implements>
			<interface fulltype="java.lang.Runnable" type="Runnable" />
		</implements>
		<methods>
			<method visibility="public" name="run" fulltype="void" type="void" />
			<method visibility="public" name="handleBufferUpdate" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JPanel" visibility="public" package="org.gjt.sp.jedit.search" serializable="true" superclassfulltype="javax.swing.JPanel" fulltype="org.gjt.sp.jedit.search.HyperSearchResults" type="HyperSearchResults">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.gui.DefaultFocusComponent" type="DefaultFocusComponent" />
		</implements>
		<comment>
			<description>HyperSearch results window.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: HyperSearchResults.java 20577 2011-12-08 09:19:23Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="hypersearch-results" visibility="public" name="NAME" constexpr="&quot;hypersearch-results&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="hypersearch.results.highlight" visibility="public" name="HIGHLIGHT_PROP" constexpr="&quot;hypersearch.results.highlight&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="0" visibility="public" name="M_OPEN" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="M_OPEN_NEW_VIEW" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="M_OPEN_NEW_PLAIN_VIEW" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="3" visibility="public" name="M_OPEN_NEW_SPLIT" constexpr="3" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="HyperSearchResults">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<method visibility="public" name="focusOnDefaultComponent" fulltype="void" type="void" />
			<method visibility="public" name="addNotify" fulltype="void" type="void" />
			<method visibility="public" name="removeNotify" fulltype="void" type="void" />
			<method visibility="public" name="handleBufferUpdate" fulltype="void" type="void">
				<params>
					<param name="bmsg" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
				</params>
			</method>
			<method static="true" visibility="public" name="traverseNodes" fulltype="boolean" type="boolean">
				<params>
					<param name="node" fulltype="javax.swing.tree.DefaultMutableTreeNode" type="DefaultMutableTreeNode" />
					<param name="callbackInterface" fulltype="org.gjt.sp.jedit.search.HyperSearchTreeNodeCallback" type="HyperSearchTreeNodeCallback" />
				</params>
			</method>
			<method visibility="public" name="getTreeModel" fulltype="javax.swing.tree.DefaultTreeModel" type="DefaultTreeModel" />
			<method visibility="public" name="getTree" returncomment="the result tree" fulltype="javax.swing.JTree" type="JTree">
				<comment>
					<description>Returns the result tree.</description>
					<attribute name="@return">
						<description>the result tree</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre9</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="searchStarted" fulltype="void" type="void" />
			<method visibility="public" name="setSearchStatus" fulltype="void" type="void">
				<params>
					<param name="status" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="searchFailed" fulltype="void" type="void" />
			<method visibility="public" name="searchDone" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>searchNode the result node</description>
					</attribute>
					<attribute name="@param">
						<description>selectNode the node that must be selected, or null</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre12</description>
					</attribute>
				</comment>
				<params>
					<param name="searchNode" comment="the result node" fulltype="javax.swing.tree.DefaultMutableTreeNode" type="DefaultMutableTreeNode" />
					<param name="selectNode" comment="the node that must be selected, or null" fulltype="javax.swing.tree.DefaultMutableTreeNode" type="DefaultMutableTreeNode" />
				</params>
			</method>
			<method visibility="public" name="searchDone" fulltype="void" type="void">
				<params>
					<param name="searchNode" fulltype="javax.swing.tree.DefaultMutableTreeNode" type="DefaultMutableTreeNode" />
				</params>
			</method>
			<method visibility="public" name="expandAllNodes" fulltype="void" type="void">
				<params>
					<param name="node" fulltype="javax.swing.tree.DefaultMutableTreeNode" type="DefaultMutableTreeNode" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.HyperSearchResults.ActionHandler" type="HyperSearchResults.ActionHandler">
			<implements>
				<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
			</implements>
			<methods>
				<constructor visibility="public" name="HyperSearchResults.ActionHandler" />
				<method visibility="public" name="actionPerformed" fulltype="void" type="void">
					<params>
						<param name="evt" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.HyperSearchResults.ActionHandler" type="HyperSearchResults.ActionHandler">
		<implements>
			<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
		</implements>
		<methods>
			<constructor visibility="public" name="HyperSearchResults.ActionHandler" />
			<method visibility="public" name="actionPerformed" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.search" interface="true" fulltype="org.gjt.sp.jedit.search.HyperSearchTreeNodeCallback" type="HyperSearchTreeNodeCallback">
		<comment>
			<attribute name="@author">
				<description>root

 TODO To change the template for this generated type comment go to
 Window - Preferences - Java - Code Style - Code Templates</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="processNode" fulltype="boolean" type="boolean">
				<params>
					<param name="node" fulltype="javax.swing.tree.DefaultMutableTreeNode" type="DefaultMutableTreeNode" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="SearchMatcher" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="org.gjt.sp.jedit.search.SearchMatcher" fulltype="org.gjt.sp.jedit.search.PatternSearchMatcher" type="PatternSearchMatcher">
		<comment>
			<description>A regular expression string matcher using java.util.regex.</description>
			<attribute name="@see">
				<description>java.util.regex.Pattern</description>
			</attribute>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: PatternSearchMatcher.java 19386 2011-02-24 11:06:57Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre5</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PatternSearchMatcher">
				<comment>
					<description>Creates a new regular expression string matcher.</description>
					<attribute name="@see">
						<description>java.util.regex.Pattern</description>
					</attribute>
					<attribute name="@param">
						<description>search the search pattern</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreCase &lt;code&gt;true&lt;/code&gt; if you want to ignore case</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="search" comment="the search pattern" fulltype="java.lang.String" type="String" />
					<param name="ignoreCase" comment="&lt;code&gt;true&lt;/code&gt; if you want to ignore case" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="PatternSearchMatcher">
				<comment>
					<description>Creates a new regular expression string matcher.</description>
					<attribute name="@see">
						<description>java.util.regex.Pattern</description>
					</attribute>
					<attribute name="@param">
						<description>re the compiled regex</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreCase &lt;code&gt;true&lt;/code&gt; if you want to ignore case</description>
					</attribute>
					<attribute name="@param">
						<description>wholeWord &lt;code&gt;true&lt;/code&gt; to search for whole word only</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="re" comment="the compiled regex" fulltype="java.util.regex.Pattern" type="Pattern" />
					<param name="ignoreCase" comment="&lt;code&gt;true&lt;/code&gt; if you want to ignore case" fulltype="boolean" type="boolean" />
					<param name="wholeWord" comment="&lt;code&gt;true&lt;/code&gt; to search for whole word only" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="PatternSearchMatcher">
				<comment>
					<description>Creates a new regular expression already compiled.</description>
					<attribute name="@see">
						<description>java.util.regex.Pattern</description>
					</attribute>
					<attribute name="@param">
						<description>re the compiled regex</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreCase &lt;code&gt;true&lt;/code&gt; if you want to ignore case</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="re" comment="the compiled regex" fulltype="java.util.regex.Pattern" type="Pattern" />
					<param name="ignoreCase" comment="&lt;code&gt;true&lt;/code&gt; if you want to ignore case" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="nextMatch" fulltype="org.gjt.sp.jedit.search.SearchMatcher.Match" type="SearchMatcher.Match">
				<comment>
					<description>{@inheritDoc}
 &lt;p&gt;Reverse regex search is done by searching from the beginning to
 just prior to the current match, so will be inefficient for large
 buffers.&lt;/p&gt;</description>
				</comment>
				<params>
					<param name="text" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" fulltype="boolean" type="boolean" />
					<param name="end" fulltype="boolean" type="boolean" />
					<param name="firstTime" fulltype="boolean" type="boolean" />
					<param name="reverse" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.SearchAndReplace" type="SearchAndReplace">
		<comment>
			<description>Class that implements regular expression and literal search within
 jEdit buffers.&lt;p&gt;

 There are two main groups of methods in this class:
 &lt;ul&gt;
 &lt;li&gt;Property accessors - for changing search and replace settings.&lt;/li&gt;
 &lt;li&gt;Actions - for performing search and replace.&lt;/li&gt;
 &lt;/ul&gt;

 The &quot;HyperSearch&quot; and &quot;Keep dialog&quot; features, as reflected in
 checkbox options in the search dialog, are not handled from within
 this class. If you wish to have these options set before the search dialog
 appears, make a prior call to either or both of the following:

 &lt;pre&gt; jEdit.setBooleanProperty(&quot;search.hypersearch.toggle&quot;,true);
 jEdit.setBooleanProperty(&quot;search.keepDialog.toggle&quot;,true);&lt;/pre&gt;

 If you are not using the dialog to undertake a search or replace, you may
 call any of the search and replace methods (including
 {@link #hyperSearch(View)}) without concern for the value of these
 properties.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: SearchAndReplace.java 20610 2011-12-11 15:46:35Z evanpw $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SearchAndReplace" />
			<method static="true" visibility="public" name="setSearchString" fulltype="void" type="void">
				<comment>
					<description>Sets the current search string.</description>
					<attribute name="@param">
						<description>search The new search string</description>
					</attribute>
				</comment>
				<params>
					<param name="search" comment="The new search string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getSearchString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the current search string.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="setReplaceString" fulltype="void" type="void">
				<comment>
					<description>Sets the current replacement string.</description>
					<attribute name="@param">
						<description>replace The new replacement string</description>
					</attribute>
				</comment>
				<params>
					<param name="replace" comment="The new replacement string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getReplaceString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the current replacement string.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="setWholeWord" fulltype="void" type="void">
				<comment>
					<description>Sets the whole word flag.</description>
					<attribute name="@param">
						<description>wholeWord True if only whole words should be searched,
 false otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="wholeWord" comment="True if only whole words should be searched,
 false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="setIgnoreCase" fulltype="void" type="void">
				<comment>
					<description>Sets the ignore case flag.</description>
					<attribute name="@param">
						<description>ignoreCase True if searches should be case insensitive,
 false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="ignoreCase" comment="True if searches should be case insensitive,
 false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getWholeWord" returncomment="True if only whole words should be searched,
 false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the state of the whole word flag.</description>
					<attribute name="@return">
						<description>True if only whole words should be searched,
 false otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>4.5pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getIgnoreCase" returncomment="True if searches should be case insensitive,
 false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the state of the ignore case flag.</description>
					<attribute name="@return">
						<description>True if searches should be case insensitive,
 false otherwise</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setRegexp" fulltype="void" type="void">
				<comment>
					<description>Sets the state of the regular expression flag.</description>
					<attribute name="@param">
						<description>regexp True if regular expression searches should be
 performed</description>
					</attribute>
				</comment>
				<params>
					<param name="regexp" comment="True if regular expression searches should be
 performed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getRegexp" returncomment="True if regular expression searches should be performed" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the state of the regular expression flag.</description>
					<attribute name="@return">
						<description>True if regular expression searches should be performed</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setReverseSearch" fulltype="void" type="void">
				<comment>
					<description>Determines whether a reverse search will conducted from the current
 position to the beginning of a buffer. Note that reverse search and
 regular expression search is mutually exclusive; enabling one will
 disable the other.</description>
					<attribute name="@param">
						<description>reverse True if searches should go backwards,
 false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="reverse" comment="True if searches should go backwards,
 false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getReverseSearch" returncomment="True if searches should go backwards,
 false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the state of the reverse search flag.</description>
					<attribute name="@return">
						<description>True if searches should go backwards,
 false otherwise</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setBeanShellReplace" fulltype="void" type="void">
				<comment>
					<description>Sets the state of the BeanShell replace flag.</description>
					<attribute name="@param">
						<description>beanshell True if the replace string is a BeanShell expression</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="beanshell" comment="True if the replace string is a BeanShell expression" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBeanShellReplace" returncomment="True if the replace string is a BeanShell expression" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the state of the BeanShell replace flag.</description>
					<attribute name="@return">
						<description>True if the replace string is a BeanShell expression</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setAutoWrapAround" fulltype="void" type="void">
				<comment>
					<description>Sets the state of the auto wrap around flag.</description>
					<attribute name="@param">
						<description>wrap If true, the &apos;continue search from start&apos; dialog
 will not be displayed</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="wrap" comment="If true, the &apos;continue search from start&apos; dialog
 will not be displayed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAutoWrapAround" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the state of the auto wrap around flag.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setSearchMatcher" fulltype="void" type="void">
				<comment>
					<description>Sets a custom search string matcher. Note that calling
 {@link #setSearchString(String)}, {@link #setWholeWord(boolean)},
 {@link #setIgnoreCase(boolean)}, or {@link #setRegexp(boolean)}
 will reset the matcher to the default.</description>
				</comment>
				<params>
					<param name="matcher" fulltype="org.gjt.sp.jedit.search.SearchMatcher" type="SearchMatcher" />
				</params>
			</method>
			<method static="true" visibility="public" name="getSearchMatcher" returncomment="a SearchMatcher or null if there is no search or if the matcher can match empty String" fulltype="org.gjt.sp.jedit.search.SearchMatcher" type="SearchMatcher">
				<comment>
					<description>Returns the current search string matcher.</description>
					<attribute name="@return">
						<description>a SearchMatcher or null if there is no search or if the matcher can match empty String</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if regular expression search
 is enabled, the search string or replacement string is invalid</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre7</description>
					</attribute>
				</comment>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="setSearchFileSet" fulltype="void" type="void">
				<comment>
					<description>Sets the current search file set.</description>
					<attribute name="@param">
						<description>fileset The file set to perform searches in</description>
					</attribute>
					<attribute name="@see">
						<description>AllBufferSet</description>
					</attribute>
					<attribute name="@see">
						<description>CurrentBufferSet</description>
					</attribute>
					<attribute name="@see">
						<description>DirectoryListSet</description>
					</attribute>
				</comment>
				<params>
					<param name="fileset" comment="The file set to perform searches in" fulltype="org.gjt.sp.jedit.search.SearchFileSet" type="SearchFileSet" />
				</params>
			</method>
			<method static="true" visibility="public" name="getSearchFileSet" fulltype="org.gjt.sp.jedit.search.SearchFileSet" type="SearchFileSet">
				<comment>
					<description>Returns the current search file set.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="getSmartCaseReplace" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the replacement string will assume the same case as
 each specific occurrence of the search string.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre10</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="hyperSearch" fulltype="boolean" type="boolean">
				<comment>
					<description>Performs a HyperSearch.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="hyperSearch" fulltype="boolean" type="boolean">
				<comment>
					<description>Performs a HyperSearch.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>selection If true, will only search in the current selection.
 Note that the file set must be the current buffer file set for this
 to work.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="selection" comment="If true, will only search in the current selection.
 Note that the file set must be the current buffer file set for this
 to work." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="find" returncomment="True if the operation was successful, false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Finds the next occurrence of the search string.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@return">
						<description>True if the operation was successful, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="find" fulltype="boolean" type="boolean">
				<comment>
					<description>Finds the next instance of the search string in the specified
 buffer.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>start Location where to start the search</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="start" comment="Location where to start the search" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="find" fulltype="boolean" type="boolean">
				<comment>
					<description>Finds the next instance of the search string in the specified
 buffer.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>start Location where to start the search</description>
					</attribute>
					<attribute name="@param">
						<description>firstTime See {@link SearchMatcher#nextMatch(CharSequence,boolean,boolean,boolean,boolean)}.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="start" comment="Location where to start the search" fulltype="int" type="int" />
					<param name="firstTime" comment="See {@link SearchMatcher#nextMatch(CharSequence,boolean,boolean,boolean,boolean)}." fulltype="boolean" type="boolean" />
					<param name="reverse" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="replace" returncomment="True if the operation was successful, false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Replaces the current selection with the replacement string.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@return">
						<description>True if the operation was successful, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="replace" returncomment="True if the operation was successful, false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Replaces text in the specified range with the replacement string.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>start The start offset</description>
					</attribute>
					<attribute name="@param">
						<description>end The end offset</description>
					</attribute>
					<attribute name="@return">
						<description>True if the operation was successful, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="start" comment="The start offset" fulltype="int" type="int" />
					<param name="end" comment="The end offset" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="replaceAll" returncomment="the number of modified files" fulltype="boolean" type="boolean">
				<comment>
					<description>Replaces all occurrences of the search string with the replacement
 string.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@return">
						<description>the number of modified files</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="replaceAll" returncomment="the number of modified files" fulltype="boolean" type="boolean">
				<comment>
					<description>Replaces all occurrences of the search string with the replacement
 string.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>dontOpenChangedFiles Whether to open changed files or to autosave them quietly</description>
					</attribute>
					<attribute name="@return">
						<description>the number of modified files</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="dontOpenChangedFiles" comment="Whether to open changed files or to autosave them quietly" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="escapeRegexp" returncomment="the string with escaped characters" fulltype="java.lang.String" type="String">
				<comment>
					<description>Escapes characters with special meaning in a regexp.</description>
					<attribute name="@param">
						<description>str the string to escape</description>
					</attribute>
					<attribute name="@param">
						<description>multiline Should \n be escaped?</description>
					</attribute>
					<attribute name="@return">
						<description>the string with escaped characters</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the string to escape" fulltype="java.lang.String" type="String" />
					<param name="multiline" comment="Should \n be escaped?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="load" fulltype="void" type="void">
				<comment>
					<description>Loads search and replace state from the properties.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="save" fulltype="void" type="void">
				<comment>
					<description>Saves search and replace state to the properties.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JToolBar" visibility="public" package="org.gjt.sp.jedit.search" serializable="true" superclassfulltype="javax.swing.JToolBar" fulltype="org.gjt.sp.jedit.search.SearchBar" type="SearchBar">
		<comment>
			<description>Incremental search tool bar.</description>
			<attribute name="@version">
				<description>$Id: SearchBar.java 20196 2011-11-03 16:55:44Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SearchBar">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="temp" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="getField" fulltype="org.gjt.sp.jedit.gui.HistoryTextField" type="HistoryTextField" />
			<method visibility="public" name="setHyperSearch" fulltype="void" type="void">
				<params>
					<param name="hyperSearch" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="update" fulltype="void" type="void" />
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.gjt.sp.jedit.search" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.gjt.sp.jedit.search.SearchDialog" type="SearchDialog">
		<comment>
			<description>Search and replace dialog.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: SearchDialog.java 20453 2011-11-28 20:24:27Z evanpw $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="CURRENT_BUFFER" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>Default file set.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="ALL_BUFFERS" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="DIRECTORY" constexpr="2" fulltype="int" type="int" />
		</fields>
		<methods>
			<method static="true" visibility="public" name="getSearchDialog" fulltype="org.gjt.sp.jedit.search.SearchDialog" type="SearchDialog">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="showSearchDialog" fulltype="void" type="void">
				<comment>
					<description>Displays a search and replace dialog box, reusing an existing one
 if necessary.</description>
					<attribute name="@param">
						<description>view The view</description>
					</attribute>
					<attribute name="@param">
						<description>searchString The search string</description>
					</attribute>
					<attribute name="@param">
						<description>searchIn One of CURRENT_BUFFER, ALL_BUFFERS, or DIRECTORY</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="searchString" comment="The search string" fulltype="java.lang.String" type="String" />
					<param name="searchIn" comment="One of CURRENT_BUFFER, ALL_BUFFERS, or DIRECTORY" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setSearchString" fulltype="void" type="void">
				<comment>
					<description>Sets the search string.</description>
					<attribute name="@param">
						<description>searchString The search string</description>
					</attribute>
					<attribute name="@param">
						<description>searchIn One of {@link #CURRENT_BUFFER}, {@link #ALL_BUFFERS}, or {@link #DIRECTORY}</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="searchString" comment="The search string" fulltype="java.lang.String" type="String" />
					<param name="searchIn" comment="One of {@link #CURRENT_BUFFER}, {@link #ALL_BUFFERS}, or {@link #DIRECTORY}" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="cancel" fulltype="void" type="void" />
			<method visibility="public" name="handleSearchSettingsChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.EBMessage" type="EBMessage" />
				</params>
			</method>
			<method visibility="public" name="setVisible" fulltype="void" type="void">
				<params>
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="dispose" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.search" interface="true" fulltype="org.gjt.sp.jedit.search.SearchFileSet" type="SearchFileSet">
		<comment>
			<description>An abstract interface representing a set of files.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: SearchFileSet.java 20610 2011-12-11 15:46:35Z evanpw $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getFirstFile" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the first file to search.</description>
					<attribute name="@param">
						<description>view The view performing the search</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view performing the search" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getLastFile" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the last file to search.</description>
					<attribute name="@param">
						<description>view The view performing the search</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 5.0</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view performing the search" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getNextFile" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the next file to search.</description>
					<attribute name="@param">
						<description>view The view performing the search</description>
					</attribute>
					<attribute name="@param">
						<description>path The last file searched</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view performing the search" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The last file searched" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getPrevFile" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the previous file in the set.</description>
					<attribute name="@param">
						<description>view The view performing the search</description>
					</attribute>
					<attribute name="@param">
						<description>path The last file searched</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view performing the search" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="path" comment="The last file searched" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFiles" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns all path names in this file set.</description>
					<attribute name="@param">
						<description>view The view performing the search</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="The view performing the search" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getFileCount" fulltype="int" type="int">
				<comment>
					<description>Returns the number of files in this file set.</description>
				</comment>
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="getCode" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the BeanShell code that will recreate this file set.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.SearchMatcher" type="SearchMatcher">
		<comment>
			<description>An abstract class for matching strings.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: SearchMatcher.java 19386 2011-02-24 11:06:57Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="returnValue" fulltype="org.gjt.sp.jedit.search.SearchMatcher.Match" type="SearchMatcher.Match" />
			<field visibility="protected" name="wholeWord" fulltype="boolean" type="boolean">
				<comment>
					<description>true if this SearchMatcher search for whole words only.</description>
				</comment>
			</field>
			<field visibility="protected" name="noWordSep" fulltype="java.lang.String" type="String">
				<comment>
					<description>This should contains the noWordSep property of the edit mode of your buffer.
 It contains a list of chars that should be considered as word chars</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="SearchMatcher" />
			<method abstract="true" visibility="public" name="nextMatch" returncomment="A {@link Match} object." fulltype="org.gjt.sp.jedit.search.SearchMatcher.Match" type="SearchMatcher.Match">
				<comment>
					<description>Returns the offset of the first match of the specified text
 within this matcher.</description>
					<attribute name="@param">
						<description>text The text to search in</description>
					</attribute>
					<attribute name="@param">
						<description>start True if the start of the text is the beginning of a line</description>
					</attribute>
					<attribute name="@param">
						<description>end True if the end of the text is the end of a line</description>
					</attribute>
					<attribute name="@param">
						<description>firstTime If false and the search string matched at the start
 offset with length zero, automatically find next match</description>
					</attribute>
					<attribute name="@param">
						<description>reverse If true, searching will be performed in a backward
 direction.</description>
					</attribute>
					<attribute name="@return">
						<description>A {@link Match} object.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="text" comment="The text to search in" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" comment="True if the start of the text is the beginning of a line" fulltype="boolean" type="boolean" />
					<param name="end" comment="True if the end of the text is the end of a line" fulltype="boolean" type="boolean" />
					<param name="firstTime" comment="If false and the search string matched at the start
 offset with length zero, automatically find next match" fulltype="boolean" type="boolean" />
					<param name="reverse" comment="If true, searching will be performed in a backward
 direction." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setNoWordSep" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>noWordSep the chars that are considered as word chars for this search</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="noWordSep" comment="the chars that are considered as word chars for this search" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="isWholeWord" returncomment="true if the word is a whole word" fulltype="boolean" type="boolean">
				<comment>
					<description>Check if the result is a whole word</description>
					<attribute name="@param">
						<description>text the full text search</description>
					</attribute>
					<attribute name="@param">
						<description>start the start match</description>
					</attribute>
					<attribute name="@param">
						<description>end the end match</description>
					</attribute>
					<attribute name="@return">
						<description>true if the word is a whole word</description>
					</attribute>
				</comment>
				<params>
					<param name="text" comment="the full text search" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" comment="the start match" fulltype="int" type="int" />
					<param name="end" comment="the end match" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.SearchMatcher.Match" type="SearchMatcher.Match">
			<fields>
				<field visibility="public" name="start" fulltype="int" type="int" />
				<field visibility="public" name="end" fulltype="int" type="int" />
				<field visibility="public" name="substitutions" fulltype="java.lang.String[]" type="String" />
			</fields>
			<methods>
				<constructor visibility="public" name="SearchMatcher.Match" />
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.search" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.search.SearchMatcher.Match" type="SearchMatcher.Match">
		<fields>
			<field visibility="public" name="start" fulltype="int" type="int" />
			<field visibility="public" name="end" fulltype="int" type="int" />
			<field visibility="public" name="substitutions" fulltype="java.lang.String[]" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="SearchMatcher.Match" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.ServiceManager" type="ServiceManager">
		<comment>
			<description>A generic way for plugins (and core) to provide various API extensions.&lt;p&gt;

 Services are loaded from files named &lt;code&gt;services.xml&lt;/code&gt; inside the
 plugin JAR. A service definition file has the following form:

 &lt;pre&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;!DOCTYPE SERVICES SYSTEM &quot;services.dtd&quot;&amp;gt;
&amp;lt;SERVICES&amp;gt;
    &amp;lt;SERVICE NAME=&quot;service name&quot; CLASS=&quot;fully qualified class name&quot;&amp;gt;
        // BeanShell code evaluated when the sevice is first activated
    &amp;lt;/SERVICE&amp;gt;
&amp;lt;/SERVICES&amp;gt;&lt;/pre&gt;

 The following elements are valid:

 &lt;ul&gt;
 &lt;li&gt;
 &lt;code&gt;SERVICES&lt;/code&gt; is the top-level element and refers
 to the set of services offered by the plugin.
 &lt;/li&gt;
 &lt;li&gt;
 A &lt;code&gt;SERVICE&lt;/code&gt; contains the factory method for this
 service singleton. The ServiceManager manages named singletons
 created from these factory methods.
 It has two attributes, both required: &lt;code&gt;NAME&lt;/code&gt; and
 &lt;code&gt;CLASS&lt;/code&gt;. The &lt;code&gt;CLASS&lt;/code&gt; attribute must be the name of
 a known sevice type; see below.
 &lt;/li&gt;
 &lt;li&gt;
 A &lt;code&gt;SERVICE&lt;/code&gt; element should the BeanShell code that returns a
 new instance of the named class. Note that this code can return
 &lt;code&gt;null&lt;/code&gt;.
 &lt;/li&gt;
 &lt;/ul&gt;

 To see all of the services offered by jEdit core, see
 jEdit&apos;s &lt;tt&gt;services.xml&lt;/tt&gt; file.
 Some core services are listed below:
 &lt;ul&gt;
 &lt;li&gt;{@link org.gjt.sp.jedit.buffer.FoldHandler}&lt;/li&gt;
 &lt;li&gt;{@link org.gjt.sp.jedit.textarea.FoldPainter}&lt;/li&gt;
 &lt;li&gt;{@link org.gjt.sp.jedit.io.VFS}&lt;/li&gt;
 &lt;li&gt;{@link org.gjt.sp.jedit.io.Encoding}&lt;/li&gt;
 &lt;li&gt;{@link org.gjt.sp.jedit.io.EncodingDetector}&lt;/li&gt;
 &lt;li&gt;{@link org.gjt.sp.jedit.gui.statusbar.StatusWidgetFactory}&lt;/li&gt;
 &lt;li&gt;{@link org.gjt.sp.jedit.gui.DockingFrameworkProvider}&lt;/li&gt;
 &lt;li&gt;{@link org.gjt.sp.jedit.gui.tray.JEditTrayIcon}&lt;/li&gt;
 &lt;/ul&gt;

 Plugins may define/provide more, so the only way to see a
 complete list of service types currently in use is by calling
 {@link #getServiceTypes()}.
 &lt;br /&gt;
 To use a service from a plugin, add a piece of code somewhere that calls
 {@link #getServiceNames(String)} and  {@link #getService(String,String)}.</description>
			<attribute name="@see">
				<description>BeanShell</description>
			</attribute>
			<attribute name="@see">
				<description>PluginJAR</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ServiceManager.java 21608 2012-04-25 22:20:35Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ServiceManager" />
			<method static="true" visibility="public" name="loadServices" fulltype="void" type="void">
				<comment>
					<description>Loads a &lt;code&gt;services.xml&lt;/code&gt; file.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
					<param name="uri" fulltype="java.net.URL" type="URL" />
					<param name="cache" fulltype="org.gjt.sp.jedit.PluginJAR.PluginCacheEntry" type="PluginJAR.PluginCacheEntry" />
				</params>
			</method>
			<method static="true" visibility="public" name="unloadServices" fulltype="void" type="void">
				<comment>
					<description>Removes all services belonging to the specified plugin.</description>
					<attribute name="@param">
						<description>plugin The plugin</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="plugin" comment="The plugin" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
				</params>
			</method>
			<method static="true" visibility="public" name="registerService" fulltype="void" type="void">
				<comment>
					<description>Registers a service. Plugins should provide a
 &lt;code&gt;services.xml&lt;/code&gt; file instead of calling this directly.</description>
					<attribute name="@param">
						<description>clazz The service class</description>
					</attribute>
					<attribute name="@param">
						<description>name The service name</description>
					</attribute>
					<attribute name="@param">
						<description>code BeanShell code to create an instance of this</description>
					</attribute>
					<attribute name="@param">
						<description>plugin The plugin JAR, or null if this is a built-in service</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="The service class" fulltype="java.lang.String" type="String" />
					<param name="name" comment="The service name" fulltype="java.lang.String" type="String" />
					<param name="code" comment="BeanShell code to create an instance of this" fulltype="java.lang.String" type="String" />
					<param name="plugin" comment="The plugin JAR, or null if this is a built-in service" fulltype="org.gjt.sp.jedit.PluginJAR" type="PluginJAR" />
				</params>
			</method>
			<method static="true" visibility="public" name="unregisterService" fulltype="void" type="void">
				<comment>
					<description>Unregisters a service.</description>
					<attribute name="@param">
						<description>clazz The service class</description>
					</attribute>
					<attribute name="@param">
						<description>name The service name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="The service class" fulltype="java.lang.String" type="String" />
					<param name="name" comment="The service name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getServiceTypes" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns all known service class types.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getServiceNames" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns the names of all registered services with the given
 class. For example, calling this with a parameter of
 &quot;org.gjt.sp.jedit.io.VFS&quot; returns all known virtual file
 systems.</description>
					<attribute name="@param">
						<description>clazz The class name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="The class name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getServiceNames" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="clazz" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="getService" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns an instance of the given service. The first time this is
 called for a given service, the BeanShell code is evaluated. The
 result is cached for future invocations, so in effect services are
 singletons.</description>
					<attribute name="@param">
						<description>clazz The service class</description>
					</attribute>
					<attribute name="@param">
						<description>name The service name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="The service class" fulltype="java.lang.String" type="String" />
					<param name="name" comment="The service name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getService" returncomment="the service instance" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns an instance of the given service. The first time this is
 called for a given service, the BeanShell code is evaluated. The
 result is cached for future invocations, so in effect services are
 singletons.</description>
					<attribute name="@param">
						<description>clazz The service class</description>
					</attribute>
					<attribute name="@param">
						<description>name The service name</description>
					</attribute>
					<attribute name="@return">
						<description>the service instance</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="The service class" fulltype="java.lang.Class" type="Class" />
					<param name="name" comment="The service name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.ServiceManager.ServiceFoldHandlerProvider" type="ServiceManager.ServiceFoldHandlerProvider">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.buffer.FoldHandlerProvider" type="FoldHandlerProvider" />
			</implements>
			<comment>
				<description>A FoldHandler based on the ServiceManager</description>
				<attribute name="@author">
					<description>Matthieu Casanova</description>
				</attribute>
				<attribute name="@since">
					<description>jEdit 4.3pre10</description>
				</attribute>
			</comment>
			<fields>
				<field final="true" static="true" const="org.gjt.sp.jedit.buffer.FoldHandler" visibility="public" name="SERVICE" constexpr="&quot;org.gjt.sp.jedit.buffer.FoldHandler&quot;" fulltype="java.lang.String" type="String">
					<comment>
						<description>The service type. See {@link org.gjt.sp.jedit.ServiceManager}.</description>
						<attribute name="@since">
							<description>jEdit 4.3pre10</description>
						</attribute>
					</comment>
				</field>
			</fields>
			<methods>
				<constructor visibility="public" name="ServiceManager.ServiceFoldHandlerProvider" />
				<method visibility="public" name="getFoldHandler" returncomment="the FoldHandler or null if it doesn&apos;t exist" fulltype="org.gjt.sp.jedit.buffer.FoldHandler" type="FoldHandler">
					<comment>
						<description>Returns the fold handler with the specified name, or null if
 there is no registered handler with that name.</description>
						<attribute name="@param">
							<description>name The name of the desired fold handler</description>
						</attribute>
						<attribute name="@return">
							<description>the FoldHandler or null if it doesn&apos;t exist</description>
						</attribute>
						<attribute name="@since">
							<description>jEdit 4.3pre10</description>
						</attribute>
					</comment>
					<params>
						<param name="name" comment="The name of the desired fold handler" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="getFoldModes" fulltype="java.lang.String[]" type="String">
					<comment>
						<description>Returns an array containing the names of all registered fold
 handlers.</description>
						<attribute name="@since">
							<description>jEdit 4.3pre10</description>
						</attribute>
					</comment>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.ServiceManager.ServiceFoldHandlerProvider" type="ServiceManager.ServiceFoldHandlerProvider">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.buffer.FoldHandlerProvider" type="FoldHandlerProvider" />
		</implements>
		<comment>
			<description>A FoldHandler based on the ServiceManager</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre10</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="org.gjt.sp.jedit.buffer.FoldHandler" visibility="public" name="SERVICE" constexpr="&quot;org.gjt.sp.jedit.buffer.FoldHandler&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>The service type. See {@link org.gjt.sp.jedit.ServiceManager}.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="ServiceManager.ServiceFoldHandlerProvider" />
			<method visibility="public" name="getFoldHandler" returncomment="the FoldHandler or null if it doesn&apos;t exist" fulltype="org.gjt.sp.jedit.buffer.FoldHandler" type="FoldHandler">
				<comment>
					<description>Returns the fold handler with the specified name, or null if
 there is no registered handler with that name.</description>
					<attribute name="@param">
						<description>name The name of the desired fold handler</description>
					</attribute>
					<attribute name="@return">
						<description>the FoldHandler or null if it doesn&apos;t exist</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name of the desired fold handler" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getFoldModes" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns an array containing the names of all registered fold
 handlers.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.SettingsXML" type="SettingsXML">
		<comment>
			<description>A XML file in the settings directory.
 This class provides some common operations to load/save settings
 from/into a XML file.
   - Proper encoding and XML declaration.
   - Two stage save.
   - Making backup on each save.
   - Detection of change on disk.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="SettingsXML">
				<comment>
					<description>Construct a SettingsXML with specific location and name.</description>
					<attribute name="@param">
						<description>settingsDirectory
 	The settings directory of jedit</description>
					</attribute>
					<attribute name="@param">
						<description>name
 	The file name will be (name + &quot;.xml&quot;)</description>
					</attribute>
				</comment>
				<params>
					<param name="settingsDirectory" comment="The settings directory of jedit" fulltype="java.lang.String" type="String" />
					<param name="name" comment="The file name will be (name + &quot;.xml&quot;)" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="SettingsXML">
				<params>
					<param name="f" fulltype="java.io.File" type="File" />
				</params>
			</constructor>
			<method visibility="public" name="fileExists" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the file exists.</description>
				</comment>
			</method>
			<method visibility="public" name="load" fulltype="void" type="void">
				<comment>
					<description>Parse the XML file to load.</description>
					<attribute name="@param">
						<description>handler
 	The handler to receive SAX notifications.</description>
					</attribute>
				</comment>
				<params>
					<param name="handler" comment="The handler to receive SAX notifications." fulltype="org.xml.sax.helpers.DefaultHandler" type="DefaultHandler" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="openSaver" fulltype="org.gjt.sp.jedit.SettingsXML.Saver" type="SettingsXML.Saver">
				<comment>
					<description>Open the file to save in XML.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="hasChangedOnDisk" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the file has been changed on disk.
 This is based on the last modified time at the last saving
 or loading.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the file&apos;s path.</description>
				</comment>
			</method>
		</methods>
		<jelclass superclass="BufferedWriter" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.io.BufferedWriter" fulltype="org.gjt.sp.jedit.SettingsXML.Saver" type="SettingsXML.Saver">
			<comment>
				<description>A Writer to write XML for saving.
 The real settings file is not changed until the finish()
 method succeeds, in which case the previous settings file is
 backuped.</description>
			</comment>
			<methods>
				<method visibility="public" name="writeXMLDeclaration" fulltype="void" type="void">
					<comment>
						<description>Write the XML 1.0 declaration.
 This should be the first output.</description>
					</comment>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
				<method visibility="public" name="writeXMLDeclaration" fulltype="void" type="void">
					<comment>
						<description>Write the XML declaration of a specific version.
 This should be the first output.</description>
					</comment>
					<params>
						<param name="version" fulltype="java.lang.String" type="String" />
					</params>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
				<method visibility="public" name="finish" fulltype="void" type="void">
					<comment>
						<description>Perform the final step of saving.</description>
					</comment>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="BufferedWriter" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.io.BufferedWriter" fulltype="org.gjt.sp.jedit.SettingsXML.Saver" type="SettingsXML.Saver">
		<comment>
			<description>A Writer to write XML for saving.
 The real settings file is not changed until the finish()
 method succeeds, in which case the previous settings file is
 backuped.</description>
		</comment>
		<methods>
			<method visibility="public" name="writeXMLDeclaration" fulltype="void" type="void">
				<comment>
					<description>Write the XML 1.0 declaration.
 This should be the first output.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="writeXMLDeclaration" fulltype="void" type="void">
				<comment>
					<description>Write the XML declaration of a specific version.
 This should be the first output.</description>
				</comment>
				<params>
					<param name="version" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="finish" fulltype="void" type="void">
				<comment>
					<description>Perform the final step of saving.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.SplitConfigParser" type="SplitConfigParser">
		<comment>
			<description>Class used by PerspectiveManager to parse SplitConfig strings.
    May also be used by plugins.</description>
			<attribute name="@since">
				<description>jEdit 4.4</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SplitConfigParser">
				<comment>
					<attribute name="@param">
						<description>splitConfig The string to parse and adjust.</description>
					</attribute>
				</comment>
				<params>
					<param name="splitConfig" comment="The string to parse and adjust." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="setIncludeSplits" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>b If true, retain any splits in the split configuration.</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="If true, retain any splits in the split configuration." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setIncludeFiles" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>b If true, retain any file names found in the split configuration.</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="If true, retain any file names found in the split configuration." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setIncludeRemoteFiles" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>b If true, and if include files is true, then retain any remote file
 names found in the split configuration.</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="If true, and if include files is true, then retain any remote file
 names found in the split configuration." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="parse" returncomment="The split configuration string adjusted for user preferences." fulltype="java.lang.String" type="String">
				<comment>
					<description>Parses the given split configuration string and removes splits, file names,
 and remote file names bases on the settings for this parser.</description>
					<attribute name="@return">
						<description>The split configuration string adjusted for user preferences.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Token" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="org.gjt.sp.jedit.syntax.Token" fulltype="org.gjt.sp.jedit.syntax.Chunk" type="Chunk">
		<comment>
			<description>A syntax token with extra information required for painting it
 on screen.</description>
			<attribute name="@since">
				<description>jEdit 4.1pre1</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="paintChunkList" returncomment="The width of the painted text" fulltype="float" type="float">
				<comment>
					<description>Paints a chunk list.</description>
					<attribute name="@param">
						<description>chunks The chunk list</description>
					</attribute>
					<attribute name="@param">
						<description>gfx The graphics context</description>
					</attribute>
					<attribute name="@param">
						<description>x The x co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>glyphVector true if we want to use glyphVector, false if we
 want to use drawString</description>
					</attribute>
					<attribute name="@return">
						<description>The width of the painted text</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="chunks" comment="The chunk list" fulltype="org.gjt.sp.jedit.syntax.Chunk" type="Chunk" />
					<param name="gfx" comment="The graphics context" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="x" comment="The x co-ordinate" fulltype="float" type="float" />
					<param name="y" comment="The y co-ordinate" fulltype="float" type="float" />
					<param name="glyphVector" comment="true if we want to use glyphVector, false if we
 want to use drawString" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="paintChunkBackgrounds" returncomment="The width of the painted backgrounds" fulltype="float" type="float">
				<comment>
					<description>Paints the background highlights of a chunk list.</description>
					<attribute name="@param">
						<description>chunks The chunk list</description>
					</attribute>
					<attribute name="@param">
						<description>gfx The graphics context</description>
					</attribute>
					<attribute name="@param">
						<description>x The x co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate</description>
					</attribute>
					<attribute name="@return">
						<description>The width of the painted backgrounds</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="chunks" comment="The chunk list" fulltype="org.gjt.sp.jedit.syntax.Chunk" type="Chunk" />
					<param name="gfx" comment="The graphics context" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="x" comment="The x co-ordinate" fulltype="float" type="float" />
					<param name="y" comment="The y co-ordinate" fulltype="float" type="float" />
					<param name="lineHeight" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="offsetToX" fulltype="float" type="float">
				<comment>
					<description>Converts an offset in a chunk list into an x co-ordinate.</description>
					<attribute name="@param">
						<description>chunks The chunk list</description>
					</attribute>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="chunks" comment="The chunk list" fulltype="org.gjt.sp.jedit.syntax.Chunk" type="Chunk" />
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="xToOffset" returncomment="The offset within the line, or -1 if the x co-ordinate is too
 far to the right" fulltype="int" type="int">
				<comment>
					<description>Converts an x co-ordinate in a chunk list into an offset.</description>
					<attribute name="@param">
						<description>chunks The chunk list</description>
					</attribute>
					<attribute name="@param">
						<description>x The x co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>round Round up to next letter if past the middle of a letter?</description>
					</attribute>
					<attribute name="@return">
						<description>The offset within the line, or -1 if the x co-ordinate is too
 far to the right</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="chunks" comment="The chunk list" fulltype="org.gjt.sp.jedit.syntax.Chunk" type="Chunk" />
					<param name="x" comment="The x co-ordinate" fulltype="float" type="float" />
					<param name="round" comment="Round up to next letter if past the middle of a letter?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="propertiesChanged" fulltype="void" type="void">
				<comment>
					<description>Reload internal configuration based on the given properties.</description>
					<attribute name="@param">
						<description>props	Configuration properties.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="props" comment="Configuration properties." fulltype="org.gjt.sp.jedit.IPropertyManager" type="IPropertyManager" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.DefaultTokenHandler" type="DefaultTokenHandler">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.syntax.TokenHandler" type="TokenHandler" />
		</implements>
		<comment>
			<description>Builds a linked list of tokens without any additional processing.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DefaultTokenHandler.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.1pre1</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="firstToken" fulltype="org.gjt.sp.jedit.syntax.Token" type="Token" />
			<field visibility="protected" name="lastToken" fulltype="org.gjt.sp.jedit.syntax.Token" type="Token" />
			<field visibility="protected" name="lineContext" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
		</fields>
		<methods>
			<constructor visibility="public" name="DefaultTokenHandler" />
			<method visibility="public" name="init" fulltype="void" type="void">
				<comment>
					<description>Clears the list of tokens.</description>
				</comment>
			</method>
			<method visibility="public" name="getTokens" fulltype="org.gjt.sp.jedit.syntax.Token" type="Token">
				<comment>
					<description>Returns the first syntax token.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="handleToken" fulltype="void" type="void">
				<comment>
					<description>Called by the token marker when a syntax token has been parsed.</description>
					<attribute name="@param">
						<description>seg The segment containing the text</description>
					</attribute>
					<attribute name="@param">
						<description>id The token type (one of the constants in the
 {@link Token} class).</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset of the token</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters in the token</description>
					</attribute>
					<attribute name="@param">
						<description>context The line context</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="seg" comment="The segment containing the text" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="id" comment="The token type (one of the constants in the
 {@link Token} class)." fulltype="byte" type="byte" />
					<param name="offset" comment="The start offset of the token" fulltype="int" type="int" />
					<param name="length" comment="The number of characters in the token" fulltype="int" type="int" />
					<param name="context" comment="The line context" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</method>
			<method visibility="public" name="getLineContext" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext">
				<comment>
					<description>The token handler can compare this object with the object
 previously given for this line to see if the token type at the end
 of the line has changed (meaning subsequent lines might need to be
 retokenized).</description>
					<attribute name="@since">
						<description>jEdit 4.2pre6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setLineContext" fulltype="void" type="void">
				<comment>
					<description>The token handler can compare this object with the object
 previously given for this line to see if the token type at the end
 of the line has changed (meaning subsequent lines might need to be
 retokenized).</description>
					<attribute name="@since">
						<description>jEdit 4.2pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="lineContext" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</method>
			<method visibility="protected" name="getParserRuleSet" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet">
				<params>
					<param name="context" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</method>
			<method visibility="protected" name="createToken" fulltype="org.gjt.sp.jedit.syntax.Token" type="Token">
				<params>
					<param name="id" fulltype="byte" type="byte" />
					<param name="offset" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
					<param name="context" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</method>
			<method visibility="protected" name="addToken" fulltype="void" type="void">
				<params>
					<param name="token" fulltype="org.gjt.sp.jedit.syntax.Token" type="Token" />
					<param name="context" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.DummyTokenHandler" type="DummyTokenHandler">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.syntax.TokenHandler" type="TokenHandler" />
		</implements>
		<comment>
			<description>A dummy token handler that discards tokens.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DummyTokenHandler.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.1pre1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="INSTANCE" fulltype="org.gjt.sp.jedit.syntax.DummyTokenHandler" type="DummyTokenHandler">
				<comment>
					<description>To avoid having to create new instances of this class, use
 this variable. This is allowed because instances of this
 class do not store any state.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="DummyTokenHandler" />
			<method visibility="public" name="handleToken" fulltype="void" type="void">
				<comment>
					<description>Called by the token marker when a syntax token has been parsed.</description>
					<attribute name="@param">
						<description>seg The segment containing the text</description>
					</attribute>
					<attribute name="@param">
						<description>id The token type (one of the constants in the
 {@link Token} class).</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset of the token</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters in the token</description>
					</attribute>
					<attribute name="@param">
						<description>context The line context</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="seg" comment="The segment containing the text" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="id" comment="The token type (one of the constants in the
 {@link Token} class)." fulltype="byte" type="byte" />
					<param name="offset" comment="The start offset of the token" fulltype="int" type="int" />
					<param name="length" comment="The number of characters in the token" fulltype="int" type="int" />
					<param name="context" comment="The line context" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</method>
			<method visibility="public" name="setLineContext" fulltype="void" type="void">
				<comment>
					<description>The token handler can compare this object with the object
 previously given for this line to see if the token type at the end
 of the line has changed (meaning subsequent lines might need to be
 retokenized).</description>
					<attribute name="@since">
						<description>jEdit 4.2pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="lineContext" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.KeywordMap" type="KeywordMap">
		<comment>
			<description>A &lt;code&gt;KeywordMap&lt;/code&gt; is similar to a hashtable in that it maps keys
 to values. However, the `keys&apos; are Swing segments. This allows lookups of
 text substrings without the overhead of creating a new string object.</description>
			<attribute name="@author">
				<description>Slava Pestov, Mike Dillon</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: KeywordMap.java 14461 2009-01-25 12:04:15Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="KeywordMap">
				<comment>
					<description>Creates a new &lt;code&gt;KeywordMap&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>ignoreCase True if keys are case insensitive</description>
					</attribute>
				</comment>
				<params>
					<param name="ignoreCase" comment="True if keys are case insensitive" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="KeywordMap">
				<comment>
					<description>Creates a new &lt;code&gt;KeywordMap&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>ignoreCase True if the keys are case insensitive</description>
					</attribute>
					<attribute name="@param">
						<description>mapLength The number of `buckets&apos; to create.
 A value of 52 will give good performance for most maps.</description>
					</attribute>
				</comment>
				<params>
					<param name="ignoreCase" comment="True if the keys are case insensitive" fulltype="boolean" type="boolean" />
					<param name="mapLength" comment="The number of `buckets&apos; to create.
 A value of 52 will give good performance for most maps." fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="lookup" fulltype="byte" type="byte">
				<comment>
					<description>Looks up a key.</description>
					<attribute name="@param">
						<description>text The text segment</description>
					</attribute>
					<attribute name="@param">
						<description>offset The offset of the substring within the text segment</description>
					</attribute>
					<attribute name="@param">
						<description>length The length of the substring</description>
					</attribute>
				</comment>
				<params>
					<param name="text" comment="The text segment" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="offset" comment="The offset of the substring within the text segment" fulltype="int" type="int" />
					<param name="length" comment="The length of the substring" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="add" fulltype="void" type="void">
				<comment>
					<description>Adds a key-value mapping.</description>
					<attribute name="@param">
						<description>keyword The key</description>
					</attribute>
					<attribute name="@param">
						<description>id The value</description>
					</attribute>
				</comment>
				<params>
					<param name="keyword" comment="The key" fulltype="java.lang.String" type="String" />
					<param name="id" comment="The value" fulltype="byte" type="byte" />
				</params>
			</method>
			<method visibility="public" name="add" fulltype="void" type="void">
				<comment>
					<description>Adds a key-value mapping.</description>
					<attribute name="@param">
						<description>keyword The key</description>
					</attribute>
					<attribute name="@param">
						<description>id The value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="keyword" comment="The key" fulltype="char[]" type="char" />
					<param name="id" comment="The value" fulltype="byte" type="byte" />
				</params>
			</method>
			<method visibility="public" name="getNonAlphaNumericChars" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns all non-alphanumeric characters that appear in the
 keywords of this keyword map.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getKeywords" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns an array containing all keywords in this keyword map.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getIgnoreCase" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the keyword map is set to be case insensitive,
 false otherwise.</description>
				</comment>
			</method>
			<method visibility="public" name="setIgnoreCase" fulltype="void" type="void">
				<comment>
					<description>Sets if the keyword map should be case insensitive.</description>
					<attribute name="@param">
						<description>ignoreCase True if the keyword map should be case
 insensitive, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="ignoreCase" comment="True if the keyword map should be case
 insensitive, false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="add" fulltype="void" type="void">
				<comment>
					<description>Adds the content of another keyword map to this one.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="map" fulltype="org.gjt.sp.jedit.syntax.KeywordMap" type="KeywordMap" />
				</params>
			</method>
			<method visibility="protected" name="getSegmentMapKey" fulltype="int" type="int">
				<params>
					<param name="s" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.ModeProvider" type="ModeProvider">
		<comment>
			<description>This class works like a singleton, the instance is initialized by jEdit.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Buffer.java 8190 2006-12-07 07:58:34Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre10</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="public" name="instance" fulltype="org.gjt.sp.jedit.syntax.ModeProvider" type="ModeProvider" />
		</fields>
		<methods>
			<constructor visibility="public" name="ModeProvider" />
			<method visibility="public" name="removeAll" fulltype="void" type="void" />
			<method visibility="public" name="getMode" fulltype="org.gjt.sp.jedit.Mode" type="Mode">
				<comment>
					<description>Returns the edit mode with the specified name.</description>
					<attribute name="@param">
						<description>name The edit mode</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The edit mode" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getModeForFile" returncomment="the edit mode, or null if no mode match the file" fulltype="org.gjt.sp.jedit.Mode" type="Mode">
				<comment>
					<description>Get the appropriate mode that must be used for the file</description>
					<attribute name="@param">
						<description>filename the filename</description>
					</attribute>
					<attribute name="@param">
						<description>firstLine the first line of the file</description>
					</attribute>
					<attribute name="@return">
						<description>the edit mode, or null if no mode match the file</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre12</description>
					</attribute>
				</comment>
				<params>
					<param name="filename" comment="the filename" fulltype="java.lang.String" type="String" />
					<param name="firstLine" comment="the first line of the file" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getModeForFile" returncomment="the edit mode, or null if no mode match the file" fulltype="org.gjt.sp.jedit.Mode" type="Mode">
				<comment>
					<description>Get the appropriate mode that must be used for the file</description>
					<attribute name="@param">
						<description>filepath the filepath, can be {@code null}</description>
					</attribute>
					<attribute name="@param">
						<description>filename the filename, can be {@code null}</description>
					</attribute>
					<attribute name="@param">
						<description>firstLine the first line of the file</description>
					</attribute>
					<attribute name="@return">
						<description>the edit mode, or null if no mode match the file</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="filepath" comment="the filepath, can be {@code null}" fulltype="java.lang.String" type="String" />
					<param name="filename" comment="the filename, can be {@code null}" fulltype="java.lang.String" type="String" />
					<param name="firstLine" comment="the first line of the file" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getModes" fulltype="org.gjt.sp.jedit.Mode[]" type="Mode">
				<comment>
					<description>Returns an array of installed edit modes.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addMode" fulltype="void" type="void">
				<comment>
					<description>Do not call this method. It is only public so that classes
 in the org.gjt.sp.jedit.syntax package can access it.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.jEdit#reloadModes reloadModes</description>
					</attribute>
					<attribute name="@param">
						<description>mode The edit mode</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" comment="The edit mode" fulltype="org.gjt.sp.jedit.Mode" type="Mode" />
				</params>
			</method>
			<method visibility="public" name="loadMode" fulltype="void" type="void">
				<params>
					<param name="mode" fulltype="org.gjt.sp.jedit.Mode" type="Mode" />
					<param name="xmh" fulltype="org.gjt.sp.jedit.syntax.XModeHandler" type="XModeHandler" />
				</params>
			</method>
			<method visibility="public" name="loadMode" fulltype="void" type="void">
				<params>
					<param name="mode" fulltype="org.gjt.sp.jedit.Mode" type="Mode" />
				</params>
			</method>
			<method visibility="protected" name="error" fulltype="void" type="void">
				<params>
					<param name="file" fulltype="java.lang.String" type="String" />
					<param name="e" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
		<comment>
			<description>A parser rule.</description>
			<attribute name="@author">
				<description>mike dillon, Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ParserRule.java 19474 2011-03-22 11:35:42Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="255" visibility="public" name="MAJOR_ACTIONS" constexpr="255" fulltype="int" type="int" />
			<field final="true" static="true" const="0" visibility="public" name="SEQ" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="SPAN" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="4" visibility="public" name="MARK_PREVIOUS" constexpr="4" fulltype="int" type="int" />
			<field final="true" static="true" const="8" visibility="public" name="MARK_FOLLOWING" constexpr="8" fulltype="int" type="int" />
			<field final="true" static="true" const="16" visibility="public" name="EOL_SPAN" constexpr="16" fulltype="int" type="int" />
			<field final="true" static="true" const="65280" visibility="public" name="ACTION_HINTS" constexpr="65280" fulltype="int" type="int" />
			<field final="true" static="true" const="512" visibility="public" name="NO_LINE_BREAK" constexpr="512" fulltype="int" type="int" />
			<field final="true" static="true" const="1024" visibility="public" name="NO_WORD_BREAK" constexpr="1024" fulltype="int" type="int" />
			<field final="true" static="true" const="2048" visibility="public" name="IS_ESCAPE" constexpr="2048" fulltype="int" type="int" />
			<field final="true" static="true" const="8192" visibility="public" name="REGEXP" constexpr="8192" fulltype="int" type="int" />
			<field final="true" static="true" const="16384" visibility="public" name="END_REGEXP" constexpr="16384" fulltype="int" type="int" />
			<field final="true" static="true" const="-1" visibility="public" name="MATCH_TYPE_CONTEXT" constexpr="-1" fulltype="byte" type="byte" />
			<field final="true" static="true" const="-2" visibility="public" name="MATCH_TYPE_RULE" constexpr="-2" fulltype="byte" type="byte" />
			<field final="true" static="true" const="2" visibility="public" name="AT_LINE_START" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="4" visibility="public" name="AT_WHITESPACE_END" constexpr="4" fulltype="int" type="int" />
			<field final="true" static="true" const="8" visibility="public" name="AT_WORD_START" constexpr="8" fulltype="int" type="int" />
			<field final="true" visibility="public" name="upHashChar" fulltype="char[]" type="char">
				<comment>
					<description>The upHashChar should be a String but it is stored
 in an array making iterations much faster</description>
				</comment>
			</field>
			<field final="true" visibility="public" name="upHashChars" fulltype="char[]" type="char" />
			<field final="true" visibility="public" name="startPosMatch" fulltype="int" type="int" />
			<field final="true" visibility="public" name="start" fulltype="char[]" type="char" />
			<field final="true" visibility="public" name="startRegexp" fulltype="java.util.regex.Pattern" type="Pattern" />
			<field final="true" visibility="public" name="endPosMatch" fulltype="int" type="int" />
			<field final="true" visibility="public" name="end" fulltype="char[]" type="char" />
			<field final="true" visibility="public" name="endRegexp" fulltype="java.util.regex.Pattern" type="Pattern" />
			<field final="true" visibility="public" name="action" fulltype="int" type="int" />
			<field final="true" visibility="public" name="token" fulltype="byte" type="byte" />
			<field final="true" visibility="public" name="matchType" fulltype="byte" type="byte">
				<comment>
					<description>matchType is the type of the token for the matched region. Special
 values are: MATCH_TYPE_CONTEXT = default token for the context,
 MATCH_TYPE_RULE = same token as the rule itself.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
			</field>
			<field final="true" visibility="public" name="escapeRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<comment>
					<description>escapeRule is the rule-specific sequence used to escape other
 characters while the rule is in effect. If this character is
 non-zero, the character following the escape char will be skipped
 during parsing, and highlighted with the rule&apos;s token.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre12</description>
					</attribute>
				</comment>
			</field>
			<field visibility="public" name="delegate" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
		</fields>
		<methods>
			<method static="true" visibility="public" name="createSequenceRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="posMatch" fulltype="int" type="int" />
					<param name="seq" fulltype="java.lang.String" type="String" />
					<param name="delegate" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
					<param name="id" fulltype="byte" type="byte" />
				</params>
			</method>
			<method static="true" visibility="public" name="createRegexpSequenceRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="hashChar" fulltype="java.lang.String" type="String" />
					<param name="posMatch" fulltype="int" type="int" />
					<param name="seq" fulltype="java.lang.String" type="String" />
					<param name="delegate" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
					<param name="id" fulltype="byte" type="byte" />
					<param name="ignoreCase" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="createRegexpSequenceRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="posMatch" fulltype="int" type="int" />
					<param name="hashChars" fulltype="char[]" type="char" />
					<param name="seq" fulltype="java.lang.String" type="String" />
					<param name="delegate" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
					<param name="id" fulltype="byte" type="byte" />
					<param name="ignoreCase" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="createSpanRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="startPosMatch" fulltype="int" type="int" />
					<param name="start" fulltype="java.lang.String" type="String" />
					<param name="endPosMatch" fulltype="int" type="int" />
					<param name="end" fulltype="java.lang.String" type="String" />
					<param name="delegate" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
					<param name="id" fulltype="byte" type="byte" />
					<param name="matchType" fulltype="byte" type="byte" />
					<param name="noLineBreak" fulltype="boolean" type="boolean" />
					<param name="noWordBreak" fulltype="boolean" type="boolean" />
					<param name="escape" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="createRegexpSpanRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="hashChar" fulltype="java.lang.String" type="String" />
					<param name="startPosMatch" fulltype="int" type="int" />
					<param name="start" fulltype="java.lang.String" type="String" />
					<param name="endPosMatch" fulltype="int" type="int" />
					<param name="end" fulltype="java.lang.String" type="String" />
					<param name="delegate" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
					<param name="id" fulltype="byte" type="byte" />
					<param name="matchType" fulltype="byte" type="byte" />
					<param name="noLineBreak" fulltype="boolean" type="boolean" />
					<param name="noWordBreak" fulltype="boolean" type="boolean" />
					<param name="ignoreCase" fulltype="boolean" type="boolean" />
					<param name="escape" fulltype="java.lang.String" type="String" />
					<param name="endRegexp" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="createRegexpSpanRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="startPosMatch" fulltype="int" type="int" />
					<param name="hashChars" fulltype="char[]" type="char" />
					<param name="start" fulltype="java.lang.String" type="String" />
					<param name="endPosMatch" fulltype="int" type="int" />
					<param name="end" fulltype="java.lang.String" type="String" />
					<param name="delegate" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
					<param name="id" fulltype="byte" type="byte" />
					<param name="matchType" fulltype="byte" type="byte" />
					<param name="noLineBreak" fulltype="boolean" type="boolean" />
					<param name="noWordBreak" fulltype="boolean" type="boolean" />
					<param name="ignoreCase" fulltype="boolean" type="boolean" />
					<param name="escape" fulltype="java.lang.String" type="String" />
					<param name="endRegexp" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="createEOLSpanRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="posMatch" fulltype="int" type="int" />
					<param name="seq" fulltype="java.lang.String" type="String" />
					<param name="delegate" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
					<param name="id" fulltype="byte" type="byte" />
					<param name="matchType" fulltype="byte" type="byte" />
				</params>
			</method>
			<method static="true" visibility="public" name="createRegexpEOLSpanRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="hashChar" fulltype="java.lang.String" type="String" />
					<param name="posMatch" fulltype="int" type="int" />
					<param name="seq" fulltype="java.lang.String" type="String" />
					<param name="delegate" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
					<param name="id" fulltype="byte" type="byte" />
					<param name="matchType" fulltype="byte" type="byte" />
					<param name="ignoreCase" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="createRegexpEOLSpanRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="posMatch" fulltype="int" type="int" />
					<param name="hashChars" fulltype="char[]" type="char" />
					<param name="seq" fulltype="java.lang.String" type="String" />
					<param name="delegate" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
					<param name="id" fulltype="byte" type="byte" />
					<param name="matchType" fulltype="byte" type="byte" />
					<param name="ignoreCase" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.util.regex.PatternSyntaxException" type="PatternSyntaxException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="createMarkFollowingRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="posMatch" fulltype="int" type="int" />
					<param name="seq" fulltype="java.lang.String" type="String" />
					<param name="id" fulltype="byte" type="byte" />
					<param name="matchType" fulltype="byte" type="byte" />
				</params>
			</method>
			<method static="true" visibility="public" name="createMarkPreviousRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="posMatch" fulltype="int" type="int" />
					<param name="seq" fulltype="java.lang.String" type="String" />
					<param name="id" fulltype="byte" type="byte" />
					<param name="matchType" fulltype="byte" type="byte" />
				</params>
			</method>
			<method static="true" visibility="public" name="createEscapeRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule">
				<params>
					<param name="seq" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet">
		<comment>
			<description>A set of parser rules.</description>
			<attribute name="@author">
				<description>mike dillon</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ParserRuleSet.java 19477 2011-03-22 12:25:14Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ParserRuleSet">
				<params>
					<param name="modeName" fulltype="java.lang.String" type="String" />
					<param name="setName" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="getStandardRuleSet" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet">
				<comment>
					<description>Returns a parser rule set that highlights everything with the
 specified token type.</description>
					<attribute name="@param">
						<description>id The token type</description>
					</attribute>
				</comment>
				<params>
					<param name="id" comment="The token type" fulltype="byte" type="byte" />
				</params>
			</method>
			<method visibility="public" name="getModeName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getSetName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getProperties" fulltype="java.util.Hashtable" type="Hashtable" />
			<method visibility="public" name="setProperties" fulltype="void" type="void">
				<params>
					<param name="props" fulltype="java.util.Hashtable" type="Hashtable" />
				</params>
			</method>
			<method visibility="public" name="resolveImports" fulltype="void" type="void">
				<comment>
					<description>Resolves all rulesets added with {@link #addRuleSet(ParserRuleSet)}.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addRuleSet" fulltype="void" type="void">
				<comment>
					<description>Adds all rules contained in the given ruleset.</description>
					<attribute name="@param">
						<description>ruleset The ruleset</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="ruleset" comment="The ruleset" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
				</params>
			</method>
			<method visibility="public" name="addRule" fulltype="void" type="void">
				<params>
					<param name="r" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule" />
				</params>
			</method>
			<method visibility="public" name="getRules" fulltype="java.util.List" type="List">
				<params>
					<param name="key" fulltype="java.lang.Character" type="Character" />
				</params>
			</method>
			<method visibility="public" name="getRuleCount" fulltype="int" type="int" />
			<method visibility="public" name="getTerminateChar" returncomment="a number of chars or -1 (default value) if there is no limit" fulltype="int" type="int">
				<comment>
					<description>Returns the number of chars that can be read before the rule parsing stops.</description>
					<attribute name="@return">
						<description>a number of chars or -1 (default value) if there is no limit</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setTerminateChar" fulltype="void" type="void">
				<params>
					<param name="atChar" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getIgnoreCase" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setIgnoreCase" fulltype="void" type="void">
				<params>
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getKeywords" fulltype="org.gjt.sp.jedit.syntax.KeywordMap" type="KeywordMap" />
			<method visibility="public" name="setKeywords" fulltype="void" type="void">
				<params>
					<param name="km" fulltype="org.gjt.sp.jedit.syntax.KeywordMap" type="KeywordMap" />
				</params>
			</method>
			<method visibility="public" name="getHighlightDigits" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setHighlightDigits" fulltype="void" type="void">
				<params>
					<param name="highlightDigits" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getDigitRegexp" fulltype="java.util.regex.Pattern" type="Pattern" />
			<method visibility="public" name="setDigitRegexp" fulltype="void" type="void">
				<params>
					<param name="digitRE" fulltype="java.util.regex.Pattern" type="Pattern" />
				</params>
			</method>
			<method visibility="public" name="getEscapeRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule" />
			<method visibility="public" name="setEscapeRule" fulltype="void" type="void">
				<params>
					<param name="escapeRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule" />
				</params>
			</method>
			<method visibility="public" name="getDefault" fulltype="byte" type="byte" />
			<method visibility="public" name="setDefault" fulltype="void" type="void">
				<params>
					<param name="def" fulltype="byte" type="byte" />
				</params>
			</method>
			<method visibility="public" name="getNoWordSep" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setNoWordSep" fulltype="void" type="void">
				<params>
					<param name="noWordSep" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="isBuiltIn" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this is a built-in ruleset.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle" type="SyntaxStyle">
		<comment>
			<description>A simple text style class. It can specify the color, italic flag,
 and bold flag of a run of text.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: SyntaxStyle.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SyntaxStyle">
				<comment>
					<description>Creates a new SyntaxStyle.</description>
					<attribute name="@param">
						<description>fgColor The text color</description>
					</attribute>
					<attribute name="@param">
						<description>bgColor The background color</description>
					</attribute>
					<attribute name="@param">
						<description>font The text font</description>
					</attribute>
				</comment>
				<params>
					<param name="fgColor" comment="The text color" fulltype="java.awt.Color" type="Color" />
					<param name="bgColor" comment="The background color" fulltype="java.awt.Color" type="Color" />
					<param name="font" comment="The text font" fulltype="java.awt.Font" type="Font" />
				</params>
			</constructor>
			<method visibility="public" name="getForegroundColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the text color.</description>
				</comment>
			</method>
			<method visibility="public" name="getBackgroundColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the background color.</description>
				</comment>
			</method>
			<method visibility="public" name="getFont" fulltype="java.awt.Font" type="Font">
				<comment>
					<description>Returns the style font.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.SyntaxUtilities" type="SyntaxUtilities">
		<comment>
			<description>Contains utility functions used by the syntax highlighting code.</description>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: SyntaxUtilities.java 19475 2011-03-22 12:04:35Z kpouer $</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SyntaxUtilities" />
			<method static="true" visibility="public" name="regionMatches" returncomment="true if the subregion of the segment was
 equals to the character array" fulltype="boolean" type="boolean">
				<comment>
					<description>Checks if a subregion of a &lt;code&gt;Segment&lt;/code&gt; is equal to a
 character array.</description>
					<attribute name="@param">
						<description>ignoreCase True if case should be ignored, false otherwise</description>
					</attribute>
					<attribute name="@param">
						<description>text The segment</description>
					</attribute>
					<attribute name="@param">
						<description>offset The offset into the segment</description>
					</attribute>
					<attribute name="@param">
						<description>match The character array to match</description>
					</attribute>
					<attribute name="@return">
						<description>true if the subregion of the segment was
 equals to the character array</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="ignoreCase" comment="True if case should be ignored, false otherwise" fulltype="boolean" type="boolean" />
					<param name="text" comment="The segment" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="offset" comment="The offset into the segment" fulltype="int" type="int" />
					<param name="match" comment="The character array to match" fulltype="char[]" type="char" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.Token" type="Token">
		<comment>
			<description>A linked list of syntax tokens.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Token.java 15712 2009-07-19 19:40:40Z shlomy $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="TOKEN_TYPES" fulltype="java.lang.String[]" type="String" />
			<field final="true" static="true" const="0" visibility="public" name="NULL" constexpr="0" fulltype="byte" type="byte" />
			<field final="true" static="true" const="1" visibility="public" name="COMMENT1" constexpr="1" fulltype="byte" type="byte" />
			<field final="true" static="true" const="2" visibility="public" name="COMMENT2" constexpr="2" fulltype="byte" type="byte" />
			<field final="true" static="true" const="3" visibility="public" name="COMMENT3" constexpr="3" fulltype="byte" type="byte" />
			<field final="true" static="true" const="4" visibility="public" name="COMMENT4" constexpr="4" fulltype="byte" type="byte" />
			<field final="true" static="true" const="5" visibility="public" name="DIGIT" constexpr="5" fulltype="byte" type="byte" />
			<field final="true" static="true" const="6" visibility="public" name="FUNCTION" constexpr="6" fulltype="byte" type="byte" />
			<field final="true" static="true" const="7" visibility="public" name="INVALID" constexpr="7" fulltype="byte" type="byte" />
			<field final="true" static="true" const="8" visibility="public" name="KEYWORD1" constexpr="8" fulltype="byte" type="byte" />
			<field final="true" static="true" const="9" visibility="public" name="KEYWORD2" constexpr="9" fulltype="byte" type="byte" />
			<field final="true" static="true" const="10" visibility="public" name="KEYWORD3" constexpr="10" fulltype="byte" type="byte" />
			<field final="true" static="true" const="11" visibility="public" name="KEYWORD4" constexpr="11" fulltype="byte" type="byte" />
			<field final="true" static="true" const="12" visibility="public" name="LABEL" constexpr="12" fulltype="byte" type="byte" />
			<field final="true" static="true" const="13" visibility="public" name="LITERAL1" constexpr="13" fulltype="byte" type="byte" />
			<field final="true" static="true" const="14" visibility="public" name="LITERAL2" constexpr="14" fulltype="byte" type="byte" />
			<field final="true" static="true" const="15" visibility="public" name="LITERAL3" constexpr="15" fulltype="byte" type="byte" />
			<field final="true" static="true" const="16" visibility="public" name="LITERAL4" constexpr="16" fulltype="byte" type="byte" />
			<field final="true" static="true" const="17" visibility="public" name="MARKUP" constexpr="17" fulltype="byte" type="byte" />
			<field final="true" static="true" const="18" visibility="public" name="OPERATOR" constexpr="18" fulltype="byte" type="byte" />
			<field final="true" static="true" const="19" visibility="public" name="ID_COUNT" constexpr="19" fulltype="byte" type="byte" />
			<field final="true" static="true" const="127" visibility="public" name="END" constexpr="127" fulltype="byte" type="byte" />
			<field visibility="public" name="id" fulltype="byte" type="byte">
				<comment>
					<description>The id of this token.</description>
				</comment>
			</field>
			<field visibility="public" name="offset" fulltype="int" type="int">
				<comment>
					<description>The start offset of this token.</description>
				</comment>
			</field>
			<field visibility="public" name="length" fulltype="int" type="int">
				<comment>
					<description>The length of this token.</description>
				</comment>
			</field>
			<field visibility="public" name="rules" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet">
				<comment>
					<description>The rule set of this token.</description>
				</comment>
			</field>
			<field visibility="public" name="next" fulltype="org.gjt.sp.jedit.syntax.Token" type="Token">
				<comment>
					<description>The next token in the linked list.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Token">
				<comment>
					<description>Creates a new token.</description>
					<attribute name="@param">
						<description>id The id of the token</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset of the token</description>
					</attribute>
					<attribute name="@param">
						<description>length The length of the token</description>
					</attribute>
					<attribute name="@param">
						<description>rules The parser rule set that generated this token</description>
					</attribute>
				</comment>
				<params>
					<param name="id" comment="The id of the token" fulltype="byte" type="byte" />
					<param name="offset" comment="The start offset of the token" fulltype="int" type="int" />
					<param name="length" comment="The length of the token" fulltype="int" type="int" />
					<param name="rules" comment="The parser rule set that generated this token" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="stringToToken" fulltype="byte" type="byte">
				<comment>
					<description>Converts a token type string to a token type constant.</description>
					<attribute name="@param">
						<description>value The token type</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="The token type" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="tokenToString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts a token type constant to a token type string.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="token" fulltype="byte" type="byte" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this token.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.syntax" interface="true" fulltype="org.gjt.sp.jedit.syntax.TokenHandler" type="TokenHandler">
		<comment>
			<description>Token markers send tokens to implementations of this interface.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: TokenHandler.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.1pre1</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="handleToken" fulltype="void" type="void">
				<comment>
					<description>Called by the token marker when a syntax token has been parsed.</description>
					<attribute name="@param">
						<description>seg The segment containing the text</description>
					</attribute>
					<attribute name="@param">
						<description>id The token type (one of the constants in the
 {@link Token} class).</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset of the token</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters in the token</description>
					</attribute>
					<attribute name="@param">
						<description>context The line context</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="seg" comment="The segment containing the text" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="id" comment="The token type (one of the constants in the
 {@link Token} class)." fulltype="byte" type="byte" />
					<param name="offset" comment="The start offset of the token" fulltype="int" type="int" />
					<param name="length" comment="The number of characters in the token" fulltype="int" type="int" />
					<param name="context" comment="The line context" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</method>
			<method visibility="public" name="setLineContext" fulltype="void" type="void">
				<comment>
					<description>The token handler can compare this object with the object
 previously given for this line to see if the token type at the end
 of the line has changed (meaning subsequent lines might need to be
 retokenized).</description>
					<attribute name="@since">
						<description>jEdit 4.2pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="lineContext" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.TokenMarker" type="TokenMarker">
		<comment>
			<description>A token marker splits lines of text into tokens. Each token carries
 a length field and an identification tag that can be mapped to a color
 or font style for painting that token.</description>
			<attribute name="@author">
				<description>Slava Pestov, mike dillon</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: TokenMarker.java 21285 2012-03-09 15:46:47Z k_satoda $</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.syntax.Token</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.syntax.TokenHandler</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="TokenMarker" />
			<method visibility="public" name="addRuleSet" fulltype="void" type="void">
				<params>
					<param name="rules" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
				</params>
			</method>
			<method visibility="public" name="getMainRuleSet" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
			<method visibility="public" name="getRuleSet" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet">
				<params>
					<param name="setName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getRuleSets" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet[]" type="ParserRuleSet">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="public" name="markTokens" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext">
				<comment>
					<description>Do not call this method directly; call Buffer.markTokens() instead.</description>
					<attribute name="@param">
						<description>prevContext the context of the previous line, it can be null</description>
					</attribute>
					<attribute name="@param">
						<description>tokenHandler the token handler</description>
					</attribute>
					<attribute name="@param">
						<description>line a segment containing the content of the line</description>
					</attribute>
				</comment>
				<params>
					<param name="prevContext" comment="the context of the previous line, it can be null" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
					<param name="tokenHandler" comment="the token handler" fulltype="org.gjt.sp.jedit.syntax.TokenHandler" type="TokenHandler" />
					<param name="line" comment="a segment containing the content of the line" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext">
			<comment>
				<description>Stores persistent per-line syntax parser state.</description>
			</comment>
			<fields>
				<field visibility="public" name="parent" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				<field visibility="public" name="inRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule" />
				<field visibility="public" name="rules" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
				<field visibility="public" name="spanEndSubst" fulltype="char[]" type="char" />
				<field visibility="public" name="spanEndSubstRegex" fulltype="java.util.regex.Pattern" type="Pattern" />
				<field visibility="public" name="escapeRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule" />
			</fields>
			<methods>
				<constructor visibility="public" name="TokenMarker.LineContext">
					<params>
						<param name="rs" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
						<param name="lc" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
					</params>
				</constructor>
				<constructor visibility="public" name="TokenMarker.LineContext" />
				<method visibility="public" name="intern" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				<method visibility="public" name="hashCode" fulltype="int" type="int" />
				<method visibility="public" name="equals" fulltype="boolean" type="boolean">
					<params>
						<param name="obj" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="clone" fulltype="java.lang.Object" type="Object" />
				<method visibility="public" name="setInRule" fulltype="void" type="void">
					<comment>
						<description>Sets the current rule being processed and adjusts the
 escape rule for the context based on the rule.</description>
					</comment>
					<params>
						<param name="rule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext">
		<comment>
			<description>Stores persistent per-line syntax parser state.</description>
		</comment>
		<fields>
			<field visibility="public" name="parent" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
			<field visibility="public" name="inRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule" />
			<field visibility="public" name="rules" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
			<field visibility="public" name="spanEndSubst" fulltype="char[]" type="char" />
			<field visibility="public" name="spanEndSubstRegex" fulltype="java.util.regex.Pattern" type="Pattern" />
			<field visibility="public" name="escapeRule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule" />
		</fields>
		<methods>
			<constructor visibility="public" name="TokenMarker.LineContext">
				<params>
					<param name="rs" fulltype="org.gjt.sp.jedit.syntax.ParserRuleSet" type="ParserRuleSet" />
					<param name="lc" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
				</params>
			</constructor>
			<constructor visibility="public" name="TokenMarker.LineContext" />
			<method visibility="public" name="intern" fulltype="org.gjt.sp.jedit.syntax.TokenMarker.LineContext" type="TokenMarker.LineContext" />
			<method visibility="public" name="hashCode" fulltype="int" type="int" />
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="clone" fulltype="java.lang.Object" type="Object" />
			<method visibility="public" name="setInRule" fulltype="void" type="void">
				<comment>
					<description>Sets the current rule being processed and adjusts the
 escape rule for the context based on the rule.</description>
				</comment>
				<params>
					<param name="rule" fulltype="org.gjt.sp.jedit.syntax.ParserRule" type="ParserRule" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="DefaultHandler" visibility="public" package="org.gjt.sp.jedit.syntax" superclassfulltype="org.xml.sax.helpers.DefaultHandler" fulltype="org.gjt.sp.jedit.syntax.XModeHandler" type="XModeHandler">
		<comment>
			<description>XML handler for mode definition files.</description>
			<attribute name="@version">
				<description>$Id: XModeHandler.java 21612 2012-04-28 16:49:03Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="XModeHandler">
				<params>
					<param name="modeName" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="resolveEntity" fulltype="org.xml.sax.InputSource" type="InputSource">
				<params>
					<param name="publicId" fulltype="java.lang.String" type="String" />
					<param name="systemId" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="characters" fulltype="void" type="void">
				<params>
					<param name="c" fulltype="char[]" type="char" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="startElement" fulltype="void" type="void">
				<params>
					<param name="uri" fulltype="java.lang.String" type="String" />
					<param name="localName" fulltype="java.lang.String" type="String" />
					<param name="qName" fulltype="java.lang.String" type="String" />
					<param name="attrs" fulltype="org.xml.sax.Attributes" type="Attributes" />
				</params>
			</method>
			<method visibility="public" name="endElement" fulltype="void" type="void">
				<params>
					<param name="uri" fulltype="java.lang.String" type="String" />
					<param name="localName" fulltype="java.lang.String" type="String" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="startDocument" fulltype="void" type="void" />
			<method visibility="public" name="endDocument" fulltype="void" type="void" />
			<method visibility="public" name="getTokenMarker" returncomment="a TokenMarker it cannot be null" fulltype="org.gjt.sp.jedit.syntax.TokenMarker" type="TokenMarker">
				<comment>
					<description>Returns the TokenMarker.</description>
					<attribute name="@return">
						<description>a TokenMarker it cannot be null</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getModeProperties" fulltype="java.util.Hashtable" type="Hashtable" />
			<method abstract="true" visibility="protected" name="error" fulltype="void" type="void">
				<comment>
					<description>Reports an error.
 You must override this method so that the mode loader can do error
 reporting.</description>
					<attribute name="@param">
						<description>msg The error type</description>
					</attribute>
					<attribute name="@param">
						<description>subst A &lt;code&gt;String&lt;/code&gt; or a &lt;code&gt;Throwable&lt;/code&gt;
 containing specific information</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="msg" comment="The error type" fulltype="java.lang.String" type="String" />
					<param name="subst" comment="A &lt;code&gt;String&lt;/code&gt; or a &lt;code&gt;Throwable&lt;/code&gt;
 containing specific information" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method abstract="true" visibility="protected" name="getTokenMarker" fulltype="org.gjt.sp.jedit.syntax.TokenMarker" type="TokenMarker">
				<comment>
					<description>Returns the token marker for the given mode.
 You must override this method so that the mode loader can resolve
 delegate targets.</description>
					<attribute name="@param">
						<description>mode The mode name</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="mode" comment="The mode name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.AntiAlias" type="AntiAlias">
		<comment>
			<description>Class for representing AntiAlias values. 
 All subpixel modes are supported as of jEdit 4.5pre1</description>
			<attribute name="@author">
				<description>ezust</description>
			</attribute>
			<attribute name="@since">
				<description>jedit 4.3pre4</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="none" visibility="public" name="NONE" constexpr="&quot;none&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="standard" visibility="public" name="STANDARD" constexpr="&quot;standard&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="subpixel" visibility="public" name="SUBPIXEL" constexpr="&quot;subpixel&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="subpixel HRGB" visibility="public" name="SUBPIXEL_HRGB" constexpr="&quot;subpixel HRGB&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="subpixel VRGB" visibility="public" name="SUBPIXEL_VRGB" constexpr="&quot;subpixel VRGB&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="subpixel HBGR" visibility="public" name="SUBPIXEL_HBGR" constexpr="&quot;subpixel HBGR&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="subpixel VBGR" visibility="public" name="SUBPIXEL_VBGR" constexpr="&quot;subpixel VBGR&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" visibility="public" name="comboChoices" fulltype="java.lang.String[]" type="String" />
			<field final="true" static="true" visibility="public" name="renderHints" fulltype="java.lang.Object[]" type="Object" />
		</fields>
		<methods>
			<constructor visibility="public" name="AntiAlias">
				<params>
					<param name="isEnabled" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="AntiAlias">
				<params>
					<param name="val" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="AntiAlias">
				<params>
					<param name="v" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="set" fulltype="void" type="void">
				<params>
					<param name="newValue" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="renderHint" returncomment="corresponding text antialias value from RenderingHints class" fulltype="java.lang.Object" type="Object">
				<comment>
					<attribute name="@return">
						<description>corresponding text antialias value from RenderingHints class</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="other" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="fromString" fulltype="void" type="void">
				<params>
					<param name="v" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="val" fulltype="int" type="int" />
		</methods>
	</jelclass>
	<jelclass superclass="ShapedFoldPainter" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.textarea.ShapedFoldPainter" fulltype="org.gjt.sp.jedit.textarea.CircleFoldPainter" type="CircleFoldPainter">
		<methods>
			<constructor visibility="public" name="CircleFoldPainter" />
			<method visibility="protected" name="paintFoldShape" fulltype="void" type="void">
				<params>
					<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="top" fulltype="int" type="int" />
					<param name="bottom" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Selection.Rect" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.textarea.Selection.Rect" fulltype="org.gjt.sp.jedit.textarea.ColumnBlock" type="ColumnBlock">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.textarea.Node" type="Node" />
		</implements>
		<methods>
			<constructor visibility="public" name="ColumnBlock" />
			<constructor visibility="public" name="ColumnBlock">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" fulltype="int" type="int" />
					<param name="startColumn" fulltype="int" type="int" />
					<param name="endLine" fulltype="int" type="int" />
					<param name="endColumn" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="ColumnBlock">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" fulltype="int" type="int" />
					<param name="endLine" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="addChild" fulltype="void" type="void">
				<params>
					<param name="node" fulltype="org.gjt.sp.jedit.textarea.Node" type="Node" />
				</params>
			</method>
			<method visibility="public" name="getChildren" fulltype="java.util.Vector" type="Vector" />
			<method visibility="public" name="getParent" fulltype="org.gjt.sp.jedit.textarea.Node" type="Node" />
			<method visibility="public" name="setWidth" fulltype="void" type="void">
				<params>
					<param name="width" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setParent" fulltype="void" type="void">
				<params>
					<param name="parent" fulltype="org.gjt.sp.jedit.textarea.Node" type="Node" />
				</params>
			</method>
			<method visibility="public" name="setLines" fulltype="void" type="void">
				<params>
					<param name="lines" fulltype="java.util.Vector" type="Vector" />
				</params>
			</method>
			<method visibility="public" name="getLines" fulltype="java.util.Vector" type="Vector" />
			<method visibility="public" name="getStartLine" fulltype="int" type="int" />
			<method visibility="public" name="getEndLine" fulltype="int" type="int" />
			<method visibility="public" name="getColumnWidth" fulltype="int" type="int" />
			<method visibility="public" name="isLineWithinThisBlock" fulltype="int" type="int">
				<params>
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getContainingBlock" fulltype="org.gjt.sp.jedit.textarea.ColumnBlock" type="ColumnBlock">
				<params>
					<param name="line" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getColumnBlock" fulltype="org.gjt.sp.jedit.textarea.ColumnBlock" type="ColumnBlock">
				<params>
					<param name="line" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="searchChildren" fulltype="org.gjt.sp.jedit.textarea.ColumnBlock" type="ColumnBlock">
				<params>
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setDirtyStatus" fulltype="void" type="void">
				<params>
					<param name="status" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="updateLineNo" fulltype="void" type="void">
				<params>
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="updateColumnBlockLineOffset" fulltype="void" type="void">
				<params>
					<param name="line" fulltype="int" type="int" />
					<param name="offsetAdd" fulltype="int" type="int" />
					<param name="increaseStartOffset" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setTabSizeDirtyStatus" fulltype="void" type="void">
				<params>
					<param name="dirty" fulltype="boolean" type="boolean" />
					<param name="recursive" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="areTabSizesDirty" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.ColumnBlockLine" type="ColumnBlockLine">
		<methods>
			<constructor visibility="public" name="ColumnBlockLine">
				<params>
					<param name="line" fulltype="int" type="int" />
					<param name="lineStartIndex" fulltype="int" type="int" />
					<param name="lineEndIndex" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="getLine" fulltype="int" type="int" />
			<method visibility="public" name="getColumnStartIndex" fulltype="int" type="int" />
			<method visibility="public" name="getColumnEndIndex" fulltype="int" type="int" />
			<method visibility="public" name="setLineLength" fulltype="void" type="void">
				<params>
					<param name="lineLength" fulltype="float" type="float" />
				</params>
			</method>
			<method visibility="public" name="getLineLength" fulltype="float" type="float" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="updateLineNo" fulltype="void" type="void">
				<params>
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.DisplayManager" type="DisplayManager">
		<comment>
			<description>Manages low-level text display tasks, such as folding.</description>
			<attribute name="@since">
				<description>jEdit 4.2pre1</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: DisplayManager.java 21329 2012-03-11 16:45:42Z k_satoda $</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="bufferClosed" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="getBuffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="isLineVisible" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified line is visible.</description>
					<attribute name="@param">
						<description>line A physical line index</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="A physical line index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="isOutsideNarrowing" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the display is narrowed and the specified line is
 outside of the narrowing.</description>
					<attribute name="@param">
						<description>line A physical line index</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="A physical line index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getFirstVisibleLine" fulltype="int" type="int">
				<comment>
					<description>Returns the physical line number of the first visible line.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLastVisibleLine" fulltype="int" type="int">
				<comment>
					<description>Returns the physical line number of the last visible line.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getNextVisibleLine" fulltype="int" type="int">
				<comment>
					<description>Returns the next visible line after the specified line index,
 or (-1) if there is no next visible line.</description>
					<attribute name="@param">
						<description>line A physical line index</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="A physical line index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getPrevVisibleLine" returncomment="the previous visible physical line or -1 if there is no visible line" fulltype="int" type="int">
				<comment>
					<description>Returns the previous visible line before the specified line index.</description>
					<attribute name="@param">
						<description>line a physical line index</description>
					</attribute>
					<attribute name="@return">
						<description>the previous visible physical line or -1 if there is no visible line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="a physical line index" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getScreenLineCount" returncomment="the screen line count" fulltype="int" type="int">
				<comment>
					<description>Returns how many screen lines contains the given physical line.
 It can be greater than 1 when using soft wrap</description>
					<attribute name="@param">
						<description>line the physical line</description>
					</attribute>
					<attribute name="@return">
						<description>the screen line count</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="the physical line" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getScrollLineCount" returncomment="the number of displayable lines" fulltype="int" type="int">
				<comment>
					<description>Returns the number of displayable lines
 It can be greater than the number of lines of the buffer when using
 soft wrap (a line can count for n lines), or when using folding, if
 the foldings are collapsed</description>
					<attribute name="@return">
						<description>the number of displayable lines</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="collapseFold" fulltype="void" type="void">
				<comment>
					<description>Collapses the fold at the specified physical line index.</description>
					<attribute name="@param">
						<description>line A physical line index</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="A physical line index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="expandFold" returncomment="the line number of the first subfold, or -1 if none" fulltype="int" type="int">
				<comment>
					<description>Expands the fold at the specified physical line index.</description>
					<attribute name="@param">
						<description>line A physical line index</description>
					</attribute>
					<attribute name="@param">
						<description>fully If true, all subfolds will also be expanded</description>
					</attribute>
					<attribute name="@return">
						<description>the line number of the first subfold, or -1 if none</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="A physical line index" fulltype="int" type="int" />
					<param name="fully" comment="If true, all subfolds will also be expanded" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="expandAllFolds" fulltype="void" type="void">
				<comment>
					<description>Expands all folds.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="expandFolds" fulltype="void" type="void">
				<comment>
					<description>This method should only be called from &lt;code&gt;actions.xml&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="digit" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="expandFolds" fulltype="void" type="void">
				<comment>
					<description>Expands all folds with the specified fold level.</description>
					<attribute name="@param">
						<description>foldLevel The fold level</description>
					</attribute>
					<attribute name="@param">
						<description>update If true, notify the text area of a fold level change. Since this will
   automatically move the caret if still inside a fold, this may not be what we want.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5</description>
					</attribute>
				</comment>
				<params>
					<param name="foldLevel" comment="The fold level" fulltype="int" type="int" />
					<param name="update" comment="If true, notify the text area of a fold level change. Since this will
   automatically move the caret if still inside a fold, this may not be what we want." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="expandFolds" fulltype="void" type="void">
				<comment>
					<description>Expands all folds with the specified fold level.</description>
					<attribute name="@param">
						<description>foldLevel The fold level</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="foldLevel" comment="The fold level" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="narrow" fulltype="void" type="void">
				<comment>
					<description>Narrows the visible portion of the buffer to the specified
 line range.</description>
					<attribute name="@param">
						<description>start The first line</description>
					</attribute>
					<attribute name="@param">
						<description>end The last line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The first line" fulltype="int" type="int" />
					<param name="end" comment="The last line" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="BufferAdapter" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.buffer.BufferAdapter" fulltype="org.gjt.sp.jedit.textarea.ElasticTabStopBufferListener" type="ElasticTabStopBufferListener">
		<comment>
			<description>Buffer Listener for Elastic Tabstops.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ElasticTabStopBufferListener">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</constructor>
			<method visibility="public" name="contentInserted" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="numLines" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="contentRemoved" fulltype="void" type="void">
				<comment>
					<description>Called when text is removed from the buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer in question</description>
					</attribute>
					<attribute name="@param">
						<description>startLine The first line</description>
					</attribute>
					<attribute name="@param">
						<description>offset The start offset, from the beginning of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>numLines The number of lines removed</description>
					</attribute>
					<attribute name="@param">
						<description>length The number of characters removed</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer in question" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" comment="The first line" fulltype="int" type="int" />
					<param name="offset" comment="The start offset, from the beginning of the buffer" fulltype="int" type="int" />
					<param name="numLines" comment="The number of lines removed" fulltype="int" type="int" />
					<param name="length" comment="The number of characters removed" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="transactionComplete" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="preContentInserted" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="numLines" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="preContentRemoved" fulltype="void" type="void">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="numLines" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.ElasticTabstopsTabExpander" type="ElasticTabstopsTabExpander">
		<implements>
			<interface fulltype="javax.swing.text.TabExpander" type="TabExpander" />
		</implements>
		<comment>
			<description>A Swing TabExpander for Elastic Tabstops.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ElasticTabstopsTabExpander">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</constructor>
			<method visibility="public" name="nextTabStop" fulltype="float" type="float">
				<params>
					<param name="x" fulltype="float" type="float" />
					<param name="tabOffset" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.textarea" interface="true" fulltype="org.gjt.sp.jedit.textarea.FoldPainter" type="FoldPainter">
		<comment>
			<description>FoldPainter defines the interface for fold painters in the gutter.</description>
			<attribute name="@since">
				<description>jEdit 4.3pre16</description>
			</attribute>
			<attribute name="@author">
				<description>Shlomy Reinstein</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: FoldPainter.java 18569 2010-09-16 08:35:11Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="paintFoldStart" fulltype="void" type="void">
				<comment>
					<description>Paints the beginning of a fold in the gutter.</description>
					<attribute name="@param">
						<description>gutter The gutter in which the fold is drawn.</description>
					</attribute>
					<attribute name="@param">
						<description>gfx The graphics object to use for the painting.</description>
					</attribute>
					<attribute name="@param">
						<description>screenLine The index of the line on the screen (e.g. 5th from top).</description>
					</attribute>
					<attribute name="@param">
						<description>physicalLine The index of the line in the buffer.</description>
					</attribute>
					<attribute name="@param">
						<description>nextLineVisible Whether the next buffer line is visible on screen.</description>
					</attribute>
					<attribute name="@param">
						<description>y The y coordinate of the top of the line on the screen.</description>
					</attribute>
					<attribute name="@param">
						<description>lineHeight The line height in pixels.</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer to which the line belongs.</description>
					</attribute>
				</comment>
				<params>
					<param name="gutter" comment="The gutter in which the fold is drawn." fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter" />
					<param name="gfx" comment="The graphics object to use for the painting." fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" comment="The index of the line on the screen (e.g. 5th from top)." fulltype="int" type="int" />
					<param name="physicalLine" comment="The index of the line in the buffer." fulltype="int" type="int" />
					<param name="nextLineVisible" comment="Whether the next buffer line is visible on screen." fulltype="boolean" type="boolean" />
					<param name="y" comment="The y coordinate of the top of the line on the screen." fulltype="int" type="int" />
					<param name="lineHeight" comment="The line height in pixels." fulltype="int" type="int" />
					<param name="buffer" comment="The buffer to which the line belongs." fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="paintFoldEnd" fulltype="void" type="void">
				<comment>
					<description>Paints the end of a fold in the gutter.</description>
					<attribute name="@param">
						<description>gutter The gutter in which the fold is drawn.</description>
					</attribute>
					<attribute name="@param">
						<description>gfx The graphics object to use for the painting.</description>
					</attribute>
					<attribute name="@param">
						<description>screenLine The index of the line on the screen (e.g. 5th from top).</description>
					</attribute>
					<attribute name="@param">
						<description>physicalLine The index of the line in the buffer.</description>
					</attribute>
					<attribute name="@param">
						<description>y The y coordinate of the top of the line on the screen.</description>
					</attribute>
					<attribute name="@param">
						<description>lineHeight The line height in pixels.</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer to which the line belongs.</description>
					</attribute>
				</comment>
				<params>
					<param name="gutter" comment="The gutter in which the fold is drawn." fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter" />
					<param name="gfx" comment="The graphics object to use for the painting." fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" comment="The index of the line on the screen (e.g. 5th from top)." fulltype="int" type="int" />
					<param name="physicalLine" comment="The index of the line in the buffer." fulltype="int" type="int" />
					<param name="y" comment="The y coordinate of the top of the line on the screen." fulltype="int" type="int" />
					<param name="lineHeight" comment="The line height in pixels." fulltype="int" type="int" />
					<param name="buffer" comment="The buffer to which the line belongs." fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="paintFoldMiddle" fulltype="void" type="void">
				<comment>
					<description>Paints the middle of a fold (single line) in the gutter.</description>
					<attribute name="@param">
						<description>gutter The gutter in which the fold is drawn.</description>
					</attribute>
					<attribute name="@param">
						<description>gfx The graphics object to use for the painting.</description>
					</attribute>
					<attribute name="@param">
						<description>screenLine The index of the line on the screen (e.g. 5th from top).</description>
					</attribute>
					<attribute name="@param">
						<description>physicalLine The index of the line in the buffer.</description>
					</attribute>
					<attribute name="@param">
						<description>y The y coordinate of the top of the line on the screen.</description>
					</attribute>
					<attribute name="@param">
						<description>lineHeight The line height in pixels.</description>
					</attribute>
					<attribute name="@param">
						<description>buffer The buffer to which the line belongs.</description>
					</attribute>
				</comment>
				<params>
					<param name="gutter" comment="The gutter in which the fold is drawn." fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter" />
					<param name="gfx" comment="The graphics object to use for the painting." fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" comment="The index of the line on the screen (e.g. 5th from top)." fulltype="int" type="int" />
					<param name="physicalLine" comment="The index of the line in the buffer." fulltype="int" type="int" />
					<param name="y" comment="The y coordinate of the top of the line on the screen." fulltype="int" type="int" />
					<param name="lineHeight" comment="The line height in pixels." fulltype="int" type="int" />
					<param name="buffer" comment="The buffer to which the line belongs." fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JComponent" visibility="public" package="org.gjt.sp.jedit.textarea" serializable="true" superclassfulltype="javax.swing.JComponent" fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter">
		<implements>
			<interface fulltype="javax.swing.SwingConstants" type="SwingConstants" />
		</implements>
		<comment>
			<description>The gutter is the component that displays folding indicators and line
 numbers to the left of the text area. The only methods in this class
 that should be called by plugins are those for adding and removing
 text area extensions.</description>
			<attribute name="@see">
				<description>#addExtension(TextAreaExtension)</description>
			</attribute>
			<attribute name="@see">
				<description>#addExtension(int,TextAreaExtension)</description>
			</attribute>
			<attribute name="@see">
				<description>#removeExtension(TextAreaExtension)</description>
			</attribute>
			<attribute name="@see">
				<description>TextAreaExtension</description>
			</attribute>
			<attribute name="@see">
				<description>TextArea</description>
			</attribute>
			<attribute name="@author">
				<description>Mike Dillon and Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Gutter.java 21683 2012-05-19 09:33:20Z jarekczek $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-2147483648" visibility="public" name="LOWEST_LAYER" constexpr="-2147483648" fulltype="int" type="int">
				<comment>
					<description>The lowest possible layer.</description>
					<attribute name="@see">
						<description>#addExtension(int,TextAreaExtension)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="DEFAULT_LAYER" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>Default extension layer. This is above the wrap guide but below the
 bracket highlight.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="2147483647" visibility="public" name="HIGHEST_LAYER" constexpr="2147483647" fulltype="int" type="int">
				<comment>
					<description>Highest possible layer.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="foldPainter" visibility="public" name="FOLD_PAINTER_PROPERTY" constexpr="&quot;foldPainter&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Fold painter service.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre16</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="org.gjt.sp.jedit.textarea.FoldPainter" visibility="public" name="FOLD_PAINTER_SERVICE" constexpr="&quot;org.gjt.sp.jedit.textarea.FoldPainter&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="Triangle" visibility="public" name="DEFAULT_FOLD_PAINTER_SERVICE" constexpr="&quot;Triangle&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="Gutter">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</constructor>
			<method visibility="public" name="setFoldPainter" fulltype="void" type="void">
				<params>
					<param name="painter" fulltype="org.gjt.sp.jedit.textarea.FoldPainter" type="FoldPainter" />
				</params>
			</method>
			<method visibility="public" name="paintComponent" fulltype="void" type="void">
				<params>
					<param name="_gfx" fulltype="java.awt.Graphics" type="Graphics" />
				</params>
			</method>
			<method visibility="public" name="addExtension" fulltype="void" type="void">
				<comment>
					<description>Adds a text area extension, which can perform custom painting and
 tool tip handling.</description>
					<attribute name="@param">
						<description>extension The extension</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="extension" comment="The extension" fulltype="org.gjt.sp.jedit.textarea.TextAreaExtension" type="TextAreaExtension" />
				</params>
			</method>
			<method visibility="public" name="addExtension" fulltype="void" type="void">
				<comment>
					<description>Adds a text area extension, which can perform custom painting and
 tool tip handling.</description>
					<attribute name="@param">
						<description>layer The layer to add the extension to. Note that more than
 extension can share the same layer.</description>
					</attribute>
					<attribute name="@param">
						<description>extension The extension</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="layer" comment="The layer to add the extension to. Note that more than
 extension can share the same layer." fulltype="int" type="int" />
					<param name="extension" comment="The extension" fulltype="org.gjt.sp.jedit.textarea.TextAreaExtension" type="TextAreaExtension" />
				</params>
			</method>
			<method visibility="public" name="removeExtension" fulltype="void" type="void">
				<comment>
					<description>Removes a text area extension. It will no longer be asked to
 perform custom painting and tool tip handling.</description>
					<attribute name="@param">
						<description>extension The extension</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="extension" comment="The extension" fulltype="org.gjt.sp.jedit.textarea.TextAreaExtension" type="TextAreaExtension" />
				</params>
			</method>
			<method visibility="public" name="getExtensions" fulltype="org.gjt.sp.jedit.textarea.TextAreaExtension[]" type="TextAreaExtension">
				<comment>
					<description>Returns an array of registered text area extensions. Useful for
 debugging purposes.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getToolTipText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the tool tip to display at the specified location.</description>
					<attribute name="@param">
						<description>evt The mouse event</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="The mouse event" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="public" name="setBorder" fulltype="void" type="void">
				<comment>
					<description>Convenience method for setting a default matte border on the right
 with the specified border width and color</description>
					<attribute name="@param">
						<description>width The border width (in pixels)</description>
					</attribute>
					<attribute name="@param">
						<description>color1 The focused border color</description>
					</attribute>
					<attribute name="@param">
						<description>color2 The unfocused border color</description>
					</attribute>
					<attribute name="@param">
						<description>color3 The gutter/text area gap color</description>
					</attribute>
				</comment>
				<params>
					<param name="width" comment="The border width (in pixels)" fulltype="int" type="int" />
					<param name="color1" comment="The focused border color" fulltype="java.awt.Color" type="Color" />
					<param name="color2" comment="The unfocused border color" fulltype="java.awt.Color" type="Color" />
					<param name="color3" comment="The gutter/text area gap color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method visibility="public" name="updateBorder" fulltype="void" type="void">
				<comment>
					<description>Sets the border differently if the text area has focus or not.</description>
				</comment>
			</method>
			<method visibility="public" name="setBorder" fulltype="void" type="void">
				<params>
					<param name="border" fulltype="javax.swing.border.Border" type="Border" />
				</params>
			</method>
			<method visibility="public" name="setMinLineNumberDigitCount" fulltype="void" type="void">
				<params>
					<param name="min" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setFont" fulltype="void" type="void">
				<params>
					<param name="font" fulltype="java.awt.Font" type="Font" />
				</params>
			</method>
			<method visibility="public" name="setGutterEnabled" fulltype="void" type="void">
				<params>
					<param name="enabled" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isSelectionAreaEnabled" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setSelectionAreaEnabled" fulltype="void" type="void">
				<params>
					<param name="enabled" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setSelectionAreaBackground" fulltype="void" type="void">
				<params>
					<param name="bgColor" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method visibility="public" name="setSelectionAreaWidth" fulltype="void" type="void">
				<params>
					<param name="width" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getHighlightedForeground" returncomment="The highlight color" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Get the foreground color for highlighted line numbers</description>
					<attribute name="@return">
						<description>The highlight color</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setHighlightedForeground" fulltype="void" type="void">
				<params>
					<param name="highlight" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method visibility="public" name="getCurrentLineForeground" fulltype="java.awt.Color" type="Color" />
			<method visibility="public" name="setCurrentLineForeground" fulltype="void" type="void">
				<params>
					<param name="highlight" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method visibility="public" name="getFoldColor" fulltype="java.awt.Color" type="Color" />
			<method visibility="public" name="setFoldColor" fulltype="void" type="void">
				<params>
					<param name="foldColor" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method visibility="public" name="getPreferredSize" fulltype="java.awt.Dimension" type="Dimension" />
			<method visibility="public" name="getMinimumSize" fulltype="java.awt.Dimension" type="Dimension" />
			<method visibility="public" name="getLineNumberAlignment" returncomment="Gutter.RIGHT, Gutter.CENTER, Gutter.LEFT" fulltype="int" type="int">
				<comment>
					<description>Identifies whether the horizontal alignment of the line numbers.</description>
					<attribute name="@return">
						<description>Gutter.RIGHT, Gutter.CENTER, Gutter.LEFT</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setLineNumberAlignment" fulltype="void" type="void">
				<comment>
					<description>Sets the horizontal alignment of the line numbers.</description>
					<attribute name="@param">
						<description>alignment Gutter.RIGHT, Gutter.CENTER, Gutter.LEFT</description>
					</attribute>
				</comment>
				<params>
					<param name="alignment" comment="Gutter.RIGHT, Gutter.CENTER, Gutter.LEFT" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="isExpanded" returncomment="true if the gutter is expanded, false if it is collapsed" fulltype="boolean" type="boolean">
				<comment>
					<description>Identifies whether the gutter is collapsed or expanded.</description>
					<attribute name="@return">
						<description>true if the gutter is expanded, false if it is collapsed</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setExpanded" fulltype="void" type="void">
				<comment>
					<description>Sets whether the gutter is collapsed or expanded and force the text
 area to update its layout if there is a change.</description>
					<attribute name="@param">
						<description>expanded true if the gutter is expanded,
                   false if it is collapsed</description>
					</attribute>
				</comment>
				<params>
					<param name="expanded" comment="true if the gutter is expanded,
                   false if it is collapsed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="toggleExpanded" fulltype="void" type="void">
				<comment>
					<description>Toggles whether the gutter is collapsed or expanded.</description>
				</comment>
			</method>
			<method visibility="public" name="getHighlightInterval" returncomment="The number of lines between highlighted line numbers or
          zero if highlighting is disabled" fulltype="int" type="int">
				<comment>
					<description>Sets the number of lines between highlighted line numbers.</description>
					<attribute name="@return">
						<description>The number of lines between highlighted line numbers or
          zero if highlighting is disabled</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setHighlightInterval" fulltype="void" type="void">
				<comment>
					<description>Sets the number of lines between highlighted line numbers. Any value
 less than or equal to one will result in highlighting being disabled.</description>
					<attribute name="@param">
						<description>interval The number of lines between highlighted line numbers</description>
					</attribute>
				</comment>
				<params>
					<param name="interval" comment="The number of lines between highlighted line numbers" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="isCurrentLineHighlightEnabled" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setCurrentLineHighlightEnabled" fulltype="void" type="void">
				<params>
					<param name="enabled" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getStructureHighlightColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the structure highlight color.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setStructureHighlightColor" fulltype="void" type="void">
				<comment>
					<description>Sets the structure highlight color.</description>
					<attribute name="@param">
						<description>structureHighlightColor The structure highlight color</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="structureHighlightColor" comment="The structure highlight color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method final="true" visibility="public" name="isStructureHighlightEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if structure highlighting is enabled, false otherwise.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setStructureHighlightEnabled" fulltype="void" type="void">
				<comment>
					<description>Enables or disables structure highlighting.</description>
					<attribute name="@param">
						<description>structureHighlight True if structure highlighting should be
 enabled, false otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="structureHighlight" comment="True if structure highlighting should be
 enabled, false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setSelectionPopupHandler" fulltype="void" type="void">
				<params>
					<param name="handler" fulltype="org.gjt.sp.jedit.textarea.GutterPopupHandler" type="GutterPopupHandler" />
				</params>
			</method>
			<method visibility="public" name="getSelectionPopupHandler" fulltype="org.gjt.sp.jedit.textarea.GutterPopupHandler" type="GutterPopupHandler" />
			<method visibility="public" name="setMouseActionsProvider" fulltype="void" type="void">
				<params>
					<param name="mouseActionsProvider" fulltype="org.gjt.sp.jedit.textarea.MouseActionsProvider" type="MouseActionsProvider" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.textarea" interface="true" fulltype="org.gjt.sp.jedit.textarea.GutterPopupHandler" type="GutterPopupHandler">
		<methods>
			<method visibility="public" name="handlePopup" fulltype="void" type="void">
				<params>
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="TextArea" visibility="public" package="org.gjt.sp.jedit.textarea" serializable="true" superclassfulltype="org.gjt.sp.jedit.textarea.TextArea" fulltype="org.gjt.sp.jedit.textarea.JEditEmbeddedTextArea" type="JEditEmbeddedTextArea">
		<comment>
			<description>An embeddable TextArea for jEdit plugins to use.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JEditEmbeddedTextArea">
				<comment>
					<description>Instantiate a TextArea.</description>
				</comment>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="TextArea" visibility="public" package="org.gjt.sp.jedit.textarea" serializable="true" superclassfulltype="org.gjt.sp.jedit.textarea.TextArea" fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea">
		<comment>
			<description>jEdit&apos;s text component.&lt;p&gt;

 Unlike most other text editors, the selection API permits selection and
 concurrent manipulation of multiple, non-contiguous regions of text.
 Methods in this class that deal with selecting text rely upon classes derived
 the {@link Selection} class.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: JEditTextArea.java 21772 2012-06-08 19:43:00Z jarekczek $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="foldPainter" visibility="public" name="FOLD_PAINTER_PROPERTY" constexpr="&quot;foldPainter&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Fold painter service.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre16</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="org.gjt.sp.jedit.textarea.FoldPainter" visibility="public" name="FOLD_PAINTER_SERVICE" constexpr="&quot;org.gjt.sp.jedit.textarea.FoldPainter&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="Triangle" visibility="public" name="DEFAULT_FOLD_PAINTER_SERVICE" constexpr="&quot;Triangle&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="JEditTextArea">
				<comment>
					<description>Creates a new JEditTextArea.</description>
				</comment>
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</constructor>
			<method visibility="public" name="dispose" fulltype="void" type="void" />
			<method visibility="public" name="getFoldPainter" fulltype="org.gjt.sp.jedit.textarea.FoldPainter" type="FoldPainter" />
			<method visibility="public" name="home" fulltype="void" type="void">
				<comment>
					<description>An override to record the acutual action taken for home().</description>
				</comment>
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="end" fulltype="void" type="void">
				<comment>
					<description>An override to record the acutual action taken for end().</description>
				</comment>
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="smartHome" fulltype="void" type="void">
				<comment>
					<description>An override to record the acutual action taken for smartHome().</description>
				</comment>
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="smartEnd" fulltype="void" type="void">
				<comment>
					<description>An override to record the acutual action taken for smartHome().</description>
				</comment>
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToBufferEnd" fulltype="void" type="void">
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToMatchingBracket" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the bracket matching the one before the caret.
 Also sends PositionChanging if it goes somewhere.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="goToBufferStart" fulltype="void" type="void">
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="replaceSelection" fulltype="int" type="int">
				<params>
					<param name="selectedText" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="showGoToLineDialog" fulltype="void" type="void">
				<comment>
					<description>Displays the &apos;go to line&apos; dialog box, and moves the caret to the
 specified line number.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="userInput" fulltype="void" type="void">
				<comment>
					<description>Handles the insertion of the specified character. It performs the
 following operations in addition to TextArea#userInput(char):
 &lt;ul&gt;
 &lt;li&gt;Inserting a space with automatic abbrev expansion enabled will
 try to expand the abbrev
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>ch The character</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="The character" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="addExplicitFold" fulltype="void" type="void">
				<comment>
					<description>Surrounds the selection with explicit fold markers.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="formatParagraph" fulltype="void" type="void">
				<comment>
					<description>Formats the paragraph containing the caret.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="protected" name="doWordCount" fulltype="void" type="void">
				<params>
					<param name="view" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="showWordCountDialog" fulltype="void" type="void">
				<comment>
					<description>Displays the &apos;word count&apos; dialog box.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getView" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns this text area&apos;s view.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getFoldPainterName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="handlePopupTrigger" fulltype="void" type="void">
				<comment>
					<description>Do the same thing as right-clicking on the text area. The Gestures
 plugin uses this API.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="public" name="createPopupMenu" fulltype="void" type="void">
				<comment>
					<description>Creates the popup menu.</description>
					<attribute name="@since">
						<description>4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.MouseActions" type="MouseActions">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.textarea.MouseActionsProvider" type="MouseActionsProvider" />
		</implements>
		<methods>
			<method visibility="public" name="getActionForEvent" fulltype="java.lang.String" type="String">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
					<param name="variant" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.textarea" interface="true" fulltype="org.gjt.sp.jedit.textarea.MouseActionsProvider" type="MouseActionsProvider">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: MouseActionsProvider.java 15577 2009-06-25 05:55:16Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getActionForEvent" fulltype="java.lang.String" type="String">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
					<param name="variant" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="TextAreaMouseHandler" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.textarea.TextAreaMouseHandler" fulltype="org.gjt.sp.jedit.textarea.MouseHandler" type="MouseHandler">
		<comment>
			<description>The mouseHandler used for jEdit.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="MouseHandler">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea" />
				</params>
			</constructor>
			<method visibility="public" name="mousePressed" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="public" name="mouseReleased" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.textarea" interface="true" fulltype="org.gjt.sp.jedit.textarea.Node" type="Node">
		<methods>
			<method visibility="public" name="addChild" fulltype="void" type="void">
				<params>
					<param name="node" fulltype="org.gjt.sp.jedit.textarea.Node" type="Node" />
				</params>
			</method>
			<method visibility="public" name="getChildren" fulltype="java.util.Vector" type="Vector" />
			<method visibility="public" name="getParent" fulltype="org.gjt.sp.jedit.textarea.Node" type="Node" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.ScrollLayout" type="ScrollLayout">
		<implements>
			<interface fulltype="java.awt.LayoutManager" type="LayoutManager" />
		</implements>
		<fields>
			<field final="true" static="true" const="center" visibility="public" name="CENTER" constexpr="&quot;center&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="right" visibility="public" name="RIGHT" constexpr="&quot;right&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="left" visibility="public" name="LEFT" constexpr="&quot;left&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="bottom" visibility="public" name="BOTTOM" constexpr="&quot;bottom&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="top" visibility="public" name="TOP" constexpr="&quot;top&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="ScrollLayout" />
			<method visibility="public" name="addLayoutComponent" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="removeLayoutComponent" fulltype="void" type="void">
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="preferredLayoutSize" fulltype="java.awt.Dimension" type="Dimension">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="minimumLayoutSize" fulltype="java.awt.Dimension" type="Dimension">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
			<method visibility="public" name="layoutContainer" fulltype="void" type="void">
				<params>
					<param name="parent" fulltype="java.awt.Container" type="Container" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.textarea" interface="true" fulltype="org.gjt.sp.jedit.textarea.ScrollListener" type="ScrollListener">
		<implements>
			<interface fulltype="java.util.EventListener" type="EventListener" />
		</implements>
		<comment>
			<description>A scroll listener will be notified when the text area is scrolled, either
 horizontally or vertically.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ScrollListener.java 15570 2009-06-25 00:43:57Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 3.2pre2</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="scrolledVertically" fulltype="void" type="void">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
			<method visibility="public" name="scrolledHorizontally" fulltype="void" type="void">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection">
		<implements>
			<interface fulltype="java.lang.Cloneable" type="Cloneable" />
		</implements>
		<comment>
			<description>An abstract class that holds data on a region of selected text.
 As an abstract class, it cannot be used
 directly, but instead serves as a parent class for two specific types
 of selection structures:
 &lt;ul&gt;
 &lt;li&gt;{@link Selection.Range} - represents an ordinary range of selected text.&lt;/li&gt;
 &lt;li&gt;{@link Selection.Rect} - represents a rectangular selection.&lt;/li&gt;
 &lt;/ul&gt;</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Selection.java 21723 2012-05-27 14:34:13Z k_satoda $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 3.2pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="Selection" />
			<constructor visibility="protected" name="Selection">
				<params>
					<param name="sel" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
				</params>
			</constructor>
			<constructor visibility="protected" name="Selection">
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="getStart" fulltype="int" type="int">
				<comment>
					<description>Returns the start offset of this selection.</description>
				</comment>
			</method>
			<method visibility="public" name="getEnd" fulltype="int" type="int">
				<comment>
					<description>Returns the end offset of this selection.</description>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="getStart" fulltype="int" type="int">
				<comment>
					<description>Returns the beginning of the portion of the selection
 falling on the specified line. Used to manipulate
 selection text on a line-by-line basis.</description>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>line The line number</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" comment="The line number" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="public" name="getEnd" fulltype="int" type="int">
				<comment>
					<description>Returns the end of the portion of the selection
 falling on the specified line. Used to manipulate
 selection text on a line-by-line basis.</description>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>line The line number</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" comment="The line number" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getStartLine" fulltype="int" type="int">
				<comment>
					<description>Returns the starting line number of this selection.</description>
				</comment>
			</method>
			<method visibility="public" name="getEndLine" fulltype="int" type="int">
				<comment>
					<description>Returns the ending line number of this selection.</description>
				</comment>
			</method>
			<method visibility="public" name="overlaps" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if this selection and the specified selection overlap.</description>
					<attribute name="@param">
						<description>s The other selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="The other selection" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="clone" fulltype="java.lang.Object" type="Object" />
		</methods>
		<jelclass superclass="Selection" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.textarea.Selection" fulltype="org.gjt.sp.jedit.textarea.Selection.Range" type="Selection.Range">
			<comment>
				<description>An ordinary range selection.</description>
				<attribute name="@since">
					<description>jEdit 3.2pre1</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="public" name="Selection.Range" />
				<constructor visibility="public" name="Selection.Range">
					<params>
						<param name="sel" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
					</params>
				</constructor>
				<constructor visibility="public" name="Selection.Range">
					<params>
						<param name="start" fulltype="int" type="int" />
						<param name="end" fulltype="int" type="int" />
					</params>
				</constructor>
				<method visibility="public" name="getStart" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="getEnd" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Selection" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.textarea.Selection" fulltype="org.gjt.sp.jedit.textarea.Selection.Rect" type="Selection.Rect">
			<comment>
				<description>A rectangular selection.</description>
				<attribute name="@since">
					<description>jEdit 3.2pre1</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="public" name="Selection.Rect" />
				<constructor visibility="public" name="Selection.Rect">
					<params>
						<param name="sel" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
					</params>
				</constructor>
				<constructor visibility="public" name="Selection.Rect">
					<params>
						<param name="start" fulltype="int" type="int" />
						<param name="end" fulltype="int" type="int" />
					</params>
				</constructor>
				<constructor visibility="public" name="Selection.Rect">
					<params>
						<param name="startLine" fulltype="int" type="int" />
						<param name="start" fulltype="int" type="int" />
						<param name="endLine" fulltype="int" type="int" />
						<param name="end" fulltype="int" type="int" />
					</params>
				</constructor>
				<constructor visibility="public" name="Selection.Rect">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="startLine" fulltype="int" type="int" />
						<param name="startColumn" fulltype="int" type="int" />
						<param name="endLine" fulltype="int" type="int" />
						<param name="endColumn" fulltype="int" type="int" />
					</params>
				</constructor>
				<method visibility="public" name="getStartColumn" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					</params>
				</method>
				<method visibility="public" name="getEndColumn" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					</params>
				</method>
				<method visibility="public" name="getStart" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="getEnd" fulltype="int" type="int">
					<params>
						<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
						<param name="line" fulltype="int" type="int" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Selection" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.textarea.Selection" fulltype="org.gjt.sp.jedit.textarea.Selection.Range" type="Selection.Range">
		<comment>
			<description>An ordinary range selection.</description>
			<attribute name="@since">
				<description>jEdit 3.2pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="Selection.Range" />
			<constructor visibility="public" name="Selection.Range">
				<params>
					<param name="sel" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
				</params>
			</constructor>
			<constructor visibility="public" name="Selection.Range">
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="getStart" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getEnd" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Selection" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.textarea.Selection" fulltype="org.gjt.sp.jedit.textarea.Selection.Rect" type="Selection.Rect">
		<comment>
			<description>A rectangular selection.</description>
			<attribute name="@since">
				<description>jEdit 3.2pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="Selection.Rect" />
			<constructor visibility="public" name="Selection.Rect">
				<params>
					<param name="sel" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
				</params>
			</constructor>
			<constructor visibility="public" name="Selection.Rect">
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="Selection.Rect">
				<params>
					<param name="startLine" fulltype="int" type="int" />
					<param name="start" fulltype="int" type="int" />
					<param name="endLine" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="Selection.Rect">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="startLine" fulltype="int" type="int" />
					<param name="startColumn" fulltype="int" type="int" />
					<param name="endLine" fulltype="int" type="int" />
					<param name="endColumn" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="getStartColumn" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="getEndColumn" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="getStart" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getEnd" fulltype="int" type="int">
				<params>
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.ShapedFoldPainter" type="ShapedFoldPainter">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.textarea.FoldPainter" type="FoldPainter" />
		</implements>
		<comment>
			<description>Fold Painter</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ShapedFoldPainter" />
			<method visibility="public" name="paintFoldEnd" fulltype="void" type="void">
				<params>
					<param name="gutter" fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter" />
					<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" fulltype="int" type="int" />
					<param name="physicalLine" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="lineHeight" fulltype="int" type="int" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="paintFoldMiddle" fulltype="void" type="void">
				<params>
					<param name="gutter" fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter" />
					<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" fulltype="int" type="int" />
					<param name="physicalLine" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="lineHeight" fulltype="int" type="int" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="paintFoldStart" fulltype="void" type="void">
				<params>
					<param name="gutter" fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter" />
					<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" fulltype="int" type="int" />
					<param name="physicalLine" fulltype="int" type="int" />
					<param name="nextLineVisible" fulltype="boolean" type="boolean" />
					<param name="y" fulltype="int" type="int" />
					<param name="lineHeight" fulltype="int" type="int" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method abstract="true" visibility="protected" name="paintFoldShape" fulltype="void" type="void">
				<params>
					<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="top" fulltype="int" type="int" />
					<param name="bottom" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="ShapedFoldPainter" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.textarea.ShapedFoldPainter" fulltype="org.gjt.sp.jedit.textarea.SquareFoldPainter" type="SquareFoldPainter">
		<methods>
			<constructor visibility="public" name="SquareFoldPainter" />
			<method visibility="protected" name="paintFoldShape" fulltype="void" type="void">
				<params>
					<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="top" fulltype="int" type="int" />
					<param name="bottom" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="TextArea" visibility="public" package="org.gjt.sp.jedit.textarea" serializable="true" superclassfulltype="org.gjt.sp.jedit.textarea.TextArea" fulltype="org.gjt.sp.jedit.textarea.StandaloneTextArea" type="StandaloneTextArea">
		<comment>
			<description>jEdit&apos;s standalone text component.

 Use this class to embed a jEdit TextArea into other applications.

 Example:
 &lt;code&gt;
 class MyTextArea extends StandaloneTextArea
 {
     static final Properties props = new Properties();
     static IPropertyManager propertyManager;

     static
     {
        props = new Properties();
        load(props);
        propertyManager = new IPropertyManager() {
        	public String getProperty() {
        		return props.getProperty();
        	}
        }
     }

     public MyTextArea()
     {
         super(propertyManager);
     }
 }
 &lt;/code&gt;

 See jedit.props for properties that can be set.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: StandaloneTextArea.java 21589 2012-04-18 15:06:09Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="StandaloneTextArea">
				<comment>
					<description>Creates a new StandaloneTextArea. A reference to the propertyManager is saved and used to read the properties
 when {@link StandaloneTextArea#propertiesChanged()} is called.</description>
					<attribute name="@param">
						<description>propertyManager the property manager that contains both shortcut bindings and UI information</description>
					</attribute>
				</comment>
				<params>
					<param name="propertyManager" comment="the property manager that contains both shortcut bindings and UI information" fulltype="org.gjt.sp.jedit.IPropertyManager" type="IPropertyManager" />
				</params>
			</constructor>
			<method visibility="public" name="getProperty" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void">
				<comment>
					<description>Reinitializes the textarea by reading the properties from the property manager</description>
				</comment>
			</method>
			<method visibility="public" name="addMenuItem" returncomment="the menu item added" fulltype="javax.swing.JMenuItem" type="JMenuItem">
				<comment>
					<description>Adds a menu item from the action context to the popup menu and returns the item.</description>
					<attribute name="@return">
						<description>the menu item added</description>
					</attribute>
				</comment>
				<params>
					<param name="action" fulltype="java.lang.String" type="String" />
					<param name="label" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="createTextArea" returncomment="a textarea" fulltype="org.gjt.sp.jedit.textarea.StandaloneTextArea" type="StandaloneTextArea">
				<comment>
					<description>Create a standalone TextArea.
 If you want to use it in jEdit, please use {@link JEditEmbeddedTextArea#JEditEmbeddedTextArea()}</description>
					<attribute name="@return">
						<description>a textarea</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre13</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="main" fulltype="void" type="void">
				<params>
					<param name="args" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="JEditActionSet" visibility="protected" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.JEditActionSet" fulltype="org.gjt.sp.jedit.textarea.StandaloneTextArea.StandaloneActionSet" type="StandaloneTextArea.StandaloneActionSet">
			<comment>
				<description>The actionSet for standalone textArea.</description>
				<attribute name="@author">
					<description>Matthieu Casanova</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="public" name="StandaloneTextArea.StandaloneActionSet">
					<params>
						<param name="iPropertyManager" fulltype="org.gjt.sp.jedit.IPropertyManager" type="IPropertyManager" />
						<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
						<param name="url" fulltype="java.net.URL" type="URL" />
					</params>
				</constructor>
				<method visibility="protected" name="getArray" fulltype="org.gjt.sp.jedit.JEditBeanShellAction[]" type="JEditBeanShellAction">
					<params>
						<param name="size" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="protected" name="getProperty" fulltype="java.lang.String" type="String">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="getInputHandler" fulltype="org.gjt.sp.jedit.input.AbstractInputHandler" type="AbstractInputHandler" />
				<method visibility="protected" name="createBeanShellAction" fulltype="org.gjt.sp.jedit.JEditBeanShellAction" type="JEditBeanShellAction">
					<params>
						<param name="actionName" fulltype="java.lang.String" type="String" />
						<param name="code" fulltype="java.lang.String" type="String" />
						<param name="selected" fulltype="java.lang.String" type="String" />
						<param name="noRepeat" fulltype="boolean" type="boolean" />
						<param name="noRecord" fulltype="boolean" type="boolean" />
						<param name="noRememberLast" fulltype="boolean" type="boolean" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="JEditActionSet" visibility="protected" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.JEditActionSet" fulltype="org.gjt.sp.jedit.textarea.StandaloneTextArea.StandaloneActionSet" type="StandaloneTextArea.StandaloneActionSet">
		<comment>
			<description>The actionSet for standalone textArea.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="StandaloneTextArea.StandaloneActionSet">
				<params>
					<param name="iPropertyManager" fulltype="org.gjt.sp.jedit.IPropertyManager" type="IPropertyManager" />
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="url" fulltype="java.net.URL" type="URL" />
				</params>
			</constructor>
			<method visibility="protected" name="getArray" fulltype="org.gjt.sp.jedit.JEditBeanShellAction[]" type="JEditBeanShellAction">
				<params>
					<param name="size" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="protected" name="getProperty" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getInputHandler" fulltype="org.gjt.sp.jedit.input.AbstractInputHandler" type="AbstractInputHandler" />
			<method visibility="protected" name="createBeanShellAction" fulltype="org.gjt.sp.jedit.JEditBeanShellAction" type="JEditBeanShellAction">
				<params>
					<param name="actionName" fulltype="java.lang.String" type="String" />
					<param name="code" fulltype="java.lang.String" type="String" />
					<param name="selected" fulltype="java.lang.String" type="String" />
					<param name="noRepeat" fulltype="boolean" type="boolean" />
					<param name="noRecord" fulltype="boolean" type="boolean" />
					<param name="noRememberLast" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.textarea" interface="true" fulltype="org.gjt.sp.jedit.textarea.StatusListener" type="StatusListener">
		<implements>
			<interface fulltype="java.util.EventListener" type="EventListener" />
		</implements>
		<comment>
			<description>Fired when the text area needs to display a status message.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: StatusListener.java 15577 2009-06-25 05:55:16Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre2</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="OVERWRITE_CHANGED" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="MULTI_SELECT_CHANGED" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="RECT_SELECT_CHANGED" constexpr="2" fulltype="int" type="int" />
		</fields>
		<methods>
			<method visibility="public" name="statusChanged" fulltype="void" type="void">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="flag" fulltype="int" type="int" />
					<param name="value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="bracketSelected" fulltype="void" type="void">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					<param name="line" fulltype="int" type="int" />
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="narrowActive" fulltype="void" type="void">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.textarea" interface="true" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher">
		<comment>
			<description>An interface for matching parts of a source file&apos;s stucture. The default
 implementation matches brackets. The XML plugin provides an implementation
 for matching XML tags.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: StructureMatcher.java 18808 2010-10-21 20:54:15Z daleanson $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.2pre3</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getMatch" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher.Match" type="StructureMatcher.Match">
				<comment>
					<description>Returns the element matching the one at the given text area&apos;s
 caret position, or null.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
			<method visibility="public" name="selectMatch" fulltype="void" type="void">
				<comment>
					<description>Selects from the caret to the matching structure element (if there is
 one, otherwise the behavior of this method is undefined).</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher.BracketMatcher" type="StructureMatcher.BracketMatcher">
			<implements>
				<interface fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher" />
			</implements>
			<methods>
				<constructor visibility="public" name="StructureMatcher.BracketMatcher" />
				<method visibility="public" name="getMatch" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher.Match" type="StructureMatcher.Match">
					<params>
						<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					</params>
				</method>
				<method visibility="public" name="selectMatch" fulltype="void" type="void">
					<params>
						<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher.Match" type="StructureMatcher.Match">
			<comment>
				<description>A structure match, denoted by a start and end position.</description>
				<attribute name="@since">
					<description>jEdit 4.2pre3</description>
				</attribute>
			</comment>
			<fields>
				<field visibility="public" name="matcher" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher" />
				<field visibility="public" name="startLine" fulltype="int" type="int" />
				<field visibility="public" name="start" fulltype="int" type="int" />
				<field visibility="public" name="endLine" fulltype="int" type="int" />
				<field visibility="public" name="end" fulltype="int" type="int" />
			</fields>
			<methods>
				<constructor visibility="public" name="StructureMatcher.Match" />
				<constructor visibility="public" name="StructureMatcher.Match">
					<params>
						<param name="matcher" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher" />
					</params>
				</constructor>
				<constructor visibility="public" name="StructureMatcher.Match">
					<params>
						<param name="matcher" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher" />
						<param name="startLine" fulltype="int" type="int" />
						<param name="start" fulltype="int" type="int" />
						<param name="endLine" fulltype="int" type="int" />
						<param name="end" fulltype="int" type="int" />
					</params>
				</constructor>
			</methods>
		</jelclass>
		<jelclass superclass="TextAreaExtension" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.textarea.TextAreaExtension" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher.Highlight" type="StructureMatcher.Highlight">
			<comment>
				<description>Paints the structure match highlight.</description>
			</comment>
			<methods>
				<method visibility="public" name="paintValidLine" fulltype="void" type="void">
					<params>
						<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
						<param name="screenLine" fulltype="int" type="int" />
						<param name="physicalLine" fulltype="int" type="int" />
						<param name="start" fulltype="int" type="int" />
						<param name="end" fulltype="int" type="int" />
						<param name="y" fulltype="int" type="int" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher.BracketMatcher" type="StructureMatcher.BracketMatcher">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher" />
		</implements>
		<methods>
			<constructor visibility="public" name="StructureMatcher.BracketMatcher" />
			<method visibility="public" name="getMatch" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher.Match" type="StructureMatcher.Match">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
			<method visibility="public" name="selectMatch" fulltype="void" type="void">
				<params>
					<param name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher.Match" type="StructureMatcher.Match">
		<comment>
			<description>A structure match, denoted by a start and end position.</description>
			<attribute name="@since">
				<description>jEdit 4.2pre3</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="public" name="matcher" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher" />
			<field visibility="public" name="startLine" fulltype="int" type="int" />
			<field visibility="public" name="start" fulltype="int" type="int" />
			<field visibility="public" name="endLine" fulltype="int" type="int" />
			<field visibility="public" name="end" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="StructureMatcher.Match" />
			<constructor visibility="public" name="StructureMatcher.Match">
				<params>
					<param name="matcher" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher" />
				</params>
			</constructor>
			<constructor visibility="public" name="StructureMatcher.Match">
				<params>
					<param name="matcher" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher" />
					<param name="startLine" fulltype="int" type="int" />
					<param name="start" fulltype="int" type="int" />
					<param name="endLine" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="TextAreaExtension" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="org.gjt.sp.jedit.textarea.TextAreaExtension" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher.Highlight" type="StructureMatcher.Highlight">
		<comment>
			<description>Paints the structure match highlight.</description>
		</comment>
		<methods>
			<method visibility="public" name="paintValidLine" fulltype="void" type="void">
				<params>
					<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" fulltype="int" type="int" />
					<param name="physicalLine" fulltype="int" type="int" />
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="JComponent" visibility="public" package="org.gjt.sp.jedit.textarea" serializable="true" superclassfulltype="javax.swing.JComponent" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea">
		<comment>
			<description>Abstract TextArea component.

 The concrete instance used by jEdit itself is called the JEditTextArea.

 This class uses a minimal set of jEdit APIs because it is the base class of the
 JEditEmbeddedTextArea and StandaloneTextArea, so it needs to be embeddable and separable.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>kpouer (rafactoring into standalone text area)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: TextArea.java 21727 2012-05-27 17:11:01Z jarekczek $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="NO_SCROLL" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="NORMAL_SCROLL" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="ELECTRIC_SCROLL" constexpr="2" fulltype="int" type="int" />
			<field visibility="protected" name="popup" fulltype="javax.swing.JPopupMenu" type="JPopupMenu" />
			<field final="true" visibility="protected" name="painter" fulltype="org.gjt.sp.jedit.textarea.TextAreaPainter" type="TextAreaPainter" />
			<field visibility="protected" name="inputHandlerProvider" fulltype="org.gjt.sp.jedit.input.InputHandlerProvider" type="InputHandlerProvider" />
			<field visibility="protected" name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
			<field visibility="protected" name="caret" fulltype="int" type="int" />
			<field visibility="protected" name="caretLine" fulltype="int" type="int" />
			<field visibility="protected" name="multi" fulltype="boolean" type="boolean">
				<comment>
					<description>Flag that tells if multiple selection is on.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="protected" name="TextArea">
				<comment>
					<description>Creates a new JEditTextArea.</description>
					<attribute name="@param">
						<description>propertyManager the property manager that contains informations like shortcut bindings</description>
					</attribute>
					<attribute name="@param">
						<description>inputHandlerProvider the inputHandlerProvider</description>
					</attribute>
				</comment>
				<params>
					<param name="propertyManager" comment="the property manager that contains informations like shortcut bindings" fulltype="org.gjt.sp.jedit.IPropertyManager" type="IPropertyManager" />
					<param name="inputHandlerProvider" comment="the inputHandlerProvider" fulltype="org.gjt.sp.jedit.input.InputHandlerProvider" type="InputHandlerProvider" />
				</params>
			</constructor>
			<method visibility="public" name="getFoldPainter" fulltype="org.gjt.sp.jedit.textarea.FoldPainter" type="FoldPainter" />
			<method visibility="public" name="initInputHandler" fulltype="void" type="void">
				<comment>
					<description>Creates an actionContext and initializes the input
 handler for this textarea. Called when creating
 a standalone textarea from within jEdit.</description>
				</comment>
			</method>
			<method visibility="public" name="getActionContext" fulltype="org.gjt.sp.jedit.JEditActionContext" type="JEditActionContext" />
			<method visibility="public" name="setMouseHandler" fulltype="void" type="void">
				<params>
					<param name="mouseInputAdapter" fulltype="javax.swing.event.MouseInputAdapter" type="MouseInputAdapter" />
				</params>
			</method>
			<method visibility="public" name="setTransferHandler" fulltype="void" type="void">
				<params>
					<param name="newHandler" fulltype="javax.swing.TransferHandler" type="TransferHandler" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="dispose" fulltype="void" type="void">
				<comment>
					<description>Plugins and macros should not call this method.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getInputHandler" fulltype="org.gjt.sp.jedit.input.AbstractInputHandler" type="AbstractInputHandler">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="getPainter" fulltype="org.gjt.sp.jedit.textarea.TextAreaPainter" type="TextAreaPainter">
				<comment>
					<description>Returns the object responsible for painting this text area.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="getGutter" fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter">
				<comment>
					<description>Returns the gutter to the left of the text area or null if the gutter
 is disabled</description>
				</comment>
			</method>
			<method visibility="public" name="getDisplayManager" returncomment="the display manager used by this text area." fulltype="org.gjt.sp.jedit.textarea.DisplayManager" type="DisplayManager">
				<comment>
					<attribute name="@return">
						<description>the display manager used by this text area.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="isCaretBlinkEnabled" returncomment="true if the caret is blinking, false otherwise." fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@return">
						<description>true if the caret is blinking, false otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setCaretBlinkEnabled" fulltype="void" type="void">
				<comment>
					<description>Toggles caret blinking.</description>
					<attribute name="@param">
						<description>caretBlinks True if the caret should blink, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="caretBlinks" comment="True if the caret should blink, false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getElectricScroll" returncomment="the minimum distance (in number of lines)
 from the caret to the nearest edge of the screen
 (top or bottom edge)." fulltype="int" type="int">
				<comment>
					<attribute name="@return">
						<description>the minimum distance (in number of lines)
 from the caret to the nearest edge of the screen
 (top or bottom edge).</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setElectricScroll" fulltype="void" type="void">
				<comment>
					<description>Sets the number of lines from the top and bottom of the text
 area that are always visible</description>
					<attribute name="@param">
						<description>electricScroll The number of lines always visible from
 the top or bottom</description>
					</attribute>
				</comment>
				<params>
					<param name="electricScroll" comment="The number of lines always visible from
 the top or bottom" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="isQuickCopyEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if clicking the middle mouse button pastes the most
 recent selection (% register), and if Control-dragging inserts
 the selection at the caret.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setQuickCopyEnabled" fulltype="void" type="void">
				<comment>
					<description>Sets if clicking the middle mouse button pastes the most
 recent selection (% register), and if Control-dragging inserts
 the selection at the caret.</description>
					<attribute name="@param">
						<description>quickCopy A boolean flag</description>
					</attribute>
				</comment>
				<params>
					<param name="quickCopy" comment="A boolean flag" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getBuffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer">
				<comment>
					<description>Returns the buffer this text area is editing.</description>
					<attribute name="@since">
						<description>jedit 4.3pre3

  Prior to 4.3pre3, this function returned a &quot;Buffer&quot; type.
  If this causes your code to break, try calling view.getBuffer() instead of
  view.getTextArea().getBuffer().</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setBuffer" fulltype="void" type="void">
				<comment>
					<description>Sets the buffer this text area is editing.
 If you don&apos;t run a standalone textarea in jEdit please do not call this method -
 use {@link org.gjt.sp.jedit.EditPane#setBuffer(org.gjt.sp.jedit.Buffer)} instead.</description>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method final="true" visibility="public" name="isEditable" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this text area is editable, false otherwise.</description>
				</comment>
			</method>
			<method visibility="public" name="isDragEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if drag and drop of text is enabled.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setDragEnabled" fulltype="void" type="void">
				<comment>
					<description>Sets if drag and drop of text is enabled.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="dndEnabled" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getJoinNonWordChars" fulltype="boolean" type="boolean">
				<comment>
					<description>If set, double clicking will join non-word characters to form one &quot;word&quot;.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setJoinNonWordChars" fulltype="void" type="void">
				<comment>
					<description>If set, double clicking will join non-word characters to form one &quot;word&quot;.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="joinNonWordChars" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isCtrlForRectangularSelection" fulltype="boolean" type="boolean">
				<comment>
					<description>If set, CTRL enables rectangular selection mode while pressed.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setCtrlForRectangularSelection" fulltype="void" type="void">
				<comment>
					<description>If set, CTRL enables rectangular selection mode while pressed.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="ctrlForRectangularSelection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getFirstLine" fulltype="int" type="int">
				<comment>
					<description>Returns the vertical scroll bar position.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setFirstLine" fulltype="void" type="void">
				<comment>
					<description>Sets the vertical scroll bar position</description>
					<attribute name="@param">
						<description>firstLine The scroll bar position</description>
					</attribute>
				</comment>
				<params>
					<param name="firstLine" comment="The scroll bar position" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getFirstPhysicalLine" fulltype="int" type="int">
				<comment>
					<description>Returns the first visible physical line index.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setFirstPhysicalLine" fulltype="void" type="void">
				<comment>
					<description>Sets the vertical scroll bar position.</description>
					<attribute name="@param">
						<description>physFirstLine The first physical line to display</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="physFirstLine" comment="The first physical line to display" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setFirstPhysicalLine" fulltype="void" type="void">
				<comment>
					<description>Sets the vertical scroll bar position.</description>
					<attribute name="@param">
						<description>physFirstLine The first physical line to display</description>
					</attribute>
					<attribute name="@param">
						<description>skew A local screen line delta</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="physFirstLine" comment="The first physical line to display" fulltype="int" type="int" />
					<param name="skew" comment="A local screen line delta" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getLastPhysicalLine" fulltype="int" type="int">
				<comment>
					<description>Returns the last visible physical line index.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLastScreenLine" returncomment="the last screen line index." fulltype="int" type="int">
				<comment>
					<description>Returns the last screen line index, it is different from
 {@link #getVisibleLines()} because the buffer can have less lines than
 the visible lines</description>
					<attribute name="@return">
						<description>the last screen line index.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="getVisibleLines" returncomment="the number of visible lines in the textarea" fulltype="int" type="int">
				<comment>
					<description>Returns the number of lines visible in this text area.</description>
					<attribute name="@return">
						<description>the number of visible lines in the textarea</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="getHorizontalOffset" fulltype="int" type="int">
				<comment>
					<description>Returns the horizontal offset of drawn lines.</description>
				</comment>
			</method>
			<method visibility="public" name="setHorizontalOffset" fulltype="void" type="void">
				<comment>
					<description>Sets the horizontal offset of drawn lines. This can be used to
 implement horizontal scrolling.</description>
					<attribute name="@param">
						<description>horizontalOffset offset The new horizontal offset</description>
					</attribute>
				</comment>
				<params>
					<param name="horizontalOffset" comment="offset The new horizontal offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="scrollUpLine" fulltype="void" type="void">
				<comment>
					<description>Scrolls up by one line.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="scrollUpPage" fulltype="void" type="void">
				<comment>
					<description>Scrolls up by one page.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="scrollDownLine" fulltype="void" type="void">
				<comment>
					<description>Scrolls down by one line.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="scrollDownPage" fulltype="void" type="void">
				<comment>
					<description>Scrolls down by one page.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="scrollToCaret" fulltype="void" type="void">
				<comment>
					<description>Ensures that the caret is visible by scrolling the text area if
 necessary.</description>
					<attribute name="@param">
						<description>doElectricScroll If true, electric scrolling will be performed</description>
					</attribute>
				</comment>
				<params>
					<param name="doElectricScroll" comment="If true, electric scrolling will be performed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="scrollTo" fulltype="void" type="void">
				<comment>
					<description>Ensures that the specified location in the buffer is visible.</description>
					<attribute name="@param">
						<description>offset The offset from the start of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>doElectricScroll If true, electric scrolling will be performed</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset from the start of the buffer" fulltype="int" type="int" />
					<param name="doElectricScroll" comment="If true, electric scrolling will be performed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="scrollTo" fulltype="void" type="void">
				<comment>
					<description>Ensures that the specified location in the buffer is visible.</description>
					<attribute name="@param">
						<description>line The line number</description>
					</attribute>
					<attribute name="@param">
						<description>offset The offset from the start of the line</description>
					</attribute>
					<attribute name="@param">
						<description>doElectricScroll If true, electric scrolling will be performed</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line number" fulltype="int" type="int" />
					<param name="offset" comment="The offset from the start of the line" fulltype="int" type="int" />
					<param name="doElectricScroll" comment="If true, electric scrolling will be performed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="addScrollListener" fulltype="void" type="void">
				<comment>
					<description>Adds a scroll listener to this text area.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.jedit.textarea.ScrollListener" type="ScrollListener" />
				</params>
			</method>
			<method final="true" visibility="public" name="removeScrollListener" fulltype="void" type="void">
				<comment>
					<description>Removes a scroll listener from this text area.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.jedit.textarea.ScrollListener" type="ScrollListener" />
				</params>
			</method>
			<method visibility="public" name="getPhysicalLineOfScreenLine" fulltype="int" type="int">
				<comment>
					<description>Returns the physical line number that contains the specified screen
 line.</description>
					<attribute name="@param">
						<description>screenLine The screen line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="screenLine" comment="The screen line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getScreenLineOfOffset" fulltype="int" type="int">
				<comment>
					<description>Returns the screen (wrapped) line containing the specified offset.
 Returns -1 if the line is not currently visible on the screen.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getScreenLineStartOffset" fulltype="int" type="int">
				<comment>
					<description>Returns the start offset of the specified screen (wrapped) line.</description>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getScreenLineEndOffset" fulltype="int" type="int">
				<comment>
					<description>Returns the end offset of the specified screen (wrapped) line.</description>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="xyToOffset" fulltype="int" type="int">
				<comment>
					<description>Converts a point to an offset.
 Note that unlike in previous jEdit versions, this method now returns
 -1 if the y co-ordinate is out of bounds.</description>
					<attribute name="@param">
						<description>x The x co-ordinate of the point</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate of the point</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="The x co-ordinate of the point" fulltype="int" type="int" />
					<param name="y" comment="The y co-ordinate of the point" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="xyToOffset" fulltype="int" type="int">
				<comment>
					<description>Converts a point to an offset.
 Note that unlike in previous jEdit versions, this method now returns
 -1 if the y co-ordinate is out of bounds.</description>
					<attribute name="@param">
						<description>x The x co-ordinate of the point</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate of the point</description>
					</attribute>
					<attribute name="@param">
						<description>round Round up to next character if past the middle of a character?</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="The x co-ordinate of the point" fulltype="int" type="int" />
					<param name="y" comment="The y co-ordinate of the point" fulltype="int" type="int" />
					<param name="round" comment="Round up to next character if past the middle of a character?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="xToScreenLineOffset" fulltype="int" type="int">
				<comment>
					<description>Converts a point in a given screen line to an offset.</description>
					<attribute name="@param">
						<description>x The x co-ordinate of the point</description>
					</attribute>
					<attribute name="@param">
						<description>screenLine The screen line</description>
					</attribute>
					<attribute name="@param">
						<description>round Round up to next character if past the middle of a character?</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="screenLine" comment="The screen line" fulltype="int" type="int" />
					<param name="x" comment="The x co-ordinate of the point" fulltype="int" type="int" />
					<param name="round" comment="Round up to next character if past the middle of a character?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="offsetToXY" returncomment="The location of the offset on screen, or &lt;code&gt;null&lt;/code&gt;
 if the specified offset is not visible" fulltype="java.awt.Point" type="Point">
				<comment>
					<description>Converts an offset into a point in the text area painter&apos;s
 co-ordinate space.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@return">
						<description>The location of the offset on screen, or &lt;code&gt;null&lt;/code&gt;
 if the specified offset is not visible</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="offsetToXY" returncomment="The location of the offset on screen, or &lt;code&gt;null&lt;/code&gt;
 if the specified offset is not visible" fulltype="java.awt.Point" type="Point">
				<comment>
					<description>Converts an offset into a point in the text area painter&apos;s
 co-ordinate space.</description>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@return">
						<description>The location of the offset on screen, or &lt;code&gt;null&lt;/code&gt;
 if the specified offset is not visible</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line" fulltype="int" type="int" />
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="offsetToXY" returncomment="&lt;code&gt;retVal&lt;/code&gt; for convenience, or &lt;code&gt;null&lt;/code&gt;
 if the specified offset is not visible" fulltype="java.awt.Point" type="Point">
				<comment>
					<description>Converts a line,offset pair into an x,y (pixel) point relative to the
 upper left corner (0,0) of the text area.</description>
					<attribute name="@param">
						<description>line The physical line number (from top of document)</description>
					</attribute>
					<attribute name="@param">
						<description>offset The offset in characters, from the start of the line</description>
					</attribute>
					<attribute name="@param">
						<description>retVal The point to store the return value in</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;retVal&lt;/code&gt; for convenience, or &lt;code&gt;null&lt;/code&gt;
 if the specified offset is not visible</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The physical line number (from top of document)" fulltype="int" type="int" />
					<param name="offset" comment="The offset in characters, from the start of the line" fulltype="int" type="int" />
					<param name="retVal" comment="The point to store the return value in" fulltype="java.awt.Point" type="Point" />
				</params>
			</method>
			<method visibility="public" name="invalidateScreenLineRange" fulltype="void" type="void">
				<comment>
					<description>Marks a range of screen lines as needing a repaint.</description>
					<attribute name="@param">
						<description>start The first line</description>
					</attribute>
					<attribute name="@param">
						<description>end The last line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The first line" fulltype="int" type="int" />
					<param name="end" comment="The last line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="invalidateLine" fulltype="void" type="void">
				<comment>
					<description>Marks a line as needing a repaint.</description>
					<attribute name="@param">
						<description>line The physical line to invalidate</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The physical line to invalidate" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="invalidateLineRange" fulltype="void" type="void">
				<comment>
					<description>Marks a range of physical lines as needing a repaint.</description>
					<attribute name="@param">
						<description>start The first line to invalidate</description>
					</attribute>
					<attribute name="@param">
						<description>end The last line to invalidate</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The first line to invalidate" fulltype="int" type="int" />
					<param name="end" comment="The last line to invalidate" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getBufferLength" fulltype="int" type="int">
				<comment>
					<description>Returns the length of the buffer.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="getLineCount" fulltype="int" type="int">
				<comment>
					<description>Returns the number of physical lines in the buffer.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="getLineOfOffset" fulltype="int" type="int">
				<comment>
					<description>Returns the line containing the specified offset.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLineStartOffset" returncomment="The start offset of the specified line, or -1 if the line is
 invalid" fulltype="int" type="int">
				<comment>
					<description>Returns the start offset of the specified line.</description>
					<attribute name="@param">
						<description>line The line (physical line)</description>
					</attribute>
					<attribute name="@return">
						<description>The start offset of the specified line, or -1 if the line is
 invalid</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line (physical line)" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLineEndOffset" returncomment="The end offset of the specified line, or -1 if the line is
 invalid." fulltype="int" type="int">
				<comment>
					<description>Returns the end offset of the specified line.</description>
					<attribute name="@param">
						<description>line The line (physical line)</description>
					</attribute>
					<attribute name="@return">
						<description>The end offset of the specified line, or -1 if the line is
 invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line (physical line)" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLineLength" fulltype="int" type="int">
				<comment>
					<description>Returns the length of the specified line.</description>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getText" returncomment="The substring" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the specified substring of the buffer.</description>
					<attribute name="@param">
						<description>start The start offset</description>
					</attribute>
					<attribute name="@param">
						<description>len The length of the substring</description>
					</attribute>
					<attribute name="@return">
						<description>The substring</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The start offset" fulltype="int" type="int" />
					<param name="len" comment="The length of the substring" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getText" fulltype="void" type="void">
				<comment>
					<description>Copies the specified substring of the buffer into a segment.</description>
					<attribute name="@param">
						<description>start The start offset</description>
					</attribute>
					<attribute name="@param">
						<description>len The length of the substring</description>
					</attribute>
					<attribute name="@param">
						<description>segment The segment</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The start offset" fulltype="int" type="int" />
					<param name="len" comment="The length of the substring" fulltype="int" type="int" />
					<param name="segment" comment="The segment" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
			<method visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the entire text of this text area.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="getLineText" returncomment="The text, or null if the lineIndex is invalid" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the text on the specified line.</description>
					<attribute name="@param">
						<description>lineIndex the line number</description>
					</attribute>
					<attribute name="@return">
						<description>The text, or null if the lineIndex is invalid</description>
					</attribute>
				</comment>
				<params>
					<param name="lineIndex" comment="the line number" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getLineText" fulltype="void" type="void">
				<comment>
					<description>Copies the text on the specified line into a Segment. If lineIndex
 is invalid, the segment will contain a null string.</description>
					<attribute name="@param">
						<description>lineIndex The line number (physical line)</description>
					</attribute>
					<attribute name="@param">
						<description>segment the segment into which the data will be stored.</description>
					</attribute>
				</comment>
				<params>
					<param name="lineIndex" comment="The line number (physical line)" fulltype="int" type="int" />
					<param name="segment" comment="the segment into which the data will be stored." fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
			<method visibility="public" name="getVisibleLineText" returncomment="the visible text" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the visible part of the given line</description>
					<attribute name="@param">
						<description>screenLine the screenLine</description>
					</attribute>
					<attribute name="@return">
						<description>the visible text</description>
					</attribute>
					<attribute name="@since">
						<description>4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="screenLine" comment="the screenLine" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getVisibleLineText" fulltype="void" type="void">
				<comment>
					<description>Returns the visible part of the given line</description>
					<attribute name="@param">
						<description>screenLine the screenLine</description>
					</attribute>
					<attribute name="@param">
						<description>segment the segment into which the data will be stored.</description>
					</attribute>
					<attribute name="@since">
						<description>4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="screenLine" comment="the screenLine" fulltype="int" type="int" />
					<param name="segment" comment="the segment into which the data will be stored." fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</method>
			<method visibility="public" name="getVisibleLineSegment" returncomment="the visible text" fulltype="java.lang.CharSequence" type="CharSequence">
				<comment>
					<description>Returns the visible part of the given line in a CharSequence.
 The buffer data are not copied. so this should be used in EDT
 thread</description>
					<attribute name="@param">
						<description>screenLine the screenLine</description>
					</attribute>
					<attribute name="@return">
						<description>the visible text</description>
					</attribute>
					<attribute name="@since">
						<description>4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="screenLine" comment="the screenLine" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setText" fulltype="void" type="void">
				<comment>
					<description>Sets the entire text of this text area.</description>
					<attribute name="@param">
						<description>text the new content of the buffer</description>
					</attribute>
				</comment>
				<params>
					<param name="text" comment="the new content of the buffer" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method final="true" visibility="public" name="selectAll" fulltype="void" type="void">
				<comment>
					<description>Selects all text in the buffer. Preserves the scroll position.</description>
				</comment>
			</method>
			<method visibility="public" name="selectLine" fulltype="void" type="void">
				<comment>
					<description>Selects the current line.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="selectParagraph" fulltype="void" type="void">
				<comment>
					<description>Selects the paragraph at the caret position.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="selectWord" fulltype="void" type="void">
				<comment>
					<description>Selects the word at the caret position.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="selectToMatchingBracket" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection">
				<comment>
					<description>Selects from the bracket at the specified position to the
 corresponding bracket.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="position" fulltype="int" type="int" />
					<param name="quickCopy" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="selectToMatchingBracket" fulltype="void" type="void">
				<comment>
					<description>Selects from the bracket at the caret position to the corresponding
 bracket.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="selectBlock" fulltype="void" type="void">
				<comment>
					<description>Selects the code block surrounding the caret.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="lineInStructureScope" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified line is contained in the currently
 matched structure&apos;s scope.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="line" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="invertSelection" fulltype="void" type="void">
				<comment>
					<description>Inverts the selection.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSelectionCount" fulltype="int" type="int">
				<comment>
					<description>Returns the number of selections. This can be used to test
 for the existence of selections.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSelection" fulltype="org.gjt.sp.jedit.textarea.Selection[]" type="Selection">
				<comment>
					<description>Returns the current selection.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSelection" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection">
				<comment>
					<description>Returns the selection with the specified index. This must be
 between 0 and the return value of &lt;code&gt;getSelectionCount()&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
					<attribute name="@param">
						<description>index the index of the selection you want</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index of the selection you want" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getSelectionIterator" fulltype="java.util.Iterator" type="Iterator">
				<comment>
					<description>Returns the current selection.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="selectNone" fulltype="void" type="void">
				<comment>
					<description>Deselects everything.</description>
				</comment>
			</method>
			<method visibility="public" name="setSelection" fulltype="void" type="void">
				<comment>
					<description>Sets the selection. Nested and overlapping selections are merged
 where possible. Null elements of the array are ignored.</description>
					<attribute name="@param">
						<description>selection The new selection
 since jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="selection" comment="The new selection
 since jEdit 3.2pre1" fulltype="org.gjt.sp.jedit.textarea.Selection[]" type="Selection" />
				</params>
			</method>
			<method visibility="public" name="setSelection" fulltype="void" type="void">
				<comment>
					<description>Sets the selection. Nested and overlapping selections are merged
 where possible.</description>
					<attribute name="@param">
						<description>selection The new selection
 since jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="selection" comment="The new selection
 since jEdit 3.2pre1" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
				</params>
			</method>
			<method visibility="public" name="addToSelection" fulltype="void" type="void">
				<comment>
					<description>Adds to the selection. Nested and overlapping selections are merged
 where possible.</description>
					<attribute name="@param">
						<description>selection The new selection
 since jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="selection" comment="The new selection
 since jEdit 3.2pre1" fulltype="org.gjt.sp.jedit.textarea.Selection[]" type="Selection" />
				</params>
			</method>
			<method visibility="public" name="addToSelection" fulltype="void" type="void">
				<comment>
					<description>Adds to the selection. Nested and overlapping selections are merged
 where possible.</description>
					<attribute name="@param">
						<description>selection The new selection
 since jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="selection" comment="The new selection
 since jEdit 3.2pre1" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
				</params>
			</method>
			<method visibility="public" name="getSelectionAtOffset" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection">
				<comment>
					<description>Returns the selection containing the specific offset, or &lt;code&gt;null&lt;/code&gt;
 if there is no selection at that offset.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="removeFromSelection" fulltype="void" type="void">
				<comment>
					<description>Deactivates the specified selection.</description>
					<attribute name="@param">
						<description>sel The selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="sel" comment="The selection" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
				</params>
			</method>
			<method visibility="public" name="removeFromSelection" fulltype="void" type="void">
				<comment>
					<description>Deactivates the selection at the specified offset. If there is
 no selection at that offset, does nothing.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="resizeSelection" fulltype="void" type="void">
				<comment>
					<description>Resizes the selection at the specified offset, or creates a new
 one if there is no selection at the specified offset. This is a
 utility method that is mainly useful in the mouse event handler
 because it handles the case of end being before offset gracefully
 (unlike the rest of the selection API).</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@param">
						<description>end The new selection end</description>
					</attribute>
					<attribute name="@param">
						<description>extraEndVirt Only for rectangular selections - specifies how
 far it extends into virtual space.</description>
					</attribute>
					<attribute name="@param">
						<description>rect Make the selection rectangular?</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
					<param name="end" comment="The new selection end" fulltype="int" type="int" />
					<param name="extraEndVirt" comment="Only for rectangular selections - specifies how
 far it extends into virtual space." fulltype="int" type="int" />
					<param name="rect" comment="Make the selection rectangular?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="extendSelection" fulltype="void" type="void">
				<comment>
					<description>Extends the selection at the specified offset, or creates a new
 one if there is no selection at the specified offset. This is
 different from resizing in that the new chunk is added to the
 selection in question, instead of replacing it.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@param">
						<description>end The new selection end</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
					<param name="end" comment="The new selection end" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="extendSelection" fulltype="void" type="void">
				<comment>
					<description>Extends the selection at the specified offset, or creates a new
 one if there is no selection at the specified offset. This is
 different from resizing in that the new chunk is added to the
 selection in question, instead of replacing it.</description>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@param">
						<description>end The new selection end</description>
					</attribute>
					<attribute name="@param">
						<description>extraStartVirt Extra virtual space at the start</description>
					</attribute>
					<attribute name="@param">
						<description>extraEndVirt Extra virtual space at the end</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="The offset" fulltype="int" type="int" />
					<param name="end" comment="The new selection end" fulltype="int" type="int" />
					<param name="extraStartVirt" comment="Extra virtual space at the start" fulltype="int" type="int" />
					<param name="extraEndVirt" comment="Extra virtual space at the end" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getSelectedText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the text in the specified selection.</description>
					<attribute name="@param">
						<description>s The selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="The selection" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
				</params>
			</method>
			<method visibility="public" name="getSelectedText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the text in all active selections.</description>
					<attribute name="@param">
						<description>separator The string to insert between each text chunk
 (for example, a newline)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="separator" comment="The string to insert between each text chunk
 (for example, a newline)" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getSelectedText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the text in all active selections, with a newline
 between each text chunk.</description>
				</comment>
			</method>
			<method visibility="public" name="setSelectedText" fulltype="void" type="void">
				<comment>
					<description>Replaces the selection with the specified text.</description>
					<attribute name="@param">
						<description>s The selection</description>
					</attribute>
					<attribute name="@param">
						<description>selectedText The new text</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="The selection" fulltype="org.gjt.sp.jedit.textarea.Selection" type="Selection" />
					<param name="selectedText" comment="The new text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setSelectedText" fulltype="void" type="void">
				<comment>
					<description>Replaces the selection at the caret with the specified text.
 If there is no selection at the caret, the text is inserted at
 the caret position.</description>
				</comment>
				<params>
					<param name="selectedText" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setSelectedText" fulltype="void" type="void">
				<comment>
					<description>Replaces the selection at the caret with the specified text.
 If there is no selection at the caret, the text is inserted at
 the caret position.</description>
					<attribute name="@param">
						<description>selectedText The new selection</description>
					</attribute>
					<attribute name="@param">
						<description>moveCaret Move caret to insertion location if necessary</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="selectedText" comment="The new selection" fulltype="java.lang.String" type="String" />
					<param name="moveCaret" comment="Move caret to insertion location if necessary" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="replaceSelection" returncomment="The new caret position" fulltype="int" type="int">
				<comment>
					<description>Set the selection, but does not deactivate it, and does not move the
 caret.

 Please use {@link #setSelectedText(String)} instead.</description>
					<attribute name="@param">
						<description>selectedText The new selection</description>
					</attribute>
					<attribute name="@return">
						<description>The new caret position</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="selectedText" comment="The new selection" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getSelectedLines" returncomment="Non-null, non-zero sized array of line indexes." fulltype="int[]" type="int">
				<comment>
					<description>Returns a sorted array of line numbers on which a selection or
 selections are present.&lt;p&gt;

 This method is the most convenient way to iterate through selected
 lines in a buffer. The line numbers in the array returned by this
 method can be passed as a parameter to such methods as
 {@link JEditBuffer#getLineText(int)}.</description>
					<attribute name="@return">
						<description>Non-null, non-zero sized array of line indexes.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="caretAutoScroll" fulltype="boolean" type="boolean">
				<comment>
					<description>Return if change in buffer should scroll this text area.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addStructureMatcher" fulltype="void" type="void">
				<comment>
					<description>Adds a structure matcher.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="matcher" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher" />
				</params>
			</method>
			<method visibility="public" name="removeStructureMatcher" fulltype="void" type="void">
				<comment>
					<description>Removes a structure matcher.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="matcher" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher" type="StructureMatcher" />
				</params>
			</method>
			<method visibility="public" name="getStructureMatch" fulltype="org.gjt.sp.jedit.textarea.StructureMatcher.Match" type="StructureMatcher.Match">
				<comment>
					<description>Returns the structure element (bracket, or XML tag, etc) matching the
 one before the caret.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="blinkCaret" fulltype="void" type="void">
				<comment>
					<description>Blinks the caret.</description>
				</comment>
			</method>
			<method visibility="public" name="centerCaret" fulltype="void" type="void">
				<comment>
					<description>Centers the caret on the screen.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="scrollAndCenterCaret" fulltype="void" type="void">
				<comment>
					<description>Tries to scroll the textArea so that the caret is centered on the screen.
 Sometimes gets confused by folds but at least makes the caret visible and
 guesses better on subsequent attempts.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setCaretPosition" fulltype="void" type="void">
				<comment>
					<description>Sets the caret position and deactivates the selection.</description>
					<attribute name="@param">
						<description>newCaret The caret position</description>
					</attribute>
				</comment>
				<params>
					<param name="newCaret" comment="The caret position" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setCaretPosition" fulltype="void" type="void">
				<comment>
					<description>Sets the caret position and deactivates the selection.</description>
					<attribute name="@param">
						<description>newCaret The caret position</description>
					</attribute>
					<attribute name="@param">
						<description>doElectricScroll Do electric scrolling?</description>
					</attribute>
				</comment>
				<params>
					<param name="newCaret" comment="The caret position" fulltype="int" type="int" />
					<param name="doElectricScroll" comment="Do electric scrolling?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="moveCaretPosition" fulltype="void" type="void">
				<comment>
					<description>Sets the caret position without deactivating the selection.</description>
					<attribute name="@param">
						<description>newCaret The caret position</description>
					</attribute>
				</comment>
				<params>
					<param name="newCaret" comment="The caret position" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="moveCaretPosition" fulltype="void" type="void">
				<comment>
					<description>Sets the caret position without deactivating the selection.</description>
					<attribute name="@param">
						<description>newCaret The caret position</description>
					</attribute>
					<attribute name="@param">
						<description>doElectricScroll Do electric scrolling?</description>
					</attribute>
				</comment>
				<params>
					<param name="newCaret" comment="The caret position" fulltype="int" type="int" />
					<param name="doElectricScroll" comment="Do electric scrolling?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="moveCaretPosition" fulltype="void" type="void">
				<comment>
					<description>Sets the caret position without deactivating the selection.</description>
					<attribute name="@param">
						<description>newCaret The caret position</description>
					</attribute>
					<attribute name="@param">
						<description>scrollMode The scroll mode (NO_SCROLL, NORMAL_SCROLL, or
 ELECTRIC_SCROLL).</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="newCaret" comment="The caret position" fulltype="int" type="int" />
					<param name="scrollMode" comment="The scroll mode (NO_SCROLL, NORMAL_SCROLL, or
 ELECTRIC_SCROLL)." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getCaretPosition" fulltype="int" type="int">
				<comment>
					<description>Returns a zero-based index of the caret position.</description>
				</comment>
			</method>
			<method visibility="public" name="getCaretLine" fulltype="int" type="int">
				<comment>
					<description>Returns the line number containing the caret.</description>
				</comment>
			</method>
			<method visibility="public" name="getMagicCaretPosition" fulltype="int" type="int">
				<comment>
					<description>Returns an internal position used to keep the caret in one
 column while moving around lines of varying lengths.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setMagicCaretPosition" fulltype="void" type="void">
				<comment>
					<description>Sets the `magic&apos; caret position. This can be used to preserve
 the column position when moving up and down lines.</description>
					<attribute name="@param">
						<description>magicCaret The magic caret position</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="magicCaret" comment="The magic caret position" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="addCaretListener" fulltype="void" type="void">
				<comment>
					<description>Adds a caret change listener to this text area.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="javax.swing.event.CaretListener" type="CaretListener" />
				</params>
			</method>
			<method final="true" visibility="public" name="removeCaretListener" fulltype="void" type="void">
				<comment>
					<description>Removes a caret change listener from this text area.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="javax.swing.event.CaretListener" type="CaretListener" />
				</params>
			</method>
			<method visibility="public" name="goToNextBracket" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the next closing bracket.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2.</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToNextCharacter" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the next character.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2.</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToNextLine" fulltype="void" type="void">
				<comment>
					<description>Move the caret to the next line.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToNextPage" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the next screenful.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2.</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToNextParagraph" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the start of the next paragraph.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToNextWord" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the start of the next word.
 Note that if the &quot;view.eatWhitespace&quot; boolean propery is false,
 this method moves the caret to the end of the current word instead.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToNextWord" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the start of the next word.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
					<param name="eatWhitespace" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToPrevBracket" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the previous bracket.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToPrevCharacter" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the previous character.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2.</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToPrevLine" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the previous line.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToPrevPage" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the previous screenful.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToPrevParagraph" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the start of the previous paragraph.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToPrevWord" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the start of the previous word.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToPrevWord" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the start of the previous word.</description>
					<attribute name="@param">
						<description>eatWhitespace If true, will eat whitespace</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
					<param name="eatWhitespace" comment="If true, will eat whitespace" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToPrevWord" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the start of the previous word.</description>
					<attribute name="@param">
						<description>eatWhitespace If true, will eat whitespace</description>
					</attribute>
					<attribute name="@param">
						<description>eatOnlyAfterWord Eat only whitespace after a word,
 in effect this goes to actual word starts even if eating</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="select" fulltype="boolean" type="boolean" />
					<param name="eatWhitespace" comment="If true, will eat whitespace" fulltype="boolean" type="boolean" />
					<param name="eatOnlyAfterWord" comment="Eat only whitespace after a word,
 in effect this goes to actual word starts even if eating" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="home" fulltype="void" type="void">
				<comment>
					<description>A &quot;dumb home&quot; action which only has 2 states:
     start of the whitespace or start of line</description>
					<attribute name="@param">
						<description>select true if we also want to select from the cursor</description>
					</attribute>
					<attribute name="@since">
						<description>jedit 4.3pre18</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if we also want to select from the cursor" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="end" fulltype="void" type="void">
				<comment>
					<description>a dumb end action which only has 2 states:
 	end of whitespace or end of line</description>
					<attribute name="@param">
						<description>select true if we also want to select from the cursor</description>
					</attribute>
					<attribute name="@since">
						<description>jedit 4.3pre18</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if we also want to select from the cursor" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="smartHome" fulltype="void" type="void">
				<comment>
					<description>On subsequent invocations, first moves the caret to the first
 non-whitespace character of the line, then the beginning of the
 line, then to the first visible line.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="smartEnd" fulltype="void" type="void">
				<comment>
					<description>Has 4 states based on # of invocations:
   1. last character of code (before inline comment)
   2. last non whitespace character of the line
   3. end of line
   4. end of last visible line</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToStartOfLine" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the beginning of the current line.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToEndOfLine" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the end of the current line.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToEndOfCode" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the end of the code present on the current line, before the comments and whitespace.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre18</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToStartOfWhiteSpace" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the first non-whitespace character of the current
 line.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToEndOfWhiteSpace" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the last non-whitespace character of the current
 line.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToFirstVisibleLine" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the first visible line.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToLastVisibleLine" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the last visible line.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToBufferStart" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the beginning of the buffer.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToBufferEnd" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the end of the buffer.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToMatchingBracket" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the bracket matching the one before the caret.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="userInput" fulltype="void" type="void">
				<comment>
					<description>Handles the insertion of the specified character. It performs the
 following operations above and beyond simply inserting the text:
 &lt;ul&gt;
 &lt;li&gt;Inserting a TAB with a selection will shift to the right
 &lt;li&gt;Inserting a BACK_SPACE or a DELETE will remove a character
 &lt;li&gt;Inserting an indent open/close bracket will re-indent the current
 line as necessary
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>ch The character</description>
					</attribute>
					<attribute name="@see">
						<description>#setSelectedText(String)</description>
					</attribute>
					<attribute name="@see">
						<description>#isOverwriteEnabled()</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="The character" fulltype="char" type="char" />
				</params>
			</method>
			<method final="true" visibility="public" name="isOverwriteEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if overwrite mode is enabled, false otherwise.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setOverwriteEnabled" fulltype="void" type="void">
				<comment>
					<description>Sets overwrite mode.</description>
				</comment>
				<params>
					<param name="overwrite" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="toggleOverwriteEnabled" fulltype="void" type="void">
				<comment>
					<description>Toggles overwrite mode.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="backspace" fulltype="void" type="void">
				<comment>
					<description>Deletes the character before the caret, or the selection, if one is
 active.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="backspaceWord" fulltype="void" type="void">
				<comment>
					<description>Deletes the word before the caret.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="backspaceWord" fulltype="void" type="void">
				<comment>
					<description>Deletes the word before the caret.</description>
					<attribute name="@param">
						<description>eatWhitespace If true, will eat whitespace</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="eatWhitespace" comment="If true, will eat whitespace" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="backspaceWord" fulltype="void" type="void">
				<comment>
					<description>Deletes the word before the caret.</description>
					<attribute name="@param">
						<description>eatWhitespace If true, will eat whitespace</description>
					</attribute>
					<attribute name="@param">
						<description>eatOnlyAfterWord Eat only whitespace after a word,
 in effect this goes to actual word starts even if eating</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="eatWhitespace" comment="If true, will eat whitespace" fulltype="boolean" type="boolean" />
					<param name="eatOnlyAfterWord" comment="Eat only whitespace after a word,
 in effect this goes to actual word starts even if eating" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="delete" fulltype="void" type="void">
				<comment>
					<description>Deletes the character after the caret.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="deleteToEndOfLine" fulltype="void" type="void">
				<comment>
					<description>Deletes from the caret to the end of the current line.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="deleteLine" fulltype="void" type="void">
				<comment>
					<description>Deletes the line containing the caret.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="deleteParagraph" fulltype="void" type="void">
				<comment>
					<description>Deletes the paragraph containing the caret.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="deleteToStartOfLine" fulltype="void" type="void">
				<comment>
					<description>Deletes from the caret to the beginning of the current line.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="deleteWord" fulltype="void" type="void">
				<comment>
					<description>Deletes the word in front of the caret.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="deleteWord" fulltype="void" type="void">
				<comment>
					<description>Deletes the word in front of the caret.

.	 * @param eatWhitespace If true, will eat whitespace</description>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="eatWhitespace" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="isMultipleSelectionEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if multiple selection is enabled.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="toggleMultipleSelectionEnabled" fulltype="void" type="void">
				<comment>
					<description>Toggles multiple selection.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setMultipleSelectionEnabled" fulltype="void" type="void">
				<comment>
					<description>Set multiple selection on or off according to the value of
 &lt;code&gt;multi&lt;/code&gt;. This only affects the ability to
 make multiple selections in the user interface; macros and plugins
 can manipulate them regardless of the setting of this flag. In fact,
 in most cases, calling this method should not be necessary.</description>
					<attribute name="@param">
						<description>multi Should multiple selection be enabled?</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="multi" comment="Should multiple selection be enabled?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="isRectangularSelectionEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if rectangular selection is enabled.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="toggleRectangularSelectionEnabled" fulltype="void" type="void">
				<comment>
					<description>Toggles rectangular selection.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setRectangularSelectionEnabled" fulltype="void" type="void">
				<comment>
					<description>Set rectangular selection on or off according to the value of
 &lt;code&gt;rectangularSelectionMode&lt;/code&gt;. This only affects the ability
 to make multiple selections from the keyboard. A rectangular
 selection can always be created by dragging with the mouse by holding
 down &lt;b&gt;Control&lt;/b&gt;, regardless of the state of this flag.</description>
					<attribute name="@param">
						<description>rectangularSelectionMode Should rectangular selection be
 enabled?</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="rectangularSelectionMode" comment="Should rectangular selection be
 enabled?" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToParentFold" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the fold containing the one at the caret
 position.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="goToNextFold" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the next fold.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToPrevFold" fulltype="void" type="void">
				<comment>
					<description>Moves the caret to the previous fold.</description>
					<attribute name="@param">
						<description>select true if you want to extend selection</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="select" comment="true if you want to extend selection" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="collapseFold" fulltype="void" type="void">
				<comment>
					<description>Like {@link DisplayManager#collapseFold(int)}, but
 also moves the caret to the first line of the fold.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="collapseFold" fulltype="void" type="void">
				<comment>
					<description>Like {@link DisplayManager#collapseFold(int)}, but
 also moves the caret to the first line of the fold.</description>
					<attribute name="@param">
						<description>line the physical line index of the fold that we want to collapse</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="the physical line index of the fold that we want to collapse" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="expandFold" fulltype="void" type="void">
				<comment>
					<description>Like {@link DisplayManager#expandFold(int,boolean)}, but
 also moves the caret to the first sub-fold.</description>
					<attribute name="@param">
						<description>fully If true, all subfolds will also be expanded</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="fully" comment="If true, all subfolds will also be expanded" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="selectFold" fulltype="void" type="void">
				<comment>
					<description>Selects the fold that contains the caret line number.</description>
					<attribute name="@since">
						<description>jEdit 3.1pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="selectFold" fulltype="void" type="void">
				<comment>
					<description>Selects the fold that contains the specified line number.</description>
					<attribute name="@param">
						<description>line The line number</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The line number" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="narrowToFold" fulltype="void" type="void">
				<comment>
					<description>Hides all lines except those in the fold containing the caret.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="narrowToSelection" fulltype="void" type="void">
				<comment>
					<description>Hides all lines except those in the selection.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addExplicitFold" fulltype="void" type="void">
				<comment>
					<description>Surrounds the selection with explicit fold markers.</description>
					<attribute name="@throws">
						<description>TextAreaException an exception thrown if the folding mode is
 not explicit</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="an exception thrown if the folding mode is
 not explicit" fulltype="org.gjt.sp.jedit.textarea.TextAreaException" type="TextAreaException" />
				</exceptions>
			</method>
			<method visibility="public" name="lineComment" fulltype="void" type="void">
				<comment>
					<description>Prepends each line of the selection with the line comment string.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="rangeComment" fulltype="void" type="void">
				<comment>
					<description>Adds comment start and end strings to the beginning and end of the
 selection.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="formatParagraph" fulltype="void" type="void">
				<comment>
					<description>Formats the paragraph containing the caret.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
				<exceptions>
					<exception fulltype="org.gjt.sp.jedit.textarea.TextAreaException" type="TextAreaException" />
				</exceptions>
			</method>
			<method visibility="public" name="spacesToTabs" fulltype="void" type="void">
				<comment>
					<description>Converts spaces to tabs in the selection.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="tabsToSpaces" fulltype="void" type="void">
				<comment>
					<description>Converts tabs to spaces in the selection.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toUpperCase" fulltype="void" type="void">
				<comment>
					<description>Converts the selected text to upper case.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toLowerCase" fulltype="void" type="void">
				<comment>
					<description>Converts the selected text to lower case.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="removeTrailingWhiteSpace" fulltype="void" type="void">
				<comment>
					<description>Removes trailing whitespace from all lines in the selection.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="insertEnterAndIndent" fulltype="void" type="void" />
			<method visibility="public" name="insertTabAndIndent" fulltype="void" type="void" />
			<method visibility="public" name="indentSelectedLines" fulltype="void" type="void">
				<comment>
					<description>Indents all selected lines.</description>
					<attribute name="@since">
						<description>jEdit 3.1pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="turnOnElasticTabstops" fulltype="void" type="void">
				<comment>
					<description>Turn ON elastic tab stops.</description>
				</comment>
			</method>
			<method visibility="public" name="shiftIndentLeft" fulltype="void" type="void">
				<comment>
					<description>Shifts the indent to the left.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="shiftIndentRight" fulltype="void" type="void">
				<comment>
					<description>Shifts the indent to the right.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="joinLines" fulltype="void" type="void">
				<comment>
					<description>Joins the current and the next line, or joins all lines in
 selections.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addLeftOfScrollBar" fulltype="void" type="void">
				<comment>
					<description>Adds a component to the left side of the box left of the vertical
 scroll bar. The ErrorList plugin uses this to show a global error
 overview, for example.  It is possible for more than one component
 to be added, each is added to the left side of the box in turn.
 Adding to the left ensures the scrollbar is always right of all added
 components.</description>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="removeLeftOfScrollBar" fulltype="void" type="void">
				<comment>
					<description>Removes a component from the box left of the vertical scroll bar.</description>
					<attribute name="@param">
						<description>comp The component</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" comment="The component" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="addNotify" fulltype="void" type="void">
				<comment>
					<description>Called by the AWT when this component is added to a parent.
 Adds document listener.</description>
				</comment>
			</method>
			<method visibility="public" name="removeNotify" fulltype="void" type="void">
				<comment>
					<description>Called by the AWT when this component is removed from it&apos;s parent.
 This clears the pointer to the currently focused component.
 Also removes document listener.</description>
				</comment>
			</method>
			<method visibility="public" name="getFocusTraversalKeysEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Java 1.4 compatibility fix to make Tab key work.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getFocusCycleRoot" fulltype="boolean" type="boolean">
				<comment>
					<description>Java 1.4 compatibility fix to make Tab traversal work in a sane
 manner.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="processKeyEvent" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method visibility="public" name="addTopComponent" fulltype="void" type="void">
				<comment>
					<description>Adds a component above the gutter, text area, and vertical scroll bar.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="removeTopComponent" fulltype="void" type="void">
				<comment>
					<description>Removes a component from above the gutter, text area, and vertical scroll bar.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="comp" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="getInputMethodRequests" fulltype="java.awt.im.InputMethodRequests" type="InputMethodRequests" />
			<method final="true" visibility="public" name="addStatusListener" fulltype="void" type="void">
				<comment>
					<description>Adds a scroll listener to this text area.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.jedit.textarea.StatusListener" type="StatusListener" />
				</params>
			</method>
			<method final="true" visibility="public" name="removeStatusListener" fulltype="void" type="void">
				<comment>
					<description>Removes a scroll listener from this text area.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.jedit.textarea.StatusListener" type="StatusListener" />
				</params>
			</method>
			<method visibility="public" name="propertiesChanged" fulltype="void" type="void">
				<comment>
					<description>Called by jEdit when necessary. Plugins should not call this method.</description>
				</comment>
			</method>
			<method visibility="public" name="addActionSet" fulltype="void" type="void">
				<comment>
					<description>Adds a new action set to the textarea&apos;s list of ActionSets.
 Call this only on standalone textarea</description>
					<attribute name="@param">
						<description>actionSet the actionSet to add</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="actionSet" comment="the actionSet to add" fulltype="org.gjt.sp.jedit.JEditActionSet" type="JEditActionSet" />
				</params>
			</method>
			<method final="true" visibility="public" name="getMarkPosition" fulltype="int" type="int">
				<comment>
					<attribute name="@deprecated">
						<description>Do not use.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="isCaretVisible" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the caret is visible, false otherwise.</description>
				</comment>
			</method>
			<method visibility="protected" name="insert" fulltype="void" type="void">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="indent" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="userInputTab" fulltype="void" type="void" />
			<method visibility="protected" name="doWordWrap" fulltype="boolean" type="boolean">
				<comment>
					<description>Does hard wrap.</description>
				</comment>
				<params>
					<param name="spaceInserted" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="addExplicitFold" fulltype="int" type="int">
				<comment>
					<description>Add an explicit fold.
 You should call this method inside a compoundEdit in the buffer.
 You must also check if the buffer fold mode is explicit before
 calling this method.</description>
					<attribute name="@param">
						<description>caretStart the starting offset</description>
					</attribute>
					<attribute name="@param">
						<description>caretEnd   the end offset</description>
					</attribute>
					<attribute name="@param">
						<description>lineStart  the start line</description>
					</attribute>
					<attribute name="@param">
						<description>lineEnd    the end line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="caretStart" comment="the starting offset" fulltype="int" type="int" />
					<param name="caretEnd" comment="the end offset" fulltype="int" type="int" />
					<param name="lineStart" comment="the start line" fulltype="int" type="int" />
					<param name="lineEnd" comment="the end line" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="isRightClickPopupEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the right click popup menu is enabled. The Gestures
 plugin uses this API.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre13</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setRightClickPopupEnabled" fulltype="void" type="void">
				<comment>
					<description>Sets if the right click popup menu is enabled. The Gestures
 plugin uses this API.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="popupEnabled" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getRightClickPopup" fulltype="javax.swing.JPopupMenu" type="JPopupMenu">
				<comment>
					<description>Returns the right click popup menu.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setRightClickPopup" fulltype="void" type="void">
				<comment>
					<description>Sets the right click popup menu.</description>
					<attribute name="@param">
						<description>popup The popup</description>
					</attribute>
				</comment>
				<params>
					<param name="popup" comment="The popup" fulltype="javax.swing.JPopupMenu" type="JPopupMenu" />
				</params>
			</method>
			<method visibility="public" name="handlePopupTrigger" fulltype="void" type="void">
				<comment>
					<description>Do the same thing as right-clicking on the text area. The Gestures
 plugin uses this API.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="public" name="createPopupMenu" fulltype="void" type="void">
				<comment>
					<description>Creates the popup menu.
 If you want a popup menu, don&apos;t forget in your class to
 call {@link #setRightClickPopupEnabled(boolean)} to enable the
 popup menu</description>
					<attribute name="@since">
						<description>4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="public" name="showPopupMenu" fulltype="void" type="void">
				<comment>
					<description>Shows the popup menu below the current caret position.</description>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="showPopupMenu" fulltype="void" type="void">
				<comment>
					<description>Shows the specified popup menu, ensuring it is displayed within
 the bounds of the screen.</description>
					<attribute name="@param">
						<description>popup The popup menu</description>
					</attribute>
					<attribute name="@param">
						<description>comp The component to show it for</description>
					</attribute>
					<attribute name="@param">
						<description>x The x co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>point If true, then the popup originates from a single point;
 otherwise it will originate from the component itself. This affects
 positioning in the case where the popup does not fit onscreen.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="popup" comment="The popup menu" fulltype="javax.swing.JPopupMenu" type="JPopupMenu" />
					<param name="comp" comment="The component to show it for" fulltype="java.awt.Component" type="Component" />
					<param name="x" comment="The x co-ordinate" fulltype="int" type="int" />
					<param name="y" comment="The y co-ordinate" fulltype="int" type="int" />
					<param name="point" comment="If true, then the popup originates from a single point;
 otherwise it will originate from the component itself. This affects
 positioning in the case where the popup does not fit onscreen." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getTabExpander" fulltype="javax.swing.text.TabExpander" type="TabExpander" />
		</methods>
	</jelclass>
	<jelclass superclass="AbstractBorder" visibility="public" package="org.gjt.sp.jedit.textarea" serializable="true" superclassfulltype="javax.swing.border.AbstractBorder" fulltype="org.gjt.sp.jedit.textarea.TextAreaBorder" type="TextAreaBorder">
		<methods>
			<constructor visibility="public" name="TextAreaBorder" />
			<method visibility="public" name="paintBorder" fulltype="void" type="void">
				<params>
					<param name="c" fulltype="java.awt.Component" type="Component" />
					<param name="g" fulltype="java.awt.Graphics" type="Graphics" />
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="width" fulltype="int" type="int" />
					<param name="height" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getBorderInsets" fulltype="java.awt.Insets" type="Insets">
				<params>
					<param name="c" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="org.gjt.sp.jedit.textarea" serializable="true" superclassfulltype="java.lang.Exception" fulltype="org.gjt.sp.jedit.textarea.TextAreaException" type="TextAreaException">
		<comment>
			<description>Exception that the TextArea can throw when an error occurs.
 It can be catched and an error dialog can be displayed.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: TextAreaException.java 15570 2009-06-25 00:43:57Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="TextAreaException">
				<params>
					<param name="msg" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.TextAreaExtension" type="TextAreaExtension">
		<comment>
			<description>Subclasses of this class can perform custom painting and tool tip
 handling in the text area and gutter.</description>
			<attribute name="@see">
				<description>TextAreaPainter#addExtension(TextAreaExtension)</description>
			</attribute>
			<attribute name="@see">
				<description>TextAreaPainter#removeExtension(TextAreaExtension)</description>
			</attribute>
			<attribute name="@see">
				<description>Gutter#addExtension(TextAreaExtension)</description>
			</attribute>
			<attribute name="@see">
				<description>Gutter#removeExtension(TextAreaExtension)</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.0pre4</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: TextAreaExtension.java 15570 2009-06-25 00:43:57Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="TextAreaExtension" />
			<method visibility="public" name="paintScreenLineRange" fulltype="void" type="void">
				<comment>
					<description>Paints a range of screen lines. The default implementation calls
 {@link #paintValidLine(Graphics2D,int,int,int,int,int)} and
 {@link #paintInvalidLine(Graphics2D,int,int)}.</description>
					<attribute name="@param">
						<description>gfx A graphics context</description>
					</attribute>
					<attribute name="@param">
						<description>firstLine The first screen line</description>
					</attribute>
					<attribute name="@param">
						<description>lastLine The last screen line</description>
					</attribute>
					<attribute name="@param">
						<description>physicalLines The list of physical line numbers. Entries are
 -1 if the screen line is out of range.</description>
					</attribute>
					<attribute name="@param">
						<description>start An array of screen line start offsets.</description>
					</attribute>
					<attribute name="@param">
						<description>end An array of screen line end offsets</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>lineHeight The line height</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="gfx" comment="A graphics context" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="firstLine" comment="The first screen line" fulltype="int" type="int" />
					<param name="lastLine" comment="The last screen line" fulltype="int" type="int" />
					<param name="physicalLines" comment="The list of physical line numbers. Entries are
 -1 if the screen line is out of range." fulltype="int[]" type="int" />
					<param name="start" comment="An array of screen line start offsets." fulltype="int[]" type="int" />
					<param name="end" comment="An array of screen line end offsets" fulltype="int[]" type="int" />
					<param name="y" comment="The y co-ordinate" fulltype="int" type="int" />
					<param name="lineHeight" comment="The line height" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="paintValidLine" fulltype="void" type="void">
				<comment>
					<description>Called by the text area when the extension is to paint a
 screen line which has an associated physical line number in
 the buffer. Note that since one physical line may consist of
 several screen lines due to soft wrap, the start and end
 offsets of the screen line are passed in as well.</description>
					<attribute name="@param">
						<description>gfx The graphics context</description>
					</attribute>
					<attribute name="@param">
						<description>screenLine The screen line number</description>
					</attribute>
					<attribute name="@param">
						<description>physicalLine The physical line number</description>
					</attribute>
					<attribute name="@param">
						<description>start The offset where the screen line begins, from
 the start of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>end The offset where the screen line ends, from the
 start of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate of the top of the line&apos;s
 bounding box</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="gfx" comment="The graphics context" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" comment="The screen line number" fulltype="int" type="int" />
					<param name="physicalLine" comment="The physical line number" fulltype="int" type="int" />
					<param name="start" comment="The offset where the screen line begins, from
 the start of the buffer" fulltype="int" type="int" />
					<param name="end" comment="The offset where the screen line ends, from the
 start of the buffer" fulltype="int" type="int" />
					<param name="y" comment="The y co-ordinate of the top of the line&apos;s
 bounding box" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="paintInvalidLine" fulltype="void" type="void">
				<comment>
					<description>Called by the text area when the extension is to paint a
 screen line which is not part of the buffer. This can happen
 if the buffer is shorter than the height of the text area,
 for example.</description>
					<attribute name="@param">
						<description>gfx The graphics context</description>
					</attribute>
					<attribute name="@param">
						<description>screenLine The screen line number</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate of the top of the line&apos;s
 bounding box</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="gfx" comment="The graphics context" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" comment="The screen line number" fulltype="int" type="int" />
					<param name="y" comment="The y co-ordinate of the top of the line&apos;s
 bounding box" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getToolTipText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Called by the text area when the mouse hovers over the
 location specified in the mouse event.</description>
					<attribute name="@param">
						<description>x The x co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>y The y co-ordinate</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="The x co-ordinate" fulltype="int" type="int" />
					<param name="y" comment="The y co-ordinate" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="MouseInputAdapter" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="javax.swing.event.MouseInputAdapter" fulltype="org.gjt.sp.jedit.textarea.TextAreaMouseHandler" type="TextAreaMouseHandler">
		<comment>
			<description>Standalone TextArea MouseHandler.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: TextAreaMouseHandler.java 19363 2011-02-14 11:59:42Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="protected" name="textArea" fulltype="org.gjt.sp.jedit.textarea.TextArea" type="TextArea" />
			<field visibility="protected" name="dragStartLine" fulltype="int" type="int" />
			<field visibility="protected" name="dragStartOffset" fulltype="int" type="int" />
			<field visibility="protected" name="dragStart" fulltype="int" type="int" />
			<field visibility="protected" name="clickCount" fulltype="int" type="int" />
			<field visibility="protected" name="dragged" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="quickCopyDrag" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="control" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="ctrlForRectangularSelection" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="maybeDragAndDrop" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<method visibility="public" name="mousePressed" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="protected" name="doSingleClick" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="protected" name="doDoubleClick" fulltype="void" type="void" />
			<method visibility="protected" name="doTripleClick" fulltype="void" type="void" />
			<method visibility="public" name="mouseMoved" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="public" name="mouseDragged" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="public" name="mouseReleased" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method static="true" visibility="public" name="isPopupTrigger" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the specified event is the popup trigger event.
 This implements precisely defined behavior, as opposed to
 MouseEvent.isPopupTrigger().</description>
					<attribute name="@param">
						<description>evt The event</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="The event" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method static="true" visibility="public" name="isMiddleButton" returncomment="true if the modifier match the middle button" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@param">
						<description>modifiers The modifiers flag from a mouse event</description>
					</attribute>
					<attribute name="@return">
						<description>true if the modifier match the middle button</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="modifiers" comment="The modifiers flag from a mouse event" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isRightButton" returncomment="true if the modifier match the right button" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@param">
						<description>modifiers The modifiers flag from a mouse event</description>
					</attribute>
					<attribute name="@return">
						<description>true if the modifier match the right button</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="modifiers" comment="The modifiers flag from a mouse event" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="protected" name="showCursor" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="JComponent" visibility="public" package="org.gjt.sp.jedit.textarea" serializable="true" superclassfulltype="javax.swing.JComponent" fulltype="org.gjt.sp.jedit.textarea.TextAreaPainter" type="TextAreaPainter">
		<implements>
			<interface fulltype="javax.swing.text.TabExpander" type="TabExpander" />
		</implements>
		<comment>
			<description>The text area painter is the component responsible for displaying the
 text of the current buffer. The only methods in this class that should
 be called by plugins are those for adding and removing
 text area extensions.</description>
			<attribute name="@see">
				<description>#addExtension(TextAreaExtension)</description>
			</attribute>
			<attribute name="@see">
				<description>#addExtension(int,TextAreaExtension)</description>
			</attribute>
			<attribute name="@see">
				<description>#removeExtension(TextAreaExtension)</description>
			</attribute>
			<attribute name="@see">
				<description>TextAreaExtension</description>
			</attribute>
			<attribute name="@see">
				<description>TextArea</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: TextAreaPainter.java 20109 2011-10-18 12:25:29Z evanpw $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-2147483648" visibility="public" name="LOWEST_LAYER" constexpr="-2147483648" fulltype="int" type="int">
				<comment>
					<description>The lowest possible layer.</description>
					<attribute name="@see">
						<description>#addExtension(int,TextAreaExtension)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-60" visibility="public" name="BACKGROUND_LAYER" constexpr="-60" fulltype="int" type="int">
				<comment>
					<description>Below selection layer. The JDiff plugin will use this.</description>
					<attribute name="@see">
						<description>#addExtension(int,TextAreaExtension)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-50" visibility="public" name="LINE_BACKGROUND_LAYER" constexpr="-50" fulltype="int" type="int">
				<comment>
					<description>The line highlight and collapsed fold highlight layer.</description>
					<attribute name="@see">
						<description>#addExtension(int,TextAreaExtension)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-40" visibility="public" name="BELOW_SELECTION_LAYER" constexpr="-40" fulltype="int" type="int">
				<comment>
					<description>Below selection layer.</description>
					<attribute name="@see">
						<description>#addExtension(int,TextAreaExtension)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-30" visibility="public" name="SELECTION_LAYER" constexpr="-30" fulltype="int" type="int">
				<comment>
					<description>Selection layer. Most extensions will be above this layer, but some
 (eg, JDiff) will want to be below the selection.</description>
					<attribute name="@see">
						<description>#addExtension(int,TextAreaExtension)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-20" visibility="public" name="WRAP_GUIDE_LAYER" constexpr="-20" fulltype="int" type="int">
				<comment>
					<description>Wrap guide layer. Most extensions will be above this layer.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-10" visibility="public" name="BELOW_MOST_EXTENSIONS_LAYER" constexpr="-10" fulltype="int" type="int">
				<comment>
					<description>Below most extensions layer.</description>
					<attribute name="@see">
						<description>#addExtension(int,TextAreaExtension)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="DEFAULT_LAYER" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>Default extension layer. This is above the wrap guide but below the
 structure highlight.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="50" visibility="public" name="BLOCK_CARET_LAYER" constexpr="50" fulltype="int" type="int">
				<comment>
					<description>Block caret layer. Most extensions will be below this layer.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="100" visibility="public" name="BRACKET_HIGHLIGHT_LAYER" constexpr="100" fulltype="int" type="int">
				<comment>
					<description>Bracket highlight layer. Most extensions will be below this layer.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="200" visibility="public" name="TEXT_LAYER" constexpr="200" fulltype="int" type="int">
				<comment>
					<description>Text layer. Most extensions will be below this layer.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="300" visibility="public" name="CARET_LAYER" constexpr="300" fulltype="int" type="int">
				<comment>
					<description>Caret layer. Most extensions will be below this layer.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="2147483647" visibility="public" name="HIGHEST_LAYER" constexpr="2147483647" fulltype="int" type="int">
				<comment>
					<description>Highest possible layer.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<method visibility="public" name="setBounds" fulltype="void" type="void">
				<comment>
					<description>It is a bad idea to override this, but we need to get the component
 event before the first repaint.</description>
				</comment>
				<params>
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="width" fulltype="int" type="int" />
					<param name="height" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addNotify" fulltype="void" type="void" />
			<method visibility="public" name="setCursor" fulltype="void" type="void">
				<comment>
					<description>Change the mouse cursor.
 If the cursor is hiddenCursor or TEXT_CURSOR, it is the default cursor and the cursor will not disappear
 anymore while typing until {@link #resetCursor()} is called.</description>
					<attribute name="@param">
						<description>cursor the new cursor</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="cursor" comment="the new cursor" fulltype="java.awt.Cursor" type="Cursor" />
				</params>
			</method>
			<method visibility="public" name="resetCursor" fulltype="void" type="void">
				<comment>
					<description>Reset the cursor to it&apos;s default value.</description>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getFocusTraversalKeysEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Makes the tab key work in Java 1.4.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre4</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="getStyles" returncomment="an array of SyntaxStyles" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle[]" type="SyntaxStyle">
				<comment>
					<description>Returns the syntax styles used to paint colorized text. Entry &lt;i&gt;n&lt;/i&gt;
 will be used to paint tokens with id = &lt;i&gt;n&lt;/i&gt;.</description>
					<attribute name="@return">
						<description>an array of SyntaxStyles</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.syntax.Token</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setStyles" fulltype="void" type="void">
				<comment>
					<description>Sets the syntax styles used to paint colorized text. Entry &lt;i&gt;n&lt;/i&gt;
 will be used to paint tokens with id = &lt;i&gt;n&lt;/i&gt;.</description>
					<attribute name="@param">
						<description>styles The syntax styles</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.syntax.Token</description>
					</attribute>
				</comment>
				<params>
					<param name="styles" comment="The syntax styles" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle[]" type="SyntaxStyle" />
				</params>
			</method>
			<method final="true" visibility="public" name="getCaretColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the caret color.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setCaretColor" fulltype="void" type="void">
				<comment>
					<description>Sets the caret color.</description>
					<attribute name="@param">
						<description>caretColor The caret color</description>
					</attribute>
				</comment>
				<params>
					<param name="caretColor" comment="The caret color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method final="true" visibility="public" name="getSelectionColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the selection color.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setSelectionColor" fulltype="void" type="void">
				<comment>
					<description>Sets the selection color.</description>
					<attribute name="@param">
						<description>selectionColor The selection color</description>
					</attribute>
				</comment>
				<params>
					<param name="selectionColor" comment="The selection color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method final="true" visibility="public" name="getMultipleSelectionColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the multiple selection color.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setMultipleSelectionColor" fulltype="void" type="void">
				<comment>
					<description>Sets the multiple selection color.</description>
					<attribute name="@param">
						<description>multipleSelectionColor The multiple selection color</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="multipleSelectionColor" comment="The multiple selection color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method final="true" visibility="public" name="getLineHighlightColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the line highlight color.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setLineHighlightColor" fulltype="void" type="void">
				<comment>
					<description>Sets the line highlight color.</description>
					<attribute name="@param">
						<description>lineHighlightColor The line highlight color</description>
					</attribute>
				</comment>
				<params>
					<param name="lineHighlightColor" comment="The line highlight color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method final="true" visibility="public" name="isLineHighlightEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if line highlight is enabled, false otherwise.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setLineHighlightEnabled" fulltype="void" type="void">
				<comment>
					<description>Enables or disables current line highlighting.</description>
					<attribute name="@param">
						<description>lineHighlight True if current line highlight should be enabled,
 false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="lineHighlight" comment="True if current line highlight should be enabled,
 false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getSelectionFgColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the selection foreground color, if one is set.</description>
					<attribute name="@since">
						<description>jEdit 4.4.1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setSelectionFgColor" fulltype="void" type="void">
				<comment>
					<description>Sets the selection foreground color.</description>
					<attribute name="@param">
						<description>selectionFgColor The selection foreground color</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4.1</description>
					</attribute>
				</comment>
				<params>
					<param name="selectionFgColor" comment="The selection foreground color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method final="true" visibility="public" name="isSelectionFgColorEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if selection foreground color is enabled - i.e. a specific
 color is used for the selection foreground instead of the syntax highlight
 color.</description>
					<attribute name="@since">
						<description>jEdit 4.4.1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setSelectionFgColorEnabled" fulltype="void" type="void">
				<comment>
					<description>Enables or disables selection foreground color.</description>
					<attribute name="@param">
						<description>selectionFg True if selection foreground should be enabled,
 false otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4.1</description>
					</attribute>
				</comment>
				<params>
					<param name="selectionFg" comment="True if selection foreground should be enabled,
 false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getStructureHighlightColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the structure highlight color.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setStructureHighlightColor" fulltype="void" type="void">
				<comment>
					<description>Sets the structure highlight color.</description>
					<attribute name="@param">
						<description>structureHighlightColor The bracket highlight color</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="structureHighlightColor" comment="The bracket highlight color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method final="true" visibility="public" name="isStructureHighlightEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if structure highlighting is enabled, false otherwise.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setStructureHighlightEnabled" fulltype="void" type="void">
				<comment>
					<description>Enables or disables structure highlighting.</description>
					<attribute name="@param">
						<description>structureHighlight True if structure highlighting should be
 enabled, false otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="structureHighlight" comment="True if structure highlighting should be
 enabled, false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="isBlockCaretEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the caret should be drawn as a block, false otherwise.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setBlockCaretEnabled" fulltype="void" type="void">
				<comment>
					<description>Sets if the caret should be drawn as a block, false otherwise.</description>
					<attribute name="@param">
						<description>blockCaret True if the caret should be drawn as a block,
 false otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="blockCaret" comment="True if the caret should be drawn as a block,
 false otherwise." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="isThickCaretEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the caret should be drawn with a thick line, false otherwise.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setThickCaretEnabled" fulltype="void" type="void">
				<comment>
					<description>Sets if the caret should be drawn with a thick line.</description>
					<attribute name="@param">
						<description>thickCaret
     True if the caret should be drawn as a block, false otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="thickCaret" comment="True if the caret should be drawn as a block, false otherwise." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getEOLMarkerColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the EOL marker color.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setEOLMarkerColor" fulltype="void" type="void">
				<comment>
					<description>Sets the EOL marker color.</description>
					<attribute name="@param">
						<description>eolMarkerColor The EOL marker color</description>
					</attribute>
				</comment>
				<params>
					<param name="eolMarkerColor" comment="The EOL marker color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method final="true" visibility="public" name="getEOLMarkersPainted" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if EOL markers are drawn, false otherwise.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setEOLMarkersPainted" fulltype="void" type="void">
				<comment>
					<description>Sets if EOL markers are to be drawn.</description>
					<attribute name="@param">
						<description>eolMarkers True if EOL markers should be drawn, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="eolMarkers" comment="True if EOL markers should be drawn, false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getWrapGuideColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Returns the wrap guide color.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setWrapGuideColor" fulltype="void" type="void">
				<comment>
					<description>Sets the wrap guide color.</description>
					<attribute name="@param">
						<description>wrapGuideColor The wrap guide color</description>
					</attribute>
				</comment>
				<params>
					<param name="wrapGuideColor" comment="The wrap guide color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method final="true" visibility="public" name="isWrapGuidePainted" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the wrap guide is drawn, false otherwise.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setWrapGuidePainted" fulltype="void" type="void">
				<comment>
					<description>Sets if the wrap guide is to be drawn.</description>
					<attribute name="@param">
						<description>wrapGuide True if the wrap guide should be drawn, false otherwise</description>
					</attribute>
				</comment>
				<params>
					<param name="wrapGuide" comment="True if the wrap guide should be drawn, false otherwise" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="getFoldLineStyle" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle[]" type="SyntaxStyle">
				<comment>
					<description>Returns the fold line style. The first element is the style for
 lines with a fold level greater than 3. The remaining elements
 are for fold levels 1 to 3.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setFoldLineStyle" fulltype="void" type="void">
				<comment>
					<description>Sets the fold line style. The first element is the style for
 lines with a fold level greater than 3. The remaining elements
 are for fold levels 1 to 3.</description>
					<attribute name="@param">
						<description>foldLineStyle The fold line style</description>
					</attribute>
				</comment>
				<params>
					<param name="foldLineStyle" comment="The fold line style" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle[]" type="SyntaxStyle" />
				</params>
			</method>
			<method visibility="public" name="setAntiAlias" fulltype="void" type="void">
				<comment>
					<description>As of jEdit 4.3pre4, a new JDK 1.6 subpixel antialias mode is supported.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="newValue" fulltype="org.gjt.sp.jedit.textarea.AntiAlias" type="AntiAlias" />
				</params>
			</method>
			<method visibility="public" name="getAntiAlias" returncomment="the AntiAlias value that is currently used for TextAreas." fulltype="org.gjt.sp.jedit.textarea.AntiAlias" type="AntiAlias">
				<comment>
					<attribute name="@return">
						<description>the AntiAlias value that is currently used for TextAreas.</description>
					</attribute>
					<attribute name="@since">
						<description>jedit 4.3pre4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setFractionalFontMetricsEnabled" fulltype="void" type="void">
				<comment>
					<description>Sets if fractional font metrics should be enabled. Has no effect when
 running on Java 1.1.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="fracFontMetrics" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isFractionalFontMetricsEnabled" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if fractional font metrics are enabled.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getFontRenderContext" fulltype="java.awt.font.FontRenderContext" type="FontRenderContext">
				<comment>
					<description>Returns the font render context.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addExtension" fulltype="void" type="void">
				<comment>
					<description>Adds a text area extension, which can perform custom painting and
 tool tip handling.</description>
					<attribute name="@param">
						<description>extension The extension</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="extension" comment="The extension" fulltype="org.gjt.sp.jedit.textarea.TextAreaExtension" type="TextAreaExtension" />
				</params>
			</method>
			<method visibility="public" name="addExtension" fulltype="void" type="void">
				<comment>
					<description>Adds a text area extension, which can perform custom painting and
 tool tip handling.</description>
					<attribute name="@param">
						<description>layer The layer to add the extension to. Note that more than
 extension can share the same layer.</description>
					</attribute>
					<attribute name="@param">
						<description>extension The extension</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="layer" comment="The layer to add the extension to. Note that more than
 extension can share the same layer." fulltype="int" type="int" />
					<param name="extension" comment="The extension" fulltype="org.gjt.sp.jedit.textarea.TextAreaExtension" type="TextAreaExtension" />
				</params>
			</method>
			<method visibility="public" name="removeExtension" fulltype="void" type="void">
				<comment>
					<description>Removes a text area extension. It will no longer be asked to
 perform custom painting and tool tip handling.</description>
					<attribute name="@param">
						<description>extension The extension</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="extension" comment="The extension" fulltype="org.gjt.sp.jedit.textarea.TextAreaExtension" type="TextAreaExtension" />
				</params>
			</method>
			<method visibility="public" name="getExtensions" fulltype="org.gjt.sp.jedit.textarea.TextAreaExtension[]" type="TextAreaExtension">
				<comment>
					<description>Returns an array of registered text area extensions. Useful for
 debugging purposes.</description>
					<attribute name="@since">
						<description>jEdit 4.1pre5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getToolTipText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the tool tip to display at the specified location.</description>
					<attribute name="@param">
						<description>evt The mouse event</description>
					</attribute>
				</comment>
				<params>
					<param name="evt" comment="The mouse event" fulltype="java.awt.event.MouseEvent" type="MouseEvent" />
				</params>
			</method>
			<method visibility="public" name="getFontMetrics" fulltype="java.awt.FontMetrics" type="FontMetrics">
				<comment>
					<description>Returns the font metrics used by this component.</description>
				</comment>
			</method>
			<method visibility="public" name="getLineHeight" fulltype="int" type="int">
				<comment>
					<description>Returns the line height as given by the font metrics plus the 
 added line spacing.</description>
				</comment>
			</method>
			<method visibility="public" name="getFontHeight" fulltype="int" type="int">
				<comment>
					<description>Returns the font height as given by the font metrics.</description>
				</comment>
			</method>
			<method visibility="public" name="getLineExtraSpacing" fulltype="int" type="int">
				<comment>
					<description>Returns the number of pixels from the start of the line to the start
 of text (the extra line spacing).</description>
				</comment>
			</method>
			<method visibility="public" name="setLineExtraSpacing" fulltype="void" type="void">
				<comment>
					<description>Sets extra spacing between lines in pixels.</description>
				</comment>
				<params>
					<param name="spacing" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setFont" fulltype="void" type="void">
				<comment>
					<description>Sets the font for this component. This is overridden to update the
 cached font metrics and to recalculate which lines are visible.</description>
					<attribute name="@param">
						<description>font The font</description>
					</attribute>
				</comment>
				<params>
					<param name="font" comment="The font" fulltype="java.awt.Font" type="Font" />
				</params>
			</method>
			<method visibility="public" name="getStringWidth" fulltype="float" type="float">
				<comment>
					<description>Returns the width of the given string, in pixels, using the text
 area&apos;s current font.</description>
					<attribute name="@since">
						<description>jEdit 4.2final</description>
					</attribute>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getRenderingHints" fulltype="java.awt.RenderingHints" type="RenderingHints">
				<comment>
					<description>Returns the rendering hints used by the Graphics2D class; in this
 case, for anti-aliasing of text.</description>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="update" fulltype="void" type="void">
				<comment>
					<description>Repaints the text.</description>
					<attribute name="@param">
						<description>_gfx The graphics context</description>
					</attribute>
				</comment>
				<params>
					<param name="_gfx" comment="The graphics context" fulltype="java.awt.Graphics" type="Graphics" />
				</params>
			</method>
			<method visibility="public" name="paint" fulltype="void" type="void">
				<comment>
					<description>Repaints the text.</description>
					<attribute name="@param">
						<description>_gfx The graphics context</description>
					</attribute>
				</comment>
				<params>
					<param name="_gfx" comment="The graphics context" fulltype="java.awt.Graphics" type="Graphics" />
				</params>
			</method>
			<method visibility="public" name="nextTabStop" returncomment="The next tab stop after &lt;i&gt;x&lt;/i&gt;" fulltype="float" type="float">
				<comment>
					<description>Implementation of TabExpander interface. Returns next tab stop after
 a specified point.</description>
					<attribute name="@param">
						<description>x The x co-ordinate</description>
					</attribute>
					<attribute name="@param">
						<description>tabOffset Ignored</description>
					</attribute>
					<attribute name="@return">
						<description>The next tab stop after &lt;i&gt;x&lt;/i&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="The x co-ordinate" fulltype="float" type="float" />
					<param name="tabOffset" comment="Ignored" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getPreferredSize" fulltype="java.awt.Dimension" type="Dimension">
				<comment>
					<description>Returns the painter&apos;s preferred size.</description>
				</comment>
			</method>
			<method visibility="public" name="getMinimumSize" fulltype="java.awt.Dimension" type="Dimension">
				<comment>
					<description>Returns the painter&apos;s minimum size.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="TransferHandler" visibility="public" package="org.gjt.sp.jedit.textarea" serializable="true" superclassfulltype="javax.swing.TransferHandler" fulltype="org.gjt.sp.jedit.textarea.TextAreaTransferHandler" type="TextAreaTransferHandler">
		<comment>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: TextAreaTransferHandler.java 19698 2011-07-23 12:22:01Z shlomy $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="TextAreaTransferHandler" />
			<method visibility="protected" name="createTransferable" fulltype="java.awt.datatransfer.Transferable" type="Transferable">
				<params>
					<param name="c" fulltype="javax.swing.JComponent" type="JComponent" />
				</params>
			</method>
			<method visibility="public" name="getSourceActions" fulltype="int" type="int">
				<params>
					<param name="c" fulltype="javax.swing.JComponent" type="JComponent" />
				</params>
			</method>
			<method visibility="public" name="importData" fulltype="boolean" type="boolean">
				<params>
					<param name="c" fulltype="javax.swing.JComponent" type="JComponent" />
					<param name="t" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
				</params>
			</method>
			<method visibility="protected" name="exportDone" fulltype="void" type="void">
				<params>
					<param name="c" fulltype="javax.swing.JComponent" type="JComponent" />
					<param name="t" fulltype="java.awt.datatransfer.Transferable" type="Transferable" />
					<param name="action" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="canImport" fulltype="boolean" type="boolean">
				<params>
					<param name="support" fulltype="javax.swing.TransferHandler.TransferSupport" type="TransferHandler.TransferSupport" />
				</params>
			</method>
			<method visibility="public" name="canImport" fulltype="boolean" type="boolean">
				<params>
					<param name="c" fulltype="javax.swing.JComponent" type="JComponent" />
					<param name="flavors" fulltype="java.awt.datatransfer.DataFlavor[]" type="DataFlavor" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.textarea" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.textarea.TriangleFoldPainter" type="TriangleFoldPainter">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.textarea.FoldPainter" type="FoldPainter" />
		</implements>
		<methods>
			<constructor visibility="public" name="TriangleFoldPainter" />
			<method visibility="public" name="paintFoldStart" fulltype="void" type="void">
				<params>
					<param name="gutter" fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter" />
					<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" fulltype="int" type="int" />
					<param name="physicalLine" fulltype="int" type="int" />
					<param name="nextLineVisible" fulltype="boolean" type="boolean" />
					<param name="y" fulltype="int" type="int" />
					<param name="lineHeight" fulltype="int" type="int" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="paintFoldEnd" fulltype="void" type="void">
				<params>
					<param name="gutter" fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter" />
					<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" fulltype="int" type="int" />
					<param name="physicalLine" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="lineHeight" fulltype="int" type="int" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
			<method visibility="public" name="paintFoldMiddle" fulltype="void" type="void">
				<params>
					<param name="gutter" fulltype="org.gjt.sp.jedit.textarea.Gutter" type="Gutter" />
					<param name="gfx" fulltype="java.awt.Graphics2D" type="Graphics2D" />
					<param name="screenLine" fulltype="int" type="int" />
					<param name="physicalLine" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="lineHeight" fulltype="int" type="int" />
					<param name="buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.TextUtilities" type="TextUtilities">
		<comment>
			<description>Contains several text manipulation methods.

 &lt;ul&gt;
 &lt;li&gt;Bracket matching
 &lt;li&gt;Word start and end offset calculation
 &lt;li&gt;String comparison
 &lt;li&gt;Converting tabs to spaces and vice versa
 &lt;li&gt;Wrapping text
 &lt;li&gt;String case conversion
 &lt;/ul&gt;</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: TextUtilities.java 20176 2011-10-30 19:30:37Z kpouer $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="10000" visibility="public" name="BRACKET_MATCH_LIMIT" constexpr="10000" fulltype="int" type="int" />
			<field final="true" static="true" const="0" visibility="public" name="WHITESPACE" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="WORD_CHAR" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="SYMBOL" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="0" visibility="public" name="MIXED" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="LOWER_CASE" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="UPPER_CASE" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="3" visibility="public" name="TITLE_CASE" constexpr="3" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="TextUtilities" />
			<method static="true" visibility="public" name="getTokenAtOffset" fulltype="org.gjt.sp.jedit.syntax.Token" type="Token">
				<comment>
					<description>Returns the token that contains the specified offset.</description>
					<attribute name="@param">
						<description>tokens The token list</description>
					</attribute>
					<attribute name="@param">
						<description>offset The offset</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="tokens" comment="The token list" fulltype="org.gjt.sp.jedit.syntax.Token" type="Token" />
					<param name="offset" comment="The offset" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getComplementaryBracket" fulltype="char" type="char">
				<comment>
					<description>Given an opening bracket, return the corresponding closing bracket
 and store true in &lt;code&gt;direction[0]&lt;/code&gt;. Given a closing bracket,
 return the corresponding opening bracket and store false in
 &lt;code&gt;direction[0]&lt;/code&gt;. Otherwise, return &lt;code&gt;\0&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" fulltype="char" type="char" />
					<param name="direction" fulltype="boolean[]" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="findMatchingBracket" fulltype="int" type="int">
				<comment>
					<description>Returns the offset of the bracket matching the one at the
 specified offset of the buffer, or -1 if the bracket is
 unmatched (or if the character is not a bracket).</description>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>line The line</description>
					</attribute>
					<attribute name="@param">
						<description>offset The offset within that line</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.buffer.JEditBuffer" type="JEditBuffer" />
					<param name="line" comment="The line" fulltype="int" type="int" />
					<param name="offset" comment="The offset within that line" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="join" returncomment="a joined toString() representation of the collection" fulltype="java.lang.String" type="String">
				<comment>
					<description>Similar to perl&apos;s join() method on lists,
    but works with all collections.</description>
					<attribute name="@param">
						<description>c An iterable collection of Objects</description>
					</attribute>
					<attribute name="@param">
						<description>delim a string to put between each object</description>
					</attribute>
					<attribute name="@return">
						<description>a joined toString() representation of the collection</description>
					</attribute>
					<attribute name="@since">
						<description>jedit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="An iterable collection of Objects" fulltype="java.util.Collection" type="Collection" />
					<param name="delim" comment="a string to put between each object" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordStart" fulltype="int" type="int">
				<comment>
					<description>Locates the start of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.String" type="String" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordStart" fulltype="int" type="int">
				<comment>
					<description>Locates the start of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordStart" fulltype="int" type="int">
				<comment>
					<description>Locates the start of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@param">
						<description>joinNonWordChars Treat consecutive non-alphanumeric
 characters as one word</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.String" type="String" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
					<param name="joinNonWordChars" comment="Treat consecutive non-alphanumeric
 characters as one word" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordStart" fulltype="int" type="int">
				<comment>
					<description>Locates the start of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@param">
						<description>joinNonWordChars Treat consecutive non-alphanumeric
 characters as one word</description>
					</attribute>
					<attribute name="@param">
						<description>eatWhitespace Include whitespace at start of word</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.String" type="String" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
					<param name="joinNonWordChars" comment="Treat consecutive non-alphanumeric
 characters as one word" fulltype="boolean" type="boolean" />
					<param name="eatWhitespace" comment="Include whitespace at start of word" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordStart" fulltype="int" type="int">
				<comment>
					<description>Locates the start of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@param">
						<description>joinNonWordChars Treat consecutive non-alphanumeric
 characters as one word</description>
					</attribute>
					<attribute name="@param">
						<description>camelCasedWords Treat &quot;camelCased&quot; parts as words</description>
					</attribute>
					<attribute name="@param">
						<description>eatWhitespace Include whitespace at start of word</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.String" type="String" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
					<param name="joinNonWordChars" comment="Treat consecutive non-alphanumeric
 characters as one word" fulltype="boolean" type="boolean" />
					<param name="camelCasedWords" comment="Treat &quot;camelCased&quot; parts as words" fulltype="boolean" type="boolean" />
					<param name="eatWhitespace" comment="Include whitespace at start of word" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordStart" fulltype="int" type="int">
				<comment>
					<description>Locates the start of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@param">
						<description>joinNonWordChars Treat consecutive non-alphanumeric
 characters as one word</description>
					</attribute>
					<attribute name="@param">
						<description>camelCasedWords Treat &quot;camelCased&quot; parts as words</description>
					</attribute>
					<attribute name="@param">
						<description>eatWhitespace Include whitespace at start of word</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
					<param name="joinNonWordChars" comment="Treat consecutive non-alphanumeric
 characters as one word" fulltype="boolean" type="boolean" />
					<param name="camelCasedWords" comment="Treat &quot;camelCased&quot; parts as words" fulltype="boolean" type="boolean" />
					<param name="eatWhitespace" comment="Include whitespace at start of word" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordStart" fulltype="int" type="int">
				<comment>
					<description>Locates the start of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@param">
						<description>joinNonWordChars Treat consecutive non-alphanumeric
 characters as one word</description>
					</attribute>
					<attribute name="@param">
						<description>camelCasedWords Treat &quot;camelCased&quot; parts as words</description>
					</attribute>
					<attribute name="@param">
						<description>eatWhitespace Include whitespace at start of word</description>
					</attribute>
					<attribute name="@param">
						<description>eatOnlyAfterWord Eat only whitespace after a word,
 in effect this finds actual word starts even if eating</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
					<param name="joinNonWordChars" comment="Treat consecutive non-alphanumeric
 characters as one word" fulltype="boolean" type="boolean" />
					<param name="camelCasedWords" comment="Treat &quot;camelCased&quot; parts as words" fulltype="boolean" type="boolean" />
					<param name="eatWhitespace" comment="Include whitespace at start of word" fulltype="boolean" type="boolean" />
					<param name="eatOnlyAfterWord" comment="Eat only whitespace after a word,
 in effect this finds actual word starts even if eating" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordEnd" fulltype="int" type="int">
				<comment>
					<description>Locates the end of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.String" type="String" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordEnd" fulltype="int" type="int">
				<comment>
					<description>Locates the end of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordEnd" fulltype="int" type="int">
				<comment>
					<description>Locates the end of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@param">
						<description>joinNonWordChars Treat consecutive non-alphanumeric
 characters as one word</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.String" type="String" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
					<param name="joinNonWordChars" comment="Treat consecutive non-alphanumeric
 characters as one word" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordEnd" fulltype="int" type="int">
				<comment>
					<description>Locates the end of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@param">
						<description>joinNonWordChars Treat consecutive non-alphanumeric
 characters as one word</description>
					</attribute>
					<attribute name="@param">
						<description>eatWhitespace Include whitespace at end of word</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.String" type="String" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
					<param name="joinNonWordChars" comment="Treat consecutive non-alphanumeric
 characters as one word" fulltype="boolean" type="boolean" />
					<param name="eatWhitespace" comment="Include whitespace at end of word" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordEnd" fulltype="int" type="int">
				<comment>
					<description>Locates the end of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@param">
						<description>joinNonWordChars Treat consecutive non-alphanumeric
 characters as one word</description>
					</attribute>
					<attribute name="@param">
						<description>camelCasedWords Treat &quot;camelCased&quot; parts as words</description>
					</attribute>
					<attribute name="@param">
						<description>eatWhitespace Include whitespace at end of word</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.String" type="String" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
					<param name="joinNonWordChars" comment="Treat consecutive non-alphanumeric
 characters as one word" fulltype="boolean" type="boolean" />
					<param name="camelCasedWords" comment="Treat &quot;camelCased&quot; parts as words" fulltype="boolean" type="boolean" />
					<param name="eatWhitespace" comment="Include whitespace at end of word" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="findWordEnd" fulltype="int" type="int">
				<comment>
					<description>Locates the end of the word at the specified position.</description>
					<attribute name="@param">
						<description>line The text</description>
					</attribute>
					<attribute name="@param">
						<description>pos The position</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway</description>
					</attribute>
					<attribute name="@param">
						<description>joinNonWordChars Treat consecutive non-alphanumeric
 characters as one word</description>
					</attribute>
					<attribute name="@param">
						<description>camelCasedWords Treat &quot;camelCased&quot; parts as words</description>
					</attribute>
					<attribute name="@param">
						<description>eatWhitespace Include whitespace at end of word</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="line" comment="The text" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="pos" comment="The position" fulltype="int" type="int" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway" fulltype="java.lang.String" type="String" />
					<param name="joinNonWordChars" comment="Treat consecutive non-alphanumeric
 characters as one word" fulltype="boolean" type="boolean" />
					<param name="camelCasedWords" comment="Treat &quot;camelCased&quot; parts as words" fulltype="boolean" type="boolean" />
					<param name="eatWhitespace" comment="Include whitespace at end of word" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="getCharType" returncomment="the type of the char : {@link #WHITESPACE},
 {@link #WORD_CHAR}, {@link #SYMBOL}" fulltype="int" type="int">
				<comment>
					<description>Returns the type of the char.</description>
					<attribute name="@param">
						<description>ch the character</description>
					</attribute>
					<attribute name="@param">
						<description>noWordSep Characters that are non-alphanumeric, but
 should be treated as word characters anyway, it must not be null</description>
					</attribute>
					<attribute name="@return">
						<description>the type of the char : {@link #WHITESPACE},
 {@link #WORD_CHAR}, {@link #SYMBOL}</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character" fulltype="char" type="char" />
					<param name="noWordSep" comment="Characters that are non-alphanumeric, but
 should be treated as word characters anyway, it must not be null" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="spacesToTabs" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts consecutive spaces to tabs in the specified string.</description>
					<attribute name="@param">
						<description>in The string</description>
					</attribute>
					<attribute name="@param">
						<description>tabSize The tab size</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="The string" fulltype="java.lang.String" type="String" />
					<param name="tabSize" comment="The tab size" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="tabsToSpaces" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts tabs to consecutive spaces in the specified string.</description>
					<attribute name="@param">
						<description>in The string</description>
					</attribute>
					<attribute name="@param">
						<description>tabSize The tab size</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="The string" fulltype="java.lang.String" type="String" />
					<param name="tabSize" comment="The tab size" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="format" fulltype="java.lang.String" type="String">
				<comment>
					<description>Formats the specified text by merging and breaking lines to the
 specified width.</description>
					<attribute name="@param">
						<description>text The text</description>
					</attribute>
					<attribute name="@param">
						<description>maxLineLength The maximum line length</description>
					</attribute>
					<attribute name="@param">
						<description>tabSize The tab size</description>
					</attribute>
				</comment>
				<params>
					<param name="text" comment="The text" fulltype="java.lang.String" type="String" />
					<param name="maxLineLength" comment="The maximum line length" fulltype="int" type="int" />
					<param name="tabSize" comment="The tab size" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="indexIgnoringWhitespace" returncomment="The number of non-whitespace characters that precede the index." fulltype="int" type="int">
				<comment>
					<description>Inverse of &lt;code&gt;ignoringWhitespaceIndex()&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>str a string (not an empty string)</description>
					</attribute>
					<attribute name="@param">
						<description>index The index</description>
					</attribute>
					<attribute name="@return">
						<description>The number of non-whitespace characters that precede the index.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="a string (not an empty string)" fulltype="java.lang.String" type="String" />
					<param name="index" comment="The index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="ignoringWhitespaceIndex" returncomment="The index into the string where the number of non-whitespace
 characters that precede the index is count." fulltype="int" type="int">
				<comment>
					<description>Inverse of &lt;code&gt;indexIgnoringWhitespace()&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>str a string (not an empty string)</description>
					</attribute>
					<attribute name="@param">
						<description>index The index</description>
					</attribute>
					<attribute name="@return">
						<description>The index into the string where the number of non-whitespace
 characters that precede the index is count.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="a string (not an empty string)" fulltype="java.lang.String" type="String" />
					<param name="index" comment="The index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getStringCase" fulltype="int" type="int">
				<comment>
					<description>Returns if the specified string is all upper case, all lower case,
 or title case (first letter upper case, rest lower case).</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method static="true" visibility="public" name="getStringCase" fulltype="int" type="int">
				<comment>
					<description>Returns if the specified string is all upper case, all lower case,
 or title case (first letter upper case, rest lower case).</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="toTitleCase" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts the specified string to title case, by capitalizing the
 first letter.</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="escapeText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Escapes a given string for use in a java.util.regex pattern.</description>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="indexIgnoringWhitespace" fulltype="void" type="void">
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="maxLineLength" fulltype="int" type="int" />
					<param name="tabSize" fulltype="int" type="int" />
					<param name="buf" fulltype="java.lang.StringBuffer" type="StringBuffer" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JFrame" visibility="public" package="org.gjt.sp.jedit" serializable="true" superclassfulltype="javax.swing.JFrame" fulltype="org.gjt.sp.jedit.View" type="View">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.input.InputHandlerProvider" type="InputHandlerProvider" />
		</implements>
		<comment>
			<description>A &lt;code&gt;View&lt;/code&gt; is jEdit&apos;s top-level frame window.&lt;p&gt;

 In a BeanShell script, you can obtain the current view instance from the
 &lt;code&gt;view&lt;/code&gt; variable.&lt;p&gt;

 The largest component it contains is an {@link EditPane} that in turn
 contains a {@link org.gjt.sp.jedit.textarea.JEditTextArea} that displays a
 {@link Buffer}.
 A view can have more than one edit pane in a split window configuration.
 A view also contains a menu bar, an optional toolbar and other window
 decorations, as well as docked windows.&lt;p&gt;

 The &lt;b&gt;View&lt;/b&gt; class performs two important operations
 dealing with plugins: creating plugin menu items, and managing dockable
 windows.

 &lt;ul&gt;
 &lt;li&gt;When a view is being created, its initialization routine
 iterates through the collection of loaded plugins and constructs the
 &lt;b&gt;Plugins&lt;/b&gt; menu using the properties as specified in the
 {@link EditPlugin} class.&lt;/li&gt;
 &lt;li&gt;The view also creates and initializes a
 {@link org.gjt.sp.jedit.gui.DockableWindowManager}
 object.  This object is
 responsible for creating, closing and managing dockable windows.&lt;/li&gt;
 &lt;/ul&gt;

 This class does not have a public constructor.
 Views can be opened and closed using methods in the &lt;code&gt;jEdit&lt;/code&gt;
 class.</description>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#newView(View)</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#newView(View,Buffer)</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#newView(View,Buffer,boolean)</description>
			</attribute>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.jEdit#closeView(View)</description>
			</attribute>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@author">
				<description>John Gellene (API documentation)</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: View.java 21777 2012-06-09 22:39:21Z evanpw $</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="view.docking.framework" visibility="public" name="VIEW_DOCKING_FRAMEWORK_PROPERTY" constexpr="&quot;view.docking.framework&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="org.gjt.sp.jedit.gui.DockingFrameworkProvider" visibility="public" name="DOCKING_FRAMEWORK_PROVIDER_SERVICE" constexpr="&quot;org.gjt.sp.jedit.gui.DockingFrameworkProvider&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="0" visibility="public" name="TOP_GROUP" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>The group of tool bars above the DockableWindowManager</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="BOTTOM_GROUP" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>The group of tool bars below the DockableWindowManager</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="DEFAULT_GROUP" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="2147483647" visibility="public" name="TOP_LAYER" constexpr="2147483647" fulltype="int" type="int">
				<comment>
					<description>The highest possible layer.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="DEFAULT_LAYER" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>The default layer for tool bars with no preference.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-2147483648" visibility="public" name="BOTTOM_LAYER" constexpr="-2147483648" fulltype="int" type="int">
				<comment>
					<description>The lowest possible layer.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="150" visibility="public" name="ABOVE_SYSTEM_BAR_LAYER" constexpr="150" fulltype="int" type="int">
				<comment>
					<description>Above system tool bar layer.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="100" visibility="public" name="SYSTEM_BAR_LAYER" constexpr="100" fulltype="int" type="int">
				<comment>
					<description>System tool bar layer.
 jEdit uses this for the main tool bar.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="75" visibility="public" name="BELOW_SYSTEM_BAR_LAYER" constexpr="75" fulltype="int" type="int">
				<comment>
					<description>Below system tool bar layer.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="75" visibility="public" name="SEARCH_BAR_LAYER" constexpr="75" fulltype="int" type="int">
				<comment>
					<description>Search bar layer.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="50" visibility="public" name="BELOW_SEARCH_BAR_LAYER" constexpr="50" fulltype="int" type="int">
				<comment>
					<description>Below search bar layer.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-75" visibility="public" name="ACTION_BAR_LAYER" constexpr="-75" fulltype="int" type="int">
				<comment>
					<description>Action bar layer.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-100" visibility="public" name="STATUS_BAR_LAYER" constexpr="-100" fulltype="int" type="int">
				<comment>
					<description>Status bar layer.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-150" visibility="public" name="BELOW_STATUS_BAR_LAYER" constexpr="-150" fulltype="int" type="int">
				<comment>
					<description>Status bar layer.</description>
					<attribute name="@see">
						<description>#addToolBar(int,int,java.awt.Component)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="VIEW" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="TEXT_AREA" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="ACTION_BAR" constexpr="2" fulltype="int" type="int" />
		</fields>
		<methods>
			<method visibility="public" name="getDockableWindowManager" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager" type="DockableWindowManager">
				<comment>
					<description>Returns the dockable window manager associated with this view.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre3</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getDockingFrameworkName" fulltype="java.lang.String" type="String" />
			<method static="true" visibility="public" name="getDockingFrameworkProvider" fulltype="org.gjt.sp.jedit.gui.DockingFrameworkProvider" type="DockingFrameworkProvider" />
			<method visibility="public" name="getToolBar" fulltype="java.awt.Container" type="Container">
				<comment>
					<description>Returns the view&apos;s tool bar.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addToolBar" fulltype="void" type="void">
				<comment>
					<description>Adds a tool bar to this view.</description>
					<attribute name="@param">
						<description>toolBar The tool bar</description>
					</attribute>
				</comment>
				<params>
					<param name="toolBar" comment="The tool bar" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="addToolBar" fulltype="void" type="void">
				<comment>
					<description>Adds a tool bar to this view.</description>
					<attribute name="@param">
						<description>group The tool bar group to add to</description>
					</attribute>
					<attribute name="@param">
						<description>toolBar The tool bar</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.gui.ToolBarManager</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="group" comment="The tool bar group to add to" fulltype="int" type="int" />
					<param name="toolBar" comment="The tool bar" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="addToolBar" fulltype="void" type="void">
				<comment>
					<description>Adds a tool bar to this view.</description>
					<attribute name="@param">
						<description>group The tool bar group to add to</description>
					</attribute>
					<attribute name="@param">
						<description>layer The layer of the group to add to</description>
					</attribute>
					<attribute name="@param">
						<description>toolBar The tool bar</description>
					</attribute>
					<attribute name="@see">
						<description>org.gjt.sp.jedit.gui.ToolBarManager</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.0pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="group" comment="The tool bar group to add to" fulltype="int" type="int" />
					<param name="layer" comment="The layer of the group to add to" fulltype="int" type="int" />
					<param name="toolBar" comment="The tool bar" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="removeToolBar" fulltype="void" type="void">
				<comment>
					<description>Removes a tool bar from this view.</description>
					<attribute name="@param">
						<description>toolBar The tool bar</description>
					</attribute>
				</comment>
				<params>
					<param name="toolBar" comment="The tool bar" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="showWaitCursor" fulltype="void" type="void">
				<comment>
					<description>Shows the wait cursor. This method and
 {@link #hideWaitCursor()} are implemented using a reference
 count of requests for wait cursors, so that nested calls work
 correctly; however, you should be careful to use these methods in
 tandem.&lt;p&gt;

 To ensure that {@link #hideWaitCursor()} is always called
 after a {@link #showWaitCursor()}, use a
 &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; block, like this:
 &lt;pre&gt;try
{
    view.showWaitCursor();
    // ...
}
finally
{
    view.hideWaitCursor();
}&lt;/pre&gt;</description>
				</comment>
			</method>
			<method synchronized="true" visibility="public" name="hideWaitCursor" fulltype="void" type="void">
				<comment>
					<description>Hides the wait cursor.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="getSearchBar" fulltype="org.gjt.sp.jedit.search.SearchBar" type="SearchBar">
				<comment>
					<description>Returns the search bar.</description>
					<attribute name="@since">
						<description>jEdit 2.4pre4</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="getActionBar" fulltype="org.gjt.sp.jedit.gui.ActionBar" type="ActionBar">
				<comment>
					<description>Returns the action bar.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre3</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getStatus" fulltype="org.gjt.sp.jedit.gui.StatusBar" type="StatusBar">
				<comment>
					<description>Returns the status bar. The
 {@link org.gjt.sp.jedit.gui.StatusBar#setMessage(String)} and
 {@link org.gjt.sp.jedit.gui.StatusBar#setMessageAndClear(String)} methods can
 be called on the return value of this method to display status
 information to the user.</description>
					<attribute name="@since">
						<description>jEdit 3.2pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="quickIncrementalSearch" fulltype="void" type="void">
				<comment>
					<description>Quick search.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="word" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="quickHyperSearch" fulltype="void" type="void">
				<comment>
					<description>Quick HyperSearch.</description>
					<attribute name="@since">
						<description>jEdit 4.0pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="word" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="actionBar" fulltype="void" type="void">
				<comment>
					<description>Shows the action bar if needed, and sends keyboard focus there.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getKeyEventInterceptor" returncomment="the key event interceptor or null" fulltype="java.awt.event.KeyListener" type="KeyListener">
				<comment>
					<description>Returns the listener that will handle all key events in this
 view, if any.</description>
					<attribute name="@return">
						<description>the key event interceptor or null</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setKeyEventInterceptor" fulltype="void" type="void">
				<comment>
					<description>Sets the listener that will handle all key events in this
 view. For example, the complete word command uses this so
 that all key events are passed to the word list popup while
 it is visible.</description>
					<attribute name="@param">
						<description>listener The key event interceptor.</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The key event interceptor." fulltype="java.awt.event.KeyListener" type="KeyListener" />
				</params>
			</method>
			<method visibility="public" name="getInputHandler" fulltype="org.gjt.sp.jedit.gui.InputHandler" type="InputHandler">
				<comment>
					<description>Returns the input handler.</description>
				</comment>
			</method>
			<method visibility="public" name="setInputHandler" fulltype="void" type="void">
				<comment>
					<description>Sets the input handler.</description>
					<attribute name="@param">
						<description>inputHandler The new input handler</description>
					</attribute>
				</comment>
				<params>
					<param name="inputHandler" comment="The new input handler" fulltype="org.gjt.sp.jedit.gui.InputHandler" type="InputHandler" />
				</params>
			</method>
			<method visibility="public" name="getMacroRecorder" fulltype="org.gjt.sp.jedit.Macros.Recorder" type="Macros.Recorder">
				<comment>
					<description>Returns the macro recorder.</description>
				</comment>
			</method>
			<method visibility="public" name="setMacroRecorder" fulltype="void" type="void">
				<comment>
					<description>Sets the macro recorder.</description>
					<attribute name="@param">
						<description>recorder The macro recorder</description>
					</attribute>
				</comment>
				<params>
					<param name="recorder" comment="The macro recorder" fulltype="org.gjt.sp.jedit.Macros.Recorder" type="Macros.Recorder" />
				</params>
			</method>
			<method visibility="public" name="processKeyEvent" fulltype="void" type="void">
				<comment>
					<description>Forwards key events directly to the input handler.
 This is slightly faster than using a KeyListener
 because some Swing overhead is avoided.</description>
				</comment>
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
				</params>
			</method>
			<method visibility="public" name="processKeyEvent" fulltype="void" type="void">
				<comment>
					<description>Forwards key events directly to the input handler.
 This is slightly faster than using a KeyListener
 because some Swing overhead is avoided.</description>
				</comment>
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
					<param name="calledFromTextArea" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="processKeyEvent" fulltype="void" type="void">
				<comment>
					<description>Forwards key events directly to the input handler.
 This is slightly faster than using a KeyListener
 because some Swing overhead is avoided.</description>
				</comment>
				<params>
					<param name="evt" fulltype="java.awt.event.KeyEvent" type="KeyEvent" />
					<param name="from" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="splitHorizontally" returncomment="the new editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane">
				<comment>
					<description>Splits the view horizontally.</description>
					<attribute name="@return">
						<description>the new editPane</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="splitVertically" returncomment="the new editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane">
				<comment>
					<description>Splits the view vertically.</description>
					<attribute name="@return">
						<description>the new editPane</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="split" returncomment="the new editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane">
				<comment>
					<description>Splits the view.</description>
					<attribute name="@param">
						<description>orientation the orientation {@link javax.swing.JSplitPane#HORIZONTAL_SPLIT} or
 {@link javax.swing.JSplitPane#VERTICAL_SPLIT}</description>
					</attribute>
					<attribute name="@return">
						<description>the new editPane</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="orientation" comment="the orientation {@link javax.swing.JSplitPane#HORIZONTAL_SPLIT} or
 {@link javax.swing.JSplitPane#VERTICAL_SPLIT}" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="unsplit" fulltype="void" type="void">
				<comment>
					<description>Unsplits the view.</description>
					<attribute name="@since">
						<description>jEdit 2.3pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="unsplitCurrent" fulltype="void" type="void">
				<comment>
					<description>Removes the current split.</description>
					<attribute name="@since">
						<description>jEdit 2.3pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="resplit" fulltype="void" type="void">
				<comment>
					<description>Restore the split configuration as it was before unsplitting.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSplitConfig" returncomment="The split configuration, describing where splitpanes
           are, which buffers are open in each EditPane, etc." fulltype="java.lang.String" type="String">
				<comment>
					<description>Split configurations are recorded in a simple RPN &quot;language&quot;.</description>
					<attribute name="@return">
						<description>The split configuration, describing where splitpanes
           are, which buffers are open in each EditPane, etc.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setSplitConfig" fulltype="void" type="void">
				<comment>
					<description>sets the split configuration as per the splitConfig.</description>
					<attribute name="@param">
						<description>buffer if null, checks all buffers to restore View&apos;s split config.</description>
					</attribute>
					<attribute name="@param">
						<description>splitConfig the split config, as returned by getSplitConfig()</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="if null, checks all buffers to restore View&apos;s split config." fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="splitConfig" comment="the split config, as returned by getSplitConfig()" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="nextTextArea" fulltype="void" type="void">
				<comment>
					<description>Moves keyboard focus to the next text area.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="prevTextArea" fulltype="void" type="void">
				<comment>
					<description>Moves keyboard focus to the previous text area.</description>
					<attribute name="@since">
						<description>jEdit 2.7pre4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSplitPane" returncomment="the top JSplitPane if any." fulltype="javax.swing.JSplitPane" type="JSplitPane">
				<comment>
					<description>Returns the top-level split pane, if any.</description>
					<attribute name="@return">
						<description>the top JSplitPane if any.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.3pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getBuffer" returncomment="the current edit pane&apos;s buffer, it can be null" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer">
				<comment>
					<description>Returns the current edit pane&apos;s buffer.</description>
					<attribute name="@return">
						<description>the current edit pane&apos;s buffer, it can be null</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setBuffer" fulltype="void" type="void">
				<comment>
					<description>Sets the current edit pane&apos;s buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method visibility="public" name="setBuffer" fulltype="void" type="void">
				<comment>
					<description>Sets the current edit pane&apos;s buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>disableFileStatusCheck Disables file status checking
 regardless of the state of the checkFileStatus property</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="disableFileStatusCheck" comment="Disables file status checking
 regardless of the state of the checkFileStatus property" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setBuffer" fulltype="void" type="void">
				<comment>
					<description>Sets the current edit pane&apos;s buffer.</description>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@param">
						<description>disableFileStatusCheck Disables file status checking
 regardless of the state of the checkFileStatus property</description>
					</attribute>
					<attribute name="@param">
						<description>focus Whether the textarea should request focus</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
					<param name="disableFileStatusCheck" comment="Disables file status checking
 regardless of the state of the checkFileStatus property" fulltype="boolean" type="boolean" />
					<param name="focus" comment="Whether the textarea should request focus" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="goToBuffer" returncomment="the current edit pane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane">
				<comment>
					<description>If this buffer is open in one of the view&apos;s edit panes, sets focus
 to that edit pane. Otherwise, opens the buffer in the currently
 active edit pane.</description>
					<attribute name="@param">
						<description>buffer The buffer</description>
					</attribute>
					<attribute name="@return">
						<description>the current edit pane</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method visibility="public" name="showBuffer" returncomment="the current edit pane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane">
				<comment>
					<description>If this buffer is open in one of the view&apos;s edit panes, activates
 that edit pane. Otherwise, opens the buffer in the currently
 active edit pane. But the focus is not moved.</description>
					<attribute name="@param">
						<description>buffer The buffer to show</description>
					</attribute>
					<attribute name="@return">
						<description>the current edit pane</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="The buffer to show" fulltype="org.gjt.sp.jedit.Buffer" type="Buffer" />
				</params>
			</method>
			<method visibility="public" name="getTextArea" returncomment="the current edit pane&apos;s text area, or &lt;b&gt;null&lt;/b&gt; if there is no edit pane yet" fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea">
				<comment>
					<description>Returns the current edit pane&apos;s text area.</description>
					<attribute name="@return">
						<description>the current edit pane&apos;s text area, or &lt;b&gt;null&lt;/b&gt; if there is no edit pane yet</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getEditPane" returncomment="the current edit pane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane">
				<comment>
					<description>Returns the current edit pane.</description>
					<attribute name="@return">
						<description>the current edit pane</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.5pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getEditPanes" returncomment="an array of all edit panes in the view" fulltype="org.gjt.sp.jedit.EditPane[]" type="EditPane">
				<comment>
					<description>Returns all edit panes.</description>
					<attribute name="@return">
						<description>an array of all edit panes in the view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.5pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getViewConfig" returncomment="a ViewConfig instance for the current view" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig">
				<comment>
					<attribute name="@return">
						<description>a ViewConfig instance for the current view</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isClosed" returncomment="true if the view is closed" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this view has been closed with
 {@link jEdit#closeView(View)}.</description>
					<attribute name="@return">
						<description>true if the view is closed</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isPlainView" returncomment="true if the view is plain" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this is an auxilliary view with no dockable windows.</description>
					<attribute name="@return">
						<description>true if the view is plain</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.1pre2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getNext" returncomment="the next view" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns the next view in the list.</description>
					<attribute name="@return">
						<description>the next view</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getPrev" returncomment="the preview view" fulltype="org.gjt.sp.jedit.View" type="View">
				<comment>
					<description>Returns the previous view in the list.</description>
					<attribute name="@return">
						<description>the preview view</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="handlePropertiesChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.PropertiesChanged" type="PropertiesChanged" />
				</params>
			</method>
			<method visibility="public" name="handleSearchSettingsChanged" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.SearchSettingsChanged" type="SearchSettingsChanged" />
				</params>
			</method>
			<method visibility="public" name="getMinimumSize" fulltype="java.awt.Dimension" type="Dimension" />
			<method visibility="public" name="setWaitSocket" fulltype="void" type="void">
				<comment>
					<description>This socket is closed when the buffer is closed.</description>
				</comment>
				<params>
					<param name="waitSocket" fulltype="java.net.Socket" type="Socket" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="updateTitle" fulltype="void" type="void">
				<comment>
					<description>Updates the title bar.</description>
				</comment>
			</method>
			<method visibility="public" name="setUserTitle" fulltype="void" type="void">
				<comment>
					<description>Sets a user-defined title for this view instead of the &quot;view.title&quot; property.</description>
				</comment>
				<params>
					<param name="title" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="showUserTitleDialog" fulltype="void" type="void">
				<comment>
					<description>Shows a dialog for selecting a user-defined title for this view.</description>
				</comment>
			</method>
			<method visibility="public" name="getPrefixFocusOwner" fulltype="java.awt.Component" type="Component" />
			<method visibility="public" name="setPrefixFocusOwner" fulltype="void" type="void">
				<params>
					<param name="prefixFocusOwner" fulltype="java.awt.Component" type="Component" />
				</params>
			</method>
			<method visibility="public" name="visit" fulltype="void" type="void">
				<comment>
					<description>Visit the the editpanes and textareas of the view</description>
					<attribute name="@param">
						<description>visitor the visitor</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="visitor" comment="the visitor" fulltype="org.gjt.sp.jedit.visitors.JEditVisitor" type="JEditVisitor" />
				</params>
			</method>
			<method visibility="public" name="closeAllMenus" fulltype="void" type="void">
				<comment>
					<description>closes any popup menus that may have been opened</description>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="updateFullScreenProps" fulltype="void" type="void" />
			<method visibility="public" name="toggleFullScreen" fulltype="void" type="void" />
			<method visibility="public" name="updateBufferSwitcherStates" fulltype="void" type="void">
				<comment>
					<description>Enables or Disables the &quot;Focus Buffer Switcher&quot; menu item in the View menu
 depending on the visible state of the buffer switcher.  The menu item
 is intended to have the same effect as clicking on the buffer switcher
 combo box, and it doesn&apos;t make sense to have this action available if
 the buffer switcher isn&apos;t visible.
 Also shows or hides the Buffer Switcher itself, since this can be invoked after
 the toggle buffer switcher action.</description>
				</comment>
			</method>
			<method visibility="public" name="handleBufferUpdate" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.BufferUpdate" type="BufferUpdate" />
				</params>
			</method>
			<method visibility="public" name="handleEditPaneUpdate" fulltype="void" type="void">
				<params>
					<param name="msg" fulltype="org.gjt.sp.jedit.msg.EditPaneUpdate" type="EditPaneUpdate" />
				</params>
			</method>
			<method visibility="public" name="adjust" fulltype="void" type="void">
				<params>
					<param name="parent" fulltype="org.gjt.sp.jedit.View" type="View" />
					<param name="config" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig">
			<fields>
				<field visibility="public" name="x" fulltype="int" type="int" />
				<field visibility="public" name="y" fulltype="int" type="int" />
				<field visibility="public" name="width" fulltype="int" type="int" />
				<field visibility="public" name="height" fulltype="int" type="int" />
				<field visibility="public" name="extState" fulltype="int" type="int" />
				<field visibility="public" name="plainView" fulltype="boolean" type="boolean" />
				<field visibility="public" name="splitConfig" fulltype="java.lang.String" type="String" />
				<field visibility="public" name="docking" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout" />
				<field visibility="public" name="title" fulltype="java.lang.String" type="String" />
			</fields>
			<methods>
				<constructor visibility="public" name="View.ViewConfig" />
				<constructor visibility="public" name="View.ViewConfig">
					<params>
						<param name="plainView" fulltype="boolean" type="boolean" />
					</params>
				</constructor>
				<constructor visibility="public" name="View.ViewConfig">
					<params>
						<param name="plainView" fulltype="boolean" type="boolean" />
						<param name="splitConfig" fulltype="java.lang.String" type="String" />
						<param name="x" fulltype="int" type="int" />
						<param name="y" fulltype="int" type="int" />
						<param name="width" fulltype="int" type="int" />
						<param name="height" fulltype="int" type="int" />
						<param name="extState" fulltype="int" type="int" />
					</params>
				</constructor>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.View.ViewConfig" type="View.ViewConfig">
		<fields>
			<field visibility="public" name="x" fulltype="int" type="int" />
			<field visibility="public" name="y" fulltype="int" type="int" />
			<field visibility="public" name="width" fulltype="int" type="int" />
			<field visibility="public" name="height" fulltype="int" type="int" />
			<field visibility="public" name="extState" fulltype="int" type="int" />
			<field visibility="public" name="plainView" fulltype="boolean" type="boolean" />
			<field visibility="public" name="splitConfig" fulltype="java.lang.String" type="String" />
			<field visibility="public" name="docking" fulltype="org.gjt.sp.jedit.gui.DockableWindowManager.DockingLayout" type="DockableWindowManager.DockingLayout" />
			<field visibility="public" name="title" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="View.ViewConfig" />
			<constructor visibility="public" name="View.ViewConfig">
				<params>
					<param name="plainView" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="View.ViewConfig">
				<params>
					<param name="plainView" fulltype="boolean" type="boolean" />
					<param name="splitConfig" fulltype="java.lang.String" type="String" />
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="width" fulltype="int" type="int" />
					<param name="height" fulltype="int" type="int" />
					<param name="extState" fulltype="int" type="int" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.jedit.visitors" interface="true" fulltype="org.gjt.sp.jedit.visitors.JEditVisitor" type="JEditVisitor">
		<comment>
			<description>A Visitor can visit a View, an EditPane or a JEditTextArea.
  You can also extend the default implementation, JEditVisitorAdapter
 To use this visitor.</description>
			<attribute name="@see">
				<description>jEdit#visit(JEditVisitor)</description>
			</attribute>
			<attribute name="@see">
				<description>View#visit(JEditVisitor)</description>
			</attribute>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id$</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre13</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="visit" fulltype="void" type="void">
				<comment>
					<description>Visit a view.</description>
					<attribute name="@param">
						<description>view the visited view</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="the visited view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="visit" fulltype="void" type="void">
				<comment>
					<description>Visit an EditPane.</description>
					<attribute name="@param">
						<description>editPane the visited edit pane</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="the visited edit pane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
				</params>
			</method>
			<method visibility="public" name="visit" fulltype="void" type="void">
				<comment>
					<description>Visit a view.</description>
					<attribute name="@param">
						<description>textArea the visited textArea</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="the visited textArea" fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.jedit.visitors" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.jedit.visitors.JEditVisitorAdapter" type="JEditVisitorAdapter">
		<implements>
			<interface fulltype="org.gjt.sp.jedit.visitors.JEditVisitor" type="JEditVisitor" />
		</implements>
		<comment>
			<description>Default implementation of a jEditVisitor.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: GUIUtilities.java 11797 2008-02-15 00:07:23Z Vampire0 $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre13</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="JEditVisitorAdapter" />
			<method visibility="public" name="visit" fulltype="void" type="void">
				<comment>
					<description>Visit a view.</description>
					<attribute name="@param">
						<description>view the visited view</description>
					</attribute>
				</comment>
				<params>
					<param name="view" comment="the visited view" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method visibility="public" name="visit" fulltype="void" type="void">
				<comment>
					<description>Visit an EditPane.</description>
					<attribute name="@param">
						<description>editPane the visited edit pane</description>
					</attribute>
				</comment>
				<params>
					<param name="editPane" comment="the visited edit pane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
				</params>
			</method>
			<method visibility="public" name="visit" fulltype="void" type="void">
				<comment>
					<description>Visit a JEditTextArea.</description>
					<attribute name="@param">
						<description>textArea the visited textArea</description>
					</attribute>
				</comment>
				<params>
					<param name="textArea" comment="the visited textArea" fulltype="org.gjt.sp.jedit.textarea.JEditTextArea" type="JEditTextArea" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="JEditVisitorAdapter" visibility="public" package="org.gjt.sp.jedit.visitors" superclassfulltype="org.gjt.sp.jedit.visitors.JEditVisitorAdapter" fulltype="org.gjt.sp.jedit.visitors.SaveCaretInfoVisitor" type="SaveCaretInfoVisitor">
		<comment>
			<description>A visitor that saves the caret info of an EditPane</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SaveCaretInfoVisitor" />
			<method visibility="public" name="visit" fulltype="void" type="void">
				<params>
					<param name="editPane" fulltype="org.gjt.sp.jedit.EditPane" type="EditPane" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="DefaultTreeCellRenderer" visibility="public" package="org.gjt.sp.util" serializable="true" superclassfulltype="javax.swing.tree.DefaultTreeCellRenderer" fulltype="org.gjt.sp.util.EnhancedTreeCellRenderer" type="EnhancedTreeCellRenderer">
		<comment>
			<description>An enhancement of the {@link DefaultTreeCellRenderer} to be used as superclass for custom
 tree cell renderers. Using {@code DefaultTreeCellRenderer} as superclass for a custom tree
 cell renderer without further measures is not stable in regards to on-the-fly Look and Feel
 changes, at least not with Java 6. For Java 7 it should be tested again.
 &lt;p/&gt;
 With Java 6 the {@code DefaultTreeCellRenderer} initializes some values according to the
 Look and Feel in its constructor. If the {@code DefaultTreeCellRenderer} is created by the
 {@link JTree} code, it is recreated on a Look and Feel change. This way all works fine. But
 if a tree cell renderer is set explicitly on the {@code JTree}, no matter whether
 {@code DefaultTreeCellRenderer}, a subclass of it or a complete own implementation, the
 set instance is used beyond Look and Feel boundaries and this causes two problems.
 &lt;ol&gt;
     &lt;li&gt;
         The values that were initialized in the constructor of {@code DefaultTreeCellRenderer}
         are not reset according to the new Look and Feel. Some values are partly set by the
         {@code JTree} code, but this is not complete and reliable and thus the renderer paints
         the tree cells wrongly.
     &lt;/li&gt;
     &lt;li&gt;
         The Look and Feel change is first applied to the {@code JTree}, then the sizes of
         the tree cells which are saved in a cache are recalculated. Only &lt;b&gt;after&lt;/b&gt; that,
         the children of the {@code JTree} get the new Look and Feel applied, amongst them
         also the tree cell renderer.&lt;br/&gt;
         So even if a custom tree cell renderer is aware of on-the-fly Look and Feel changes
         by reinitializing values from the Look and Feel if it changes, those cached sizes
         are still calculated for the old Look and Feel. The only way to work around this is
         to cause the cached sizes to be recalculated. This can be done by changing any
         significant property of the {@code JTree} which influences size calculations.
     &lt;/li&gt;
 &lt;/ol&gt;
 &lt;p/&gt;
 To work around the described problems this enhanced tree cell renderer listens for Look
 and Feel changes on the {@code JTree} where this renderer is used, requests a subclass
 to create a new instance of the renderer and sets it on the {@code JTree}. By doing so
 the {@code DefaultTreeCellRenderer} reinitializes to the new Look and Feel in its
 constructor and the {@code JTree} recalculates the cached size values because a different
 object is set as tree cell renderer.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="EnhancedTreeCellRenderer" />
			<method final="true" visibility="public" name="getTreeCellRendererComponent" fulltype="java.awt.Component" type="Component">
				<params>
					<param name="tree" fulltype="javax.swing.JTree" type="JTree" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
					<param name="selected" fulltype="boolean" type="boolean" />
					<param name="expanded" fulltype="boolean" type="boolean" />
					<param name="leaf" fulltype="boolean" type="boolean" />
					<param name="row" fulltype="int" type="int" />
					<param name="hasFocus" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method abstract="true" visibility="protected" name="newInstance" returncomment="a new readily initialized instance of this class" fulltype="javax.swing.tree.TreeCellRenderer" type="TreeCellRenderer">
				<comment>
					<description>Creates a new instance of the tree cell renderer. Each invocation has to
 return a different object. Saving a reference and returning the same
 instance from different calls of this method is &lt;b&gt;not&lt;/b&gt; appropriate.
 &lt;p/&gt;
 Any one-time initializations that are necessary and are not made in the
 constructor should be made in this method. The simplest implementation
 of this method will just call the constructor and return the result.
 &lt;p/&gt;
 This is an instance method so that the new instance can be set up with
 information from the current instance.</description>
					<attribute name="@return">
						<description>a new readily initialized instance of this class</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="protected" name="configureTreeCellRendererComponent" fulltype="void" type="void">
				<comment>
					<description>Configures this instance of the renderer component based on the passed in
 components. The value is set from messaging the tree with convertValueToText,
 which ultimately invokes toString on value. The foreground color is set
 based on the selection and the icon is set based on the leaf and expanded
 parameters. The parameters of this method are the same as the ones of
 {@link #getTreeCellRendererComponent(JTree, Object, boolean, boolean, boolean, int, boolean)}.</description>
					<attribute name="@param">
						<description>tree     The tree in which this renderer component is used currently</description>
					</attribute>
					<attribute name="@param">
						<description>value    The value to be displayed for the tree cell to be rendered</description>
					</attribute>
					<attribute name="@param">
						<description>selected Whether the tree cell to be rendered is selected</description>
					</attribute>
					<attribute name="@param">
						<description>expanded Whether the tree cell to be rendered is expanded</description>
					</attribute>
					<attribute name="@param">
						<description>leaf     Whether the tree cell to be rendered is a leaf</description>
					</attribute>
					<attribute name="@param">
						<description>row      The row index of the tree cell to be rendered</description>
					</attribute>
					<attribute name="@param">
						<description>hasFocus Whether the tree cell to be rendered has the focus</description>
					</attribute>
				</comment>
				<params>
					<param name="tree" comment="The tree in which this renderer component is used currently" fulltype="javax.swing.JTree" type="JTree" />
					<param name="value" comment="The value to be displayed for the tree cell to be rendered" fulltype="java.lang.Object" type="Object" />
					<param name="selected" comment="Whether the tree cell to be rendered is selected" fulltype="boolean" type="boolean" />
					<param name="expanded" comment="Whether the tree cell to be rendered is expanded" fulltype="boolean" type="boolean" />
					<param name="leaf" comment="Whether the tree cell to be rendered is a leaf" fulltype="boolean" type="boolean" />
					<param name="row" comment="The row index of the tree cell to be rendered" fulltype="int" type="int" />
					<param name="hasFocus" comment="Whether the tree cell to be rendered has the focus" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.HtmlUtilities" type="HtmlUtilities">
		<comment>
			<description>HTML utility methods for conversion of strings to HTML and highlighting matches
 in search results.
 Some of these methods were moved here from HyperSearchResults.HighlightingTree
 to make them available for plugins.</description>
			<attribute name="@author">
				<description>Shlomy Reinstein</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: $</description>
			</attribute>
			<attribute name="@since">
				<description>4.4pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="HtmlUtilities" />
			<method static="true" visibility="public" name="parseHighlightStyle" returncomment="The SyntaxStyle object represented by the style string." fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle" type="SyntaxStyle">
				<comment>
					<description>Parses a string specifying a syntax highlight style.

 The syntax highlight string should be in the same format used to
 store syntax highlight styles in the properties.</description>
					<attribute name="@param">
						<description>style The syntax highlight style string.</description>
					</attribute>
					<attribute name="@param">
						<description>f The font to which the syntax style will apply.</description>
					</attribute>
					<attribute name="@return">
						<description>The SyntaxStyle object represented by the style string.</description>
					</attribute>
				</comment>
				<params>
					<param name="style" comment="The syntax highlight style string." fulltype="java.lang.String" type="String" />
					<param name="f" comment="The font to which the syntax style will apply." fulltype="java.awt.Font" type="Font" />
				</params>
			</method>
			<method static="true" visibility="public" name="style2html" returncomment="The HTML representation of the given syntax style." fulltype="java.lang.String" type="String">
				<comment>
					<description>Parses a string specifying a syntax highlight style, and creates an
 HTML representation for it.

 The syntax highlight string should be in the same format used to
 store syntax highlight styles in the properties.</description>
					<attribute name="@param">
						<description>prop The syntax highlight style string.</description>
					</attribute>
					<attribute name="@param">
						<description>f The font to which the syntax style will apply.</description>
					</attribute>
					<attribute name="@return">
						<description>The HTML representation of the given syntax style.</description>
					</attribute>
				</comment>
				<params>
					<param name="prop" comment="The syntax highlight style string." fulltype="java.lang.String" type="String" />
					<param name="f" comment="The font to which the syntax style will apply." fulltype="java.awt.Font" type="Font" />
				</params>
			</method>
			<method static="true" visibility="public" name="highlightString" returncomment="The HTML representation of the string with highlighted substrings." fulltype="java.lang.String" type="String">
				<comment>
					<description>Creates an HTML presentation of a given string, where selected substrings
 are highlighted with a given syntax style tag.</description>
					<attribute name="@param">
						<description>s The (non-HTML) string to highlight.</description>
					</attribute>
					<attribute name="@param">
						<description>styleTag The HTML string representing the highlight style.</description>
					</attribute>
					<attribute name="@param">
						<description>ranges The indices of the substrings to highlight, in pairs: The start
               index of a substring followed by the end index of the substring.</description>
					</attribute>
					<attribute name="@return">
						<description>The HTML representation of the string with highlighted substrings.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="The (non-HTML) string to highlight." fulltype="java.lang.String" type="String" />
					<param name="styleTag" comment="The HTML string representing the highlight style." fulltype="java.lang.String" type="String" />
					<param name="ranges" comment="The indices of the substrings to highlight, in pairs: The start
               index of a substring followed by the end index of the substring." fulltype="java.util.List" type="List" />
				</params>
			</method>
			<method static="true" visibility="public" name="appendString2html" fulltype="void" type="void">
				<comment>
					<description>Appends a given non-HTML string to an HTML string, translating character
 entities to the appropriate HTML form.</description>
					<attribute name="@param">
						<description>sb The HTML string to which the non-HTML string is appended.</description>
					</attribute>
					<attribute name="@param">
						<description>s The non-HTML string to append.</description>
					</attribute>
				</comment>
				<params>
					<param name="sb" comment="The HTML string to which the non-HTML string is appended." fulltype="java.lang.StringBuilder" type="StringBuilder" />
					<param name="s" comment="The non-HTML string to append." fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.IntegerArray" type="IntegerArray">
		<comment>
			<description>A simple collection that stores integers and grows automatically.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="IntegerArray" />
			<constructor visibility="public" name="IntegerArray">
				<params>
					<param name="initialSize" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="add" fulltype="void" type="void">
				<params>
					<param name="num" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="get" fulltype="int" type="int">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getSize" fulltype="int" type="int" />
			<method final="true" visibility="public" name="setSize" fulltype="void" type="void">
				<params>
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="clear" fulltype="void" type="void" />
			<method visibility="public" name="getArray" fulltype="int[]" type="int" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.IOUtilities" type="IOUtilities">
		<comment>
			<description>IO tools that depend on JDK only.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: IOUtilities.java 19107 2010-12-08 18:49:10Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>4.3pre5</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="moveFile" returncomment="true on success, false otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Moves the source file to the destination.

 If the destination cannot be created or is a read-only file, the
 method returns &lt;code&gt;false&lt;/code&gt;. Otherwise, the contents of the
 source are copied to the destination, the source is deleted,
 and &lt;code&gt;true&lt;/code&gt; is returned.</description>
					<attribute name="@param">
						<description>source The source file to move.</description>
					</attribute>
					<attribute name="@param">
						<description>dest   The destination where to move the file.</description>
					</attribute>
					<attribute name="@return">
						<description>true on success, false otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre9</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The source file to move." fulltype="java.io.File" type="File" />
					<param name="dest" comment="The destination where to move the file." fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method static="true" visibility="public" name="copyStream" returncomment="&lt;code&gt;true&lt;/code&gt; if the copy was done, &lt;code&gt;false&lt;/code&gt; if it was interrupted" fulltype="boolean" type="boolean">
				<comment>
					<description>Copy an input stream to an output stream.</description>
					<attribute name="@param">
						<description>bufferSize the size of the buffer</description>
					</attribute>
					<attribute name="@param">
						<description>progress the progress observer it could be null</description>
					</attribute>
					<attribute name="@param">
						<description>in the input stream</description>
					</attribute>
					<attribute name="@param">
						<description>out the output stream</description>
					</attribute>
					<attribute name="@param">
						<description>canStop if true, the copy can be stopped by interrupting the thread</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the copy was done, &lt;code&gt;false&lt;/code&gt; if it was interrupted</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException  IOException If an I/O error occurs</description>
					</attribute>
				</comment>
				<params>
					<param name="bufferSize" comment="the size of the buffer" fulltype="int" type="int" />
					<param name="progress" comment="the progress observer it could be null" fulltype="org.gjt.sp.util.ProgressObserver" type="ProgressObserver" />
					<param name="in" comment="the input stream" fulltype="java.io.InputStream" type="InputStream" />
					<param name="out" comment="the output stream" fulltype="java.io.OutputStream" type="OutputStream" />
					<param name="canStop" comment="if true, the copy can be stopped by interrupting the thread" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="IOException If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="copyStream" returncomment="&lt;code&gt;true&lt;/code&gt; if the copy was done, &lt;code&gt;false&lt;/code&gt; if it was interrupted" fulltype="boolean" type="boolean">
				<comment>
					<description>Copy an input stream to an output stream with a buffer of 4096 bytes.</description>
					<attribute name="@param">
						<description>progress the progress observer it could be null</description>
					</attribute>
					<attribute name="@param">
						<description>in the input stream</description>
					</attribute>
					<attribute name="@param">
						<description>out the output stream</description>
					</attribute>
					<attribute name="@param">
						<description>canStop if true, the copy can be stopped by interrupting the thread</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the copy was done, &lt;code&gt;false&lt;/code&gt; if it was interrupted</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException  IOException If an I/O error occurs</description>
					</attribute>
				</comment>
				<params>
					<param name="progress" comment="the progress observer it could be null" fulltype="org.gjt.sp.util.ProgressObserver" type="ProgressObserver" />
					<param name="in" comment="the input stream" fulltype="java.io.InputStream" type="InputStream" />
					<param name="out" comment="the output stream" fulltype="java.io.OutputStream" type="OutputStream" />
					<param name="canStop" comment="if true, the copy can be stopped by interrupting the thread" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="IOException If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="fileLength" returncomment="the length of the file or directory. If the file doesn&apos;t exist it will return 0" fulltype="long" type="long">
				<comment>
					<description>Returns the length of a file. If it is a directory it will calculate recursively the length.</description>
					<attribute name="@param">
						<description>file the file or directory</description>
					</attribute>
					<attribute name="@return">
						<description>the length of the file or directory. If the file doesn&apos;t exist it will return 0</description>
					</attribute>
					<attribute name="@since">
						<description>4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="the file or directory" fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method static="true" visibility="public" name="closeQuietly" fulltype="void" type="void">
				<comment>
					<description>Method that will close an {@link InputStream} ignoring it if it is null and ignoring exceptions.</description>
					<attribute name="@param">
						<description>in the InputStream to close.</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="the InputStream to close." fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</method>
			<method static="true" visibility="public" name="closeQuietly" fulltype="void" type="void">
				<comment>
					<description>Method that will close an {@link OutputStream} ignoring it if it is null and ignoring exceptions.</description>
					<attribute name="@param">
						<description>out the OutputStream to close.</description>
					</attribute>
				</comment>
				<params>
					<param name="out" comment="the OutputStream to close." fulltype="java.io.OutputStream" type="OutputStream" />
				</params>
			</method>
			<method static="true" visibility="public" name="closeQuietly" fulltype="void" type="void">
				<comment>
					<description>Method that will close an {@link Reader} ignoring it if it is null and ignoring exceptions.</description>
					<attribute name="@param">
						<description>r the Reader to close.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="r" comment="the Reader to close." fulltype="java.io.Reader" type="Reader" />
				</params>
			</method>
			<method static="true" visibility="public" name="closeQuietly" fulltype="void" type="void">
				<comment>
					<description>Method that will close a {@link Writer} ignoring it if it is null and ignoring exceptions.</description>
					<attribute name="@param">
						<description>out the Writer to close.</description>
					</attribute>
				</comment>
				<params>
					<param name="out" comment="the Writer to close." fulltype="java.io.Writer" type="Writer" />
				</params>
			</method>
			<method static="true" visibility="public" name="closeQuietly" fulltype="void" type="void">
				<comment>
					<description>Method that will close an {@link java.io.Closeable} ignoring it if it is null and ignoring exceptions.</description>
					<attribute name="@param">
						<description>closeable the closeable to close.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre8</description>
					</attribute>
				</comment>
				<params>
					<param name="closeable" comment="the closeable to close." fulltype="java.io.Closeable" type="Closeable" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.Log" type="Log">
		<comment>
			<description>This class provides methods for logging events. In terms of functionality,
 it is somewhere in between &lt;code&gt;System.out.println()&lt;/code&gt; and
 full-blown logging packages such as log4j.&lt;p&gt;

 All events are logged to an in-memory buffer and optionally a stream,
 and those with a high urgency (warnings and errors) are also printed
 to standard output.&lt;p&gt;

 Logging of exception tracebacks is supported.&lt;p&gt;

 This class can also optionally redirect standard output and error to the log.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: Log.java 19450 2011-03-14 21:23:20Z shlomy $</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="public" name="MAXLINES" fulltype="int" type="int">
				<comment>
					<description>The maximum number of log messages that will be kept in memory.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="DEBUG" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>Debugging message urgency. Should be used for messages only
 useful when debugging a problem.</description>
					<attribute name="@since">
						<description>jEdit 2.2pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="3" visibility="public" name="MESSAGE" constexpr="3" fulltype="int" type="int">
				<comment>
					<description>Message urgency. Should be used for messages which give more
 detail than notices.</description>
					<attribute name="@since">
						<description>jEdit 2.2pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="5" visibility="public" name="NOTICE" constexpr="5" fulltype="int" type="int">
				<comment>
					<description>Notice urgency. Should be used for messages that directly
 affect the user.</description>
					<attribute name="@since">
						<description>jEdit 2.2pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="7" visibility="public" name="WARNING" constexpr="7" fulltype="int" type="int">
				<comment>
					<description>Warning urgency. Should be used for messages that warrant
 attention.</description>
					<attribute name="@since">
						<description>jEdit 2.2pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="9" visibility="public" name="ERROR" constexpr="9" fulltype="int" type="int">
				<comment>
					<description>Error urgency. Should be used for messages that signal a
 failure.</description>
					<attribute name="@since">
						<description>jEdit 2.2pre2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="throwables" fulltype="java.util.List" type="List" />
		</fields>
		<methods>
			<constructor visibility="public" name="Log" />
			<method static="true" visibility="public" name="init" fulltype="void" type="void">
				<comment>
					<description>Initializes the log.</description>
					<attribute name="@param">
						<description>stdio If true, standard output and error will be
 sent to the log</description>
					</attribute>
					<attribute name="@param">
						<description>level Messages with this log level or higher will
 be printed to the system console</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="stdio" comment="If true, standard output and error will be
 sent to the log" fulltype="boolean" type="boolean" />
					<param name="level" comment="Messages with this log level or higher will
 be printed to the system console" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="setLogWriter" fulltype="void" type="void">
				<comment>
					<description>Writes all currently logged messages to this stream if there was no
 stream set previously, and sets the stream to write future log
 messages to.</description>
					<attribute name="@param">
						<description>stream The writer</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 3.2pre4</description>
					</attribute>
				</comment>
				<params>
					<param name="stream" comment="The writer" fulltype="java.io.Writer" type="Writer" />
				</params>
			</method>
			<method static="true" visibility="public" name="flushStream" fulltype="void" type="void">
				<comment>
					<description>Flushes the log stream.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="closeStream" fulltype="void" type="void">
				<comment>
					<description>Closes the log stream. Should be done before your program exits.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getLogListModel" fulltype="javax.swing.ListModel" type="ListModel">
				<comment>
					<description>Returns the list model for viewing the log contents.</description>
					<attribute name="@since">
						<description>jEdit 4.2pre1</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="log" fulltype="void" type="void">
				<comment>
					<description>Logs an exception with a message.

 If an exception is the cause of a call to {@link #log}, then
 the exception should be explicitly provided so that it can
 be presented to the (debugging) user in a useful manner
 (not just the exception message, but also the exception stack trace)</description>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="urgency" fulltype="int" type="int" />
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="message" fulltype="java.lang.Object" type="Object" />
					<param name="exception" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
			<method static="true" visibility="public" name="log" fulltype="void" type="void">
				<comment>
					<description>Logs a message. This method is thread-safe.&lt;p&gt;

 The following code sends a typical debugging message to the activity
 log:
 &lt;pre&gt;Log.log(Log.DEBUG,this,&quot;counter = &quot; + counter);&lt;/pre&gt;
 The corresponding activity log entry might read as follows:
 &lt;pre&gt;[debug] JavaParser: counter = 15&lt;/pre&gt;</description>
					<attribute name="@param">
						<description>urgency The urgency; can be one of
 &lt;code&gt;Log.DEBUG&lt;/code&gt;, &lt;code&gt;Log.MESSAGE&lt;/code&gt;,
 &lt;code&gt;Log.NOTICE&lt;/code&gt;, &lt;code&gt;Log.WARNING&lt;/code&gt;, or
 &lt;code&gt;Log.ERROR&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>source The source of the message, either an object or a
 class instance. When writing log messages from macros, set
 this parameter to &lt;code&gt;BeanShell.class&lt;/code&gt; to make macro
 errors easier to spot in the activity log.</description>
					</attribute>
					<attribute name="@param">
						<description>message The message. This can either be a string or
 an exception</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.2pre2</description>
					</attribute>
				</comment>
				<params>
					<param name="urgency" comment="The urgency; can be one of
 &lt;code&gt;Log.DEBUG&lt;/code&gt;, &lt;code&gt;Log.MESSAGE&lt;/code&gt;,
 &lt;code&gt;Log.NOTICE&lt;/code&gt;, &lt;code&gt;Log.WARNING&lt;/code&gt;, or
 &lt;code&gt;Log.ERROR&lt;/code&gt;." fulltype="int" type="int" />
					<param name="source" comment="The source of the message, either an object or a
 class instance. When writing log messages from macros, set
 this parameter to &lt;code&gt;BeanShell.class&lt;/code&gt; to make macro
 errors easier to spot in the activity log." fulltype="java.lang.Object" type="Object" />
					<param name="message" comment="The message. This can either be a string or
 an exception" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.util" interface="true" fulltype="org.gjt.sp.util.ProgressObserver" type="ProgressObserver">
		<comment>
			<description>Interface used to monitor things that can progress.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: ProgressObserver.java 12504 2008-04-22 23:12:43Z ezust $</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre3</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Update the progress value.</description>
					<attribute name="@param">
						<description>value the new value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the new value" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="setMaximum" fulltype="void" type="void">
				<comment>
					<description>Update the maximum value.</description>
					<attribute name="@param">
						<description>value the new maximum value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the new maximum value" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="setStatus" fulltype="void" type="void">
				<comment>
					<description>Update the status label.</description>
					<attribute name="@param">
						<description>status the new status label</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="status" comment="the new status label" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.PropertiesBean" type="PropertiesBean">
		<comment>
			<description>A &quot;java bean&quot; that can serialize itself into a java.util.Properties
 instance. For the serialization, the class uses the java beans
 instrospection mechanism to figure out the class&apos;s available
 properties, and saves all the properties as strings in the properties
 object.

 &lt;p&gt;Properties are saved based on a &quot;root&quot;, which is set up during the
 instantiation of the object. The properties will be set as
 &lt;code&gt;root.property_name&lt;/code&gt;.&lt;/p&gt;

 &lt;p&gt;Only native types (boolean, char, double, float, int, long, short),
 Strings, and arrays of those types are supported. Also, nested
 beans are not supported presently.&lt;/p&gt;</description>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.3pre7</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="PropertiesBean">
				<comment>
					<description>Creates a new instance with the given root and the default array
 separator char (&apos;:&apos;).</description>
					<attribute name="@param">
						<description>root A non-null string that will be the &quot;root&quot; of the
             serialized properties.</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="A non-null string that will be the &quot;root&quot; of the
             serialized properties." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="protected" name="PropertiesBean">
				<comment>
					<description>Creates a new instance with the given root and the given array
 separator character.</description>
					<attribute name="@param">
						<description>root A non-null string that will be the &quot;root&quot; of the
             serialized properties.</description>
					</attribute>
					<attribute name="@param">
						<description>arraysep A character that will be used to define the
                 separator of elements of an array property.</description>
					</attribute>
				</comment>
				<params>
					<param name="root" comment="A non-null string that will be the &quot;root&quot; of the
             serialized properties." fulltype="java.lang.String" type="String" />
					<param name="arraysep" comment="A character that will be used to define the
                 separator of elements of an array property." fulltype="char" type="char" />
				</params>
			</constructor>
			<method visibility="public" name="load" fulltype="void" type="void">
				<comment>
					<description>Loads the bean&apos;s properties from the given object.</description>
				</comment>
				<params>
					<param name="p" fulltype="java.util.Properties" type="Properties" />
				</params>
			</method>
			<method visibility="public" name="save" fulltype="void" type="void">
				<comment>
					<description>Saves the bean&apos;s properties into the given object.</description>
				</comment>
				<params>
					<param name="p" fulltype="java.util.Properties" type="Properties" />
				</params>
			</method>
			<method visibility="public" name="clean" fulltype="void" type="void">
				<comment>
					<description>Cleans the entries related to this object from the given object.</description>
				</comment>
				<params>
					<param name="p" fulltype="java.util.Properties" type="Properties" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.ReverseCharSequence" type="ReverseCharSequence">
		<implements>
			<interface fulltype="java.lang.CharSequence" type="CharSequence" />
		</implements>
		<comment>
			<description>Reversed view of a given CharSequence.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ReverseCharSequence">
				<params>
					<param name="base" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</constructor>
			<method visibility="public" name="baseSequence" fulltype="java.lang.CharSequence" type="CharSequence" />
			<method visibility="public" name="charAt" fulltype="char" type="char">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="length" fulltype="int" type="int" />
			<method visibility="public" name="subSequence" fulltype="java.lang.CharSequence" type="CharSequence">
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Segment" visibility="public" package="org.gjt.sp.util" superclassfulltype="javax.swing.text.Segment" fulltype="org.gjt.sp.util.SegmentBuffer" type="SegmentBuffer">
		<comment>
			<description>An extended segment that you can append text to.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="SegmentBuffer">
				<params>
					<param name="capacity" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="append" fulltype="void" type="void">
				<params>
					<param name="ch" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="void" type="void">
				<params>
					<param name="text" fulltype="char[]" type="char" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" serializable="true" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.SegmentCharSequence" type="SegmentCharSequence">
		<implements>
			<interface fulltype="java.lang.CharSequence" type="CharSequence" />
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>Class that lets java.util.regex search within a javax.swing.text.Segment.</description>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="SegmentCharSequence">
				<params>
					<param name="seg" fulltype="javax.swing.text.Segment" type="Segment" />
				</params>
			</constructor>
			<constructor visibility="public" name="SegmentCharSequence">
				<params>
					<param name="seg" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="charAt" fulltype="char" type="char">
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="length" fulltype="int" type="int" />
			<method visibility="public" name="subSequence" fulltype="java.lang.CharSequence" type="CharSequence">
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.StandardUtilities" type="StandardUtilities">
		<comment>
			<description>Several tools that depends on JDK only.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: StandardUtilities.java 20108 2011-10-18 12:16:38Z evanpw $</description>
			</attribute>
			<attribute name="@since">
				<description>4.3pre5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="KB_FORMAT" fulltype="java.text.DecimalFormat" type="DecimalFormat" />
			<field final="true" static="true" visibility="public" name="MB_FORMAT" fulltype="java.text.DecimalFormat" type="DecimalFormat" />
		</fields>
		<methods>
			<method static="true" visibility="public" name="charsToEscapes" fulltype="java.lang.String" type="String">
				<comment>
					<description>Escapes newlines, tabs, backslashes, and quotes in the specified
 string.</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="charsToEscapes" fulltype="java.lang.String" type="String">
				<comment>
					<description>Escapes the specified characters in the specified string.</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@param">
						<description>toEscape Any characters that require escaping</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
					<param name="toEscape" comment="Any characters that require escaping" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getIndentString" returncomment="the leading whitespace of that string, for indenting subsequent lines." fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@param">
						<description>str A java string</description>
					</attribute>
					<attribute name="@return">
						<description>the leading whitespace of that string, for indenting subsequent lines.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre10</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="A java string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLeadingWhiteSpace" fulltype="int" type="int">
				<comment>
					<description>Returns the number of leading white space characters in the
 specified string.</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLeadingWhiteSpace" fulltype="int" type="int">
				<comment>
					<description>Returns the number of leading white space characters in the
 specified string.</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method static="true" visibility="public" name="getTrailingWhiteSpace" fulltype="int" type="int">
				<comment>
					<description>Returns the number of trailing whitespace characters in the
 specified string.</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLeadingWhiteSpaceWidth" fulltype="int" type="int">
				<comment>
					<description>Returns the width of the leading white space in the specified
 string.</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@param">
						<description>tabSize The tab size</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
					<param name="tabSize" comment="The tab size" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLeadingWhiteSpaceWidth" fulltype="int" type="int">
				<comment>
					<description>Returns the width of the leading white space in the specified
 string.</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@param">
						<description>tabSize The tab size</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="tabSize" comment="The tab size" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="createWhiteSpace" fulltype="java.lang.String" type="String">
				<comment>
					<description>Creates a string of white space with the specified length.&lt;p&gt;

 To get a whitespace string tuned to the current buffer&apos;s
 settings, call this method as follows:

 &lt;pre&gt;myWhitespace = MiscUtilities.createWhiteSpace(myLength,
     (buffer.getBooleanProperty(&quot;noTabs&quot;) ? 0
     : buffer.getTabSize()));&lt;/pre&gt;</description>
					<attribute name="@param">
						<description>len The length</description>
					</attribute>
					<attribute name="@param">
						<description>tabSize The tab size, or 0 if tabs are not to be used</description>
					</attribute>
				</comment>
				<params>
					<param name="len" comment="The length" fulltype="int" type="int" />
					<param name="tabSize" comment="The tab size, or 0 if tabs are not to be used" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="truncateWhiteSpace" fulltype="java.lang.String" type="String">
				<params>
					<param name="len" fulltype="int" type="int" />
					<param name="tabSize" fulltype="int" type="int" />
					<param name="indentStr" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="createWhiteSpace" fulltype="java.lang.String" type="String">
				<comment>
					<description>Creates a string of white space with the specified length.&lt;p&gt;

 To get a whitespace string tuned to the current buffer&apos;s
 settings, call this method as follows:

 &lt;pre&gt;myWhitespace = MiscUtilities.createWhiteSpace(myLength,
     (buffer.getBooleanProperty(&quot;noTabs&quot;) ? 0
     : buffer.getTabSize()));&lt;/pre&gt;</description>
					<attribute name="@param">
						<description>len The length</description>
					</attribute>
					<attribute name="@param">
						<description>tabSize The tab size, or 0 if tabs are not to be used</description>
					</attribute>
					<attribute name="@param">
						<description>start The start offset, for tab alignment</description>
					</attribute>
				</comment>
				<params>
					<param name="len" comment="The length" fulltype="int" type="int" />
					<param name="tabSize" comment="The tab size, or 0 if tabs are not to be used" fulltype="int" type="int" />
					<param name="start" comment="The start offset, for tab alignment" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getVirtualWidth" fulltype="int" type="int">
				<comment>
					<description>Returns the virtual column number (taking tabs into account) of the
 specified offset in the segment.</description>
					<attribute name="@param">
						<description>seg The segment</description>
					</attribute>
					<attribute name="@param">
						<description>tabSize The tab size</description>
					</attribute>
				</comment>
				<params>
					<param name="seg" comment="The segment" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="tabSize" comment="The tab size" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getOffsetOfVirtualColumn" returncomment="-1 if the column is out of bounds" fulltype="int" type="int">
				<comment>
					<description>Returns the array offset of a virtual column number (taking tabs
 into account) in the segment.</description>
					<attribute name="@param">
						<description>seg The segment</description>
					</attribute>
					<attribute name="@param">
						<description>tabSize The tab size</description>
					</attribute>
					<attribute name="@param">
						<description>column The virtual column number</description>
					</attribute>
					<attribute name="@param">
						<description>totalVirtualWidth If this array is non-null, the total
 virtual width will be stored in its first location if this method
 returns -1.</description>
					</attribute>
					<attribute name="@return">
						<description>-1 if the column is out of bounds</description>
					</attribute>
				</comment>
				<params>
					<param name="seg" comment="The segment" fulltype="javax.swing.text.Segment" type="Segment" />
					<param name="tabSize" comment="The tab size" fulltype="int" type="int" />
					<param name="column" comment="The virtual column number" fulltype="int" type="int" />
					<param name="totalVirtualWidth" comment="If this array is non-null, the total
 virtual width will be stored in its first location if this method
 returns -1." fulltype="int[]" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="compareStrings" returncomment="negative If str1 &amp;lt; str2, 0 if both are the same,
 positive if str1 &amp;gt; str2" fulltype="int" type="int">
				<comment>
					<description>Compares two strings.&lt;p&gt;

 Unlike &lt;function&gt;String.compareTo()&lt;/function&gt;,
 this method correctly recognizes and handles embedded numbers.
 For example, it places &quot;My file 2&quot; before &quot;My file 10&quot;.&lt;p&gt;</description>
					<attribute name="@param">
						<description>str1 The first string</description>
					</attribute>
					<attribute name="@param">
						<description>str2 The second string</description>
					</attribute>
					<attribute name="@param">
						<description>ignoreCase If true, case will be ignored</description>
					</attribute>
					<attribute name="@return">
						<description>negative If str1 &amp;lt; str2, 0 if both are the same,
 positive if str1 &amp;gt; str2</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre5</description>
					</attribute>
				</comment>
				<params>
					<param name="str1" comment="The first string" fulltype="java.lang.String" type="String" />
					<param name="str2" comment="The second string" fulltype="java.lang.String" type="String" />
					<param name="ignoreCase" comment="If true, case will be ignored" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="objectsEqual" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if two strings are equal. This correctly handles null pointers,
 as opposed to calling &lt;code&gt;o1.equals(o2)&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>jEdit 4.3pre6</description>
					</attribute>
				</comment>
				<params>
					<param name="o1" fulltype="java.lang.Object" type="Object" />
					<param name="o2" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="globToRE" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts a Unix-style glob to a regular expression.&lt;p&gt;

 ? becomes ., * becomes .*, {aa,bb} becomes (aa|bb).</description>
					<attribute name="@param">
						<description>glob The glob pattern</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre7</description>
					</attribute>
				</comment>
				<params>
					<param name="glob" comment="The glob pattern" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="regionMatches" returncomment="Whether the two subsequences are equal." fulltype="boolean" type="boolean">
				<comment>
					<description>Implementation of String.regionMatches() for CharSequence.</description>
					<attribute name="@param">
						<description>seq The test CharSequence.</description>
					</attribute>
					<attribute name="@param">
						<description>toff Offset for the test sequence.</description>
					</attribute>
					<attribute name="@param">
						<description>other The sequence to compare to.</description>
					</attribute>
					<attribute name="@param">
						<description>ooff Offset of the comparison sequence.</description>
					</attribute>
					<attribute name="@param">
						<description>len How many characters to compare.</description>
					</attribute>
					<attribute name="@return">
						<description>Whether the two subsequences are equal.</description>
					</attribute>
					<attribute name="@see">
						<description>String#regionMatches(int,String,int,int)</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="seq" comment="The test CharSequence." fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="toff" comment="Offset for the test sequence." fulltype="int" type="int" />
					<param name="other" comment="The sequence to compare to." fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="ooff" comment="Offset of the comparison sequence." fulltype="int" type="int" />
					<param name="len" comment="How many characters to compare." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="startsWith" returncomment="Whether the sequence starts with the test string." fulltype="boolean" type="boolean">
				<comment>
					<description>Implementation of String.startsWith() for CharSequence.</description>
					<attribute name="@param">
						<description>seq The CharSequence.</description>
					</attribute>
					<attribute name="@param">
						<description>str String to test.</description>
					</attribute>
					<attribute name="@return">
						<description>Whether the sequence starts with the test string.</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre15</description>
					</attribute>
				</comment>
				<params>
					<param name="seq" comment="The CharSequence." fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="str" comment="String to test." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBoolean" returncomment="the boolean value if obj is a Boolean,
 true if the value is &quot;true&quot;, &quot;yes&quot;, &quot;on&quot;,
 false if the value is &quot;false&quot;, &quot;no&quot;, &quot;off&quot;
 def if the value is null or anything else" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns a boolean from a given object.</description>
					<attribute name="@param">
						<description>obj the object</description>
					</attribute>
					<attribute name="@param">
						<description>def The default value</description>
					</attribute>
					<attribute name="@return">
						<description>the boolean value if obj is a Boolean,
 true if the value is &quot;true&quot;, &quot;yes&quot;, &quot;on&quot;,
 false if the value is &quot;false&quot;, &quot;no&quot;, &quot;off&quot;
 def if the value is null or anything else</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object" fulltype="java.lang.Object" type="Object" />
					<param name="def" comment="The default value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="formatFileSize" fulltype="java.lang.String" type="String">
				<comment>
					<description>Formats the given file size into a nice string (123 Bytes, 10.6 kB,
 1.2 MB).</description>
					<attribute name="@param">
						<description>length The size</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.4pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="length" comment="The size" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="md5" returncomment="md5 sum of given string" fulltype="byte[]" type="byte">
				<comment>
					<description>Returns the md5sum for given string. Or dummy byte array on error
 Suppress NoSuchAlgorithmException because MD5 algorithm always present in JRE</description>
					<attribute name="@param">
						<description>s Given string</description>
					</attribute>
					<attribute name="@return">
						<description>md5 sum of given string</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="Given string" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.StandardUtilities.StringCompare" type="StandardUtilities.StringCompare">
			<implements>
				<interface fulltype="java.util.Comparator" type="Comparator" />
			</implements>
			<comment>
				<description>Compares objects as strings.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="StandardUtilities.StringCompare">
					<params>
						<param name="icase" fulltype="boolean" type="boolean" />
					</params>
				</constructor>
				<constructor visibility="public" name="StandardUtilities.StringCompare" />
				<method visibility="public" name="compare" fulltype="int" type="int">
					<params>
						<param name="obj1" fulltype="java.lang.Object" type="Object" />
						<param name="obj2" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.StandardUtilities.StringCompare" type="StandardUtilities.StringCompare">
		<implements>
			<interface fulltype="java.util.Comparator" type="Comparator" />
		</implements>
		<comment>
			<description>Compares objects as strings.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="StandardUtilities.StringCompare">
				<params>
					<param name="icase" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="StandardUtilities.StringCompare" />
			<method visibility="public" name="compare" fulltype="int" type="int">
				<params>
					<param name="obj1" fulltype="java.lang.Object" type="Object" />
					<param name="obj2" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="ArrayList" visibility="public" package="org.gjt.sp.util" serializable="true" superclassfulltype="java.util.ArrayList" fulltype="org.gjt.sp.util.StringList" type="StringList">
		<comment>
			<description>A List&amp;lt;String&amp;gt; with some perl-like convenience functions (split/join primarily),
 and easy conversion to/from arrays.</description>
			<attribute name="@since">
				<description>jEdit 4.3pre7</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="StringList" />
			<constructor visibility="public" name="StringList">
				<params>
					<param name="array" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="addAll" fulltype="void" type="void">
				<params>
					<param name="array" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="split" returncomment="a new StringList containing the split strings." fulltype="org.gjt.sp.util.StringList" type="StringList">
				<comment>
					<attribute name="@param">
						<description>orig the original string</description>
					</attribute>
					<attribute name="@param">
						<description>delim a delimiter to use for splitting</description>
					</attribute>
					<attribute name="@return">
						<description>a new StringList containing the split strings.</description>
					</attribute>
				</comment>
				<params>
					<param name="orig" comment="the original string" fulltype="java.lang.String" type="String" />
					<param name="delim" comment="a delimiter to use for splitting" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="toString" returncomment="a joined string representation of this, 
 with the newline (\n) as delimiter." fulltype="java.lang.String" type="String">
				<comment>
					<description>Joins each string in the list with a newline.</description>
					<attribute name="@return">
						<description>a joined string representation of this, 
 with the newline (\n) as delimiter.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toArray" returncomment="an array of String" fulltype="java.lang.String[]" type="String">
				<comment>
					<attribute name="@return">
						<description>an array of String</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="join" fulltype="java.lang.String" type="String">
				<comment>
					<description>The reverse of split - given a collection, takes each element
 and places it in a string, joined by a delimiter.</description>
				</comment>
				<params>
					<param name="c" fulltype="java.util.Collection" type="Collection" />
					<param name="delim" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="join" returncomment="a single string with each element in arr converted to a string and concatenated,
 separated by delim." fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@param">
						<description>arr array of objects</description>
					</attribute>
					<attribute name="@param">
						<description>delim delimiter to separate strings</description>
					</attribute>
					<attribute name="@return">
						<description>a single string with each element in arr converted to a string and concatenated,
 separated by delim.</description>
					</attribute>
				</comment>
				<params>
					<param name="arr" comment="array of objects" fulltype="java.lang.Object[]" type="Object" />
					<param name="delim" comment="delimiter to separate strings" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="join" returncomment="a joined string with delim inbetween each element" fulltype="java.lang.String" type="String">
				<comment>
					<description>Non-static version, that joins &quot;this&quot; StringList.</description>
					<attribute name="@param">
						<description>delim the delimiter</description>
					</attribute>
					<attribute name="@return">
						<description>a joined string with delim inbetween each element</description>
					</attribute>
				</comment>
				<params>
					<param name="delim" comment="the delimiter" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="main" fulltype="void" type="void">
				<params>
					<param name="args" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.StringModel" type="StringModel">
		<comment>
			<description>A model for a single String, which supports TextListeners. Simpler to use
 than Document when all you need is to store a single string.</description>
			<attribute name="@author">
				<description>ezust</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="StringModel" />
			<method visibility="public" name="addTextListener" fulltype="void" type="void">
				<params>
					<param name="tl" fulltype="java.awt.event.TextListener" type="TextListener" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setText" fulltype="void" type="void">
				<params>
					<param name="newText" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.SyntaxUtilities" type="SyntaxUtilities">
		<comment>
			<description>Syntax utilities that depends on JDK only and syntax package.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: StandardUtilities.java 9871 2007-06-28 16:33:20Z Vampire0 $</description>
			</attribute>
			<attribute name="@since">
				<description>4.3pre13</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="public" name="propertyManager" fulltype="org.gjt.sp.jedit.IPropertyManager" type="IPropertyManager" />
		</fields>
		<methods>
			<method static="true" visibility="public" name="getColorHexString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts a color object to its hex value. The hex value
 prefixed is with `#&apos;, for example `#ff0088&apos;.</description>
					<attribute name="@param">
						<description>c The color object</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="The color object" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="defaultColor" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseStyle" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle" type="SyntaxStyle">
				<comment>
					<description>Converts a style string to a style object.</description>
					<attribute name="@param">
						<description>str The style string</description>
					</attribute>
					<attribute name="@param">
						<description>family Style strings only specify font style, not font family</description>
					</attribute>
					<attribute name="@param">
						<description>size Style strings only specify font style, not font family</description>
					</attribute>
					<attribute name="@param">
						<description>color If false, the styles will be monochrome</description>
					</attribute>
					<attribute name="@param">
						<description>defaultFgColor Default foreground color (if not specified in style string)</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if the style is invalid</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre17</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The style string" fulltype="java.lang.String" type="String" />
					<param name="family" comment="Style strings only specify font style, not font family" fulltype="java.lang.String" type="String" />
					<param name="size" comment="Style strings only specify font style, not font family" fulltype="int" type="int" />
					<param name="color" comment="If false, the styles will be monochrome" fulltype="boolean" type="boolean" />
					<param name="defaultFgColor" comment="Default foreground color (if not specified in style string)" fulltype="java.awt.Color" type="Color" />
				</params>
				<exceptions>
					<exception comment="if the style is invalid" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="parseStyle" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle" type="SyntaxStyle">
				<comment>
					<description>Converts a style string to a style object.</description>
					<attribute name="@param">
						<description>str The style string</description>
					</attribute>
					<attribute name="@param">
						<description>family Style strings only specify font style, not font family</description>
					</attribute>
					<attribute name="@param">
						<description>size Style strings only specify font style, not font family</description>
					</attribute>
					<attribute name="@param">
						<description>color If false, the styles will be monochrome</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if the style is invalid</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The style string" fulltype="java.lang.String" type="String" />
					<param name="family" comment="Style strings only specify font style, not font family" fulltype="java.lang.String" type="String" />
					<param name="size" comment="Style strings only specify font style, not font family" fulltype="int" type="int" />
					<param name="color" comment="If false, the styles will be monochrome" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="if the style is invalid" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="loadStyles" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle[]" type="SyntaxStyle">
				<comment>
					<description>Loads the syntax styles from the properties, giving them the specified
 base font family and size.</description>
					<attribute name="@param">
						<description>family The font family</description>
					</attribute>
					<attribute name="@param">
						<description>size The font size</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="family" comment="The font family" fulltype="java.lang.String" type="String" />
					<param name="size" comment="The font size" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadStyles" fulltype="org.gjt.sp.jedit.syntax.SyntaxStyle[]" type="SyntaxStyle">
				<comment>
					<description>Loads the syntax styles from the properties, giving them the specified
 base font family and size.</description>
					<attribute name="@param">
						<description>family The font family</description>
					</attribute>
					<attribute name="@param">
						<description>size The font size</description>
					</attribute>
					<attribute name="@param">
						<description>color If false, the styles will be monochrome</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre13</description>
					</attribute>
				</comment>
				<params>
					<param name="family" comment="The font family" fulltype="java.lang.String" type="String" />
					<param name="size" comment="The font size" fulltype="int" type="int" />
					<param name="color" comment="If false, the styles will be monochrome" fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.Task" type="Task">
		<implements>
			<interface fulltype="java.lang.Runnable" type="Runnable" />
			<interface fulltype="org.gjt.sp.util.ProgressObserver" type="ProgressObserver" />
		</implements>
		<comment>
			<description>A Task is basically a Runnable but with some information about it&apos;s progression.</description>
			<attribute name="@since">
				<description>jEdit 4.4pre1</description>
			</attribute>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="protected" name="Task" />
			<method final="true" visibility="public" name="run" fulltype="void" type="void" />
			<method abstract="true" visibility="public" name="_run" fulltype="void" type="void">
				<comment>
					<description>This is the method you have to implement and that will be executed
 in the thread.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="value" fulltype="long" type="long" />
				</params>
			</method>
			<method final="true" visibility="public" name="setMaximum" fulltype="void" type="void">
				<params>
					<param name="maximum" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="setStatus" fulltype="void" type="void">
				<params>
					<param name="status" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getValue" fulltype="long" type="long" />
			<method visibility="public" name="getStatus" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getMaximum" fulltype="long" type="long" />
			<method visibility="public" name="getState" fulltype="javax.swing.SwingWorker.StateValue" type="SwingWorker.StateValue" />
			<method visibility="public" name="getLabel" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setLabel" fulltype="void" type="void">
				<params>
					<param name="label" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="isCancellable" fulltype="boolean" type="boolean" />
			<method visibility="public" name="setCancellable" fulltype="void" type="void">
				<params>
					<param name="cancellable" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="cancel" fulltype="void" type="void">
				<comment>
					<description>Cancel the task</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.TaskAdapter" type="TaskAdapter">
		<implements>
			<interface fulltype="org.gjt.sp.util.TaskListener" type="TaskListener" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.5pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="TaskAdapter" />
			<method visibility="public" name="waiting" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="running" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="done" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="statusUpdated" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="maximumUpdated" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="valueUpdated" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.util" interface="true" fulltype="org.gjt.sp.util.TaskListener" type="TaskListener">
		<implements>
			<interface fulltype="java.util.EventListener" type="EventListener" />
		</implements>
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="waiting" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="running" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="done" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="statusUpdated" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="maximumUpdated" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
			<method visibility="public" name="valueUpdated" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.TaskManager" type="TaskManager">
		<comment>
			<description>The TaskManager manage Tasks in the Threadpool, it knows all of them, and
 sends events to TaskListeners.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="instance" fulltype="org.gjt.sp.util.TaskManager" type="TaskManager" />
		</fields>
		<methods>
			<method visibility="public" name="countTasks" returncomment="the number of tasks in queue" fulltype="int" type="int">
				<comment>
					<description>Return the number of tasks in queue.</description>
					<attribute name="@return">
						<description>the number of tasks in queue</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.5pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="addTaskListener" fulltype="void" type="void">
				<params>
					<param name="listener" fulltype="org.gjt.sp.util.TaskListener" type="TaskListener" />
				</params>
			</method>
			<method visibility="public" name="removeTaskListener" fulltype="void" type="void">
				<params>
					<param name="listener" fulltype="org.gjt.sp.util.TaskListener" type="TaskListener" />
				</params>
			</method>
			<method visibility="public" name="visit" fulltype="void" type="void">
				<comment>
					<description>Visit all tasks.
 While doing this the task list is locked</description>
					<attribute name="@param">
						<description>visitor the visitor</description>
					</attribute>
				</comment>
				<params>
					<param name="visitor" comment="the visitor" fulltype="org.gjt.sp.util.TaskManager.TaskVisitor" type="TaskManager.TaskVisitor" />
				</params>
			</method>
		</methods>
		<jelclass abstract="true" visibility="public" package="org.gjt.sp.util" interface="true" fulltype="org.gjt.sp.util.TaskManager.TaskVisitor" type="TaskManager.TaskVisitor">
			<methods>
				<method visibility="public" name="visit" fulltype="void" type="void">
					<params>
						<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.util" interface="true" fulltype="org.gjt.sp.util.TaskManager.TaskVisitor" type="TaskManager.TaskVisitor">
		<methods>
			<method visibility="public" name="visit" fulltype="void" type="void">
				<params>
					<param name="task" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.util" interface="true" fulltype="org.gjt.sp.util.ThreadAbortMonitor" type="ThreadAbortMonitor">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@author">
				<description>$Id: VFS.java 7129 2006-09-25 20:05:57Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="isAborted" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.ThreadUtilities" type="ThreadUtilities">
		<comment>
			<description>The threadpool of jEdit.
 It uses a ExecutorService from the java.util.concurrent package.
 You can run {@link Task} or {@link Runnable} in it, Runnables will be
 encapsulated in Task.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 4.4pre1</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="runInDispatchThread" fulltype="void" type="void">
				<comment>
					<description>Run the runnable in EventDispatch Thread.
 If the current thread is EventDispatch, it will run
 immediately otherwise it will be queued in the DispatchThread
 The difference with VFSManager.runInAWTThread() method is that
 this one will not wait for IO Request before being executed</description>
					<attribute name="@param">
						<description>runnable the runnable to run</description>
					</attribute>
				</comment>
				<params>
					<param name="runnable" comment="the runnable to run" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method static="true" visibility="public" name="runInDispatchThreadAndWait" fulltype="void" type="void">
				<comment>
					<description>Runs the runnable in EDT through &lt;code&gt;invokeLater&lt;/code&gt;,
  but returns only after the runnable is executed.
  This method is uninterruptible.
  &lt;p&gt;Note the difference from &lt;code&gt;invokeAndWait&lt;/code&gt;.
  If current thread is not EDT and there are runnables
  queued in EDT:
  &lt;ul&gt;&lt;li&gt;this method runs the runnable after them&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;invokeAndWait&lt;/code&gt; runs the runnable before them
  &lt;/li&gt;&lt;/ul&gt;</description>
				</comment>
				<params>
					<param name="runnable" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method static="true" visibility="public" name="runInDispatchThreadNow" fulltype="void" type="void">
				<comment>
					<description>Runs the runnable in EDT through &lt;code&gt;invokeAndWait&lt;/code&gt;.
 Even if the thread gets interrupted, the call does not return
 until the runnable finishes (uninterruptible method).
 &lt;p&gt;
 This method uses &lt;code&gt;EventQueue.invokeAndWait&lt;/code&gt;, so
 the following remark applies:
 &lt;p&gt;If you use invokeAndWait(), make sure that the thread that calls
 invokeAndWait() does not hold any locks that other threads might
 need while the call is occurring.
 From the article:
 &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/threads/threads1.html#event_dispatching&quot;&gt;
 Threads and Swing&lt;/a&gt;</description>
				</comment>
				<params>
					<param name="runnable" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method static="true" visibility="public" name="runInBackground" fulltype="void" type="void">
				<comment>
					<description>Run the runnable in the threadpool.
 The runnable will be encapsulated in a {@link Task}</description>
					<attribute name="@see">
						<description>#runInBackground(Task)</description>
					</attribute>
					<attribute name="@param">
						<description>runnable the runnable to run</description>
					</attribute>
				</comment>
				<params>
					<param name="runnable" comment="the runnable to run" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method static="true" visibility="public" name="runInBackground" fulltype="void" type="void">
				<comment>
					<description>Run the task in the threadpool.
 The runnable will be encapsulated in a {@link Task}</description>
					<attribute name="@param">
						<description>task the task to run</description>
					</attribute>
				</comment>
				<params>
					<param name="task" comment="the task to run" fulltype="org.gjt.sp.util.Task" type="Task" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.WorkRequest" type="WorkRequest">
		<implements>
			<interface fulltype="java.lang.Runnable" type="Runnable" />
			<interface fulltype="org.gjt.sp.util.ProgressObserver" type="ProgressObserver" />
		</implements>
		<comment>
			<description>A subclass of the Runnable interface.</description>
			<attribute name="@since">
				<description>jEdit 2.6pre1</description>
			</attribute>
			<attribute name="@deprecated" />
			<attribute name="@see">
				<description>org.gjt.sp.util.Task</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: WorkRequest.java 19046 2010-11-28 02:26:21Z ezust $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="WorkRequest" />
			<method visibility="public" name="setAbortable" fulltype="void" type="void">
				<comment>
					<description>Sets if the request can be aborted.</description>
				</comment>
				<params>
					<param name="abortable" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setStatus" fulltype="void" type="void">
				<comment>
					<description>Sets the status text.</description>
					<attribute name="@param">
						<description>status The status text</description>
					</attribute>
				</comment>
				<params>
					<param name="status" comment="The status text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setProgressValue" fulltype="void" type="void">
				<comment>
					<description>Sets the progress value.</description>
					<attribute name="@param">
						<description>value The progress value.</description>
					</attribute>
					<attribute name="@deprecated">
						<description>use {@link #setValue(long)}</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="The progress value." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setProgressMaximum" fulltype="void" type="void">
				<comment>
					<description>Sets the maximum progress value.</description>
					<attribute name="@param">
						<description>value The progress value.</description>
					</attribute>
					<attribute name="@deprecated">
						<description>use {@link #setMaximum(long)}</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="The progress value." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Update the progress value.</description>
					<attribute name="@param">
						<description>value the new value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the new value" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="setMaximum" fulltype="void" type="void">
				<comment>
					<description>Update the maximum value.</description>
					<attribute name="@param">
						<description>value the new maximum value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 4.3pre3</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the new maximum value" fulltype="long" type="long" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Thread" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Thread" fulltype="org.gjt.sp.util.WorkThread" type="WorkThread">
		<implements>
			<interface fulltype="org.gjt.sp.util.ThreadAbortMonitor" type="ThreadAbortMonitor" />
		</implements>
		<comment>
			<description>Services work requests in the background.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@deprecated" />
			<attribute name="@see">
				<description>org.gjt.sp.util.ThreadUtilities</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: WorkThread.java 18300 2010-08-05 13:14:02Z kpouer $</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="WorkThread">
				<params>
					<param name="pool" fulltype="org.gjt.sp.util.WorkThreadPool" type="WorkThreadPool" />
					<param name="group" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="setAbortable" fulltype="void" type="void">
				<comment>
					<description>Sets if the current request can be aborted.
 If set to true and already aborted, the thread will be stopped</description>
					<attribute name="@param">
						<description>abortable true if the WorkThread is abortable</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="abortable" comment="true if the WorkThread is abortable" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isRequestRunning" returncomment="true if a request is currently running" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns if the work thread is currently running a request.</description>
					<attribute name="@return">
						<description>true if a request is currently running</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isAborted" fulltype="boolean" type="boolean" />
			<method visibility="public" name="getStatus" returncomment="the status label" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the status text.</description>
					<attribute name="@return">
						<description>the status label</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setStatus" fulltype="void" type="void">
				<comment>
					<description>Sets the status text.</description>
					<attribute name="@param">
						<description>status the new status of the thread</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="status" comment="the new status of the thread" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getProgressValue" returncomment="the progress value" fulltype="int" type="int">
				<comment>
					<description>Returns the progress value.</description>
					<attribute name="@return">
						<description>the progress value</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setProgressValue" fulltype="void" type="void">
				<comment>
					<description>Sets the progress value.</description>
					<attribute name="@param">
						<description>progressValue the new progress value</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="progressValue" comment="the new progress value" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getProgressMaximum" returncomment="the maximum value of the progression" fulltype="int" type="int">
				<comment>
					<description>Returns the progress maximum.</description>
					<attribute name="@return">
						<description>the maximum value of the progression</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setProgressMaximum" fulltype="void" type="void">
				<comment>
					<description>Sets the maximum progress value.</description>
					<attribute name="@param">
						<description>progressMaximum the maximum value of the progression</description>
					</attribute>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
				<params>
					<param name="progressMaximum" comment="the maximum value of the progression" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="abortCurrentRequest" fulltype="void" type="void">
				<comment>
					<description>Aborts the currently running request, if allowed.</description>
					<attribute name="@since">
						<description>jEdit 2.6pre1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="run" fulltype="void" type="void" />
		</methods>
		<jelclass superclass="Error" visibility="public" package="org.gjt.sp.util" serializable="true" superclassfulltype="java.lang.Error" fulltype="org.gjt.sp.util.WorkThread.Abort" type="WorkThread.Abort">
			<methods>
				<constructor visibility="public" name="WorkThread.Abort" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Error" visibility="public" package="org.gjt.sp.util" serializable="true" superclassfulltype="java.lang.Error" fulltype="org.gjt.sp.util.WorkThread.Abort" type="WorkThread.Abort">
		<methods>
			<constructor visibility="public" name="WorkThread.Abort" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.WorkThreadPool" type="WorkThreadPool">
		<comment>
			<description>A pool of work threads.</description>
			<attribute name="@author">
				<description>Slava Pestov</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: WorkThreadPool.java 21578 2012-04-12 19:23:47Z jarekczek $</description>
			</attribute>
			<attribute name="@deprecated" />
			<attribute name="@see">
				<description>org.gjt.sp.util.ThreadUtilities</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 2.6pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="WorkThreadPool">
				<comment>
					<description>Creates a new work thread pool with the specified number of
 work threads.</description>
					<attribute name="@param">
						<description>name The thread name prefix</description>
					</attribute>
					<attribute name="@param">
						<description>count The number of work threads</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The thread name prefix" fulltype="java.lang.String" type="String" />
					<param name="count" comment="The number of work threads" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="start" fulltype="void" type="void">
				<comment>
					<description>Starts all the threads in this thread pool.</description>
				</comment>
			</method>
			<method visibility="public" name="addWorkRequest" fulltype="void" type="void">
				<comment>
					<description>Adds a work request to the queue.</description>
					<attribute name="@param">
						<description>run The runnable</description>
					</attribute>
					<attribute name="@param">
						<description>inAWT If true, will be executed in AWT thread. Otherwise,
 will be executed in work thread. It is never executed directly.</description>
					</attribute>
				</comment>
				<params>
					<param name="run" comment="The runnable" fulltype="java.lang.Runnable" type="Runnable" />
					<param name="inAWT" comment="If true, will be executed in AWT thread. Otherwise,
 will be executed in work thread. It is never executed directly." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="waitForRequests" fulltype="void" type="void">
				<comment>
					<description>Waits until all requests are complete.</description>
				</comment>
			</method>
			<method visibility="public" name="getRequestCount" returncomment="the pending request count" fulltype="int" type="int">
				<comment>
					<description>Returns the number of pending requests.</description>
					<attribute name="@return">
						<description>the pending request count</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getThreadCount" returncomment="the thread count" fulltype="int" type="int">
				<comment>
					<description>Returns the number of threads in this pool.</description>
					<attribute name="@return">
						<description>the thread count</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getThread" returncomment="a WorkThread" fulltype="org.gjt.sp.util.WorkThread" type="WorkThread">
				<comment>
					<description>Returns the specified thread.</description>
					<attribute name="@param">
						<description>index The index of the thread</description>
					</attribute>
					<attribute name="@return">
						<description>a WorkThread</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="The index of the thread" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addProgressListener" fulltype="void" type="void">
				<comment>
					<description>Adds a progress listener to this thread pool.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.util.WorkThreadProgressListener" type="WorkThreadProgressListener" />
				</params>
			</method>
			<method visibility="public" name="removeProgressListener" fulltype="void" type="void">
				<comment>
					<description>Removes a progress listener from this thread pool.</description>
					<attribute name="@param">
						<description>listener The listener</description>
					</attribute>
				</comment>
				<params>
					<param name="listener" comment="The listener" fulltype="org.gjt.sp.util.WorkThreadProgressListener" type="WorkThreadProgressListener" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.gjt.sp.util" interface="true" fulltype="org.gjt.sp.util.WorkThreadProgressListener" type="WorkThreadProgressListener">
		<implements>
			<interface fulltype="java.util.EventListener" type="EventListener" />
		</implements>
		<comment>
			<description>A work thread execution progress listener.</description>
			<attribute name="@since">
				<description>jEdit 2.6pre1</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="statusUpdate" fulltype="void" type="void">
				<params>
					<param name="threadPool" fulltype="org.gjt.sp.util.WorkThreadPool" type="WorkThreadPool" />
					<param name="threadIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="progressUpdate" fulltype="void" type="void">
				<params>
					<param name="threadPool" fulltype="org.gjt.sp.util.WorkThreadPool" type="WorkThreadPool" />
					<param name="threadIndex" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.gjt.sp.util" superclassfulltype="java.lang.Object" fulltype="org.gjt.sp.util.XMLUtilities" type="XMLUtilities">
		<comment>
			<description>XML utility methods that only depend on the JDK.</description>
			<attribute name="@author">
				<description>Marcelo Vanzin</description>
			</attribute>
			<attribute name="@version">
				<description>$Id: XMLUtilities.java 19899 2011-09-02 07:36:54Z kpouer $</description>
			</attribute>
			<attribute name="@since">
				<description>4.3pre6</description>
			</attribute>
		</comment>
		<methods>
			<method static="true" visibility="public" name="charsToEntities" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts &amp;lt;, &amp;gt;, &amp;amp; in the string to their HTML entity
 equivalents.

 &lt;p&gt;If &lt;code&gt;xml11&lt;/code&gt; is true, then character entities
 are used to convert illegal XML characters (mainly ASCII
 control characters).&lt;/p&gt;</description>
					<attribute name="@param">
						<description>str The string</description>
					</attribute>
					<attribute name="@param">
						<description>xml11 Whether to allow XML 1.1 constructs.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="The string" fulltype="java.lang.String" type="String" />
					<param name="xml11" comment="Whether to allow XML 1.1 constructs." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseXML" returncomment="true if any error occured during parsing, false if success." fulltype="boolean" type="boolean">
				<comment>
					<description>Convenience method for parsing an XML file. This method will
 wrap the resource in an InputSource and set the source&apos;s
 systemId to &quot;jedit.jar&quot; (so the source should be able to
 handle any external entities by itself).

 &lt;p&gt;SAX Errors are caught and are not propagated to the caller;
 instead, an error message is printed to jEdit&apos;s activity
 log. So, if you need custom error handling, &lt;b&gt;do not use
 this method&lt;/b&gt;.

 &lt;p&gt;The given stream is closed before the method returns,
 regardless whether there were errors or not.&lt;/p&gt;</description>
					<attribute name="@return">
						<description>true if any error occured during parsing, false if success.</description>
					</attribute>
				</comment>
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
					<param name="handler" fulltype="org.xml.sax.helpers.DefaultHandler" type="DefaultHandler" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="findEntity" fulltype="org.xml.sax.InputSource" type="InputSource">
				<comment>
					<description>Tries to find the given systemId in the context of the given
 class. If the given systemId ends with the given test string,
 then try to load a resource using the Class&apos;s
 &lt;code&gt;getResourceAsStream()&lt;/code&gt; method using the test string
 as the resource.

 &lt;p&gt;This is used a lot internally while parsing XML files used
 by jEdit, but anyone is free to use the method if it sounds
 usable.&lt;/p&gt;</description>
				</comment>
				<params>
					<param name="systemId" fulltype="java.lang.String" type="String" />
					<param name="test" fulltype="java.lang.String" type="String" />
					<param name="where" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="org.jedit.core" superclassfulltype="java.lang.Object" fulltype="org.jedit.core.FileOpenerService" type="FileOpenerService">
		<comment>
			<description>File Opener Service.

  FastOpen 2.5 and SmartOpen 1.1 offer this as a service to
  other plugins such as ErrorList 2.0 that can use it to open
  files when, for example, the error message only provides
  a filename and not an absolute path.

  A response to SF.net ticket #3481157</description>
			<attribute name="@since">
				<description>jEdit 5.0pre1</description>
			</attribute>
			<attribute name="@author">
				<description>Alan Ezust</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="FileOpenerService" />
			<method abstract="true" visibility="public" name="openFile" fulltype="void" type="void">
				<comment>
					<description>Opens a file in jEdit, given only a filename and no path.
   May cause a dialog to popup asking the user for a choice.</description>
					<attribute name="@param">
						<description>fileName the file name to search for</description>
					</attribute>
					<attribute name="@param">
						<description>view the parent View</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="the file name to search for" fulltype="java.lang.String" type="String" />
					<param name="view" comment="the parent View" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
			<method static="true" visibility="public" name="open" fulltype="void" type="void">
				<comment>
					<description>Searches available FileOpenerServices and uses the first, or the
   preferred one based on the &quot;fileopener.service&quot; property.

   You can set a preferred FileOpener from the Console beanshell like this:
   &lt;pre&gt;
   jEdit.setProperty(&quot;fileopener.service&quot;, &quot;FastOpen&quot;);  // or &quot;SmartOpen&quot;
   &lt;/pre&gt;
   This setting is ignored if there is only one FileOpenerService available.</description>
					<attribute name="@param">
						<description>fileName the file name to search for</description>
					</attribute>
					<attribute name="@param">
						<description>view the parent View</description>
					</attribute>
				</comment>
				<params>
					<param name="fileName" comment="the file name to search for" fulltype="java.lang.String" type="String" />
					<param name="view" comment="the parent View" fulltype="org.gjt.sp.jedit.View" type="View" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.jedit.core" interface="true" fulltype="org.jedit.core.MigrationService" type="MigrationService">
		<comment>
			<description>A Migration service.
 There is currently only one concrete implementation of this interface and no
 general way to add new MigrationServices yet.
 &lt;br /&gt;
 The goal of migration is usually to replace old properties or data files
 with a new set, located elsewhere. The fact is that depending on where
 the data needs to be updated, the migration may need to be done at
  different places during jEdit&apos;s startup. &lt;br /&gt;
 There is no specific time that all migration services are called currently.
 The service and interface exists primarily so you don&apos;t need to add a compilation
 dependency of the org.gjt.sp.jEdit class to your MigrationService class. &lt;br /&gt;
 &lt;br /&gt;
 Concrete instances need to gurantee that the migration itself is only done
 once.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="migrate" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.jedit.keymap" interface="true" fulltype="org.jedit.keymap.Keymap" type="Keymap">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 5.0</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getShortcut" returncomment="the action name or &lt;code&gt;null&lt;/code&gt; if there is no shortcut" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a shortcut.</description>
					<attribute name="@param">
						<description>name the shortcut name</description>
					</attribute>
					<attribute name="@return">
						<description>the action name or &lt;code&gt;null&lt;/code&gt; if there is no shortcut</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the shortcut name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setShortcut" fulltype="void" type="void">
				<comment>
					<description>Set a new shortcut.</description>
					<attribute name="@param">
						<description>name the shortcut name</description>
					</attribute>
					<attribute name="@param">
						<description>shortcut the action name, or &lt;code&gt;null&lt;/code&gt; to delete a 
 shortcut</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the shortcut name" fulltype="java.lang.String" type="String" />
					<param name="shortcut" comment="the action name, or &lt;code&gt;null&lt;/code&gt; to delete a 
 shortcut" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="save" fulltype="void" type="void">
				<comment>
					<description>Save the keymaps.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.jedit.keymap" superclassfulltype="java.lang.Object" fulltype="org.jedit.keymap.KeymapFileFilter" type="KeymapFileFilter">
		<implements>
			<interface fulltype="java.io.FileFilter" type="FileFilter" />
		</implements>
		<comment>
			<description>A FileFilter that returns keymaps files.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 5.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="KeymapFileFilter" />
			<method visibility="public" name="accept" fulltype="boolean" type="boolean">
				<params>
					<param name="pathname" fulltype="java.io.File" type="File" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="org.jedit.keymap" interface="true" fulltype="org.jedit.keymap.KeymapManager" type="KeymapManager">
		<comment>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 5.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="jEdit" visibility="public" name="DEFAULT_KEYMAP_NAME" constexpr="&quot;jEdit&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<method visibility="public" name="getKeymap" returncomment="the current keymap" fulltype="org.jedit.keymap.Keymap" type="Keymap">
				<comment>
					<description>Returns the current keymap.</description>
					<attribute name="@return">
						<description>the current keymap</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="reload" fulltype="void" type="void" />
			<method visibility="public" name="getKeymapNames" fulltype="java.util.Collection" type="Collection" />
			<method visibility="public" name="getKeymap" returncomment="the user keymap of that name, if it exists, or the system keymap if it doesn&apos;t.
 If none exists &lt;code&gt;null&lt;/code&gt; is returned" fulltype="org.jedit.keymap.Keymap" type="Keymap">
				<comment>
					<description>Returns the keymap with that name.</description>
					<attribute name="@param">
						<description>name the keymap name</description>
					</attribute>
					<attribute name="@return">
						<description>the user keymap of that name, if it exists, or the system keymap if it doesn&apos;t.
 If none exists &lt;code&gt;null&lt;/code&gt; is returned</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the keymap name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getKeymapState" returncomment="a state." fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
				<comment>
					<description>Returns the state of the keymap</description>
					<attribute name="@param">
						<description>name the name of the keymap</description>
					</attribute>
					<attribute name="@return">
						<description>a state.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the keymap" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="resetKeymap" fulltype="void" type="void">
				<comment>
					<description>Reset the keymap to it&apos;s original state if it was a modified system keymap</description>
					<attribute name="@param">
						<description>name the keymap name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the keymap name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="deleteUserKeymap" fulltype="void" type="void">
				<comment>
					<description>Delete a user keymap.</description>
					<attribute name="@param">
						<description>name the keymap name</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the keymap name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="copyKeymap" fulltype="boolean" type="boolean">
				<comment>
					<description>Copy the keymap to another one</description>
					<attribute name="@param">
						<description>name the original keymap</description>
					</attribute>
					<attribute name="@param">
						<description>newName the new keymap</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the original keymap" fulltype="java.lang.String" type="String" />
					<param name="newName" comment="the new keymap" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass final="true" superclass="Enum" visibility="public" package="org.jedit.keymap" serializable="true" superclassfulltype="java.lang.Enum" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
			<comment>
				<description>The states of the keymaps</description>
			</comment>
			<fields>
				<field final="true" static="true" visibility="public" name="User" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
					<comment>
						<description>User keymap.</description>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="System" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
					<comment>
						<description>System keymap.</description>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SystemModified" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
					<comment>
						<description>Modified system keymap.</description>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="Unknown" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
					<comment>
						<description>Unknown keymap (doesn&apos;t exists).</description>
					</comment>
				</field>
			</fields>
			<methods>
				<method static="true" visibility="public" name="values" fulltype="org.jedit.keymap.KeymapManager.State[]" type="KeymapManager.State" />
				<method static="true" visibility="public" name="valueOf" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass final="true" superclass="Enum" visibility="public" package="org.jedit.keymap" serializable="true" superclassfulltype="java.lang.Enum" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
		<comment>
			<description>The states of the keymaps</description>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="User" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
				<comment>
					<description>User keymap.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="System" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
				<comment>
					<description>System keymap.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SystemModified" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
				<comment>
					<description>Modified system keymap.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="Unknown" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
				<comment>
					<description>Unknown keymap (doesn&apos;t exists).</description>
				</comment>
			</field>
		</fields>
		<methods>
			<method static="true" visibility="public" name="values" fulltype="org.jedit.keymap.KeymapManager.State[]" type="KeymapManager.State" />
			<method static="true" visibility="public" name="valueOf" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.jedit.keymap" superclassfulltype="java.lang.Object" fulltype="org.jedit.keymap.KeymapManagerImpl" type="KeymapManagerImpl">
		<implements>
			<interface fulltype="org.jedit.keymap.KeymapManager" type="KeymapManager" />
		</implements>
		<comment>
			<description>The default keymap manager implementation.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 5.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="KeymapManagerImpl">
				<params>
					<param name="propertyManager" fulltype="org.gjt.sp.jedit.IPropertyManager" type="IPropertyManager" />
					<param name="systemKeymapFolder" fulltype="java.io.File" type="File" />
					<param name="userKeymapFolder" fulltype="java.io.File" type="File" />
				</params>
			</constructor>
			<method visibility="public" name="getKeymap" fulltype="org.jedit.keymap.Keymap" type="Keymap" />
			<method visibility="public" name="getKeymapNames" fulltype="java.util.Collection" type="Collection" />
			<method visibility="public" name="getKeymap" fulltype="org.jedit.keymap.Keymap" type="Keymap">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getKeymapState" fulltype="org.jedit.keymap.KeymapManager.State" type="KeymapManager.State">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="resetKeymap" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="deleteUserKeymap" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="copyKeymap" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="newName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="reload" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.jedit.migration" superclassfulltype="java.lang.Object" fulltype="org.jedit.migration.KeymapMigration" type="KeymapMigration">
		<implements>
			<interface fulltype="org.jedit.core.MigrationService" type="MigrationService" />
		</implements>
		<comment>
			<description>Extracts, removes the shortcuts from jEdit 4.5 properties, and places them into the &quot;imported&quot; keymap.</description>
			<attribute name="@author">
				<description>Matthieu Casanova</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="KeymapMigration" />
			<method visibility="public" name="migrate" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="TabbedOptionDialog" visibility="public" package="org.jedit.options" serializable="true" superclassfulltype="org.jedit.options.TabbedOptionDialog" fulltype="org.jedit.options.CombinedOptions" type="CombinedOptions">
		<comment>
			<description>An OptionDialog which combines Global and Plugin options 
 into 2 tabs on a single dialog.</description>
			<attribute name="@author">
				<description>Alan Ezust</description>
			</attribute>
			<attribute name="@since">
				<description>jEdit 5.0pre1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="CombinedOptions">
				<params>
					<param name="parent" fulltype="java.awt.Frame" type="Frame" />
					<param name="tabIndex" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="CombinedOptions">
				<params>
					<param name="parent" fulltype="java.awt.Frame" type="Frame" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="combinedOptions" fulltype="org.jedit.options.CombinedOptions" type="CombinedOptions">
				<comment>
					<description>Static constructor that remembers the previously used tab.</description>
				</comment>
				<params>
					<param name="parent" fulltype="java.awt.Frame" type="Frame" />
				</params>
			</method>
			<method visibility="public" name="_init" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="OptionGroup" visibility="public" package="org.jedit.options" superclassfulltype="org.gjt.sp.jedit.OptionGroup" fulltype="org.jedit.options.GlobalOptionGroup" type="GlobalOptionGroup">
		<comment>
			<description>A model for all of the Global Options.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="GlobalOptionGroup" />
			<constructor visibility="public" name="GlobalOptionGroup">
				<params>
					<param name="rootGroup" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.jedit.options.OptionGroupPane" type="OptionGroupPane">
		<implements>
			<interface fulltype="javax.swing.event.TreeSelectionListener" type="TreeSelectionListener" />
		</implements>
		<comment>
			<description>An option pane for displaying groups of options. There is code here
 which was taken from OptionsDialog, but this class is a component which can
 be embedded in other Dialogs.
 
 Shows a JTree on the left, and an option pane on the right, with a splitter
 between.</description>
			<attribute name="@see">
				<description>org.gjt.sp.jedit.gui.OptionsDialog OptionsDialog</description>
			</attribute>
			<attribute name="@author">
				<description>ezust</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="OptionGroupPane">
				<params>
					<param name="group" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup" />
				</params>
			</constructor>
			<method visibility="public" name="getTitle" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="valueChanged" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="javax.swing.event.TreeSelectionEvent" type="TreeSelectionEvent" />
				</params>
			</method>
			<method visibility="protected" name="_init" fulltype="void" type="void" />
			<method visibility="protected" name="_save" fulltype="void" type="void" />
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.jedit.options" superclassfulltype="java.lang.Object" fulltype="org.jedit.options.OptionGroupPane.OptionTreeModel" type="OptionGroupPane.OptionTreeModel">
			<implements>
				<interface fulltype="javax.swing.tree.TreeModel" type="TreeModel" />
			</implements>
			<methods>
				<constructor visibility="public" name="OptionGroupPane.OptionTreeModel" />
				<method visibility="public" name="addTreeModelListener" fulltype="void" type="void">
					<params>
						<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
					</params>
				</method>
				<method visibility="public" name="removeTreeModelListener" fulltype="void" type="void">
					<params>
						<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
					</params>
				</method>
				<method visibility="public" name="getChild" fulltype="java.lang.Object" type="Object">
					<params>
						<param name="parent" fulltype="java.lang.Object" type="Object" />
						<param name="index" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="getChildCount" fulltype="int" type="int">
					<params>
						<param name="parent" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="getIndexOfChild" fulltype="int" type="int">
					<params>
						<param name="parent" fulltype="java.lang.Object" type="Object" />
						<param name="child" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="getRoot" fulltype="java.lang.Object" type="Object" />
				<method visibility="public" name="isLeaf" fulltype="boolean" type="boolean">
					<params>
						<param name="node" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="valueForPathChanged" fulltype="void" type="void">
					<params>
						<param name="path" fulltype="javax.swing.tree.TreePath" type="TreePath" />
						<param name="newValue" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireNodesChanged" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireNodesInserted" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireNodesRemoved" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireTreeStructureChanged" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.jedit.options" superclassfulltype="java.lang.Object" fulltype="org.jedit.options.OptionGroupPane.OptionTreeModel" type="OptionGroupPane.OptionTreeModel">
		<implements>
			<interface fulltype="javax.swing.tree.TreeModel" type="TreeModel" />
		</implements>
		<methods>
			<constructor visibility="public" name="OptionGroupPane.OptionTreeModel" />
			<method visibility="public" name="addTreeModelListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
				</params>
			</method>
			<method visibility="public" name="removeTreeModelListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
				</params>
			</method>
			<method visibility="public" name="getChild" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="parent" fulltype="java.lang.Object" type="Object" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getChildCount" fulltype="int" type="int">
				<params>
					<param name="parent" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getIndexOfChild" fulltype="int" type="int">
				<params>
					<param name="parent" fulltype="java.lang.Object" type="Object" />
					<param name="child" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getRoot" fulltype="java.lang.Object" type="Object" />
			<method visibility="public" name="isLeaf" fulltype="boolean" type="boolean">
				<params>
					<param name="node" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="valueForPathChanged" fulltype="void" type="void">
				<params>
					<param name="path" fulltype="javax.swing.tree.TreePath" type="TreePath" />
					<param name="newValue" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireNodesChanged" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireNodesInserted" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireNodesRemoved" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireTreeStructureChanged" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="OptionGroup" visibility="public" package="org.jedit.options" superclassfulltype="org.gjt.sp.jedit.OptionGroup" fulltype="org.jedit.options.PluginOptionGroup" type="PluginOptionGroup">
		<comment>
			<description>Refactored from PluginOptions.java - this class
  contains only the OptionGroup
  and none of the GUI code.</description>
			<attribute name="@since">
				<description>jedit5.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PluginOptionGroup" />
			<method visibility="public" name="createOptionTreeModel" fulltype="org.jedit.options.PluginOptionGroup.OptionTreeModel" type="PluginOptionGroup.OptionTreeModel" />
		</methods>
		<jelclass superclass="Object" visibility="public" package="org.jedit.options" superclassfulltype="java.lang.Object" fulltype="org.jedit.options.PluginOptionGroup.OptionTreeModel" type="PluginOptionGroup.OptionTreeModel">
			<implements>
				<interface fulltype="javax.swing.tree.TreeModel" type="TreeModel" />
			</implements>
			<methods>
				<constructor visibility="public" name="PluginOptionGroup.OptionTreeModel" />
				<method visibility="public" name="addTreeModelListener" fulltype="void" type="void">
					<params>
						<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
					</params>
				</method>
				<method visibility="public" name="removeTreeModelListener" fulltype="void" type="void">
					<params>
						<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
					</params>
				</method>
				<method visibility="public" name="getChild" fulltype="java.lang.Object" type="Object">
					<params>
						<param name="parent" fulltype="java.lang.Object" type="Object" />
						<param name="index" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="public" name="getChildCount" fulltype="int" type="int">
					<params>
						<param name="parent" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="getIndexOfChild" fulltype="int" type="int">
					<params>
						<param name="parent" fulltype="java.lang.Object" type="Object" />
						<param name="child" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="getRoot" fulltype="java.lang.Object" type="Object" />
				<method visibility="public" name="isLeaf" fulltype="boolean" type="boolean">
					<params>
						<param name="node" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="public" name="valueForPathChanged" fulltype="void" type="void">
					<params>
						<param name="path" fulltype="javax.swing.tree.TreePath" type="TreePath" />
						<param name="newValue" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireNodesChanged" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireNodesInserted" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireNodesRemoved" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
				<method visibility="protected" name="fireTreeStructureChanged" fulltype="void" type="void">
					<params>
						<param name="source" fulltype="java.lang.Object" type="Object" />
						<param name="path" fulltype="java.lang.Object[]" type="Object" />
						<param name="childIndices" fulltype="int[]" type="int" />
						<param name="children" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="AbstractOptionPane" visibility="public" package="org.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.jedit.options.PluginOptionGroup.NoPluginsPane" type="PluginOptionGroup.NoPluginsPane">
			<methods>
				<constructor visibility="public" name="PluginOptionGroup.NoPluginsPane" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="org.jedit.options" superclassfulltype="java.lang.Object" fulltype="org.jedit.options.PluginOptionGroup.OptionTreeModel" type="PluginOptionGroup.OptionTreeModel">
		<implements>
			<interface fulltype="javax.swing.tree.TreeModel" type="TreeModel" />
		</implements>
		<methods>
			<constructor visibility="public" name="PluginOptionGroup.OptionTreeModel" />
			<method visibility="public" name="addTreeModelListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
				</params>
			</method>
			<method visibility="public" name="removeTreeModelListener" fulltype="void" type="void">
				<params>
					<param name="l" fulltype="javax.swing.event.TreeModelListener" type="TreeModelListener" />
				</params>
			</method>
			<method visibility="public" name="getChild" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="parent" fulltype="java.lang.Object" type="Object" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getChildCount" fulltype="int" type="int">
				<params>
					<param name="parent" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getIndexOfChild" fulltype="int" type="int">
				<params>
					<param name="parent" fulltype="java.lang.Object" type="Object" />
					<param name="child" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getRoot" fulltype="java.lang.Object" type="Object" />
			<method visibility="public" name="isLeaf" fulltype="boolean" type="boolean">
				<params>
					<param name="node" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="valueForPathChanged" fulltype="void" type="void">
				<params>
					<param name="path" fulltype="javax.swing.tree.TreePath" type="TreePath" />
					<param name="newValue" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireNodesChanged" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireNodesInserted" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireNodesRemoved" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="fireTreeStructureChanged" fulltype="void" type="void">
				<params>
					<param name="source" fulltype="java.lang.Object" type="Object" />
					<param name="path" fulltype="java.lang.Object[]" type="Object" />
					<param name="childIndices" fulltype="int[]" type="int" />
					<param name="children" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="AbstractOptionPane" visibility="public" package="org.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.AbstractOptionPane" fulltype="org.jedit.options.PluginOptionGroup.NoPluginsPane" type="PluginOptionGroup.NoPluginsPane">
		<methods>
			<constructor visibility="public" name="PluginOptionGroup.NoPluginsPane" />
		</methods>
	</jelclass>
	<jelclass superclass="EnhancedDialog" visibility="public" package="org.jedit.options" serializable="true" superclassfulltype="org.gjt.sp.jedit.gui.EnhancedDialog" fulltype="org.jedit.options.TabbedOptionDialog" type="TabbedOptionDialog">
		<implements>
			<interface fulltype="java.awt.event.ActionListener" type="ActionListener" />
			<interface fulltype="javax.swing.event.ChangeListener" type="ChangeListener" />
		</implements>
		<comment>
			<description>Replacement for OptionsDialog. It uses OptionGroupPane instead of
 managing its own options.</description>
			<attribute name="@author">
				<description>ezust</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="TabbedOptionDialog">
				<params>
					<param name="frame" fulltype="java.awt.Frame" type="Frame" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="TabbedOptionDialog">
				<params>
					<param name="dialog" fulltype="java.awt.Dialog" type="Dialog" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="actionPerformed" fulltype="void" type="void">
				<params>
					<param name="evt" fulltype="java.awt.event.ActionEvent" type="ActionEvent" />
				</params>
			</method>
			<method visibility="public" name="addOptionPane" fulltype="void" type="void">
				<params>
					<param name="pane" fulltype="org.gjt.sp.jedit.OptionPane" type="OptionPane" />
				</params>
			</method>
			<method visibility="public" name="addOptionGroup" fulltype="void" type="void">
				<params>
					<param name="group" fulltype="org.gjt.sp.jedit.OptionGroup" type="OptionGroup" />
				</params>
			</method>
			<method visibility="public" name="ok" fulltype="void" type="void" />
			<method visibility="public" name="ok" fulltype="void" type="void">
				<params>
					<param name="dispose" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="cancel" fulltype="void" type="void" />
			<method visibility="public" name="stateChanged" fulltype="void" type="void">
				<params>
					<param name="e" fulltype="javax.swing.event.ChangeEvent" type="ChangeEvent" />
				</params>
			</method>
		</methods>
	</jelclass>
</jel>
